/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 10);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return luckywheel; });
const luckywheel = 
{
    object:
    {
        name: 'vw_prop_vw_luckywheel_02a',
        pos: new mp.Vector3(1111.052, 229.8579, -49.133),
        model: undefined,
        isSpinning: false,
        lastClickTime: 0,
        animations: 
        [
          'Enter_to_ArmRaisedIDLE',
          'ArmRaisedIDLE_to_SpinningIDLE_High',
          'SpinningIDLE_High',
          'Win_Big'
        ],
        getDictionary() 
        {
          return mp.players.local.getModel() == 1885233650 ? 'ANIM_CASINO_A@AMB@CASINO@GAMES@LUCKY7WHEEL@MALE' : 'ANIM_CASINO_A@AMB@CASINO@GAMES@LUCKY7WHEEL@FEMALE';
        },
        async spin(pos, isOwner) 
        {
          if (this.isSpinning) return;
          this.isSpinning = true;
          let spins = 320, maxSpeed = 2.25;
          const speed = maxSpeed / (spins * 2 + (pos + this.model.getRotation(1).y / 18) * 16 + 1);
          mp.game.audio.playSoundFromCoord(1, 'Spin_Start', this.pos.x, this.pos.y, this.pos.z, 'dlc_vw_casino_lucky_wheel_sounds', true, 0, false);
          while (true)
          {
            if (spins <= 0) 
            {
              maxSpeed -= speed;  
              this.model.setRotation(0, this.model.getRotation(1).y - maxSpeed, 0, 2, true);
              if (maxSpeed <= 0) 
              { 
                this.model.setRotation(0, Math.round(this.model.getRotation(1).y), 0, 2, true);
                mp.game.audio.playSoundFromCoord(1, 'Win', this.pos.x, this.pos.y, this.pos.z, "dlc_vw_casino_lucky_wheel_sounds", true, 0, false);
                this.isSpinning = false;
                if (isOwner) 
                {
                  mp.events.callRemote('luckywheel.finishspin');
                  mp.players.local.taskPlayAnim(this.getDictionary(), this.animations[3], 4, -1000, -1, 1048576, 0, false, true, false);
                  while (true) 
                  {
                    if (mp.players.local.isPlayingAnim(this.getDictionary(), this.animations[3], 3) && mp.players.local.getAnimCurrentTime(this.getDictionary(), this.animations[3]) > 0.75)
                    {
                      mp.players.local.clearTasks();
                      break;
                    }
                    await mp.game.waitAsync(0);
                  }
                }
                break;
              }
            } 
            else 
            {
              spins--;
              this.model.setRotation(0, this.model.getRotation(1).y - maxSpeed, 0, 2, true);
            }
            await mp.game.waitAsync(5);
          }
        }
    },
    interaction: 
    {
        pos: new mp.Vector3(1110.8710, 228.8737, -49.6358),
        radius: 1,
        sendNotify(text) 
        {
          mp.game.ui.setTextComponentFormat('STRING');
          mp.game.ui.addTextComponentSubstringWebsite(text);
          mp.game.ui.displayHelpTextFromStringLabel(0, true, true, 1000);
        },
        clearNotify() 
        {
          mp.game.ui.clearHelp(true);
        },
        isNear: false,
        button: 0x45 // 'E'
    },
    onClick() 
    {
      if (luckywheel.object.isSpinning) 
      {
        mp.game.graphics.notify('Колесо удачи уже крутится!');
        return;
      }
      
      mp.events.callRemote('luckywheel.cometoluckywheel');
    },
    async comeToLuckyWheel(pos) 
    {
        const dict = this.object.getDictionary();
        mp.game.streaming.requestAnimDict(dict);
        while (!mp.game.streaming.hasAnimDictLoaded(dict)) 
        {
            await mp.game.waitAsync(0);
        }
        if (mp.players.local.getScriptTaskStatus(2106541073) != 1 && mp.players.local.getScriptTaskStatus(2106541073) != 0)
        {
            const offset = mp.game.ped.getAnimInitialOffsetPosition(dict, this.object.animations[0], 1111.052, 229.8492, -50.6409, 0, 0, 0, 0, 2);
            mp.players.local.taskGoStraightToCoord(offset.x, offset.y, offset.z, 1, 8000, 317, 0.001);
            while (!(mp.players.local.getScriptTaskStatus(2106541073) == 7 || mp.players.local.isAtCoord(offset.x, offset.y, offset.z, 0.1, 0.0, 0.0, false, true, 0)))
            {
                await mp.game.waitAsync(0);
            }
            mp.players.local.taskPlayAnim(dict, this.object.animations[0], 4, -1000, -1, 1048576, 0, false, true, false);
            let isGoing;
            while (true) 
            {
                if (mp.players.local.isPlayingAnim(dict, this.object.animations[0], 3) && mp.players.local.getAnimCurrentTime(dict, this.object.animations[0]) > 0.97) 
                {
                  mp.players.local.taskPlayAnim(dict, this.object.animations[1], 4, -1000, -1, 1048576, 0, false, true, false);
                }
                if (mp.players.local.isPlayingAnim(dict, this.object.animations[1], 3)) 
                {
                  if (!isGoing && mp.players.local.getAnimCurrentTime(dict, this.object.animations[1]) > 0.04) 
                  {
                    isGoing = true;
                    this.object.spin(pos, true);
                    mp.events.callRemote('luckywheel.spin');
                  }
                  if (mp.players.local.getAnimCurrentTime(dict, this.object.animations[1]) > 0.8) 
                  {
                    mp.players.local.taskPlayAnim(dict, this.object.animations[2], 8.0, 1.0, -1, 1, 1.0, false, false, false);
                    break;
                  }
                }
                await mp.game.waitAsync(0);
            }
        }
    },
    init() 
    {
      this.object.model = mp.objects.new(mp.game.joaat(this.object.name), this.object.pos);
    }
};

/***/ }),
/* 2 */
/***/ (function(module, exports) {

class BaseState {
    constructor (animal) {
        this.animal = animal;
    }

    calculateBehavior() { }

    handleEntryState() { }
}

module.exports = BaseState;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

const pointsConfig = JSON.parse(`{"0":[{"ID":0,"Position":{"x":2045.9579,"y":4966.468,"z":40.08101},"PitType":0},{"ID":1,"Position":{"x":2050.1282,"y":4962.3745,"z":40.054592},"PitType":0},{"ID":2,"Position":{"x":2054.1465,"y":4958.3325,"z":40.040672},"PitType":0},{"ID":3,"Position":{"x":2058.1013,"y":4954.363,"z":40.026352},"PitType":0},{"ID":4,"Position":{"x":2061.9998,"y":4950.464,"z":40.06165},"PitType":0},{"ID":5,"Position":{"x":2065.9426,"y":4946.527,"z":40.04632},"PitType":0},{"ID":6,"Position":{"x":2068.9043,"y":4943.768,"z":40.07652},"PitType":0},{"ID":7,"Position":{"x":2065.9802,"y":4941.055,"z":40.109406},"PitType":0},{"ID":8,"Position":{"x":2061.9172,"y":4944.951,"z":40.07528},"PitType":0},{"ID":9,"Position":{"x":2057.9648,"y":4948.9385,"z":40.08867},"PitType":0},{"ID":10,"Position":{"x":2053.9285,"y":4952.968,"z":40.094124},"PitType":0},{"ID":11,"Position":{"x":2049.9321,"y":4956.938,"z":40.099133},"PitType":0},{"ID":12,"Position":{"x":2045.9905,"y":4960.877,"z":40.095623},"PitType":0},{"ID":13,"Position":{"x":2043.3317,"y":4963.407,"z":40.11742},"PitType":0},{"ID":14,"Position":{"x":2040.3007,"y":4960.701,"z":40.123363},"PitType":0},{"ID":15,"Position":{"x":2044.1658,"y":4956.8135,"z":40.100468},"PitType":0},{"ID":16,"Position":{"x":2048.8274,"y":4952.205,"z":40.076626},"PitType":0},{"ID":17,"Position":{"x":2052.87,"y":4948.248,"z":40.064487},"PitType":0},{"ID":18,"Position":{"x":2057.5642,"y":4943.648,"z":40.07362},"PitType":0},{"ID":19,"Position":{"x":2061.711,"y":4939.7446,"z":40.104225},"PitType":0},{"ID":20,"Position":{"x":2060.357,"y":4935.6416,"z":40.104225},"PitType":0},{"ID":21,"Position":{"x":2055.572,"y":4940.0835,"z":40.1101},"PitType":0},{"ID":22,"Position":{"x":2051.0918,"y":4944.4634,"z":40.11083},"PitType":0},{"ID":23,"Position":{"x":2046.2723,"y":4949.235,"z":40.086346},"PitType":0},{"ID":24,"Position":{"x":2042.0282,"y":4953.424,"z":40.076782},"PitType":0},{"ID":25,"Position":{"x":2037.9633,"y":4957.511,"z":40.094036},"PitType":0},{"ID":26,"Position":{"x":2034.6786,"y":4955.05,"z":40.07003},"PitType":0},{"ID":27,"Position":{"x":2039.3677,"y":4950.4634,"z":40.072086},"PitType":0},{"ID":28,"Position":{"x":2043.2197,"y":4946.578,"z":40.09676},"PitType":0},{"ID":29,"Position":{"x":2047.2227,"y":4942.582,"z":40.052048},"PitType":0},{"ID":30,"Position":{"x":2051.2568,"y":4938.4956,"z":40.0572},"PitType":0},{"ID":31,"Position":{"x":2056.331,"y":4933.8623,"z":40.07718},"PitType":0},{"ID":32,"Position":{"x":2054.66,"y":4929.8037,"z":40.07502},"PitType":1},{"ID":33,"Position":{"x":2050.6233,"y":4933.626,"z":40.07579},"PitType":1},{"ID":34,"Position":{"x":2046.5568,"y":4937.686,"z":40.09151},"PitType":1},{"ID":35,"Position":{"x":2042.1152,"y":4942.221,"z":40.101265},"PitType":1},{"ID":36,"Position":{"x":2037.3999,"y":4946.709,"z":40.106884},"PitType":1},{"ID":37,"Position":{"x":2032.9407,"y":4951.2617,"z":40.070206},"PitType":1},{"ID":38,"Position":{"x":2029.0059,"y":4949.6323,"z":40.117973},"PitType":1},{"ID":39,"Position":{"x":2032.792,"y":4945.5767,"z":40.070053},"PitType":1},{"ID":40,"Position":{"x":2036.7434,"y":4941.638,"z":40.05331},"PitType":1},{"ID":41,"Position":{"x":2041.3188,"y":4937.0806,"z":40.076263},"PitType":1},{"ID":42,"Position":{"x":2046.0917,"y":4932.435,"z":40.09097},"PitType":1},{"ID":43,"Position":{"x":2050.611,"y":4928.1836,"z":40.123955},"PitType":1},{"ID":44,"Position":{"x":2048.3777,"y":4924.856,"z":40.09983},"PitType":1},{"ID":45,"Position":{"x":2043.599,"y":4929.3726,"z":40.106586},"PitType":1},{"ID":46,"Position":{"x":2039.047,"y":4933.9707,"z":40.10515},"PitType":1},{"ID":47,"Position":{"x":2034.9465,"y":4937.849,"z":40.116737},"PitType":1},{"ID":48,"Position":{"x":2031.1135,"y":4941.843,"z":40.116413},"PitType":1},{"ID":49,"Position":{"x":2027.1349,"y":4945.782,"z":40.09519},"PitType":1},{"ID":50,"Position":{"x":2023.5579,"y":4943.697,"z":40.096706},"PitType":1},{"ID":51,"Position":{"x":2028.6934,"y":4938.5415,"z":40.08454},"PitType":1},{"ID":52,"Position":{"x":2033.1434,"y":4933.9746,"z":40.083256},"PitType":1},{"ID":53,"Position":{"x":2037.3481,"y":4929.773,"z":40.075504},"PitType":1},{"ID":54,"Position":{"x":2041.9724,"y":4925.2295,"z":40.096912},"PitType":1},{"ID":55,"Position":{"x":2046.125,"y":4921.4487,"z":40.119694},"PitType":1},{"ID":56,"Position":{"x":2043.2302,"y":4918.29,"z":40.05004},"PitType":1},{"ID":57,"Position":{"x":2038.5356,"y":4922.7407,"z":40.100483},"PitType":1},{"ID":58,"Position":{"x":2033.899,"y":4927.395,"z":40.103878},"PitType":1},{"ID":59,"Position":{"x":2029.7898,"y":4931.357,"z":40.106842},"PitType":1},{"ID":60,"Position":{"x":2025.3899,"y":4935.7773,"z":40.081646},"PitType":1},{"ID":61,"Position":{"x":2021.2819,"y":4939.8105,"z":40.055367},"PitType":1},{"ID":62,"Position":{"x":2006.239,"y":4927.3022,"z":41.866634},"PitType":2},{"ID":63,"Position":{"x":2010.0854,"y":4923.529,"z":41.846317},"PitType":2},{"ID":64,"Position":{"x":2016.015,"y":4917.592,"z":41.839203},"PitType":2},{"ID":65,"Position":{"x":2019.6636,"y":4913.9634,"z":41.83429},"PitType":2},{"ID":66,"Position":{"x":2022.4208,"y":4911.305,"z":41.82801},"PitType":2},{"ID":67,"Position":{"x":2026.4872,"y":4907.431,"z":41.841305},"PitType":2},{"ID":68,"Position":{"x":2029.2698,"y":4904.7627,"z":41.860165},"PitType":2},{"ID":69,"Position":{"x":2026.6539,"y":4901.659,"z":41.89565},"PitType":2},{"ID":70,"Position":{"x":2023.2455,"y":4904.9775,"z":41.84778},"PitType":2},{"ID":71,"Position":{"x":2020.1295,"y":4907.966,"z":41.856873},"PitType":2},{"ID":72,"Position":{"x":2016.9094,"y":4911.052,"z":41.865704},"PitType":2},{"ID":73,"Position":{"x":2013.3455,"y":4914.565,"z":41.877922},"PitType":2},{"ID":74,"Position":{"x":2011.0704,"y":4916.9473,"z":41.888664},"PitType":2},{"ID":75,"Position":{"x":2008.0098,"y":4919.9355,"z":41.88351},"PitType":2},{"ID":76,"Position":{"x":2004.6763,"y":4923.216,"z":41.906277},"PitType":2},{"ID":77,"Position":{"x":2000.9719,"y":4921.3735,"z":41.90132},"PitType":3},{"ID":78,"Position":{"x":2004.0791,"y":4918.176,"z":41.88528},"PitType":3},{"ID":79,"Position":{"x":2007.1746,"y":4915.104,"z":41.882324},"PitType":3},{"ID":80,"Position":{"x":2010.8647,"y":4911.4146,"z":41.86722},"PitType":3},{"ID":81,"Position":{"x":2014.7291,"y":4907.696,"z":41.873135},"PitType":3},{"ID":82,"Position":{"x":2018.3009,"y":4904.2554,"z":41.865097},"PitType":3},{"ID":83,"Position":{"x":2022.1069,"y":4900.5054,"z":41.88456},"PitType":3},{"ID":84,"Position":{"x":2020.2144,"y":4896.6274,"z":41.88635},"PitType":3},{"ID":85,"Position":{"x":2016.8469,"y":4899.946,"z":41.896084},"PitType":3},{"ID":86,"Position":{"x":2013.5388,"y":4903.306,"z":41.895657},"PitType":3},{"ID":87,"Position":{"x":2010.2712,"y":4906.3804,"z":41.895412},"PitType":3},{"ID":88,"Position":{"x":2007.6941,"y":4909.025,"z":41.882294},"PitType":3},{"ID":89,"Position":{"x":2004.4532,"y":4912.2104,"z":41.862003},"PitType":3},{"ID":90,"Position":{"x":2001.719,"y":4914.9443,"z":41.859825},"PitType":3},{"ID":91,"Position":{"x":1999.0376,"y":4917.638,"z":41.891655},"PitType":3},{"ID":92,"Position":{"x":1994.2881,"y":4913.844,"z":41.825314},"PitType":4},{"ID":93,"Position":{"x":1996.965,"y":4911.2295,"z":41.850525},"PitType":4},{"ID":94,"Position":{"x":2000.1547,"y":4907.9673,"z":41.880898},"PitType":4},{"ID":95,"Position":{"x":2003.5662,"y":4904.496,"z":41.8731},"PitType":4},{"ID":96,"Position":{"x":2006.6465,"y":4901.4385,"z":41.861176},"PitType":4},{"ID":97,"Position":{"x":2010.1312,"y":4898.0415,"z":41.8488},"PitType":4},{"ID":98,"Position":{"x":2013.2239,"y":4895.0176,"z":41.83304},"PitType":4},{"ID":99,"Position":{"x":2016.0968,"y":4892.1387,"z":41.835106},"PitType":4},{"ID":100,"Position":{"x":2013.5039,"y":4889.31,"z":41.90578},"PitType":4},{"ID":101,"Position":{"x":2010.3176,"y":4892.5127,"z":41.90404},"PitType":4},{"ID":102,"Position":{"x":2007.0627,"y":4895.6885,"z":41.904705},"PitType":4},{"ID":103,"Position":{"x":2003.7253,"y":4898.5864,"z":41.896603},"PitType":4},{"ID":104,"Position":{"x":1999.9126,"y":4902.464,"z":41.890438},"PitType":4},{"ID":105,"Position":{"x":1996.5701,"y":4905.851,"z":41.880215},"PitType":4},{"ID":106,"Position":{"x":1993.9105,"y":4908.584,"z":41.88233},"PitType":4},{"ID":107,"Position":{"x":1991.2965,"y":4911.2104,"z":41.90548},"PitType":4},{"ID":108,"Position":{"x":1986.4926,"y":4907.376,"z":41.884995},"PitType":5},{"ID":109,"Position":{"x":1989.616,"y":4904.2197,"z":41.865074},"PitType":5},{"ID":110,"Position":{"x":1992.9467,"y":4900.874,"z":41.908184},"PitType":5},{"ID":111,"Position":{"x":1995.9137,"y":4897.921,"z":41.900043},"PitType":5},{"ID":112,"Position":{"x":1999.3593,"y":4894.492,"z":41.8942},"PitType":5},{"ID":113,"Position":{"x":2002.7681,"y":4891.1978,"z":41.888565},"PitType":5},{"ID":114,"Position":{"x":2006.2665,"y":4887.982,"z":41.880676},"PitType":5},{"ID":115,"Position":{"x":2009.041,"y":4885.3423,"z":41.87697},"PitType":5},{"ID":116,"Position":{"x":2006.4282,"y":4881.8696,"z":41.891464},"PitType":6},{"ID":117,"Position":{"x":2004.153,"y":4884.2114,"z":41.878914},"PitType":6},{"ID":118,"Position":{"x":2001.2201,"y":4886.931,"z":41.88287},"PitType":6},{"ID":119,"Position":{"x":1998.5043,"y":4889.581,"z":41.88358},"PitType":6},{"ID":120,"Position":{"x":1995.2264,"y":4892.8687,"z":41.887917},"PitType":6},{"ID":121,"Position":{"x":1991.9457,"y":4896.1816,"z":41.88384},"PitType":6},{"ID":122,"Position":{"x":1989.2347,"y":4898.872,"z":41.86807},"PitType":6},{"ID":123,"Position":{"x":1986.1273,"y":4901.9106,"z":41.852654},"PitType":6},{"ID":124,"Position":{"x":1983.7963,"y":4904.15,"z":41.841778},"PitType":6}]}`);
const plantsConfig = JSON.parse(`{"211":{"Stages":[{"Time":0.0,"ModelName":null},{"Time":0.2,"ModelName":"bkr_prop_weed_bud_pruned_01a"},{"Time":0.6,"ModelName":"bkr_prop_weed_bud_01a"},{"Time":1.0,"ModelName":"bkr_prop_weed_bud_02a"},{"Time":10.0,"ModelName":"prop_veg_crop_03_cab"},{"Time":999999.0,"ModelName":"bkr_prop_weed_bud_pruned_01a"}],"SecondBeforeWatering":60,"RipeningTime":180,"WitheringTime":180,"Type":0,"Exp":12,"Fetus":231,"CountFetus":5,"Name":"CabbageSeed"},"212":{"Stages":[{"Time":0.0,"ModelName":null},{"Time":0.2,"ModelName":"bkr_prop_weed_bud_pruned_01a"},{"Time":0.6,"ModelName":"bkr_prop_weed_bud_01a"},{"Time":1.0,"ModelName":"bkr_prop_weed_bud_02a"},{"Time":10.0,"ModelName":"prop_veg_crop_03_pump"},{"Time":999999.0,"ModelName":"bkr_prop_weed_bud_pruned_01a"}],"SecondBeforeWatering":60,"RipeningTime":180,"WitheringTime":180,"Type":0,"Exp":12,"Fetus":149,"CountFetus":5,"Name":"PumpkinSeed"},"215":{"Stages":[{"Time":0.0,"ModelName":null},{"Time":0.2,"ModelName":"bkr_prop_weed_bud_pruned_01a"},{"Time":0.6,"ModelName":"bkr_prop_weed_bud_01a"},{"Time":1.0,"ModelName":"prop_farmgo_tomato_1"},{"Time":10.0,"ModelName":"prop_farmgo_tomato_2"},{"Time":999999.0,"ModelName":"bkr_prop_weed_bud_pruned_01a"}],"SecondBeforeWatering":60,"RipeningTime":180,"WitheringTime":180,"Type":0,"Exp":12,"Fetus":234,"CountFetus":5,"Name":"TomatoSeed"},"219":{"Stages":[{"Time":0.0,"ModelName":null},{"Time":0.2,"ModelName":"bkr_prop_weed_bud_pruned_01a"},{"Time":0.6,"ModelName":"bkr_prop_weed_bud_01a"},{"Time":1.0,"ModelName":"prop_farmgo_potato_1"},{"Time":10.0,"ModelName":"prop_farmgo_potato_2"},{"Time":999999.0,"ModelName":"bkr_prop_weed_bud_pruned_01a"}],"SecondBeforeWatering":75,"RipeningTime":240,"WitheringTime":240,"Type":0,"Exp":16,"Fetus":238,"CountFetus":5,"Name":"PotatoesSeed"},"220":{"Stages":[{"Time":0.0,"ModelName":null},{"Time":0.2,"ModelName":"bkr_prop_weed_bud_pruned_01a"},{"Time":0.6,"ModelName":"bkr_prop_weed_bud_01a"},{"Time":1.0,"ModelName":"bkr_prop_weed_bud_02a"},{"Time":10.0,"ModelName":"prop_veg_crop_orange"},{"Time":999999.0,"ModelName":"prop_tree_stump_01"}],"SecondBeforeWatering":90,"RipeningTime":300,"WitheringTime":300,"Type":2,"Exp":20,"Fetus":150,"CountFetus":10,"Name":"OrangeSeed"},"222":{"Stages":[{"Time":0.0,"ModelName":null},{"Time":0.2,"ModelName":"bkr_prop_weed_bud_pruned_01a"},{"Time":0.5,"ModelName":"bkr_prop_weed_bud_02b"},{"Time":1.0,"ModelName":"bkr_prop_weed_bud_01a"},{"Time":10.0,"ModelName":"bkr_prop_weed_bud_02a"},{"Time":999999.0,"ModelName":"bkr_prop_weed_bud_pruned_01a"}],"SecondBeforeWatering":60,"RipeningTime":180,"WitheringTime":180,"Type":0,"Exp":12,"Fetus":240,"CountFetus":5,"Name":"CarrotSeed"},"223":{"Stages":[{"Time":0.0,"ModelName":null},{"Time":0.2,"ModelName":"bkr_prop_weed_bud_pruned_01a"},{"Time":0.4,"ModelName":"bkr_prop_weed_bud_01a"},{"Time":0.6,"ModelName":"bkr_prop_weed_bud_02a"},{"Time":1.0,"ModelName":"prop_plant_01a"},{"Time":10.0,"ModelName":"prop_veg_crop_tr_02"},{"Time":999999.0,"ModelName":"prop_tree_stump_01"}],"SecondBeforeWatering":90,"RipeningTime":300,"WitheringTime":300,"Type":2,"Exp":20,"Fetus":148,"CountFetus":10,"Name":"BananaSeed"},"224":{"Stages":[{"Time":0.0,"ModelName":null},{"Time":0.2,"ModelName":"bkr_prop_weed_bud_pruned_01a"},{"Time":0.6,"ModelName":"bkr_prop_weed_bud_01a"},{"Time":1.0,"ModelName":"bkr_prop_weed_bud_02a"},{"Time":10.0,"ModelName":"prop_tree_birch_05"},{"Time":999999.0,"ModelName":"prop_tree_stump_01"}],"SecondBeforeWatering":90,"RipeningTime":300,"WitheringTime":300,"Type":2,"Exp":20,"Fetus":151,"CountFetus":10,"Name":"AppleSeed"}}`);
const pitsConfig = JSON.parse(`{"0":{"TimeCoeff":0.0,"ExpIncr":1,"FetusIncr":0},"1":{"TimeCoeff":0.05,"ExpIncr":2,"FetusIncr":1},"2":{"TimeCoeff":0.3,"ExpIncr":2,"FetusIncr":1},"3":{"TimeCoeff":0.2,"ExpIncr":3,"FetusIncr":2},"4":{"TimeCoeff":0.15,"ExpIncr":4,"FetusIncr":2},"5":{"TimeCoeff":0.25,"ExpIncr":5,"FetusIncr":3},"6":{"TimeCoeff":0.3,"ExpIncr":4,"FetusIncr":2}}`);
const fertilizersConfig = JSON.parse(`{"0":{"TimeCoeff":0.0,"ExpIncr":0,"FetusIncr":0},"1":{"TimeCoeff":0.05,"ExpIncr":1,"FetusIncr":1},"2":{"TimeCoeff":0.1,"ExpIncr":2,"FetusIncr":2}}`);
const productConfigs = JSON.parse(`{"FertilizerStandVegetable":{"Type":"Fert","Parametr":null,"ParametrType":null,"Experience":1,"TimeBonus":5,"FetusBonus":1,"FertilizerType":1},"FertilizerStandBerry":{"Type":"Fert","Parametr":null,"ParametrType":null,"Experience":1,"TimeBonus":5,"FetusBonus":1,"FertilizerType":1},"FertilizerStandFruit":{"Type":"Fert","Parametr":null,"ParametrType":null,"Experience":1,"TimeBonus":5,"FetusBonus":1,"FertilizerType":1},"FertilizerBigVegetable":{"Type":"Fert","Parametr":null,"ParametrType":null,"Experience":2,"TimeBonus":10,"FetusBonus":2,"FertilizerType":2},"FertilizerBigBerry":{"Type":"Fert","Parametr":null,"ParametrType":null,"Experience":2,"TimeBonus":10,"FetusBonus":2,"FertilizerType":2},"FertilizerBigFruit":{"Type":"Fert","Parametr":null,"ParametrType":null,"Experience":2,"TimeBonus":10,"FetusBonus":2,"FertilizerType":2},"WateringBig":{"Type":"Other","Parametr":"Большая лейка","ParametrType":"water.png","Experience":0,"TimeBonus":0,"FetusBonus":0,"FertilizerType":0},"WateringMedium":{"Type":"Other","Parametr":"Средняя лейка","ParametrType":"water.png","Experience":0,"TimeBonus":0,"FetusBonus":0,"FertilizerType":0},"WateringLow":{"Type":"Other","Parametr":"Маленькая лейка","ParametrType":"water.png","Experience":0,"TimeBonus":0,"FetusBonus":0,"FertilizerType":0},"FoodBox":{"Type":"Other","Parametr":null,"ParametrType":null,"Experience":0,"TimeBonus":0,"FetusBonus":0,"FertilizerType":0}}`);
module.exports.pointsConfig = pointsConfig; 
module.exports.plantsConfig = plantsConfig; 
module.exports.pitsConfig = pitsConfig; 
module.exports.fertilizersConfig = fertilizersConfig; 
module.exports.productConfigs = productConfigs; 


/***/ }),
/* 4 */
/***/ (function(module, exports) {

const zonesNames = {
   "AIRP": "Los Santos International Airport",
   "ALAMO": "Alamo Sea",
   "ALTA": "Alta",
   "ARMYB": "Fort Zancudo",
   "BANHAMC": "Banham Canyon Dr",
   "BANNING": "Banning",
   "BEACH": "Vespucci Beach",
   "BHAMCA": "Banham Canyon",
   "BRADP": "Braddock Pass",
   "BRADT": "Braddock Tunnel",
   "BURTON": "Burton",
   "CALAFB": "Calafia Bridge",
   "CANNY": "Raton Canyon",
   "CCREAK": "Cassidy Creek",
   "CHAMH": "Chamberlain Hills",
   "CHIL": "Vinewood Hills",
   "CHU": "Chumash",
   "CMSW": "Chiliad Mountain State Wilderness",
   "CYPRE": "Cypress Flats",
   "DAVIS": "Davis",
   "DELBE": "Del Perro Beach",
   "DELPE": "Del Perro",
   "DELSOL": "La Puerta",
   "DESRT": "Grand Senora Desert",
   "DOWNT": "Downtown",
   "DTVINE": "Downtown Vinewood",
   "EAST_V": "East Vinewood",
   "EBURO": "El Burro Heights",
   "ELGORL": "El Gordo Lighthouse",
   "ELYSIAN": "Elysian Island",
   "GALFISH": "Galilee",
   "GOLF": "GWC and Golfing Society",
   "GRAPES": "Grapeseed",
   "GREATC": "Great Chaparral",
   "HARMO": "Harmony",
   "HAWICK": "Hawick",
   "HORS": "Vinewood Racetrack",
   "HUMLAB": "Humane Labs and Research",
   "JAIL": "Bolingbroke Penitentiary",
   "KOREAT": "Little Seoul",
   "LACT": "Land Act Reservoir",
   "LAGO": "Lago Zancudo",
   "LDAM": "Land Act Dam",
   "LEGSQU": "Legion Square",
   "LMESA": "La Mesa",
   "LOSPUER": "La Puerta",
   "MIRR": "Mirror Park",
   "MORN": "Morningwood",
   "MOVIE": "Richards Majestic",
   "MTCHIL": "Mount Chiliad",
   "MTGORDO": "Mount Gordo",
   "MTJOSE": "Mount Josiah",
   "MURRI": "Murrieta Heights",
   "NCHU": "North Chumash",
   "NOOSE": "N.O.O.S.E",
   "OCEANA": "Pacific Ocean",
   "PALCOV": "Paleto Cove",
   "PALETO": "Paleto Bay",
   "PALFOR": "Paleto Forest",
   "PALHIGH": "Palomino Highlands",
   "PALMPOW": "Palmer-Taylor Power Station",
   "PBLUFF": "Pacific Bluffs",
   "PBOX": "Pillbox Hill",
   "PROCOB": "Procopio Beach",
   "RANCHO": "Rancho",
   "RGLEN": "Richman Glen",
   "RICHM": "Richman",
   "ROCKF": "Rockford Hills",
   "RTRAK": "Redwood Lights Track",
   "SANAND": "San Andreas",
   "SANCHIA": "San Chianski Mountain Range",
   "SANDY": "Sandy Shores",
   "SKID": "Mission Row",
   "SLAB": "Stab City",
   "STAD": "Maze Bank Arena",
   "STRAW": "Strawberry",
   "TATAMO": "Tataviam Mountains",
   "TERMINA": "Terminal",
   "TEXTI": "Textile City",
   "TONGVAH": "Tongva Hills",
   "TONGVAV": "Tongva Valley",
   "VCANA": "Vespucci Canals",
   "VESP": "Vespucci",
   "VINE": "Vinewood",
   "WINDF": "Ron Alternates Wind Farm",
   "WVINE": "West Vinewood",
   "ZANCUDO": "Zancudo River",
   "ZP_ORT": "Port of South Los Santos",
   "ZQ_UAR": "Davis Quartz",
}

function getZoneNameByTag(zoneTag) {
   const zoneName = zonesNames[zoneTag.toUpperCase()];
   return zoneName ? zoneName : zoneTag;
}

function getZoneNameByPosition(pos) {
   const zone = mp.game.zone.getNameOfZone(pos.x, pos.y, pos.x);
   return getZoneNameByTag(zone);
}

function getStreetNameByPosition(pos) {
   const street = mp.game.pathfind.getStreetNameAtCoord(pos.x, pos.y, pos.z, 0, 0);
   const streetName = mp.game.ui.getStreetNameFromHashKey(street.streetName);
   
   return streetName;
}

function getFullAddressByPosition(pos) {
   return `${getZoneNameByPosition(pos)} - ${getStreetNameByPosition(pos)}`;
}

module.exports.getZoneNameByTag = getZoneNameByTag;
module.exports.getFullAddressByPosition = getFullAddressByPosition;
module.exports.getStreetNameByPosition = getStreetNameByPosition;
module.exports.getZoneNameByPosition = getZoneNameByPosition;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = {
  "52": {
    "Hash": 453432689,
    "AmmoType": 118,
    "Components": {
      "1": [
        1709866683
      ],
      "2": [
        899381934
      ],
      "3": [
        4275109233,
        3978713628
      ],
      "4": [],
      "5": [],
      "6": [
        3610841222
      ]
    },
    "Name": null
  },
  "53": {
    "Hash": 1593441988,
    "AmmoType": 118,
    "Components": {
      "1": [
        2205435306
      ],
      "2": [
        899381934
      ],
      "3": [
        4275109233,
        3978713628
      ],
      "4": [],
      "5": [],
      "6": [
        3328527730
      ]
    },
    "Name": null
  },
  "60": {
    "Hash": 584646201,
    "AmmoType": 118,
    "Components": {
      "1": [
        3271853210
      ],
      "2": [
        899381934
      ],
      "3": [
        834974250,
        614078421
      ],
      "4": [],
      "5": [],
      "6": [
        2608252716
      ]
    },
    "Name": null
  },
  "54": {
    "Hash": 2578377531,
    "AmmoType": 118,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [
        899381934
      ],
      "3": [
        580369945,
        3654528146
      ],
      "4": [],
      "5": [],
      "6": [
        2008591151
      ]
    },
    "Name": null
  },
  "59": {
    "Hash": 3249783761,
    "AmmoType": 118,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        3917905123
      ],
      "4": [],
      "5": [],
      "6": [
        384708672,
        2492708877
      ]
    },
    "Name": null
  },
  "55": {
    "Hash": 3218215474,
    "AmmoType": 118,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        4169150169,
        2063610803
      ],
      "4": [],
      "5": [],
      "6": [
        2150886575
      ]
    },
    "Name": null
  },
  "56": {
    "Hash": 3523564046,
    "AmmoType": 118,
    "Components": {
      "1": [
        3271853210
      ],
      "2": [
        899381934
      ],
      "3": [
        222992026,
        1694090795
      ],
      "4": [],
      "5": [],
      "6": [
        2053798779
      ]
    },
    "Name": null
  },
  "65": {
    "Hash": 3415619887,
    "AmmoType": 118,
    "Components": {
      "1": [
        654802123
      ],
      "2": [
        899381934
      ],
      "3": [
        3122911422,
        3336103030,
        15712037,
        284438159,
        231258687
      ],
      "4": [
        1108334355,
        77277509
      ],
      "5": [],
      "6": [
        3225415071,
        11918884,
        176157112,
        4074914441,
        288456487,
        398658626,
        628697006,
        925911836,
        1222307441,
        552442715,
        3646023783
      ]
    },
    "Name": null
  },
  "64": {
    "Hash": 2285322324,
    "AmmoType": 118,
    "Components": {
      "1": [
        1709866683,
        2860680127
      ],
      "2": [
        1246324211
      ],
      "3": [
        21392614,
        3465283442,
        2418909806,
        3870121849,
        2366665730,
        3239176998
      ],
      "4": [
        1205768792
      ],
      "5": [],
      "6": [
        259780317,
        2321624822,
        1996130345,
        2839309484,
        2626704212,
        1308243489,
        1122574335,
        1420313469,
        109848390,
        593945703,
        1142457062,
        3891161322,
        691432737,
        987648331,
        3863286761,
        3447384986,
        4202375078,
        3800418970,
        730876697,
        583159708,
        2366463693,
        52055783
      ]
    },
    "Name": null
  },
  "62": {
    "Hash": 2548703416,
    "AmmoType": 118,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "63": {
    "Hash": 3219281620,
    "AmmoType": 118,
    "Components": {
      "1": [
        1709866683,
        568543123
      ],
      "2": [
        1140676955
      ],
      "3": [
        2499030370,
        1591132456,
        634039983,
        733837882,
        2248057097,
        1329061674
      ],
      "4": [
        2396306288
      ],
      "5": [],
      "6": [
        1550611612,
        368550800,
        2525897947,
        24902297,
        4066925682,
        3710005734,
        3141791350,
        1301287696,
        1597093459,
        1769871776,
        2467084625,
        3036451504,
        438243936,
        3839888240,
        740920107,
        3753350949,
        1809261196,
        2648428428,
        3004802348,
        3330502162,
        1135718771,
        1253942266
      ]
    },
    "Name": null
  },
  "57": {
    "Hash": 137902532,
    "AmmoType": 118,
    "Components": {
      "1": [
        3271853210
      ],
      "2": [],
      "3": [
        1168357051,
        867832552
      ],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "66": {
    "Hash": 324215364,
    "AmmoType": 119,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [
        899381934
      ],
      "3": [
        3410538224,
        283556395
      ],
      "4": [
        2637152041
      ],
      "5": [],
      "6": [
        1215999497
      ]
    },
    "Name": null
  },
  "68": {
    "Hash": 736523883,
    "AmmoType": 119,
    "Components": {
      "1": [
        3271853210
      ],
      "2": [
        2076495324
      ],
      "3": [
        643254679,
        889808635,
        2043113590
      ],
      "4": [
        1019656791
      ],
      "5": [],
      "6": [
        663170192
      ]
    },
    "Name": null
  },
  "69": {
    "Hash": 4024951519,
    "AmmoType": 119,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [
        2076495324
      ],
      "3": [
        2366834608,
        3141985303
      ],
      "4": [
        2637152041
      ],
      "5": [],
      "6": [
        663517359
      ]
    },
    "Name": null
  },
  "74": {
    "Hash": 3173288789,
    "AmmoType": 119,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        2227745491,
        2474561719
      ],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "75": {
    "Hash": 2024373456,
    "AmmoType": 119,
    "Components": {
      "1": [
        3271853210,
        3113485012,
        3362234491,
        3725708239,
        3968886988,
        48731514,
        880736428,
        1303784126
      ],
      "2": [
        2076495324
      ],
      "3": [
        1277460590,
        3112393518,
        2146055916,
        3650233061,
        974903034,
        190476639
      ],
      "4": [
        2681951826,
        3842157419,
        1038927834
      ],
      "5": [],
      "6": [
        3298267239,
        940943685,
        1263226800,
        3966931456,
        1224100642,
        899228776,
        616006309,
        2733014785,
        572063080,
        1170588613
      ]
    },
    "Name": null
  },
  "67": {
    "Hash": 3675956304,
    "AmmoType": 119,
    "Components": {
      "1": [
        3271853210
      ],
      "2": [],
      "3": [
        1198425599,
        3106695545,
        2850671348
      ],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "70": {
    "Hash": 171789620,
    "AmmoType": 119,
    "Components": {
      "1": [],
      "2": [
        2076495324
      ],
      "3": [
        1125642654,
        860508675,
        1857603803
      ],
      "4": [
        2855028148
      ],
      "5": [
        202788691
      ],
      "6": []
    },
    "Name": null
  },
  "71": {
    "Hash": 2634544996,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        4097109892,
        2182449991
      ],
      "4": [
        1006677997
      ],
      "5": [],
      "6": [
        3604658878
      ]
    },
    "Name": null
  },
  "72": {
    "Hash": 2144741730,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        3791631178,
        3603274966
      ],
      "4": [
        2698550338
      ],
      "5": [
        202788691
      ],
      "6": [
        2466172125
      ]
    },
    "Name": null
  },
  "76": {
    "Hash": 3686625920,
    "AmmoType": 120,
    "Components": {
      "1": [
        3113485012,
        3362234491,
        3725708239,
        3968886988,
        48731514,
        880736428,
        1303784126
      ],
      "2": [],
      "3": [
        1227564412,
        400507625,
        4133787461,
        3274096058,
        696788003,
        1475288264
      ],
      "4": [
        1108334355,
        1060929921,
        3328927042
      ],
      "5": [
        2640679034
      ],
      "6": [
        1249283253,
        3437259709,
        3197423398,
        1980349969,
        1219453777,
        2441508106,
        2220186280,
        457967755,
        235171324,
        42685294,
        3607349581
      ]
    },
    "Name": null
  },
  "73": {
    "Hash": 1627465347,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        484812453,
        3939025520
      ],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "92": {
    "Hash": 487013001,
    "AmmoType": 122,
    "Components": {
      "1": [
        3859329886
      ],
      "2": [
        2076495324
      ],
      "3": [],
      "4": [],
      "5": [],
      "6": [
        2732039643
      ]
    },
    "Name": null
  },
  "93": {
    "Hash": 2017895192,
    "AmmoType": 122,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": [
        2242268665
      ]
    },
    "Name": null
  },
  "95": {
    "Hash": 3800352039,
    "AmmoType": 122,
    "Components": {
      "1": [
        2205435306
      ],
      "2": [
        2076495324
      ],
      "3": [
        2498239431,
        2260565874
      ],
      "4": [],
      "5": [
        202788691
      ],
      "6": []
    },
    "Name": null
  },
  "96": {
    "Hash": 2828843422,
    "AmmoType": 205,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "94": {
    "Hash": 2640438543,
    "AmmoType": 122,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [
        2076495324
      ],
      "3": [],
      "4": [],
      "5": [
        202788691
      ],
      "6": []
    },
    "Name": null
  },
  "100": {
    "Hash": 1432025498,
    "AmmoType": 122,
    "Components": {
      "1": [
        2890063729,
        1602080333
      ],
      "2": [
        2076495324
      ],
      "3": [
        3449028929,
        2676628469,
        1315288101,
        3914869031,
        1004815965
      ],
      "4": [
        1108334355,
        77277509,
        1060929921
      ],
      "5": [],
      "6": [
        3820854852,
        387223451,
        617753366,
        4072589040,
        8741501,
        3693681093,
        3783533691,
        3639579478,
        4012490698,
        1739501925,
        1178671645
      ]
    },
    "Name": null
  },
  "98": {
    "Hash": 4019527611,
    "AmmoType": 122,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "99": {
    "Hash": 317205821,
    "AmmoType": 122,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "97": {
    "Hash": 984333226,
    "AmmoType": 122,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [
        2076495324
      ],
      "3": [
        844049759,
        2535257853,
        2294798931
      ],
      "4": [],
      "5": [
        202788691
      ],
      "6": []
    },
    "Name": null
  },
  "77": {
    "Hash": 3220176749,
    "AmmoType": 120,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [
        2076495324
      ],
      "3": [
        3193891350,
        2971750299,
        3689981245
      ],
      "4": [
        2637152041
      ],
      "5": [
        202788691
      ],
      "6": [
        1319990579
      ]
    },
    "Name": null
  },
  "78": {
    "Hash": 2210333304,
    "AmmoType": 120,
    "Components": {
      "1": [
        2205435306
      ],
      "2": [
        2076495324
      ],
      "3": [
        2680042476,
        2433783441,
        3127044405
      ],
      "4": [
        2698550338
      ],
      "5": [
        202788691
      ],
      "6": [
        3634075224
      ]
    },
    "Name": null
  },
  "79": {
    "Hash": 2937143193,
    "AmmoType": 120,
    "Components": {
      "1": [
        2205435306
      ],
      "2": [
        2076495324
      ],
      "3": [
        4203716879,
        2395064697
      ],
      "4": [
        2855028148
      ],
      "5": [],
      "6": [
        930927479
      ]
    },
    "Name": null
  },
  "80": {
    "Hash": 3231910285,
    "AmmoType": 120,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [
        2076495324
      ],
      "3": [
        3334989185,
        2089537806,
        1801039530
      ],
      "4": [
        2698550338
      ],
      "5": [
        202788691
      ],
      "6": [
        1929467122
      ]
    },
    "Name": null
  },
  "81": {
    "Hash": 2132975508,
    "AmmoType": 120,
    "Components": {
      "1": [
        2205435306
      ],
      "2": [
        2076495324
      ],
      "3": [
        3315675008,
        3009973007
      ],
      "4": [
        2855028148
      ],
      "5": [
        202788691
      ],
      "6": [
        2824322168
      ]
    },
    "Name": null
  },
  "86": {
    "Hash": 2228681469,
    "AmmoType": 120,
    "Components": {
      "1": [
        2205435306,
        3113485012,
        3362234491,
        3725708239,
        3968886988,
        48731514,
        880736428,
        1303784126
      ],
      "2": [
        2076495324
      ],
      "3": [
        25766362,
        4021290536,
        2183159977,
        2845636954,
        4205311469,
        1130501904
      ],
      "4": [
        1108334355,
        3350057221,
        1060929921
      ],
      "5": [
        2640679034
      ],
      "6": [
        2923451831,
        3104173419,
        2797881576,
        2491819116,
        2318995410,
        36929477,
        4026522462,
        3720197850,
        3412267557,
        2826785822,
        3320426066
      ]
    },
    "Name": null
  },
  "85": {
    "Hash": 2526821735,
    "AmmoType": 120,
    "Components": {
      "1": [
        2805810788,
        3113485012,
        3362234491,
        3725708239,
        3968886988,
        48731514,
        880736428,
        1303784126
      ],
      "2": [
        2076495324
      ],
      "3": [
        382112385,
        3726614828,
        2271594122,
        3724612230,
        1362433589,
        1346235024
      ],
      "4": [
        1108334355,
        77277509,
        3328927042
      ],
      "5": [
        2640679034
      ],
      "6": [
        3557537083,
        1125852043,
        886015732,
        3032680157,
        3999758885,
        3750812792,
        172765678,
        2312089847,
        2072122460,
        2308747125,
        1377355801
      ]
    },
    "Name": null
  },
  "83": {
    "Hash": 961495388,
    "AmmoType": 120,
    "Components": {
      "1": [
        2805810788,
        3113485012,
        3362234491,
        3725708239,
        3968886988,
        48731514,
        880736428,
        1303784126
      ],
      "2": [
        2076495324
      ],
      "3": [
        2249208895,
        3509242479,
        4012669121,
        4218476627,
        2816286296,
        1675665560
      ],
      "4": [
        1108334355,
        77277509,
        3328927042
      ],
      "5": [
        2640679034
      ],
      "6": [
        2434475183,
        937772107,
        1401650071,
        628662130,
        3309920045,
        3482022833,
        2847614993,
        4234628436,
        2088750491,
        2781053842,
        3115408816
      ]
    },
    "Name": null
  },
  "84": {
    "Hash": 4208062921,
    "AmmoType": 120,
    "Components": {
      "1": [
        2205435306,
        3113485012,
        3362234491,
        3725708239,
        3968886988,
        48731514,
        880736428,
        1303784126
      ],
      "2": [
        2076495324
      ],
      "3": [
        1283078430,
        1574296533,
        391640422,
        1025884839,
        626875735,
        1141059345
      ],
      "4": [
        1108334355,
        77277509,
        3328927042
      ],
      "5": [
        2640679034
      ],
      "6": [
        1272803094,
        1080719624,
        792221348,
        3842785869,
        3548192559,
        2250671235,
        4095795318,
        2866892280,
        2559813981,
        1796459838,
        3663056191
      ]
    },
    "Name": null
  },
  "82": {
    "Hash": 1649403952,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        1363085923,
        1509923832
      ],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "87": {
    "Hash": 100416529,
    "AmmoType": 121,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [],
      "3": [
        2613461129
      ],
      "4": [
        3527687644,
        3159677559
      ],
      "5": [],
      "6": [
        1077065191
      ]
    },
    "Name": null
  },
  "88": {
    "Hash": 205991906,
    "AmmoType": 121,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        1198478068
      ],
      "4": [
        3527687644,
        3159677559
      ],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "91": {
    "Hash": 1785463520,
    "AmmoType": 121,
    "Components": {
      "1": [
        2205435306,
        3113485012,
        3362234491,
        3725708239,
        3968886988,
        48731514,
        880736428,
        1303784126
      ],
      "2": [
        2076495324
      ],
      "3": [
        2497785294,
        3872379306,
        3615105746,
        1842849902,
        4100968569,
        3779763923
      ],
      "4": [
        1108334355,
        3328927042,
        1528590652
      ],
      "5": [
        2640679034
      ],
      "6": [
        2425682848,
        1931539634,
        1624199183,
        4268133183,
        4084561241,
        423313640,
        276639596,
        3303610433,
        2612118995,
        996213771,
        3080918746
      ]
    },
    "Name": null
  },
  "90": {
    "Hash": 177293209,
    "AmmoType": 121,
    "Components": {
      "1": [
        2890063729,
        1602080333,
        1764221345
      ],
      "2": [],
      "3": [
        4196276776,
        752418717,
        247526935,
        4164277972,
        1005144310,
        2313935527
      ],
      "4": [
        2193687427,
        3159677559,
        3061846192,
        776198721
      ],
      "5": [],
      "6": [
        4164123906,
        3317620069,
        3916506229,
        329939175,
        643374672,
        807875052,
        2893163128,
        3198471901,
        3447155842,
        2881858759,
        1815270123
      ]
    },
    "Name": null
  },
  "89": {
    "Hash": 3342088282,
    "AmmoType": 121,
    "Components": {
      "1": [
        2205435306
      ],
      "2": [
        2076495324
      ],
      "3": [
        3627761985,
        3439143621
      ],
      "4": [
        471997210
      ],
      "5": [
        202788691
      ],
      "6": [
        371102273
      ]
    },
    "Name": null
  },
  "102": {
    "Hash": 2578778090,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "103": {
    "Hash": 1737195953,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "104": {
    "Hash": 1317494643,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "105": {
    "Hash": 2508868239,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "106": {
    "Hash": 2227010557,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "107": {
    "Hash": 1141786504,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "108": {
    "Hash": 4192643659,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "109": {
    "Hash": 2460120199,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "110": {
    "Hash": 4191993645,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "111": {
    "Hash": 3638508604,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "112": {
    "Hash": 3713923289,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "113": {
    "Hash": 2343591895,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "114": {
    "Hash": 3756226112,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "115": {
    "Hash": 2484171525,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "116": {
    "Hash": 419712736,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "117": {
    "Hash": 3441901897,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "133": {
    "Hash": 2726580491,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "134": {
    "Hash": 2982836145,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "135": {
    "Hash": 1119849093,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "136": {
    "Hash": 2138347493,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "137": {
    "Hash": 1834241177,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "138": {
    "Hash": 1672152130,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "139": {
    "Hash": 1305664598,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "140": {
    "Hash": 125959754,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "101": {
    "Hash": 911657153,
    "AmmoType": 118,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "61": {
    "Hash": 1198879012,
    "AmmoType": 118,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "198": {
    "Hash": 126349499,
    "AmmoType": 264,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "263": {
    "Hash": 600439132,
    "AmmoType": 264,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  }
}

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = {"1":"fMass","2":"fInitialDragCoeff","6":"fDriveBiasFront","7":"nInitialDriveGears","8":"fInitialDriveForce","9":"fDriveInertia","10":"fClutchChangeRateScaleUpShift","11":"fClutchChangeRateScaleDownShift","12":"fInitialDriveMaxFlatVel","13":"fBrakeForce","14":"fBrakeBiasFront","15":"fHandBrakeForce","16":"fSteeringLock","17":"fTractionCurveMax","18":"fTractionCurveMin","19":"fTractionCurveLateral","20":"fTractionSpringDeltaMax","21":"fLowSpeedTractionLossMult","23":"fTractionBiasFront","24":"fTractionLossMult","25":"fSuspensionForce","26":"fSuspensionCompDamp","27":"fSuspensionReboundDamp","28":"fSuspensionUpperLimit","29":"fSuspensionLowerLimit","30":"fSuspensionRaise","31":"fSuspensionBiasFront","32":"fAntiRollBarForce","33":"fAntiRollBarBiasFront","34":"fRollCentreHeightFront","35":"fRollCentreHeightRear","999":"ReduceGrip"}

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

const waeaponConfigs = __webpack_require__(5); 

module.exports = class WeaponData{
    constructor(data) {
        const config = waeaponConfigs[data[0]];
        this.weaponHash = config.Hash;
        this.ammoType = config.AmmoType;
        this.components = [];
        this.damage = config.Damage || 15;
        for (let index = 1; index < 7; index++) {
            const component = config.Components[index][data[index]] || 0;
            this.components.push(component)
        }
        this.ammo = data[7] || 0;
    }
}

/***/ }),
/* 8 */
/***/ (function(module, exports) {

const uintMax = 4294967295;

class BaseShape {
    constructor (id, point1, point2, point3, point4, dimension) {
        this.ID = id;
        this.Point1 = point1;
        this.Point2 = point2;
        this.Point3 = point3;
        this.Point4 = point4;
        this.Dimension = dimension;
        this.currState = false;
    }
    IsPointWithin(point) {
    }

    CheckPlayerInShape() {
        if (mp.players.local.dimension != this.Dimension && this.Dimension != uintMax)
            return false;
        return this.IsPointWithin(mp.players.local.position);
    }
    CheckPlayer() {
        let currentCheck = this.CheckPlayerInShape();
        if (this.currState != currentCheck)
        {
            this.currState = currentCheck;
            if (currentCheck)
                mp.events.callRemote('customShape:enterShape', this.ID);
            else
                mp.events.callRemote('customShape:exitShape', this.ID);
        }
    }
}

module.exports = BaseShape;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

class Line2D {
    constructor (point1, point2) {
        this.A = point2.y - point1.y;
        this.B = point1.x - point2.x;
        this.C = point1.y * (point2.x - point1.x) - point1.x * (point2.y - point1.y);
    }

    CheckPointOnLine(point) {
        return this.A * point.x + this.B * point.y + this.C;
    }
}

module.exports = Line2D;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {global.petConfigs = __webpack_require__(11);

__webpack_require__(12);
__webpack_require__(13);
__webpack_require__(14);
__webpack_require__(15);
__webpack_require__(17);
__webpack_require__(19);
__webpack_require__(20);
__webpack_require__(21);
__webpack_require__(25);
__webpack_require__(27);
__webpack_require__(28);
__webpack_require__(29);
__webpack_require__(30);
__webpack_require__(31);  

__webpack_require__(39);
__webpack_require__(40);
__webpack_require__(41);
__webpack_require__(42);
__webpack_require__(43);

__webpack_require__(44);
__webpack_require__(45);
__webpack_require__(50);
__webpack_require__(51);
__webpack_require__(52);
__webpack_require__(53);
__webpack_require__(54);
__webpack_require__(253);

__webpack_require__(60); 
__webpack_require__(61);
__webpack_require__(62);
__webpack_require__(63);
__webpack_require__(64);
__webpack_require__(65)
__webpack_require__(70)
__webpack_require__(71)
__webpack_require__(72)

__webpack_require__(73);
__webpack_require__(82);
__webpack_require__(83);
__webpack_require__(84);
__webpack_require__(88);
//require('./client/pets/index.js');
__webpack_require__(100);

__webpack_require__(103);
__webpack_require__(104);
__webpack_require__(105);
__webpack_require__(107);
__webpack_require__(111);
__webpack_require__(112);
__webpack_require__(116);
__webpack_require__(117);
__webpack_require__(120);
__webpack_require__(122);
__webpack_require__(127);
__webpack_require__(133);
__webpack_require__(134);
__webpack_require__(135);
__webpack_require__(136);
__webpack_require__(139);
__webpack_require__(140);
__webpack_require__(144)
__webpack_require__(145);
__webpack_require__(146);
__webpack_require__(147);
__webpack_require__(152);
__webpack_require__(165);
__webpack_require__(168);
__webpack_require__(169);
__webpack_require__(170);
__webpack_require__(171);
__webpack_require__(172);
__webpack_require__(173);
__webpack_require__(174);
__webpack_require__(175);

__webpack_require__(176);
__webpack_require__(177);
__webpack_require__(178);
__webpack_require__(179);

__webpack_require__(182);
__webpack_require__(183);
__webpack_require__(184);

__webpack_require__(185);
// require('./client/parliament.js');
__webpack_require__(186);
__webpack_require__(187);
__webpack_require__(188);
__webpack_require__(189);
__webpack_require__(191);
__webpack_require__(192);
__webpack_require__(193);
__webpack_require__(195);
__webpack_require__(196);

__webpack_require__(203);
__webpack_require__(207);

//shops
__webpack_require__(208);
__webpack_require__(209);
__webpack_require__(210);
__webpack_require__(211);
__webpack_require__(212);
__webpack_require__(219);
__webpack_require__(220);
__webpack_require__(221);
__webpack_require__(222);
__webpack_require__(223);
__webpack_require__(224);


__webpack_require__(225);
__webpack_require__(226);
__webpack_require__(227);
__webpack_require__(228);
__webpack_require__(229);
__webpack_require__(230);
__webpack_require__(231);
//require('./client/inventory/items/itemsAnimator.js');
__webpack_require__(232);
__webpack_require__(233);
__webpack_require__(234);
__webpack_require__(238);
__webpack_require__(241);
__webpack_require__(242);
__webpack_require__(243);
__webpack_require__(244);
__webpack_require__(245);
__webpack_require__(246);

global.effectManager = __webpack_require__(247);
global.controlsManager = __webpack_require__(249);
global.enviromentManager = __webpack_require__(250);

if(false) {}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports =
{
	1462895032: // Cat
	{
		attack: false,
		sit: true,
		sitDictionary: "creatures@cat@amb@world_cat_sleeping_ledge@base",
		sitAnimation: "base",
		sleep: true,
		sleepDictionary: "creatures@cat@amb@world_cat_sleeping_ground@idle_a",
		sleepAnimation: "idle_a",
		sniff: false,
		ball: false
	},
	2910340283: // Westy
	{
		attack: false,
		sit: false,
		sitDictionary: "creatures@rottweiler@amb@world_dog_sitting@base",
		sitAnimation: "base",
		sleep: false,
		sleepDictionary: "creatures@rottweiler@amb@sleep_in_kennel@",
		sleepAnimation: "sleep_in_kennel",
		sniff: true,
		ball: true
	},
	882848737: // Retriever
	{
		attack: true,
		sit: true,
		sitDictionary: "creatures@retriever@amb@world_dog_sitting@base",
		sitAnimation: "base",
		sleep: true,
		sleepDictionary: "creatures@rottweiler@amb@sleep_in_kennel@",
		sleepAnimation: "sleep_in_kennel",
		sniff: true,
		ball: true
	},
	1125994524: // Poodle
	{
		attack: false,
		sit: false,
		sitDictionary: "creatures@rottweiler@amb@world_dog_sitting@base",
		sitAnimation: "base",
		sleep: false,
		sleepDictionary: "creatures@rottweiler@amb@sleep_in_kennel@",
		sleepAnimation: "sleep_in_kennel",
		sniff: true,
		ball: true
	},
	1832265812: // Pug
	{
		attack: false,
		sit: true,
		sitDictionary: "creatures@pug@amb@world_dog_sitting@base",
		sitAnimation: "base",
		sleep: false,
		sleepDictionary: "creatures@rottweiler@amb@sleep_in_kennel@",
		sleepAnimation: "sleep_in_kennel",
		sniff: true,
		ball: true
	},
	3462393972: // Boar
	{
		attack: false,
		sit: false,
		sitDictionary: null,
		sitAnimation: null,
		sleep: false,
		sleepDictionary: null,
		sleepAnimation: null,
		sniff: false,
		ball: false
	},
	2971380566: // Pig
	{
		attack: false,
		sit: false,
		sitDictionary: "creatures@rottweiler@amb@world_dog_sitting@base",
		sitAnimation: "base",
		sleep: false,
		sleepDictionary: "creatures@rottweiler@amb@sleep_in_kennel@",
		sleepAnimation: "sleep_in_kennel",
		sniff: false,
		ball: false
	},
	2506301981: // Rottweiler
	{
		attack: true,
		sit: true,
		sitDictionary: "creatures@rottweiler@amb@world_dog_sitting@base",
		sitAnimation: "base",
		sleep: true,
		sleepDictionary: "creatures@rottweiler@amb@sleep_in_kennel@",
		sleepAnimation: "sleep_in_kennel",
		sniff: true,
		ball: true
	},
	1318032802: // Husky
	{
		attack: true,
		sit: true,
		sitDictionary: "creatures@rottweiler@amb@world_dog_sitting@base",
		sitAnimation: "base",
		sleep: true,
		sleepDictionary: "creatures@rottweiler@amb@sleep_in_kennel@",
		sleepAnimation: "sleep_in_kennel",
		sniff: true,
		ball: true
	},
	1126154828: // Shepherd
	{
		attack: true,
		sit: true,
		sitDictionary: "creatures@rottweiler@amb@world_dog_sitting@base",
		sitAnimation: "base",
		sleep: true,
		sleepDictionary: "creatures@rottweiler@amb@sleep_in_kennel@",
		sleepAnimation: "sleep_in_kennel",
		sniff: true,
		ball: true
	},
	307287994: // Mountain Lion
	{
		attack: true,
		sit: true,
		sitDictionary: "creatures@rottweiler@amb@world_dog_sitting@base",
		sitAnimation: "base",
		sleep: true,
		sleepDictionary: "creatures@rottweiler@amb@sleep_in_kennel@",
		sleepAnimation: "sleep_in_kennel",
		sniff: false,
		ball: false
	},
	3877461608: // Puma
	{
		attack: true,
		sit: true,
		sitDictionary: "creatures@rottweiler@amb@world_dog_sitting@base",
		sitAnimation: "base",
		sleep: true,
		sleepDictionary: "creatures@rottweiler@amb@sleep_in_kennel@",
		sleepAnimation: "sleep_in_kennel",
		sniff: false,
		ball: false
	},
	1682622302: // Coyote
	{
		attack: false,
		sit: true,
		sitDictionary: "creatures@rottweiler@amb@world_dog_sitting@base",
		sitAnimation: "base",
		sleep: true,
		sleepDictionary: "creatures@rottweiler@amb@sleep_in_kennel@",
		sleepAnimation: "sleep_in_kennel",
		sniff: false,
		ball: false
	}
}

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {//global.debug = true;

global.sendException = false;

global.chatActive = false;
global.loggedin = false;
global.localplayer = mp.players.local;
global.cursorTarget = null;
global.nearestObject = null;
global.friends = {};
global.Keys = {};
global.pidrgm = false;
global.inGreenZone = false;
global.cuffed = false;
global.spectating = false;
global.acheat = {};
global.bodyCam = null;
global.bodyCamStart = new mp.Vector3(0, 0, 0);
global.lastCheck = 0;
global.chatLastCheck = 0;
global.pocketEnabled = false;
global.openOutType = -1;
global.inventoryOpened = false;
global.editing = false;
global.LOCAL_ADMIN_LVL = 0;
global.circleEntity = null;
global.circleOpen = false;
global.boardObjects = [];
global.passports = {};
global.customCamera = null;
global.esptoggle = 0;
global.fishingMiniGame = false;
global.clothesEmpty = JSON.parse(`{"1":{"1":0,"3":15,"4":21,"5":0,"6":34,"7":0,"8":15,"9":0,"10":0,"11":15},"0":{"1":0,"3":15,"4":15,"5":0,"6":35,"7":0,"8":6,"9":0,"10":0,"11":15}}`);
global.characterEditor = false;
global.bizPedLoaded = false;
global.clientPedLoaded = false;
global.frontendSoundsEnabled = true;
global.customWeaponsModels = [];
global.editorPosition = new mp.Vector3(-811.697, 175.1083, 76.74536);
global.editorRotation = new mp.Vector3(-0.01, 0.01, 294.01);
global.inAction = false;
global.cursorShow = false;
global.UUID = 0;
global.console = mp.console;
global.testov = 0;


mp.events.add('gui:ready', () => {
    global.passports = mp.storage.data.passports || {};
});

mp.events.add('setUUID', (uuid) => {
    global.UUID = uuid;
});

mp.events.add('SendClientExceptions', (value) => {
    global.sendException = value;
});


mp.serverLog = (log)=>{
    mp.events.callRemote('srv_consoleLog', "[CLIENT-LOG] " + log);
}

mp.gui.notify = (type, text, ms = 3000) => {
    mp.events.call('notify', type, 9, text, ms);
}

mp.gui.notifyType = {
    ALERT: 0,
    ERROR: 1,
    SUCCESS: 2,
    INFO: 3,
    WARNING: 4
}

global.checkIsAnyActivity = () => {
    return !global.loggedin || global.chatActive || global.editing || global.gui.isOpened() || global.IsPlayingDM || global.cuffed || global.inAction;
};


global.getVariable = (entity, key, defaultValue) => {
    if (entity) {
        let value = entity.getVariable(key);
        if (value || value === 0)
            return value;
    }
    return defaultValue;
}

let tempHide = false;
setInterval(()=>{
    if(tempHide && !mp.game.ui.isPauseMenuActive()){
        tempHide = false;
        mp.gui.cursor.visible = true;//global.gui.curPage 
    }
}, 100)


global.showCursor = (state) => {
    if (!global.loggedin)
        mp.gui.cursor.visible = true;
    else{
        mp.gui.cursor.visible = state;
    }
}

global.GetOffsetPosition = (pos, rotZ, offset) =>
{
    let newPos = new mp.Vector3(pos.x, pos.y, pos.z + offset.z);
    let dist = Math.sqrt(offset.x * offset.x + offset.y * offset.y)
    let offsetUnit = new mp.Vector3(offset.x / dist, offset.y / dist, 0);
    let acosA = Math.acos(offsetUnit.x);
    let asinA = Math.asin(offsetUnit.y);
    let A = (asinA >= 0) ? acosA : -acosA;
    A += (rotZ * Math.PI / 180);
    newPos.x += Math.cos(A) * dist;
    newPos.y += Math.sin(A) * dist;

    return newPos;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {global.Keys = {
    Key_LBUTTON: 0x01,
    Key_RBUTTON: 0x02,
    Key_CANCEL: 0x03,
    Key_MBUTTON: 0x04,
    Key_XBUTTON1: 0x05,
    Key_XBUTTON2: 0x06,
    Key_BACK: 0x08,
    Key_TAB: 0x09,
    Key_CLEAR: 0x0C,
    Key_RETURN: 0x0D,
    Key_SHIFT: 0x10,
    Key_CONTROL: 0x11,
    Key_MENU: 0x12,
    Key_ALT: 0x12,
    Key_PAUSE: 0x13,
    Key_CAPITAL: 0x14,
    Key_KANA: 0x15,
    Key_JUNJA: 0x17,
    Key_FINAL: 0x18,
    Key_HANJA: 0x19,
    Key_ESCAPE: 0x1B,
    Key_CONVERT: 0x1C,
    Key_NONCONVERT: 0x1D,
    Key_ACCEPT: 0x1E,
    Key_MODECHANGE: 0x1F,
    Key_SPACE: 0x20,
    Key_PRIOR: 0x21,
    Key_NEXT: 0x22,
    Key_END: 0x23,
    Key_HOME: 0x24,
    Key_LEFT: 0x25,
    Key_UP: 0x26,
    Key_RIGHT: 0x27,
    Key_DOWN: 0x28,
    Key_SELECT: 0x29,
    Key_PRINT: 0x2A,
    Key_EXECUTE: 0x2B,
    Key_SNAPSHOT: 0x2C,
    Key_INSERT: 0x2D,
    Key_DELETE: 0x2E,
    Key_HELP: 0x2F,
    Key_0: 0x30,
    Key_1: 0x31,
    Key_2: 0x32,
    Key_3: 0x33,
    Key_4: 0x34,
    Key_5: 0x35,
    Key_6: 0x36,
    Key_7: 0x37,
    Key_8: 0x38,
    Key_9: 0x39,
    Key_A: 0x41,
    Key_B: 0x42,
    Key_C: 0x43,
    Key_D: 0x44,
    Key_E: 0x45,
    Key_F: 0x46,
    Key_G: 0x47,
    Key_H: 0x48,
    Key_I: 0x49,
    Key_J: 0x4A,
    Key_K: 0x4B,
    Key_L: 0x4C,
    Key_M: 0x4D,
    Key_N: 0x4E,
    Key_O: 0x4F,
    Key_P: 0x50,
    Key_Q: 0x51,
    Key_R: 0x52,
    Key_S: 0x53,
    Key_T: 0x54,
    Key_U: 0x55,
    Key_V: 0x56,
    Key_W: 0x57,
    Key_X: 0x58,
    Key_Y: 0x59,
    Key_Z: 0x5A,
    Key_LWIN: 0x5B,
    Key_RWIN: 0x5C,
    Key_APPS: 0x5D,
    Key_SLEEP: 0x5F,
    Key_NUMPAD0: 0x60,
    Key_NUMPAD1: 0x61,
    Key_NUMPAD2: 0x62,
    Key_NUMPAD3: 0x63,
    Key_NUMPAD4: 0x64,
    Key_NUMPAD5: 0x65,
    Key_NUMPAD6: 0x66,
    Key_NUMPAD7: 0x67,
    Key_NUMPAD8: 0x68,
    Key_NUMPAD9: 0x69,
    Key_MULTIPLY: 0x6A,
    Key_ADD: 0x6B,
    Key_SEPARATOR: 0x6C,
    Key_SUBTRACT: 0x6D,
    Key_DECIMAL: 0x6E,
    Key_DIVIDE: 0x6F,
    Key_F1: 0x70,
    Key_F2: 0x71,
    Key_F3: 0x72,
    Key_F4: 0x73,
    Key_F5: 0x74,
    Key_F6: 0x75,
    Key_F7: 0x76,
    Key_F8: 0x77,
    Key_F9: 0x78,
    Key_F10: 0x79,
    Key_F11: 0x7A,
    Key_F12: 0x7B,
    Key_F13: 0x7C,
    Key_F14: 0x7D,
    Key_F15: 0x7E,
    Key_F16: 0x7F,
    Key_F17: 0x80,
    Key_F18: 0x81,
    Key_F19: 0x82,
    Key_F20: 0x83,
    Key_F21: 0x84,
    Key_F22: 0x85,
    Key_F23: 0x86,
    Key_F24: 0x87,
    Key_NUMLOCK: 0x90,
    Key_SCROLL: 0x91,
    Key_LSHIFT: 0xA0,
    Key_RSHIFT: 0xA1,
    Key_LCONTROL: 0xA2,
    Key_RCONTROL: 0xA3,
    Key_LMENU: 0xA4,
    Key_RMENU: 0xA5,
    Key_BROWSER_BACK: 0xA6,
    Key_BROWSER_FORWARD: 0xA7,
    Key_BROWSER_REFRESH: 0xA8,
    Key_BROWSER_STOP: 0xA9,
    Key_BROWSER_SEARCH: 0xAA,
    Key_BROWSER_FAVORITES: 0xAB,
    Key_BROWSER_HOME: 0xAC,
    Key_VOLUME_MUTE: 0xAD,
    Key_VOLUME_DOWN: 0xAE,
    Key_VOLUME_UP: 0xAF,
    Key_MEDIA_NEXT_TRACK: 0xB0,
    Key_MEDIA_PREV_TRACK: 0xB1,
    Key_MEDIA_STOP: 0xB2,
    Key_MEDIA_PLAY_PAUSE: 0xB3,
    Key_LAUNCH_MAIL: 0xB4,
    Key_LAUNCH_MEDIA_SELECT: 0xB5,
    Key_LAUNCH_APP1: 0xB6,
    Key_LAUNCH_APP2: 0xB7,
    Key_OEM_1: 0xBA,
    Key_OEM_PLUS: 0xBB,
    Key_OEM_COMMA: 0xBC,
    Key_OEM_MINUS: 0xBD,
    Key_OEM_PERIOD: 0xBE,
    Key_OEM_2: 0xBF,
    Key_OEM_3: 0xC0,
    Key_OEM_4: 0xDB,
    Key_OEM_5: 0xDC,
    Key_OEM_6: 0xDD,
    Key_OEM_7: 0xDE,
    Key_OEM_8: 0xDF,
    Key_OEM_102: 0xE2,
    Key_PROCESSKEY: 0xE5,
    Key_PACKET: 0xE7,
    Key_ATTN: 0xF6,
    Key_CRSEL: 0xF7,
    Key_EXSEL: 0xF8,
    Key_EREOF: 0xF9,
    Key_PLAY: 0xFA,
    Key_ZOOM: 0xFB,
    Key_NONAME: 0xFC,
    Key_PA1: 0xFD,
    Key_OEM_CLEAR: 0xFE
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {class CustomCamera{
    constructor() {       
        this.dist = 0;
        this.point = {
            pos: null,
            offsetX: 0,
            offsetY: 0,
            offsetZ: 0
        }
        this.self = {
            pos: null,
            offsetX: 0,
            offsetY: 0,
            offsetZ: 0
        }
        this.camera = mp.cameras.new('default',new mp.Vector3(0, 10, 90) , new mp.Vector3(-95, 19, 0), 50);
    }

    update(){      
        try {
            if(this.self.pos){
                this.camera.setCoord(
                    this.self.pos.x + +this.self.offsetX,
                    this.self.pos.y + +this.self.offsetY,
                    this.self.pos.z + +this.self.offsetZ
                );
            }        
            if(this.point.pos){                
                this.camera.pointAtCoord(
                    this.point.pos.x + +this.point.offsetX,
                    this.point.pos.y + +this.point.offsetY,
                    this.point.pos.z + +this.point.offsetZ
                )
            }
        } catch (error) {
            mp.serverLog(`Update error ${error.message}`);
        }
    }

    moveAngleX(angle){
        try {
            const rad = angle * Math.PI/180;
            this.self.offsetX = this.dist * Math.cos(rad);
            this.self.offsetY = this.dist * Math.sin(rad);
        } catch (error) {            
            mp.serverLog(`moveAngleX error ${error.message}`);
        }
    }

    movePointZ(offset){
        this.point.offsetZ = offset;
    }

    moveCamX(offset){
        this.self.offsetX = offset;
    }
    
    moveCamZ(offset){
        this.self.offsetZ = offset;
    }

    setDist(dist){
        this.dist = dist;
    }

    setPoint(pos){
        this.point.pos = pos;
    }

    setPos(pos){
        this.self.pos = pos;
    }

    reserOffsets(){
        this.self.offsetX = 0;
        this.self.offsetY = 0;
        this.self.offsetZ = 0;
        this.point.offsetX = 0;
        this.point.offsetY = 0;
        this.point.offsetZ = 0;
    }

    switchOn(time, posCam, posPoint){
        if(posCam) this.setPos(posCam);
        if(posPoint) this.setPoint(posPoint);
        this.update();
        this.camera.setActive(true);
        mp.game.cam.renderScriptCams(true, (time > 0), time, true, false);
    }

    switchOff(time){
        this.reserOffsets();
        this.camera.setActive(false);
        mp.game.cam.renderScriptCams(false, true, time, true, false);
    }
}

global.customCamera = new CustomCamera();

mp.events.add("camMoveAngleX", (val)=>{
    //mp.serverLog(`camMoveAngleX ${val}`);
    global.customCamera.moveAngleX(val);
    global.customCamera.update();
});
mp.events.add("camMovePointZ", (val)=>{
    //mp.serverLog(`camMovePointZ ${val}`);
    global.customCamera.movePointZ(val);
    global.customCamera.update();
});
mp.events.add("camMoveCamZ", (val)=>{
    //mp.serverLog(`camMoveCamZ ${val}`);
    global.customCamera.moveCamZ(val);
    global.customCamera.update();
});
mp.events.add("camMoveCamX", (val)=>{
    //mp.serverLog(`camMoveCamX ${val}`);
    global.customCamera.moveCamX(val);
    global.customCamera.update();
});
mp.events.add("camSetDist", (val, angle)=>{
    //mp.serverLog(`camSetDist ${val}`);
    global.customCamera.setDist(val);
    global.customCamera.moveAngleX(angle)
    global.customCamera.update();
}); 

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {class gui{
    constructor(url) {
        this.url = url;
        this.isReady = false;
        this.browser = null;
        this.opened = false;
        this.inventoryOpened = false;
        this.curPage = "";
        this.queue = [];
        this.debug = false;
        this.censored = __webpack_require__(16);
    }

    init() {
        this.browser = mp.browsers.new(this.url);
    }
    
    ready(){
        mp.gui.chat.show(false);
        this.browser.markAsChat();
        this.isReady = true;
        if(this.queue.length > 0){
            this.queue.forEach(element => {
                this.setData(element.fnc, element.data);
            });
            this.queue = [];
        }
        mp.events.call('gui:ready');

        //global.gui.setData('hud/updateData', JSON.stringify({ name: 'id', value: 1488 })); //mp.players.local.remoteId 
        this.setData(
            'optionsMenu/setSettings', 
            JSON.stringify(mp.storage.data.mainSettings)
        );
    }

    isOpened(){
        return (!this.isReady || this.opened || this.inventoryOpened || mp.players.local.getVariable('InDeath') == true)
    }

    setOpened(toggle) {
        this.opened = toggle;
    }
    
    openPage(page) {
        if (this.isOpened()) return false;
        global.showHud(false);
        global.showCursor(true);
        this.opened = true;
        this.setData('setPage', `'${page}'`);
        this.curPage = page;
        return true;
    }

    close(){
        if (!this.isReady) return; 
        global.showHud(true);
        global.showCursor(false);
        if(this.inventoryOpened) this.closeInventory();
        this.opened = false;
        this.curPage = '';
        this.setData('setPage', '');
    }

    setData(fnc, data){
        if (!this.isReady){
            this.queue.push({fnc, data})
        } else this.browser.execute(`setData('${fnc}', ${data})`)
    }

    dispatch(fnc, data){
        if (!this.isReady){
            this.queue.push({fnc, data})
        } else this.browser.execute(`dispatch('${fnc}', ${data})`)
    }

    call(fnc){
        if(!this.browser) return;
        this.browser.execute(fnc)
    }

    playSound(name, volume = 1, loop = false){
        this.setData('sounds/play', JSON.stringify({name,volume,loop}));
    }

    playSoundLang(name, lang, volume = 1, loop = false){
        this.setData('sounds/playLang', JSON.stringify({name, lang, volume, loop}));
    }

    stopSound(){
        this.setData('sounds/stop');
    }

    pushChat(type, msg, id, from, toId = -1, to = "", friend){
        if(!this.browser) return;
        if(mp.storage.data.mainSettings.censore === true){
            msg = this.censureHandle(msg);
        }
        this.browser.execute(`chatAPI.push(${type},'${msg}',${id},'${from}',${toId},'${to}', ${friend})`);
    }

    pushChatAdvert(type, redactor, msg, from, sim){
        if(!this.browser) return;
        if(mp.storage.data.mainSettings.censore === true){
            msg = this.censureHandle(msg);
        }
        this.browser.execute(`chatAPI.push(${type}, '${redactor}', '${msg}', '${from}','${sim}', '')`);
    }

    clearChat(){
        if(!this.browser) return;
        this.browser.execute('chatAPI.clear()');
    }

    openPhone(status, cursor){
        if(status && this.isOpened()) return false;
        if(!status && !global.isPhoneOpened) return false;
        this.setData('setPhoneActive', status);
        if (status)
            this.dispatch('smartphone/messagePage/checkChatIsLoading')
        global.showCursor(cursor);
        this.opened = status;
        return true;
    }

    updateLang(lang){
        this.setData('localiazation/setLang', `'${lang}'`)
    }

    openInventory(){
        if(this.isOpened() || global.IsPlayingDM) return false
        this.inventoryOpened = true;
        global.showCursor(true);
        this.setData('inventoryEnabled', 'true');
        return true;
    }
    
    closeInventory(){
        this.inventoryOpened = false;
        global.showCursor(false);
        this.setData('inventoryEnabled', 'false');   
    }

    showChat(){
        global.chatActive = true;
        this.opened = true;
        global.showCursor(true);
        this.browser.execute("chatAPI.enable(true)");
    }
    hideChat(){
        global.chatActive = false;
        this.opened = false;
        global.showCursor(false);
        this.browser.execute("chatAPI.enable(false)");
    }
    
    censureHandle(msg){
        this.censored.forEach(word => {
            msg = msg.replace(word.reg,  word.rplc);
        });
        return msg;
    }
}

global.gui = new gui('package://gui/index.html');

mp.events.add('browserDomReady', (browser) => {
    if (global.gui && browser === global.gui.browser) {
        global.gui.ready();        
    }
});

mp.events.add('authready', () => {
    global.gui.init();
});

mp.events.add("efwd", (cal, ...args) => {
    if (global.gui.debug) {
        mp.serverLog(`${mp.players.local.name}: ${cal} ${args.toString()}`);
    }    
    mp.events.callRemote(cal, ...args);
});

mp.events.add("guiClose", () => {
    global.gui.close();
});

mp.events.add("guiPlaySound", (name) => {
    global.gui.playSound(name);
});

mp.events.add("gui:setData", (func, data) => {
    if (global.gui.debug)
        mp.serverLog(`${mp.players.local.name}: gui:setData (${func}) - ${data}`);
    global.gui.setData(func, data);
});

mp.events.add("gui:dispatch", (func, data) => {
    if (global.gui.debug)
        mp.serverLog(`${mp.players.local.name}: gui:dispatch (${func}) - ${data}`);
    global.gui.dispatch(func, data);
});

mp.events.addDataHandler("InDeath", (entity, isDeath) => {
    if (entity === mp.players.local && isDeath == true){
        if(global.gui.opened)
            global.gui.close();        
    }
});

setInterval(function () {
    var street = ["AIRP", "ALAMO", "ALTA", "ARMYB", "BANHAMC", "BANNING", "BEACH", "BHAMCA", "BRADP", "BRADT", "BURTON", "CALAFB", "CANNY", "CCREAK", "CHAMH", "CHIL", "CHU", "CMSW", "CYPRE", "DAVIS", "DELBE", "DELPE", "DELSOL", "DESRT", "DOWNT", "DTVINE", "EAST_V", "EBURO", "ELGORL", "ELYSIAN", "GALFISH", "golf", "GRAPES", "GREATC", "HARMO", "HAWICK", "HORS", "HUMLAB", "JAIL", "KOREAT", "LACT", "LAGO", "LDAM", "LEGSQU", "LMESA", "LOSPUER", "MIRR", "MORN", "MOVIE", "MTCHIL", "MTGORDO", "MTJOSE", "MURRI", "NCHU", "NOOSE", "OCEANA", "PALCOV", "PALETO", "PALFOR", "PALHIGH", "PALMPOW", "PBLUFF", "PBOX", "PROCOB", "RANCHO", "RGLEN", "RICHM", "ROCKF", "RTRAK", "SanAnd", "SANCHIA", "SANDY", "SKID", "SLAB", "STAD", "STRAW", "TATAMO", "TERMINA", "TEXTI", "TONGVAH", "TONGVAV", "VCANA", "VESP", "VINE", "WINDF", "WVINE", "ZANCUDO", "ZP_ORT", "ZQ_UAR", "BAYTRE", "OBSERV"],
        zones = mp.game.zone.getNameOfZone(localplayer.position.x, localplayer.position.y, localplayer.position.z),
        district = street.includes(zones) ? ["Los Santos International Airport", "Alamo Sea", "Alta", "Fort Zancudo", "Banham Canyon Dr", "Banning", "Vespucci Beach", "Banham Canyon", "Braddock Pass", "Braddock Tunnel", "Burton", "Calafia Bridge", "Raton Canyon", "Cassidy Creek", "Chamberlain Hills", "Vinewood Hills", "Chumash", "Chiliad Mountain State Wilderness", "Cypress Flats", "Davis", "Del Perro Beach", "Del Perro", "La Puerta", "Grand Senora Desert", "Downtown", "Downtown Vinewood", "East Vinewood", "El Burro Heights", "El Gordo Lighthouse", "Elysian Island", "Galilee", "GWC and Golfing Society", "Grapeseed", "Great Chaparral", "Harmony", "Hawick", "Vinewood Racetrack", "Humane Labs and Research", "Bolingbroke Penitentiary", "Little Seoul", "Land Act Reservoir", "Lago Zancudo", "Land Act Dam", "Legion Square", "La Mesa", "La Puerta", "Mirror Park", "Morningwood", "Richards Majestic", "Mount Chiliad", "Mount Gordo", "Mount Josiah", "Murrieta Heights", "North Chumash", "N.O.O.S.E", "Pacific Ocean", "Paleto Cove", "Paleto Bay", "Paleto Forest", "Palomino Highlands", "Palmer-Taylor Power Station", "Pacific Bluffs", "Pillbox Hill", "Procopio Beach", "Rancho", "Richman Glen", "Richman", "Rockford Hills", "Redwood Lights Track", "San Andreas", "San Chianski Mountain Range", "Sandy Shores", "Mission Row", "Stab City", "Maze Bank Arena", "Strawberry", "Tataviam Mountains", "Terminal", "Textile City", "Tongva Hills", "Tongva Valley", "Vespucci Canals", "Vespucci", "Vinewood", "Ron Alternates Wind Farm", "West Vinewood", "Zancudo River", "Port of South Los Santos", "Davis Quartz", "Baytree Canyon", "Galileo Observatory"][street.indexOf(zones)] : zones,
        //"",
    street2 = mp.game.pathfind.getStreetNameAtCoord(localplayer.position.x, localplayer.position.y, localplayer.position.z, 0, 0),
        street_hash = mp.game.ui.getStreetNameFromHashKey(street2.streetName);

    // var playerHeadingDegrees = 360.0 - mp.players.local.getHeading();
    global.gui.setData('hud/updateMap', JSON.stringify({title: district, descr: street_hash}));
}, 1000);

// function degreesToIntercardinalDirection(dgr) {
// 	dgr %= 360.0;

// 	if (dgr >= 0.0 && dgr < 22.5 || dgr >= 337.5) return 'N';
// 	if (dgr >= 22.5 && dgr < 67.5) return 'NE';
// 	if (dgr >= 67.5 && dgr < 112.5) return 'E';
// 	if (dgr >= 157.5 && dgr < 202.5) return 'S';
// 	if (dgr >= 112.5 && dgr < 157.5) return 'SE';
// 	if (dgr >= 202.5 && dgr < 247.5 || dgr > -112.5 && dgr <= -65.7) return 'SW';
// 	if (dgr >= 247.5 && dgr <= 292.5 || dgr > -65.7 && dgr <= -22.5) return 'W';
// 	if (dgr >= 292.5 && dgr < 337.5 || dgr > -22.5 && dgr <= 0) return 'NW';
// }
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 16 */
/***/ (function(module, exports) {


const words = [
    "ниг","нег","пиратка","пидр","пидор","педик","педрил","гомик","гей","хохол","хач","талибан","игил","гидра","даун","аутист","пизд","конч","инцел","девствен","симп","nig","neg","piratka","pidr","pido","pedik","pedr","gomik","gey","hohol","hohl","hach","talib","igil","gidra","daun","autist","pizda","koncha","incel","devstven","simp","Пидар", "Пидарас", "Педарас", "пидараз", "pidaras", "pidaraz", "churka", "nacist", "nacik", "нацист", "hidjap", "холокост", "holocaust", "schutzstaffeln", "гитлер", "цыган", "cigan", "gipsy", "хидж", "хедж","hidj","hedj", "pussy"
]

const rplcSymbol = "**************************************************";

function build(){
    var result = [];

    words.forEach(word => {
        const reg = new RegExp(word, 'gi');
        const rplc = rplcSymbol.substring(0, word.length);
        result.push({reg , rplc});
    });
    return result;
}

module.exports = build();

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const KeyAction = __webpack_require__(18);
global.keyActions = {};
const listActions = [];
let newActions = [
    {
        name: "reduce",
        key: 53,
    }
];
if(mp.storage.data.actions === undefined){
    mp.storage.data.actions = {
        "microphone": 66,
        "inventory": 9,
        "belt": 74,
        "lock": 76,
        "engine": 50,
        //"reports": new KeyAction(117),
        //"lock": new KeyAction(76)
    }
    mp.storage.flush();
}
newActions.forEach(action => {
    if (!mp.storage.data.actions[action.name])
        mp.storage.data.actions[action.name] = action.key
});
mp.storage.flush();

for (const key in mp.storage.data.actions) {
    const val = mp.storage.data.actions[key];
    global.keyActions[key] = new KeyAction(val);
    listActions.push(global.keyActions[key]);
    global.gui.setData("optionsMenu/updateActionKey", JSON.stringify({key, val}));
}

mp.events.add("cef:mmenu:action:key:bind", (key, val)=>{
    if(!val || val == "" || mp.storage.data.actions[key] === undefined || mp.storage.data.actions[key] == val) return;
    mp.storage.data.actions[key] = val;
    mp.storage.flush();
    global.keyActions[key].changeKey(val);
    global.gui.setData("optionsMenu/updateActionKey", JSON.stringify({key, val}));
})

mp.events.add("render", ()=>{
    listActions.forEach(action => {
        action.tick()
    });
})
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {module.exports = class KeyAction{
    constructor(keyCode) {
        this.keyCode = keyCode;
        this.actionsOnDown = [];
        this.actionsOnUp = [];
        this.pressed = false;
    }

    tick(){
        if(this.pressed){
            if(mp.keys.isUp(this.keyCode)){
                this.actionsOnUp.forEach(callback => {
                    callback();
                });
                this.pressed = false;
            }
            
        }else{
            if(mp.keys.isDown(this.keyCode)){
                this.actionsOnDown.forEach(callback => {
                    callback();
                });
                this.pressed = true;
            }            
        }
    }

    onPress(){
        try {
            if(this.pressed) return;
            this.actionsOnDown.forEach((callback) => {
                callback();
            });
            this.pressed = true;
        } catch (e) {
            if(global.sendException)mp.serverLog(`action.onPress: ${e.name }\n${e.message}\n${e.stack}`);
        }
    } 

    onUp(){
        try {
            this.actionsOnUp.forEach(callback => callback());
            this.pressed = false;
        } catch (e) {
            if(global.sendException)mp.serverLog(`action.onUp: ${e.name }\n${e.message}\n${e.stack}`);
        }
        
    }

    changeKey(keyCode){
        this.keyCode = keyCode;
    }

    subscribe(action, isDown = false){        
        const actions = isDown ? this.actionsOnDown : this.actionsOnUp;
        actions.push(action);
    }

    unsubscribe(action, isDown = false){
        const actions = isDown ? this.actionsOnDown : this.actionsOnUp;
        const index = actions.findIndex(a=>a === action);
        if(index !== -1) actions.splice(index, 1);
    }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
mp.events.add('chat:api:action',(type, msg, id, idTo)=>{
    try
	{      
        if(global.mediaMute && (type === 0 || type === 1 ||type === 2 ||type === 10)) return;
		
        const player = mp.players.atRemoteId(id);
        if(mp.players.exists(player) && mp.storage.data.mainSettings.muteLowLevel)
		{
            const lvl = global.getVariable(player, 'lvl', 0);
            if(lvl < mp.storage.data.mainSettings.muteLowLevelValue) return;
        }
        
		const playerTo = mp.players.atRemoteId(idTo);
        const fromText = player ? player.name.replace('_', ' ') : '';
        const toText = playerTo ? playerTo.name.replace('_', ' ') : '';
        const isFriend = global.iKnowThisPlayer(player);

        if(type === 10 || type === 11) 
		{
			global.gui.pushChat(type, msg, id, fromText, global.getVariable(player, 'C_ID', 0), toText, isFriend);
			return;
		}
		
		const toStaticId = playerTo ? global.getVariable(playerTo, 'C_ID', idTo) : idTo;
        global.gui.pushChat(type, msg, global.getVariable(player, 'C_ID', 0), fromText, toStaticId, toText, isFriend);

    } catch (e) {
        if(global.sendException) mp.serverLog(`chat:api:action: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

mp.events.add('chat:api:advert',(type, redactorId, msg, from, sim)=>{
    try{ 
        if(global.mediaMute) return;
        let redactor = mp.players.atRemoteId(redactorId);
        global.gui.pushChatAdvert(type, redactor ? redactor.name.replace('_', ' ') : 'Unknown', msg, from, sim);
    } catch (e) {
        if(global.sendException) mp.serverLog(`chat:api:advert: ${e.name}\n${e.message}\n${e.stack}`);
    }
});
global.mediaMute = false;
mp.events.add("media:mute:state", (state)=>{
    global.mediaMute = state;
    if(global.mediaMute)
	{
        global.gui.clearChat();
        mp.events.call('notify', 4, 9, "media:mute:on:self", 3000);
    }
	else mp.events.call('notify', 4, 9, "media:mute:off:self", 3000);
})

mp.events.add('chat:api:clear',()=>{
    global.gui.clearChat();
});

mp.keys.bind(global.Keys.Key_T, false, ()=>{
    if(global.chatActive || global.gui.opened) return;
    global.gui.showChat();
});

mp.events.add("cahat:api:disable",()=>{
    global.chatActive = false;
    global.gui.close();
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
// if(global.sendException)
//     mp.game.enableInvokeDebug();

global.showCursor(true);
mp.game.gameplay.disableAutomaticRespawn(true);
mp.game.gameplay.ignoreNextRestart(true);
mp.game.gameplay.setFadeInAfterDeathArrest(false);
mp.game.gameplay.setFadeOutAfterDeath(false);
mp.game.gameplay.setFadeInAfterLoad(false);

function showGameHud(show) {
    mp.game.ui.displayAreaName(show);
    mp.game.ui.displayRadar(show);
    mp.game.ui.displayHud(show);
    mp.gui.chat.show(show);
}

global.showHud = (show)=>{
    if(show){
        global.gui.setData('hud/showHud', mp.storage.data.mainSettings.showHud == true ? 'true' : 'false');
        showGameHud(mp.storage.data.mainSettings.showMiniMap == true);
    }else{
            global.gui.setData('hud/showHud', 'false');
            showGameHud(false);
    }
}

mp.peds.newValid = (model, position, heading, dimension) => {
    const modelHash = typeof(model) === 'string' ?  mp.game.joaat(model) : model;

    if (!mp.game.streaming.isModelValid(modelHash)){
        if(global.sendException) mp.serverLog(`Bad ped model: ${model}/${modelHash}`);
        return null;
    }
    
    const ped = mp.peds.new(modelHash, position, heading, dimension)
    for (let index = 0; (!ped.doesExist() && ped.handle !== 0 && index < 250); index++) {
        mp.game.wait(0);        
    }
    return ped;
};

function checkPedsLoaded(){
    if(global.bizPedLoaded && global.clientPedLoaded && global.gui.isReady){
        global.localplayer.freezePosition(true);        
        mp.players.local.setCollision(true,true);
        clearInterval(pedLoadChecker);
        global.gui.close();
        global.gui.dispatch("localization/loadLangs");
        // if(mp.storage.data.soundOnStart === undefined){
        //     mp.storage.data.soundOnStart = true;
        //     mp.storage.flush();    
        // }
        // if(mp.storage.data.soundOnStart)
        //     global.gui.playSound("auth_bg", .1, true);  

        // global.gui.setData("auth/updateSoundState", mp.storage.data.soundOnStart);
        if(mp.storage.data.language === undefined){
            
            global.gui.dispatch('localization/setLang', 'ru');
            //global.gui.openPage("SelectLanguage");
        }else{
            global.gui.dispatch('localization/setLang', 'ru');
            sendPlayerToAuth();
        }   
    }
}

function sendPlayerToAuth(){
    global.gui.openPage("Auth");
    let passwd = mp.storage.data.auth && mp.storage.data.auth.save ? mp.storage.data.auth.password : '';
    let login = mp.storage.data.auth && mp.storage.data.auth.save ? mp.storage.data.auth.login : '';
	let isSaved = mp.storage.data.auth && mp.storage.data.auth.save ? true : false;
	global.gui.setData("auth/setIsRememberPass", isSaved);  
    mp.events.callRemote('Auth:PlayerReady', login, passwd);
}

mp.events.add("auth:sond:switch", ()=>{
    // mp.storage.data.soundOnStart = !mp.storage.data.soundOnStart;
    mp.storage.flush();
    // if(mp.storage.data.soundOnStart)
    //     global.gui.playSound("auth_bg", .1, true); 
    // else
    //     global.gui.stopSound();
    // global.gui.setData("auth/updateSoundState", mp.storage.data.soundOnStart);
})

mp.events.add("language:save", (lang)=>{
    if(mp.storage.data.language !== lang){
        mp.storage.data.language = lang;
        mp.storage.flush();
    }
})

mp.events.add("language:next", ()=>{
    global.gui.close();
    sendPlayerToAuth();
})

mp.game.audio.setAudioFlag("DisableFlightMusic", true);
mp.game.audio.setAudioFlag("FrontendRadioDisabled", true);
mp.game.vehicle.defaultEngineBehaviour = false;
global.localplayer.farmAction = -1;

//init settings
const settingVersion = 7;
if(mp.storage.data.mainSettings === undefined){
    mp.storage.data.mainSettings = {
        noMicro: true,
        hint: false,
        showNames: true,
        showHud: true,
        voiceValue: 0,
        showMiniMap: true,
        muteLowLevel: false,
        muteLowLevelValue: 7,
        showFamilyMembers: false,
        version: settingVersion,
        trafficOff: true,
        censore: false
    }
    mp.storage.flush();
}

if(mp.storage.data.mainSettings.version !== settingVersion){
    mp.storage.data.mainSettings.version = settingVersion;
    mp.storage.data.mainSettings.trafficOff = true;
    mp.storage.flush();
}

//relations
const PlayerHash = mp.game.joaat("PLAYER");
const NonFriendlyHash = mp.game.joaat("FRIENDLY_PLAYER");
const FriendlyHash = mp.game.joaat("NON_FRIENDLY_PLAYER");
global.localplayer.setRelationshipGroupHash(PlayerHash);
mp.game.ped.addRelationshipGroup("FRIENDLY_PLAYER", 0);
mp.game.ped.addRelationshipGroup("NON_FRIENDLY_PLAYER", 0);
mp.game.ped.setRelationshipBetweenGroups(0, PlayerHash, FriendlyHash);
mp.game.ped.setRelationshipBetweenGroups(5, PlayerHash, NonFriendlyHash);
mp.game.ped.setRelationshipBetweenGroups(5, NonFriendlyHash, PlayerHash);

// LOAD ALL DEFAULT IPL'S
const ipls =[
    "hei_dlc_windows_casino",
    "bh1_47_joshhse_unburnt",
    "bh1_47_joshhse_unburnt_lod",
    "CanyonRvrShallow",
    "ch1_02_open",
    "Carwash_with_spinners",
    "sp1_10_real_interior",
    "sp1_10_real_interior_lod",
    "ferris_finale_Anim",
    "fiblobby",
    "fiblobby_lod",
    "apa_ss1_11_interior_v_rockclub_milo_",
    "hei_sm_16_interior_v_bahama_milo_",
    "hei_hw1_blimp_interior_v_comedy_milo_",
    "gr_case6_bunkerclosed",
    "EntitySet_DJ_Lighting",
    "hei_dlc_casino_door",
    "vw_dlc_casino_door",
    "vw_casino_main",
    "vw_casino_garage",
    "vw_casino_carpark",
    "vw_casino_penthouse"
];

ipls.forEach(ipl => {
    if(!mp.game.streaming.isIplActive(ipl))
        mp.game.streaming.requestIpl(ipl);
});

mp.game.streaming.removeIpl("hei_bi_hw1_13_door");


//events
let pedLoadChecker = setInterval(checkPedsLoaded, 100);

mp.events.add('gui:ready', () => global.showHud(false));

mp.events.add('svem', (pm, tm) => {
    if (!global.localplayer.isInAnyVehicle(true)) return;
    let vehc = mp.players.local.vehicle;
    vehc.setEnginePowerMultiplier(pm);
    vehc.setEngineTorqueMultiplier(tm);
});

let dmgdisabled = false;
mp.events.add('disabledmg', (toggle) => {
	if(toggle == true) {
		dmgdisabled = true;
		mp.players.forEachInStreamRange(
			(entity) => {
				if(entity != global.localplayer) entity.setRelationshipGroupHash(FriendlyHash);
			}
		);
	} else {
		dmgdisabled = false;
		mp.players.forEachInStreamRange(
			(entity) => {
				if(entity != global.localplayer) entity.setRelationshipGroupHash(NonFriendlyHash);
			}
		);
	}
});

mp.events.add('entityStreamIn', (entity) => {
    try {
        if (!entity || entity.type !== 'player' ) return;
        if(dmgdisabled == true) entity.setRelationshipGroupHash(FriendlyHash);
        else entity.setRelationshipGroupHash(NonFriendlyHash);
    } catch (e) { 
        if(global.sendException) mp.serverLog(`common.entityStreamInPlayer: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

let showRoomPedsData = 
[
	{ 
		ped: mp.peds.newValid('mp_m_freemode_01', new mp.Vector3(-130.63432, -597.8847, 37.753284), -121.75311, 0), // По середине
		gender: true,
		items: 
		[
			{
				key: 1, // Маска
				value: 8
			},
			{
				key: 3, // Торс
				value: 1
			},
			{
				key: 4, // Штаны
				value: 547
			},
			{
				key: 6, // Ботинки
				value: 530
			},
			{
				key: 8, // Undershirt
				value: 15
			},
			{
				key: 11, // Верх
				value: 500
			},
		],
		itemsColors:
		[
			{
				key: 4,
				value: 2
			}
		],
		animation: 
		{
			name: "idle_b",
			dictionary: "amb@world_human_muscle_flex@arms_in_front@idle_a",
			flag: 39
		}
	},
	{ 
		ped: mp.peds.newValid('mp_m_freemode_01', new mp.Vector3(-131.59741, -595.9171, 37.753284), -114.47082, 0),
		gender: true,
		items: 
		[
			{
				key: 1, // Маска
				value: 8
			},
			{
				key: 3, // Торс
				value: 1
			},
			{
				key: 4, // Штаны
				value: 553
			},
			{
				key: 6, // Ботинки
				value: 531
			},
			{
				key: 8, // Undershirt
				value: 15
			},
			{
				key: 11, // Верх
				value: 501
			},
		],
		itemsColors: [ ],
		animation: 
		{
			name: "mini_strip_club_idles_bouncer_go_away_go_away",
			dictionary: "anim@amb@nightclub@peds@",
			flag: 39
		}
	},
	{ 
		ped: mp.peds.newValid('mp_m_freemode_01', new mp.Vector3(-132.88054, -598.28076, 37.753284), -111.46851, 0),
		gender: true,
		items: 
		[
			{
				key: 1, // Маска
				value: 8
			},
			{
				key: 3, // Торс
				value: 1
			},
			{
				key: 4, // Штаны
				value: 554
			},
			{
				key: 6, // Ботинки
				value: 532
			},
			{
				key: 8, // Undershirt
				value: 15
			},
			{
				key: 11, // Верх
				value: 502
			},
		],
		itemsColors: [ ],
		animation: 
		{
			name: "mini_strip_club_idles_bouncer_go_away_go_away",
			dictionary: "anim@amb@nightclub@peds@",
			flag: 39
		}
	}
]

mp.events.add('entityStreamIn', (entity) =>
{
	try
	{
        if (!entity || entity.type !== 'ped' ) return;
		
		const showRoomPedData = showRoomPedsData.find(x => x.ped == entity);
		if (!showRoomPedData) return;
		
		let color;
		let itemObject;
		let itemCustomColor;
		const showRoomPed = showRoomPedData.ped;
		const showRoomPedItems = showRoomPedData.items;
		const showRoomPedItemsColors = showRoomPedData.itemsColors;
		const showRoomPedGender = showRoomPedData.gender;
		const showRoomPedAnimation = showRoomPedData.animation;
		showRoomPed.freezePosition(true);
		showRoomPed.setInvincible(true);
		showRoomPed.setProofs(true, true, true, true, true, true, true, true); 
		
		for (let item = 0; item < showRoomPedItems.length; item++)
		{
			color = 0;
			itemObject = showRoomPedItems[item];
			
			if (showRoomPedItemsColors.length > 0) 
			{
				itemCustomColor = showRoomPedItemsColors.find(x => x.key == itemObject.key);
				if (itemCustomColor) color = itemCustomColor.value;
			}
			global.setPedClothing(showRoomPed, showRoomPedGender, itemObject.key, itemObject.value, color, 0);
		}

		global.preloadAnimDictionary(`${showRoomPedAnimation.dictionary}`);
		entity.taskPlayAnim(`${showRoomPedAnimation.dictionary}`, `${showRoomPedAnimation.name}`, 8.0, 0, -1, showRoomPedAnimation.flag, 0, false, false, false);
	}
	catch (e)
	{ 
		if (!global.sendException) return;
		mp.serverLog(`common.entityStreamInPed: ${e.name}\n${e.message}\n${e.stack}`);
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(22);
__webpack_require__(23);
__webpack_require__(24);

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/*
    Animation: {
        Name: string,
        Dictionary: string,
        Flag: int
    }
*/

global.preloadAnimDictionary = (dictionary) => {
    if (!mp.game.streaming.doesAnimDictExist(dictionary)) return;
    
    mp.game.streaming.requestAnimDict(dictionary);
    for (let index = 0;(!mp.game.streaming.hasAnimDictLoaded(dictionary) && index < 250); index++) {
        mp.game.wait(0);
    }

    return;
}

const onAnimationDataChange = (entity, currentAnimation) => {
    try{
        if (entity.handle === 0 || (entity.type !== 'player' && entity.type !== 'ped')) return;
        if (!currentAnimation || currentAnimation === null) {
            if (entity._oldAnimation && entity._oldAnimation !== null) {
                const { Name, Dictionary, Flag } = entity._oldAnimation;
                if (Flag !== 39)
                    entity.stopAnimTask(`${Dictionary}`, `${Name}`, Flag);
            }

            if (!entity.isInAnyVehicle(true)) 
                entity.clearTasksImmediately();
        }else{
            currentAnimation = JSON.parse(currentAnimation);
            const { Name, Dictionary, Flag } = currentAnimation;

            preloadAnimDictionary(`${Dictionary}`);
			entity.taskPlayAnim (Dictionary, Name, 2.0, entity.handle === mp.players.local.handle ? 8 : 0, -1, Flag, 0, false, false, false);

            entity._oldAnimation = currentAnimation;
        }
        if(mp.players.local === entity){
            global.inAction = (currentAnimation !== null);
        }
    }
    catch (e) {
        if(global.sendException) mp.serverLog(`animSync.onAnimationDataChange: ${e.name}\n${e.message}\n${e.stack}`);
    }
};

mp.events.addDataHandler('animSync:animation', onAnimationDataChange);

//mood
const moods = [null, "mood_aiming_1", "mood_angry_1", "mood_drunk_1", "mood_happy_1", "mood_injured_1", "mood_stressed_1"];
function SetMood(entity, mood) {
    try {
        if (mood == null) entity.clearFacialIdleAnimOverride();
        else mp.game.invoke('0xFFC24B988B938B38', entity.handle, mood, 0);
    } catch (e) {
        if(global.sendException) mp.serverLog(`animSync.SetMood: ${e.name}\n${e.message}\n${e.stack}`);
    }
}
mp.events.addDataHandler('playermood', (player, mood) => {
    try {
        if (!player || !mp.players.exists(player)) return;
        
        SetMood(player, moods[mood]);
    } catch (e) {
        if(global.sendException) mp.serverLog(`animSync.addDataHandler: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

//walkstyles
mp.game.streaming.requestClipSet("move_m@brave");
mp.game.streaming.requestClipSet("move_m@confident");
mp.game.streaming.requestClipSet("move_m@drunk@verydrunk");
mp.game.streaming.requestClipSet("move_m@shadyped@a");
mp.game.streaming.requestClipSet("move_m@sad@a");
mp.game.streaming.requestClipSet("move_f@sexy@a");
mp.game.streaming.requestClipSet("move_ped_crouched");
mp.game.streaming.requestClipSet("move_ped_crouched_strafing");
const walkstyles = [null, "move_m@brave", "move_m@confident", "move_m@drunk@verydrunk", "move_m@shadyped@a", "move_m@sad@a", "move_f@sexy@a", "move_ped_crouched"];
function SetWalkStyle(entity, walkstyle) {
    try {
        if (walkstyle == null || walkstyle == 0) 
        {
            entity.resetMovementClipset(0.25);            
            entity.resetStrafeClipset();
        }
        else 
        {
            entity.setMovementClipset(walkstyle, 0.25);
            
            if (walkstyle === "move_ped_crouched")
                entity.setStrafeClipset("move_ped_crouched_strafing");
            else       
                entity.resetStrafeClipset();
        }
    } catch (e) {
        if(global.sendException) mp.serverLog(`animSync.SetWalkStyle: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

mp.events.addDataHandler('playerws', (player, walkstyle) => {
    try {
        if (!player || !mp.players.exists(player)) return;

        SetWalkStyle(player, walkstyles[walkstyle]);
    } catch (e) {
        if(global.sendException) mp.serverLog(`animSync.Player_SetWalkStyle: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

mp.events.add('entityStreamIn', (entity) => {
    try {
        if (!entity || entity.type !== 'player' ) return;
        onAnimationDataChange(entity, entity.getVariable('animSync:animation'));
		SetWalkStyle(entity, walkstyles[global.getVariable(entity, 'playerws', 0)]);
		SetMood(entity, moods[global.getVariable(entity, 'playermood', 0)]);		
		if (global.getVariable(entity, 'INVISIBLE', false) == true) entity.setVisible(false, false);
		else entity.setVisible(true, false);
    } catch (e) { 
        if(global.sendException) mp.serverLog(`animSync.entityStreamIn: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function requestNamedPtfxAsset(ptfxAssetName) {
    mp.game.streaming.requestNamedPtfxAsset(ptfxAssetName);
    mp.game.wait(0);
    mp.game.graphics.setPtfxAssetNextCall(ptfxAssetName);
}

mp.events.add({
    "particles:playAtPosition": (position, assetName, effectName, scale, ms) => {
        if (!global.loggedin)
            return;                
        requestNamedPtfxAsset(assetName);        
        const fxHandle = mp.game.graphics.startParticleFxLoopedAtCoord(effectName, position.x, position.y, position.z, 0, 0, 0, scale, false, false, false, true);        
        setTimeout(() => {
            mp.game.graphics.removeParticleFx(fxHandle, false);
        }, ms);
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {mp.attachments = {
	attachments: {},

	addFor: async function(entity, id)
	{
		try
		{
			if(!this.attachments)
				this.attachments = {};

			if(this.attachments.hasOwnProperty(id))
			{
				if(!entity.__attachmentObjects) 
					entity.__attachmentObjects = {};

				if(!entity.__attachmentObjects.hasOwnProperty(id))
				{
					let attInfo = this.attachments[id];

					let object = mp.objects.new(attInfo.model, entity.position, {
						dimension: -1
					});

					await global.IsLoadEntity (object);
					
					if (object && object.handle && entity && entity.handle) {

						object.attachTo(entity.handle,
							(typeof(attInfo.boneName) === 'string') ? entity.getBoneIndexByName(attInfo.boneName) : entity.getBoneIndex(attInfo.boneName),
							attInfo.offset.x, attInfo.offset.y, attInfo.offset.z, 
							attInfo.rotation.x, attInfo.rotation.y, attInfo.rotation.z, 
							false, false, false, false, 2, attInfo.fixedRot);
							
						entity.__attachmentObjects[id] = object;					
					}
					else if(mp.objects.exists(object)) 
						object.destroy();
				}
			}
		}
		catch (e) 
		{
			if(global.sendException) mp.serverLog(`static-attachments.addFor: ${e.name}\n${e.message}\n${e.stack}`);
		}
	},
	
	removeFor: function(entity, id)
	{
		try
		{
			if(!entity.__attachmentObjects)
				entity.__attachmentObjects = {};

			if(entity.__attachmentObjects.hasOwnProperty(id))
			{
				let obj = entity.__attachmentObjects[id];
				delete entity.__attachmentObjects[id];
				
				if(mp.objects.exists(obj))
				{
					obj.destroy();
				}
			}
		}
		catch (e) 
		{
			if(global.sendException) mp.serverLog(`static-attachments.removeFor: ${e.name}\n${e.message}\n${e.stack}`);
		}
	},
	
	initFor: function(entity)
	{
		try
		{
			for(let attachment of entity.__attachments)
			{
				mp.attachments.addFor(entity, attachment);
			}
		}
		catch (e) 
		{
			if(global.sendException) mp.serverLog(`static-attachments.initFor: ${e.name}\n${e.message}\n${e.stack}`);
		}
	},
	
	shutdownFor: function(entity)
	{
		try
		{
			for(let attachment in entity.__attachmentObjects)
			{
				mp.attachments.removeFor(entity, attachment);
			}
		}
		catch (e) 
		{
			if(global.sendException) mp.serverLog(`static-attachments.shutdownFor: ${e.name}\n${e.message}\n${e.stack}`);
		}
	},
	
	register: function(id, model, boneName, offset, rotation, fixedRot = true)
	{
		try
		{
			if(typeof(id) === 'string')
			{
				id = mp.game.joaat(id);
			}
			
			if(typeof(model) === 'string')
			{
				model = mp.game.joaat(model);
			}

			if(!this.attachments)
				this.attachments = {};

			if(!this.attachments.hasOwnProperty(id))
			{
				if(mp.game.streaming.isModelInCdimage(model))
				{
					this.attachments[id] = {
						id: id,
						model: model,
						offset: offset,
						rotation: rotation,
						boneName: boneName,
						fixedRot: fixedRot
					};
				}
			}
		}
		catch (e) 
		{
			if(global.sendException) mp.serverLog(`static-attachments.register: ${e.name}\n${e.message}\n${e.stack}`);
		}
	},
	
	unregister: function(id) 
	{
		try
		{
			if(typeof(id) === 'string')
			{
				id = mp.game.joaat(id);
			}

			if(!this.attachments)
				this.attachments = {};

			if(this.attachments.hasOwnProperty(id))
			{
				this.attachments[id] = undefined;
			}
		}
		catch (e) 
		{
			if(global.sendException) mp.serverLog(`static-attachments.unregister: ${e.name}\n${e.message}\n${e.stack}`);
		}
	},
	
	addLocal: function(attachmentName)
	{
		try
		{
			if(typeof(attachmentName) === 'string')
			{
				attachmentName = mp.game.joaat(attachmentName);
			}
			
			let entity = mp.players.local;
			
			if(!entity.__attachments || entity.__attachments.indexOf(attachmentName) === -1)
			{
				mp.events.callRemote("staticAttachments.Add", String (attachmentName));
			}
		}
		catch (e) 
		{
			if(global.sendException) mp.serverLog(`static-attachments.addLocal: ${e.name}\n${e.message}\n${e.stack}`);
		}
	},
	
	removeLocal: function(attachmentName)
	{
		try
		{
			if(typeof(attachmentName) === 'string')
			{
				attachmentName = mp.game.joaat(attachmentName);
			}
			
			let entity = mp.players.local;
			
			if(entity.__attachments && entity.__attachments.indexOf(attachmentName) !== -1)
			{
				mp.events.callRemote("staticAttachments.Remove", String (attachmentName));
			}
		}
		catch (e) 
		{
			if(global.sendException) mp.serverLog(`static-attachments.removeLocal: ${e.name}\n${e.message}\n${e.stack}`);
		}
	},
	
	getAttachments: function()
	{
		return Object.assign({}, this.attachments);
	}
};

mp.events.add("entityStreamIn", (entity) =>
{
	if (!entity || !entity.__attachments) return;
	
	mp.attachments.initFor(entity);
});

mp.events.add("entityStreamOut", (entity) =>
{
	if (!entity || !entity.__attachmentObjects) return;
	
	mp.attachments.shutdownFor(entity);
});


mp.events.add("onChangeDimension", (oldDim, newDim) =>
{
	try {		
		if(!mp.players.local.__attachmentObjects) return;
		
		mp.attachments.shutdownFor(mp.players.local);
		mp.attachments.initFor(mp.players.local);
		
	} catch (e) {		
		if(global.sendException) mp.serverLog(`static-attachments.entityStreamOut: ${e.name}\n${e.message}\n${e.stack}`);
	}
});

mp.events.addDataHandler("attachmentsData", (entity, data) =>
{
	try
	{
		let newAttachments = (data.length > 0) ? JSON.parse(data) : [];

		if (entity.handle !== 0) 
		{	
			let oldAttachments = entity.__attachments;	
		
			if(!oldAttachments)
			{
				oldAttachments = [];
				entity.__attachmentObjects = {};
			}
			
			for(let attachment of oldAttachments)
			{
				if(newAttachments.indexOf(attachment) === -1)
				{
					mp.attachments.removeFor(entity, attachment);
				}
			}
			
			for(let attachment of newAttachments)
			{
				if(oldAttachments.indexOf(attachment) === -1)
				{
					mp.attachments.addFor(entity, attachment);
				}
			}
		}
		entity.__attachments = newAttachments;
	} catch (e) {
		if(global.sendException) mp.serverLog(`static-attachments.attachmentsData: ${e.name}\n${e.message}\n${e.stack}`);		
	}
});

function InitAttachmentsOnJoin()
{
	let data;
	let atts;
	mp.players.forEach(player =>
	{
		data = player.getVariable("attachmentsData");
		
		if(data && data.length > 0)
		{
			atts = (data.length > 0) ? JSON.parse(data) : [];
			
			if(!atts) 
				atts = [];

			player.__attachments = atts;
			player.__attachmentObjects = {};
		}
	});
}

InitAttachmentsOnJoin();

global.IsLoadEntity = entity => new Promise(async (resolve, reject) => {
	try {
		if (entity && entity.doesExist() && entity.handle !== 0)
			return resolve(true);
        let d = 0;
		while (!entity || !entity.doesExist() || entity.handle === 0) {
            if (d > 1000) return resolve("Ошибка IsLoadEntity.");
            d++;
            await mp.game.waitAsync(10);
        }
        return resolve(true);
    } 
    catch (e) 
	{
		if (global.sendException) mp.serverLog(`static-attachments.IsLoadEntity: ${e.name}\n${e.message}\n${e.stack}`);		
		resolve();
	}
});

mp.attachments.register('Mobile', 'p_amb_phone_01', 'IK_R_Hand', new mp.Vector3(0.07, 0.035, 0.0), new mp.Vector3(110, -20, 0));
mp.attachments.register('Burger', 'prop_cs_burger_01', 'IK_R_Hand', new mp.Vector3(0.1, -0.015,  -0.07), new mp.Vector3(40, -20, 110));
mp.attachments.register('Sandwich', 'prop_sandwich_01', 'IK_R_Hand', new mp.Vector3(0.1, -0.015, -0.07), new mp.Vector3(40, -20, 110));	
mp.attachments.register('HotDog', 'prop_cs_hotdog_01', 'IK_R_Hand', new mp.Vector3(0.04, -0.015, -0.02), new mp.Vector3(10, -110, 170));
mp.attachments.register('Cuffs', 'p_cs_cuffs_02_s', 'IK_R_Hand', new mp.Vector3(-0.02, -0.063, 0.00), new mp.Vector3(75.0, 0.0, 76.0));
mp.attachments.register('SupplyBox', 'prop_box_ammo03a', 'IK_Root', new mp.Vector3(0.0, 0.36, 0.0), new mp.Vector3(0.0, 0.0, 0.0));
mp.attachments.register('RobberyBox', 'prop_box_tea01a', 'IK_Root', new mp.Vector3(0.0, 0.36, 0.0), new mp.Vector3(0.0, 0.0, 0.0));
mp.attachments.register('Tablet', 'prop_cs_tablet', 60309, new mp.Vector3(0.115, 0.001, 0.125), new mp.Vector3(-150.001, 9.99, 55.001));
mp.attachments.register('Guitar', 'prop_acc_guitar_01', 60309, new mp.Vector3(0.015, 0.001, 0.05), new mp.Vector3(-0.01, -5.009, 5));
mp.attachments.register('Microphone', 'p_ing_microphonel_01', 28422, new mp.Vector3(0.009, 0.0, 0.001), new mp.Vector3(4.989, -0.09, 0.0));
mp.attachments.register('Camera', 'prop_v_cam_01',  28422, new mp.Vector3(-0.01, 0.001, 0.001), new mp.Vector3(-0.1, 4.99, -5));
mp.attachments.register('Drink', 'ng_proc_sodacan_01a', 'IK_R_Hand', new mp.Vector3(0.07, 0.085, -0.02), new mp.Vector3(40, -100, 110));
mp.attachments.register('ball', 'w_am_baseball', 17188, new mp.Vector3(0.120, 0.010, 0.010), new mp.Vector3(5.0, 150.0, 0.0));
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const doorConfigs = __webpack_require__(26)

const doors = [];
const actionDistance = 1.3;
const drawDistance = 2;
const size = .08;

let door = null;
let lastClick = Date.now();
const spamProtectionTime = 750;

let sendingExcept = false;

function updateDoorState(doors, state){
    doors.forEach(d => {
        mp.game.object.doorControl(d.Hash, d.Position.x, d.Position.y, d.Position.z, state, 0.0, 0.0, 0.0);
    });
}

function getClothestDoor(){
    return doors.find(d=> mp.game.gameplay.getDistanceBetweenCoords(d.point.x, d.point.y, d.point.z, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, true) < drawDistance);
}

function getDistance(){
    if(!door) return -1;
    return mp.game.gameplay.getDistanceBetweenCoords(door.point.x, door.point.y, door.point.z, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, false)
}

// doorConfigs.forEach((door) =>
// {
//     updateDoorState(door.Doors, door.Locked);
//     if(door.Interract){
//         try {
//             doors.push({
//                 hash: door.Hash,
//                 name: door.Name,
//                 point: new mp.Vector3(door.ActionPoint.x, door.ActionPoint.y, door.ActionPoint.z),
//                 locked: door.Locked,               
//                 doors: door.Doors,
//                 defaultState: door.DefaultState
//             })
//         } catch (e) {
//             if(global.sendException) mp.serverLog(`doorConfigs.foreach: ${e.name}\n${e.message}\n${e.stack}`);
//         }
//     } 
// });

mp.keys.bind(global.Keys.Key_E, false, ()=>{
    if(lastClick > Date.now()) return;
    lastClick = Date.now() + spamProtectionTime;
    const distance = getDistance();
    if(distance > 0 && distance < actionDistance){
        mp.events.callRemote("doors:action:state", door.hash, !door.locked)
    }
});

mp.events.add("doors:state:set", (hash, state)=>{
    try {
        const targetDoor = doors.find(d=>d.hash === hash);
        if(targetDoor) {
            updateDoorState(targetDoor.doors, state == true);
            targetDoor.locked = (state == true);
        }
    } catch (e) {
        if(global.sendException) mp.serverLog(`doors:state:set: ${e.name}\n${e.message}\n${e.stack}`);
    }
})

mp.events.add("doors:state:sync", (states)=>{
    doorConfigs.forEach((door) =>
    {
        updateDoorState(door.Doors, door.Locked);
        if(door.Interract){
            try {
                doors.push({
                    hash: door.Hash,
                    name: door.Name,
                    point: new mp.Vector3(door.ActionPoint.x, door.ActionPoint.y, door.ActionPoint.z),
                    locked: door.Locked,               
                    doors: door.Doors,
                    defaultState: door.DefaultState
                })
            } catch (e) {
                if(global.sendException) mp.serverLog(`doorConfigs.foreach: ${e.name}\n${e.message}\n${e.stack}`);
            }
        } 
        mp.game.wait(0);
    });
    try {        
        if(!states) return;
        if(states.length > 0){
            states.forEach(hash => {        
                const targetDoor = doors.find(d=>d.hash == hash);
                if(targetDoor) {
                    targetDoor.locked = !targetDoor.defaultState;
                    updateDoorState(targetDoor.doors, targetDoor.locked);
                }
            });
        }
    } catch (e) {
        if(global.sendException) mp.serverLog(`doors:state:sync: ${e.name}\n${e.message}\n${e.stack}`);
    }
})

mp.events.add("playerCommand", (command) => {
    try {
        
	const args = command.split(/[ ]+/);
	const commandName = args[0].toLocaleLowerCase();
    const accessName = args[1];
    if(commandName === "doorcmd"){
        mp.gui.chat.push('dooracc, doorcheck, doorname');
        return
    }        
    // if(commandName === "testov0"){
    //     global.testov = 0;
    //     return
    // }
    // if(commandName === "testov1"){
    //     global.testov = 1;
    //     return
    // }
    if(!commandName || !door) return;		
	if (commandName === "dooracc"){
        if(!accessName) return;
		mp.events.callRemote("doors:access:add", door.hash, accessName);
    }
	else if(commandName === "doorcheck")
        mp.events.callRemote("doors:access:check", door.hash);
    else if(commandName === "doorname")
        mp.gui.chat.push(door.name);
    } catch (e) {
        if(global.sendException) mp.serverLog(`doors.playerCommand: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

setInterval(() => {    
    door = getClothestDoor();
}, 250);
    
if (!mp.game.graphics.hasStreamedTextureDictLoaded("mpsafecracking")) {
    mp.game.graphics.requestStreamedTextureDict("mpsafecracking", true);
}


mp.events.add("render", ()=>{
    try {
        if(door){
            const screen = mp.game.graphics.world3dToScreen2d(door.point.x, door.point.y, door.point.z);
            if(!screen) return;
            //const distace = ((drawDistance - getDistance()) * .025);
            const distace = Math.min(size / getDistance(), size);
            mp.game.graphics.drawSprite("mpsafecracking", door.locked ? "lock_closed" : "lock_open", screen.x, screen.y, distace * .6, distace, 0, 255, 255, 255, 100);
        }
    } catch (e) {
        if (global.sendException && !sendingExcept) {
            sendingExcept = true;
            mp.serverLog(`doorConfigs.foreach: ${e.name}\n${e.message}\n${e.stack}`);
        } 
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = [
  {
    "Name": "geto_home1:entry",
    "Hash": -932985069,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -13.64512,
      "y": -1441.138,
      "z": 31.04724
    },
    "Doors": [
      {
        "Position": {
          "x": -14.86892,
          "y": -1441.182,
          "z": 31.19323
        },
        "Hash": 520341586
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:stock",
    "Hash": 1716632644,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 588.228,
      "y": -8.793819,
      "z": 82.97115
    },
    "Doors": [
      {
        "Position": {
          "x": 587.2617,
          "y": -8.413556,
          "z": 82.88877
        },
        "Hash": 749848321
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:entry",
    "Hash": 1035661430,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 637.819,
      "y": 2.09473,
      "z": 82.8883
    },
    "Doors": [
      {
        "Position": {
          "x": 637.267,
          "y": 0.6447992,
          "z": 81.77871
        },
        "Hash": 1712998254
      },
      {
        "Position": {
          "x": 638.156,
          "y": 3.084809,
          "z": 81.77871
        },
        "Hash": 1712998254
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:interrogation",
    "Hash": 648516924,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 618.242,
      "y": -2.891464,
      "z": 83.40837
    },
    "Doors": [
      {
        "Position": {
          "x": 618.6752,
          "y": -1.723899,
          "z": 82.84883
        },
        "Hash": 130554926
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:relax",
    "Hash": 172717613,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 603.7998,
      "y": -3.546293,
      "z": 82.92204
    },
    "Doors": [
      {
        "Position": {
          "x": 603.491,
          "y": -4.643977,
          "z": 82.84801
        },
        "Hash": 1367486369
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:office",
    "Hash": -1941433259,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 610.3824,
      "y": -9.659199,
      "z": 82.82001
    },
    "Doors": [
      {
        "Position": {
          "x": 611.5206,
          "y": -10.08526,
          "z": 82.8485
        },
        "Hash": 1367486369
      },
      {
        "Position": {
          "x": 609.241,
          "y": -9.234158,
          "z": 82.84798
        },
        "Hash": 1367486369
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:boss",
    "Hash": -1739746400,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 561.373,
      "y": -27.78788,
      "z": 82.87099
    },
    "Doors": [
      {
        "Position": {
          "x": 561.7715,
          "y": -26.69364,
          "z": 81.74203
        },
        "Hash": 1712998254
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:entry_office_1",
    "Hash": -914491675,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 604.3372,
      "y": -23.91649,
      "z": 82.80021
    },
    "Doors": [
      {
        "Position": {
          "x": 603.196,
          "y": -23.48956,
          "z": 82.84798
        },
        "Hash": 1367486369
      },
      {
        "Position": {
          "x": 605.4756,
          "y": -24.34066,
          "z": 82.8485
        },
        "Hash": 1367486369
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:room_1",
    "Hash": -1209666760,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 589.3937,
      "y": -26.58258,
      "z": 82.78424
    },
    "Doors": [
      {
        "Position": {
          "x": 588.2429,
          "y": -26.13994,
          "z": 81.74219
        },
        "Hash": 1712998254
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:room_2",
    "Hash": -1989142963,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 579.8773,
      "y": -23.01531,
      "z": 82.77633
    },
    "Doors": [
      {
        "Position": {
          "x": 578.7088,
          "y": -22.5804,
          "z": 81.74153
        },
        "Hash": 1712998254
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:room_3",
    "Hash": 1664600541,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 571.4293,
      "y": -19.85105,
      "z": 82.796
    },
    "Doors": [
      {
        "Position": {
          "x": 570.264,
          "y": -19.42767,
          "z": 81.74071
        },
        "Hash": 1712998254
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:entry_office_2",
    "Hash": -1691051437,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 566.3691,
      "y": -9.888311,
      "z": 82.79298
    },
    "Doors": [
      {
        "Position": {
          "x": 565.2325,
          "y": -9.463183,
          "z": 82.8485
        },
        "Hash": 1367486369
      },
      {
        "Position": {
          "x": 567.5111,
          "y": -10.31388,
          "z": 82.8485
        },
        "Hash": 1367486369
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:conference_1_1",
    "Hash": -219006825,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 580.1688,
      "y": -30.27964,
      "z": 82.80132
    },
    "Doors": [
      {
        "Position": {
          "x": 581.3239,
          "y": -30.71605,
          "z": 81.74406
        },
        "Hash": 1712998254
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:conference_1_2",
    "Hash": 39671661,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 567.0071,
      "y": -25.3836,
      "z": 82.79093
    },
    "Doors": [
      {
        "Position": {
          "x": 565.855,
          "y": -24.95774,
          "z": 81.74171
        },
        "Hash": 1712998254
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:cloakroom",
    "Hash": 726966396,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 598.6998,
      "y": -17.01911,
      "z": 83.05782
    },
    "Doors": [
      {
        "Position": {
          "x": 599.0636,
          "y": -16.04956,
          "z": 82.88857
        },
        "Hash": 749848321
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:office_transition",
    "Hash": -1000378411,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 591.3605,
      "y": -5.722603,
      "z": 82.77194
    },
    "Doors": [
      {
        "Position": {
          "x": 590.9342,
          "y": -6.866064,
          "z": 82.84798
        },
        "Hash": 1367486369
      },
      {
        "Position": {
          "x": 591.7876,
          "y": -4.580454,
          "z": 82.8485
        },
        "Hash": 1367486369
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:security",
    "Hash": 929602129,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 575.701,
      "y": -4.08672,
      "z": 83.11169
    },
    "Doors": [
      {
        "Position": {
          "x": 574.7305,
          "y": -3.733751,
          "z": 82.88879
        },
        "Hash": 749848321
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:class",
    "Hash": 553501767,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 587.6337,
      "y": 4.064736,
      "z": 83.01062
    },
    "Doors": [
      {
        "Position": {
          "x": 588.5959,
          "y": 3.66887,
          "z": 82.88898
        },
        "Hash": 749848321
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:kpz_transition_1",
    "Hash": 632430863,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 569.1747,
      "y": 7.466656,
      "z": 82.79314
    },
    "Doors": [
      {
        "Position": {
          "x": 568.7545,
          "y": 6.32374,
          "z": 82.8485
        },
        "Hash": 1367486369
      },
      {
        "Position": {
          "x": 569.605,
          "y": 8.60177,
          "z": 82.8485
        },
        "Hash": 1367486369
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:kpz_transition_2",
    "Hash": 2030127000,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 555.8804,
      "y": 6.767722,
      "z": 82.79609
    },
    "Doors": [
      {
        "Position": {
          "x": 555.4594,
          "y": 5.62534,
          "z": 82.8485
        },
        "Hash": 1367486369
      },
      {
        "Position": {
          "x": 556.3099,
          "y": 7.90337,
          "z": 82.8485
        },
        "Hash": 1367486369
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:conference_2",
    "Hash": -63316822,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 550.356,
      "y": -7.734417,
      "z": 82.76962
    },
    "Doors": [
      {
        "Position": {
          "x": 550.7803,
          "y": -6.593941,
          "z": 82.8485
        },
        "Hash": 1367486369
      },
      {
        "Position": {
          "x": 549.9288,
          "y": -8.874659,
          "z": 82.8485
        },
        "Hash": 1367486369
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:shooting_range",
    "Hash": -1809482551,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 546.0627,
      "y": -9.585775,
      "z": 83.07955
    },
    "Doors": [
      {
        "Position": {
          "x": 545.1747,
          "y": -9.058297,
          "z": 82.89233
        },
        "Hash": 749848321
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:shower",
    "Hash": 1538258826,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 542.633,
      "y": 2.233013,
      "z": 83.0816
    },
    "Doors": [
      {
        "Position": {
          "x": 542.6883,
          "y": 2.333819,
          "z": 82.84774
        },
        "Hash": 1302096524
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:restroom",
    "Hash": -2025895820,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 546.3307,
      "y": 12.12834,
      "z": 82.86761
    },
    "Doors": [
      {
        "Position": {
          "x": 546.3758,
          "y": 12.21277,
          "z": 82.84836
        },
        "Hash": 1302096524
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:cloakroom",
    "Hash": 255788543,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 322.1155,
      "y": -590.9471,
      "z": 43.1331
    },
    "Doors": [
      {
        "Position": {
          "x": 323.1802,
          "y": -591.3309,
          "z": 43.24577
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:entry",
    "Hash": 57277797,
    "Locked": false,
    "DefaultState": false,
    "Interract": true,
    "ActionPoint": {
      "x": 299.5629,
      "y": -584.7557,
      "z": 43.45903
    },
    "Doors": [
      {
        "Position": {
          "x": 299.9657,
          "y": -583.6624,
          "z": 42.25973
        },
        "Hash": 771263497
      },
      {
        "Position": {
          "x": 299.1628,
          "y": -585.8682,
          "z": 42.25973
        },
        "Hash": 160613178
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:left_corridor_left_1",
    "Hash": -571470010,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 311.3285,
      "y": -568.483,
      "z": 43.2071
    },
    "Doors": [
      {
        "Position": {
          "x": 312.3786,
          "y": -568.8623,
          "z": 43.24121
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:left_corridor_left_2",
    "Hash": 555455900,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 320.3877,
      "y": -572.6398,
      "z": 43.19053
    },
    "Doors": [
      {
        "Position": {
          "x": 319.3586,
          "y": -572.2745,
          "z": 43.25445
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:left_corridor_left_3",
    "Hash": -93632452,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 327.5016,
      "y": -575.1868,
      "z": 43.21661
    },
    "Doors": [
      {
        "Position": {
          "x": 326.3764,
          "y": -574.7646,
          "z": 43.24855
        },
        "Hash": 1639164763
      },
      {
        "Position": {
          "x": 328.6354,
          "y": -575.5869,
          "z": 43.24855
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:left_corridor_left_4",
    "Hash": -387242696,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 340.0043,
      "y": -579.7473,
      "z": 43.22858
    },
    "Doors": [
      {
        "Position": {
          "x": 338.8793,
          "y": -579.3412,
          "z": 43.24121
        },
        "Hash": 1639164763
      },
      {
        "Position": {
          "x": 341.1366,
          "y": -580.1628,
          "z": 43.24121
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:left_corridor_transition",
    "Hash": -1363551848,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 346.205,
      "y": -585.0967,
      "z": 43.23907
    },
    "Doors": [
      {
        "Position": {
          "x": 346.6172,
          "y": -583.9647,
          "z": 43.26465
        },
        "Hash": -1821777087
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:left_corridor_left_5",
    "Hash": -1034364904,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 351.0147,
      "y": -583.7668,
      "z": 43.14777
    },
    "Doors": [
      {
        "Position": {
          "x": 349.9863,
          "y": -583.3708,
          "z": 43.25128
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:left_corridor_left_6",
    "Hash": 224587303,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 355.6556,
      "y": -585.4288,
      "z": 43.1795
    },
    "Doors": [
      {
        "Position": {
          "x": 356.6943,
          "y": -585.7977,
          "z": 43.24121
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:left_corridor_right_1",
    "Hash": -812119609,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 325.439,
      "y": -579.1672,
      "z": 43.21636
    },
    "Doors": [
      {
        "Position": {
          "x": 324.3214,
          "y": -578.731,
          "z": 43.24121
        },
        "Hash": 1639164763
      },
      {
        "Position": {
          "x": 326.5772,
          "y": -579.5521,
          "z": 43.24121
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:left_corridor_right_2",
    "Hash": 1840530933,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 342.6181,
      "y": -587.55,
      "z": 43.20559
    },
    "Doors": [
      {
        "Position": {
          "x": 343.6481,
          "y": -587.8959,
          "z": 43.24121
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:left_corridor_right_3",
    "Hash": 652916835,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 350.1634,
      "y": -592.791,
      "z": 43.22066
    },
    "Doors": [
      {
        "Position": {
          "x": 351.2892,
          "y": -593.207,
          "z": 43.24386
        },
        "Hash": 1639164763
      },
      {
        "Position": {
          "x": 349.0333,
          "y": -592.3859,
          "z": 43.24386
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:left_corridor_right_4",
    "Hash": 1273168467,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 359.7911,
      "y": -596.2996,
      "z": 43.22646
    },
    "Doors": [
      {
        "Position": {
          "x": 358.6659,
          "y": -595.8918,
          "z": 43.24293
        },
        "Hash": 1639164763
      },
      {
        "Position": {
          "x": 360.9177,
          "y": -596.7115,
          "z": 43.24293
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:right_corridor_left_1",
    "Hash": 1874628585,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 313.0865,
      "y": -582.3988,
      "z": 43.22848
    },
    "Doors": [
      {
        "Position": {
          "x": 311.9606,
          "y": -581.9913,
          "z": 43.24121
        },
        "Hash": 1639164763
      },
      {
        "Position": {
          "x": 314.2182,
          "y": -582.813,
          "z": 43.24121
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:right_corridor_right_2",
    "Hash": -2042219849,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 329.8716,
      "y": -593.7874,
      "z": 43.21136
    },
    "Doors": [
      {
        "Position": {
          "x": 330.9204,
          "y": -594.1481,
          "z": 43.24145
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:right_1",
    "Hash": 1235980365,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 310.3459,
      "y": -590.8871,
      "z": 43.25626
    },
    "Doors": [
      {
        "Position": {
          "x": 309.9731,
          "y": -591.9142,
          "z": 43.25626
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:right_2",
    "Hash": -858909036,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 307.4112,
      "y": -598.944,
      "z": 43.16924
    },
    "Doors": [
      {
        "Position": {
          "x": 307.7924,
          "y": -597.9055,
          "z": 43.25523
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "fib:parking:door",
    "Hash": 1318264412,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 183.7265,
      "y": -724.3046,
      "z": 34.29744
    },
    "Doors": [
      {
        "Position": {
          "x": 184.1353,
          "y": -723.1947,
          "z": 34.14559
        },
        "Hash": -1204251591
      }
    ],
    "Access": null
  },
  {
    "Name": "fib:parking:gate",
    "Hash": -709579851,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 84.44587,
      "y": -693.205,
      "z": 31.98824
    },
    "Doors": [
      {
        "Position": {
          "x": 57.02479,
          "y": -690.6066,
          "z": 30.66128
        },
        "Hash": -1603817716
      },
      {
        "Position": {
          "x": 86.3513,
          "y": -688.002,
          "z": 30.88934
        },
        "Hash": -1603817716
      }
    ],
    "Access": null
  },
  {
    "Name": "fib:office:rightdoor",
    "Hash": 1020815105,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 127.1263,
      "y": -765.0555,
      "z": 242.753
    },
    "Doors": [
      {
        "Position": {
          "x": 127.2092,
          "y": -764.6935,
          "z": 242.302
        },
        "Hash": -1821777087
      }
    ],
    "Access": null
  },
  {
    "Name": "fib:office:leftdoor",
    "Hash": 1320527386,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 139.0332,
      "y": -767.2325,
      "z": 242.7385
    },
    "Doors": [
      {
        "Position": {
          "x": 138.5112,
          "y": -768.8054,
          "z": 242.3022
        },
        "Hash": -1821777087
      }
    ],
    "Access": null
  },
  {
    "Name": "army:tower:entry",
    "Hash": -478289659,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -2342.868,
      "y": 3266.498,
      "z": 32.83969
    },
    "Doors": [
      {
        "Position": {
          "x": -2343.531,
          "y": 3265.371,
          "z": 32.95998
        },
        "Hash": -1421582160
      },
      {
        "Position": {
          "x": -2342.231,
          "y": 3267.624,
          "z": 32.95998
        },
        "Hash": 1248599813
      }
    ],
    "Access": null
  },
  {
    "Name": "vineyard:house:1",
    "Hash": -517391230,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1886.398,
      "y": 2050.876,
      "z": 141.2531
    },
    "Doors": [
      {
        "Position": {
          "x": -1887.44,
          "y": 2051.249,
          "z": 141.2503
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -1885.365,
          "y": 2050.494,
          "z": 141.2503
        },
        "Hash": 1245831483
      }
    ],
    "Access": null
  },
  {
    "Name": "vineyard:house:2",
    "Hash": -189832306,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1860.507,
      "y": 2054.098,
      "z": 141.282
    },
    "Doors": [
      {
        "Position": {
          "x": -1861.611,
          "y": 2054.107,
          "z": 141.2811
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -1859.402,
          "y": 2054.107,
          "z": 141.2811
        },
        "Hash": 1245831483
      }
    ],
    "Access": null
  },
  {
    "Name": "vineyard:house:3",
    "Hash": 1031501093,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1857.114,
      "y": 2058.848,
      "z": 141.2857
    },
    "Doors": [
      {
        "Position": {
          "x": -1857.124,
          "y": 2057.742,
          "z": 141.2811
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -1857.124,
          "y": 2059.95,
          "z": 141.2811
        },
        "Hash": 1245831483
      }
    ],
    "Access": null
  },
  {
    "Name": "vineyard:house:4",
    "Hash": 792615083,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1874.462,
      "y": 2069.604,
      "z": 141.2611
    },
    "Doors": [
      {
        "Position": {
          "x": -1873.424,
          "y": 2069.229,
          "z": 141.2522
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -1875.5,
          "y": 2069.984,
          "z": 141.2522
        },
        "Hash": 1245831483
      }
    ],
    "Access": null
  },
  {
    "Name": "vineyard:house:5",
    "Hash": -1555808111,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1886.131,
      "y": 2073.847,
      "z": 141.2618
    },
    "Doors": [
      {
        "Position": {
          "x": -1885.093,
          "y": 2073.476,
          "z": 141.2522
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -1887.168,
          "y": 2074.231,
          "z": 141.2522
        },
        "Hash": 1245831483
      }
    ],
    "Access": null
  },
  {
    "Name": "vineyard:house:6",
    "Hash": -1861870571,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1893.827,
      "y": 2075.151,
      "z": 141.2565
    },
    "Doors": [
      {
        "Position": {
          "x": -1892.981,
          "y": 2074.439,
          "z": 141.2522
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -1894.673,
          "y": 2075.859,
          "z": 141.2522
        },
        "Hash": 1245831483
      }
    ],
    "Access": null
  },
  {
    "Name": "vineyard:house:7",
    "Hash": 1211763326,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1908.743,
      "y": 2082.245,
      "z": 140.6796
    },
    "Doors": [
      {
        "Position": {
          "x": -1908.036,
          "y": 2083.09,
          "z": 140.6749
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -1909.455,
          "y": 2081.399,
          "z": 140.6749
        },
        "Hash": 1245831483
      }
    ],
    "Access": null
  },
  {
    "Name": "vineyard:house:8",
    "Hash": 1441998320,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1911.286,
      "y": 2074.833,
      "z": 140.6834
    },
    "Doors": [
      {
        "Position": {
          "x": -1912.13,
          "y": 2075.536,
          "z": 140.6751
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -1910.439,
          "y": 2074.117,
          "z": 140.6751
        },
        "Hash": 1245831483
      }
    ],
    "Access": null
  },
  {
    "Name": "vineyard:house:9",
    "Hash": -31590845,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1908.717,
      "y": 2072.667,
      "z": 140.6817
    },
    "Doors": [
      {
        "Position": {
          "x": -1909.557,
          "y": 2073.377,
          "z": 140.6751
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -1907.865,
          "y": 2071.958,
          "z": 140.6751
        },
        "Hash": 1245831483
      }
    ],
    "Access": null
  },
  {
    "Name": "vineyard:house:10",
    "Hash": 681061422,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1889.044,
      "y": 2051.835,
      "z": 141.26
    },
    "Doors": [
      {
        "Position": {
          "x": -1890.086,
          "y": 2052.212,
          "z": 141.2503
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -1888.011,
          "y": 2051.457,
          "z": 141.2503
        },
        "Hash": 1245831483
      }
    ],
    "Access": null
  },
  {
    "Name": "vineyard:stock",
    "Hash": 1433011655,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1888.8,
      "y": 2068.929,
      "z": 133.854
    },
    "Doors": [
      {
        "Position": {
          "x": -1887.906,
          "y": 2068.252,
          "z": 133.8203
        },
        "Hash": 458025182
      }
    ],
    "Access": null
  },
  {
    "Name": "vineyard:garage",
    "Hash": -2000680454,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1925.399,
      "y": 2050.64,
      "z": 141.6573
    },
    "Doors": [
      {
        "Position": {
          "x": -1927.484,
          "y": 2042.257,
          "z": 141.5762
        },
        "Hash": -1020056259
      },
      {
        "Position": {
          "x": -1925.96,
          "y": 2048.227,
          "z": 141.5707
        },
        "Hash": -1020056259
      },
      {
        "Position": {
          "x": -1925.96,
          "y": 2048.227,
          "z": 141.5707
        },
        "Hash": -1020056259
      }
    ],
    "Access": null
  },
  {
    "Name": "ranch:house:1",
    "Hash": -209772473,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1395.931,
      "y": 1141.803,
      "z": 114.7408
    },
    "Doors": [
      {
        "Position": {
          "x": 1395.92,
          "y": 1142.904,
          "z": 114.7902
        },
        "Hash": 1504256620
      },
      {
        "Position": {
          "x": 1395.92,
          "y": 1140.705,
          "z": 114.7902
        },
        "Hash": 262671971
      }
    ],
    "Access": null
  },
  {
    "Name": "ranch:house:2",
    "Hash": 1359731535,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1390.655,
      "y": 1132.22,
      "z": 114.3039
    },
    "Doors": [
      {
        "Position": {
          "x": 1390.666,
          "y": 1133.317,
          "z": 114.4808
        },
        "Hash": -350298399
      },
      {
        "Position": {
          "x": 1390.666,
          "y": 1131.117,
          "z": 114.4808
        },
        "Hash": -659015148
      }
    ],
    "Access": null
  },
  {
    "Name": "ranch:house:3",
    "Hash": 1666023378,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1399.386,
      "y": 1128.305,
      "z": 114.3328
    },
    "Doors": [
      {
        "Position": {
          "x": 1398.289,
          "y": 1128.314,
          "z": 114.4836
        },
        "Hash": -350298399
      },
      {
        "Position": {
          "x": 1400.489,
          "y": 1128.314,
          "z": 114.4836
        },
        "Hash": -659015148
      }
    ],
    "Access": null
  },
  {
    "Name": "ranch:house:4",
    "Hash": 746459700,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1401.595,
      "y": 1128.316,
      "z": 114.3497
    },
    "Doors": [
      {
        "Position": {
          "x": 1400.488,
          "y": 1128.314,
          "z": 114.4836
        },
        "Hash": -350298399
      },
      {
        "Position": {
          "x": 1402.688,
          "y": 1128.314,
          "z": 114.4836
        },
        "Hash": -659015148
      }
    ],
    "Access": null
  },
  {
    "Name": "ranch:house:5",
    "Hash": 1053341385,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1406.507,
      "y": 1128.44,
      "z": 114.4715
    },
    "Doors": [
      {
        "Position": {
          "x": 1407.548,
          "y": 1128.425,
          "z": 114.4901
        },
        "Hash": 262671971
      }
    ],
    "Access": null
  },
  {
    "Name": "ranch:house:6",
    "Hash": 2013210933,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1409.292,
      "y": 1145.144,
      "z": 114.3539
    },
    "Doors": [
      {
        "Position": {
          "x": 1409.292,
          "y": 1144.054,
          "z": 114.4869
        },
        "Hash": -659015148
      },
      {
        "Position": {
          "x": 1409.292,
          "y": 1146.254,
          "z": 114.4869
        },
        "Hash": -350298399
      }
    ],
    "Access": null
  },
  {
    "Name": "ranch:house:7",
    "Hash": -1976250976,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1409.271,
      "y": 1147.353,
      "z": 114.3508
    },
    "Doors": [
      {
        "Position": {
          "x": 1409.292,
          "y": 1146.254,
          "z": 114.4869
        },
        "Hash": -659015148
      },
      {
        "Position": {
          "x": 1409.292,
          "y": 1148.454,
          "z": 114.4869
        },
        "Hash": -350298399
      }
    ],
    "Access": null
  },
  {
    "Name": "ranch:house:8",
    "Hash": -536610499,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1409.284,
      "y": 1149.558,
      "z": 114.3538
    },
    "Doors": [
      {
        "Position": {
          "x": 1409.292,
          "y": 1148.454,
          "z": 114.4869
        },
        "Hash": -659015148
      },
      {
        "Position": {
          "x": 1409.292,
          "y": 1150.654,
          "z": 114.4869
        },
        "Hash": -350298399
      }
    ],
    "Access": null
  },
  {
    "Name": "ranch:house:9",
    "Hash": 1916837304,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1408.142,
      "y": 1160.057,
      "z": 114.3102
    },
    "Doors": [
      {
        "Position": {
          "x": 1408.142,
          "y": 1158.965,
          "z": 114.4812
        },
        "Hash": -659015148
      },
      {
        "Position": {
          "x": 1408.144,
          "y": 1161.162,
          "z": 114.4811
        },
        "Hash": -350298399
      }
    ],
    "Access": null
  },
  {
    "Name": "ranch:house:10",
    "Hash": -1460817801,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1408.145,
      "y": 1164.733,
      "z": 114.3355
    },
    "Doors": [
      {
        "Position": {
          "x": 1408.142,
          "y": 1163.636,
          "z": 114.4812
        },
        "Hash": -659015148
      },
      {
        "Position": {
          "x": 1408.143,
          "y": 1165.834,
          "z": 114.4811
        },
        "Hash": -350298399
      }
    ],
    "Access": null
  },
  {
    "Name": "ranch:house:11",
    "Hash": -2036306907,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1390.375,
      "y": 1162.343,
      "z": 114.3223
    },
    "Doors": [
      {
        "Position": {
          "x": 1390.381,
          "y": 1163.434,
          "z": 114.4786
        },
        "Hash": -350298399
      },
      {
        "Position": {
          "x": 1390.38,
          "y": 1161.236,
          "z": 114.4787
        },
        "Hash": -659015148
      }
    ],
    "Access": null
  },
  {
    "Name": "ranch:house:12",
    "Hash": 1360101636,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1395.854,
      "y": 1152.761,
      "z": 114.3278
    },
    "Doors": [
      {
        "Position": {
          "x": 1395.85,
          "y": 1153.858,
          "z": 114.4847
        },
        "Hash": -350298399
      },
      {
        "Position": {
          "x": 1395.849,
          "y": 1151.66,
          "z": 114.4849
        },
        "Hash": -659015148
      }
    ],
    "Access": null
  },
  {
    "Name": "ranch:stock:entry",
    "Hash": 733245837,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1444.444,
      "y": 1132.807,
      "z": 114.4298
    },
    "Doors": [
      {
        "Position": {
          "x": 1395.931,
          "y": 1141.803,
          "z": 114.7408
        },
        "Hash": -397082484
      }
    ],
    "Access": null
  },
  {
    "Name": "ranch:stock:interroom",
    "Hash": 30968437,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1448.827,
      "y": 1139.533,
      "z": 114.5346
    },
    "Doors": [
      {
        "Position": {
          "x": 1447.646,
          "y": 1139.536,
          "z": 114.4293
        },
        "Hash": -397082484
      }
    ],
    "Access": null
  },
  {
    "Name": "ranch:stock:gate",
    "Hash": -411299920,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1442.271,
      "y": 1142.121,
      "z": 114.2892
    },
    "Doors": [
      {
        "Position": {
          "x": 1442.226,
          "y": 1143.578,
          "z": 113.3137
        },
        "Hash": -1940681890
      },
      {
        "Position": {
          "x": 1442.297,
          "y": 1140.649,
          "z": 113.3052
        },
        "Hash": 1452253143
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_court:gate",
    "Hash": 1192631606,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1477.736,
      "y": 884.9515,
      "z": 183.5514
    },
    "Doors": [
      {
        "Position": {
          "x": -1478.257,
          "y": 882.243,
          "z": 183.0719
        },
        "Hash": -349730013
      },
      {
        "Position": {
          "x": -1477.229,
          "y": 887.649,
          "z": 183.0719
        },
        "Hash": -1918480350
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_court:house:1",
    "Hash": -365165435,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1520.634,
      "y": 848.3794,
      "z": 181.8443
    },
    "Doors": [
      {
        "Position": {
          "x": -1519.648,
          "y": 848.842,
          "z": 181.8971
        },
        "Hash": 761708175
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_court:house:2",
    "Hash": -662937338,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1491.006,
      "y": 851.9854,
      "z": 181.7296
    },
    "Doors": [
      {
        "Position": {
          "x": -1490.456,
          "y": 850.8521,
          "z": 181.8577
        },
        "Hash": -38850824
      },
      {
        "Position": {
          "x": -1491.515,
          "y": 853.1234,
          "z": 181.8577
        },
        "Hash": 1439424304
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_court:house:3",
    "Hash": 234277882,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1501.648,
      "y": 856.2175,
      "z": 181.7635
    },
    "Doors": [
      {
        "Position": {
          "x": -1500.657,
          "y": 856.6772,
          "z": 181.8662
        },
        "Hash": 761708175
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_court:house:stock",
    "Hash": -16159209,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1513.468,
      "y": 848.0083,
      "z": 181.6267
    },
    "Doors": [
      {
        "Position": {
          "x": -1513.899,
          "y": 848.9388,
          "z": 181.7494
        },
        "Hash": -833759002
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_pool:gate",
    "Hash": 832558406,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -135.2851,
      "y": 972.5954,
      "z": 236.3271
    },
    "Doors": [
      {
        "Position": {
          "x": -137.7991,
          "y": 973.7089,
          "z": 236.1143
        },
        "Hash": 546378757
      },
      {
        "Position": {
          "x": -132.7885,
          "y": 971.5002,
          "z": 236.1143
        },
        "Hash": -1249591818
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_pool:house:1",
    "Hash": -457738178,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -112.3875,
      "y": 985.6082,
      "z": 235.892
    },
    "Doors": [
      {
        "Position": {
          "x": -112.7745,
          "y": 986.6306,
          "z": 236.0094
        },
        "Hash": -478564038
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_pool:house:2",
    "Hash": -776318396,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -104.7373,
      "y": 976.7414,
      "z": 235.8494
    },
    "Doors": [
      {
        "Position": {
          "x": -105.7958,
          "y": 976.3409,
          "z": 236.0094
        },
        "Hash": -478564038
      },
      {
        "Position": {
          "x": -103.6745,
          "y": 977.1142,
          "z": 236.0094
        },
        "Hash": -478564038
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_pool:house:3",
    "Hash": -1054297823,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -97.77643,
      "y": 989.2894,
      "z": 235.87
    },
    "Doors": [
      {
        "Position": {
          "x": -98.83441,
          "y": 988.9056,
          "z": 236.0094
        },
        "Hash": -478564038
      },
      {
        "Position": {
          "x": -96.71363,
          "y": 989.6785,
          "z": 236.0094
        },
        "Hash": -478564038
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_pool:house:4",
    "Hash": 803835549,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -67.4799,
      "y": 987.7167,
      "z": 234.4676
    },
    "Doors": [
      {
        "Position": {
          "x": -68.33714,
          "y": 988.4249,
          "z": 234.6541
        },
        "Hash": -478564038
      },
      {
        "Position": {
          "x": -66.60736,
          "y": 986.9746,
          "z": 234.6541
        },
        "Hash": -478564038
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_pool:house:5",
    "Hash": 498920008,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -57.40046,
      "y": 984.0363,
      "z": 235.3025
    },
    "Doors": [
      {
        "Position": {
          "x": -57.0203,
          "y": 982.9868,
          "z": 235.4725
        },
        "Hash": -478564038
      },
      {
        "Position": {
          "x": -57.79253,
          "y": 985.1084,
          "z": 235.4725
        },
        "Hash": -478564038
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_pool:house:6",
    "Hash": 181781626,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -59.41599,
      "y": 989.5591,
      "z": 235.3165
    },
    "Doors": [
      {
        "Position": {
          "x": -59.02417,
          "y": 988.4923,
          "z": 235.4725
        },
        "Hash": -478564038
      },
      {
        "Position": {
          "x": -59.79632,
          "y": 990.6138,
          "z": 235.4725
        },
        "Hash": -478564038
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_pool:house:7",
    "Hash": -91216913,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -62.61241,
      "y": 998.8463,
      "z": 234.4742
    },
    "Doors": [
      {
        "Position": {
          "x": -61.79213,
          "y": 998.1297,
          "z": 234.6555
        },
        "Hash": -478564038
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_pool:house:8",
    "Hash": -665985125,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -70.83208,
      "y": 1008.778,
      "z": 234.502
    },
    "Doors": [
      {
        "Position": {
          "x": -69.99136,
          "y": 1008.031,
          "z": 234.6562
        },
        "Hash": -478564038
      },
      {
        "Position": {
          "x": -71.67133,
          "y": 1009.539,
          "z": 234.6562
        },
        "Hash": -478564038
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_pool:house:9",
    "Hash": -969458834,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -102.6377,
      "y": 1011.297,
      "z": 235.8497
    },
    "Doors": [
      {
        "Position": {
          "x": -103.0305,
          "y": 1012.349,
          "z": 236.012
        },
        "Hash": -478564038
      },
      {
        "Position": {
          "x": -102.2579,
          "y": 1010.226,
          "z": 236.012
        },
        "Hash": -478564038
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_pool:house:10",
    "Hash": 1228628885,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -111.1465,
      "y": 999.1646,
      "z": 235.8746
    },
    "Doors": [
      {
        "Position": {
          "x": -110.0823,
          "y": 999.5333,
          "z": 236.0094
        },
        "Hash": -478564038
      },
      {
        "Position": {
          "x": -112.204,
          "y": 998.76,
          "z": 236.0094
        },
        "Hash": -478564038
      }
    ],
    "Access": null
  },
  {
    "Name": "villa_pool:garage",
    "Hash": -654235748,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -125.1246,
      "y": 1011.383,
      "z": 236.2932
    },
    "Doors": [
      {
        "Position": {
          "x": -131.8882,
          "y": 1008.921,
          "z": 236.2932
        },
        "Hash": 30769481
      },
      {
        "Position": {
          "x": -125.1246,
          "y": 1011.383,
          "z": 236.2932
        },
        "Hash": 30769481
      }
    ],
    "Access": null
  },
  {
    "Name": "michael:gate:car",
    "Hash": -1879489124,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -844.0151,
      "y": 159.089,
      "z": 67.2041
    },
    "Doors": [
      {
        "Position": {
          "x": -844.2006,
          "y": 155.8123,
          "z": 66.24381
        },
        "Hash": -2125423493
      }
    ],
    "Access": null
  },
  {
    "Name": "michael:gate:people",
    "Hash": -798345091,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -849.0275,
      "y": 178.0843,
      "z": 69.69681
    },
    "Doors": [
      {
        "Position": {
          "x": -848.9343,
          "y": 179.3079,
          "z": 70.0247
        },
        "Hash": -1568354151
      }
    ],
    "Access": null
  },
  {
    "Name": "michael:door:main",
    "Hash": 323875580,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -816.4765,
      "y": 178.2636,
      "z": 72.34283
    },
    "Doors": [
      {
        "Position": {
          "x": -816.1068,
          "y": 177.5109,
          "z": 72.82738
        },
        "Hash": -1686014385
      },
      {
        "Position": {
          "x": -816.716,
          "y": 179.098,
          "z": 72.82738
        },
        "Hash": 159994461
      }
    ],
    "Access": null
  },
  {
    "Name": "michael:door:back:1",
    "Hash": 1243806143,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -795.5394,
      "y": 177.5771,
      "z": 72.96831
    },
    "Doors": [
      {
        "Position": {
          "x": -794.5051,
          "y": 178.0124,
          "z": 73.04045
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -796.5657,
          "y": 177.2214,
          "z": 73.04045
        },
        "Hash": -1454760130
      }
    ],
    "Access": null
  },
  {
    "Name": "michael:door:back:2",
    "Hash": -1546572510,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -793.7435,
      "y": 181.5475,
      "z": 73.02856
    },
    "Doors": [
      {
        "Position": {
          "x": -794.1853,
          "y": 182.568,
          "z": 73.04045
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -793.3943,
          "y": 180.5057,
          "z": 73.04045
        },
        "Hash": -1454760130
      }
    ],
    "Access": null
  },
  {
    "Name": "michael:door:garage",
    "Hash": 1887136612,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -807.4322,
      "y": 185.6509,
      "z": 72.55756
    },
    "Doors": [
      {
        "Position": {
          "x": -806.2817,
          "y": 186.0246,
          "z": 72.62405
        },
        "Hash": -1563640173
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:c_door",
    "Hash": -1365788518,
    "Locked": false,
    "DefaultState": false,
    "Interract": true,
    "ActionPoint": {
      "x": -545.5228,
      "y": -203.3607,
      "z": 38.82366
    },
    "Doors": [
      {
        "Position": {
          "x": -544.35,
          "y": -202.6717,
          "z": 38.86989
        },
        "Hash": -1350452695
      },
      {
        "Position": {
          "x": -546.7068,
          "y": -204.0325,
          "z": 38.86989
        },
        "Hash": -1350452695
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:l_door",
    "Hash": 1477417572,
    "Locked": false,
    "DefaultState": false,
    "Interract": true,
    "ActionPoint": {
      "x": -556.6215,
      "y": -228.3017,
      "z": 38.62147
    },
    "Doors": [
      {
        "Position": {
          "x": -556.1461,
          "y": -229.1515,
          "z": 38.6424
        },
        "Hash": -1922281023
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:r_door",
    "Hash": -590621248,
    "Locked": false,
    "DefaultState": false,
    "Interract": true,
    "ActionPoint": {
      "x": -516.1498,
      "y": -210.1173,
      "z": 38.65063
    },
    "Doors": [
      {
        "Position": {
          "x": -515.6904,
          "y": -210.9494,
          "z": 38.63948
        },
        "Hash": -1922281023
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:l_backdoor",
    "Hash": -1743754457,
    "Locked": false,
    "DefaultState": false,
    "Interract": true,
    "ActionPoint": {
      "x": -582.234,
      "y": -195.1007,
      "z": 38.64586
    },
    "Doors": [
      {
        "Position": {
          "x": -583.079,
          "y": -195.5714,
          "z": 38.66754
        },
        "Hash": -1922281023
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:r_backdoor",
    "Hash": -1604745804,
    "Locked": false,
    "DefaultState": false,
    "Interract": true,
    "ActionPoint": {
      "x": -534.3331,
      "y": -167.4282,
      "z": 38.67284
    },
    "Doors": [
      {
        "Position": {
          "x": -533.4968,
          "y": -166.9456,
          "z": 38.67315
        },
        "Hash": -1922281023
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:l_hall_to_office",
    "Hash": 519920925,
    "Locked": false,
    "DefaultState": false,
    "Interract": true,
    "ActionPoint": {
      "x": -570.8184,
      "y": -216.2693,
      "z": 38.45129
    },
    "Doors": [
      {
        "Position": {
          "x": -569.896,
          "y": -215.7366,
          "z": 38.49482
        },
        "Hash": -1922281023
      },
      {
        "Position": {
          "x": -571.7305,
          "y": -216.7957,
          "z": 38.49482
        },
        "Hash": -1922281023
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:l_hall_to_c_1",
    "Hash": -1827983912,
    "Locked": false,
    "DefaultState": false,
    "Interract": true,
    "ActionPoint": {
      "x": -565.9094,
      "y": -211.4695,
      "z": 38.47787
    },
    "Doors": [
      {
        "Position": {
          "x": -565.3812,
          "y": -212.3857,
          "z": 38.49477
        },
        "Hash": -1922281023
      },
      {
        "Position": {
          "x": -566.4403,
          "y": -210.5512,
          "z": 38.49477
        },
        "Hash": -1922281023
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:l_hall_to_c_2",
    "Hash": -2135848667,
    "Locked": false,
    "DefaultState": false,
    "Interract": true,
    "ActionPoint": {
      "x": -574.1949,
      "y": -197.1255,
      "z": 38.45304
    },
    "Doors": [
      {
        "Position": {
          "x": -573.666,
          "y": -198.0387,
          "z": 38.49554
        },
        "Hash": -1922281023
      },
      {
        "Position": {
          "x": -574.7253,
          "y": -196.2038,
          "z": 38.49554
        },
        "Hash": -1922281023
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:r_hall_to_office",
    "Hash": -1135087581,
    "Locked": false,
    "DefaultState": false,
    "Interract": true,
    "ActionPoint": {
      "x": -521.6999,
      "y": -187.9129,
      "z": 38.4773
    },
    "Doors": [
      {
        "Position": {
          "x": -520.7775,
          "y": -187.3761,
          "z": 38.4945
        },
        "Hash": -1922281023
      },
      {
        "Position": {
          "x": -522.612,
          "y": -188.4353,
          "z": 38.4945
        },
        "Hash": -1922281023
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:r_hall_to_c_1",
    "Hash": -1874998685,
    "Locked": false,
    "DefaultState": false,
    "Interract": true,
    "ActionPoint": {
      "x": -528.3085,
      "y": -189.7687,
      "z": 38.4646
    },
    "Doors": [
      {
        "Position": {
          "x": -527.7817,
          "y": -190.6778,
          "z": 38.49452
        },
        "Hash": -1922281023
      },
      {
        "Position": {
          "x": -528.8408,
          "y": -188.8433,
          "z": 38.49452
        },
        "Hash": -1922281023
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:r_hall_to_c_2",
    "Hash": -980536053,
    "Locked": false,
    "DefaultState": false,
    "Interract": true,
    "ActionPoint": {
      "x": -536.5993,
      "y": -175.4142,
      "z": 38.47031
    },
    "Doors": [
      {
        "Position": {
          "x": -536.0673,
          "y": -176.3308,
          "z": 38.49388
        },
        "Hash": -1922281023
      },
      {
        "Position": {
          "x": -537.1258,
          "y": -174.4973,
          "z": 38.49388
        },
        "Hash": -1922281023
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:3_floor_entry",
    "Hash": -312873829,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -554.6953,
      "y": -187.4776,
      "z": 47.45279
    },
    "Doors": [
      {
        "Position": {
          "x": -553.5665,
          "y": -186.8318,
          "z": 47.54007
        },
        "Hash": -1399537472
      },
      {
        "Position": {
          "x": -555.8183,
          "y": -188.1319,
          "z": 47.54007
        },
        "Hash": -1399537472
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:3_floor_l_cabinet",
    "Hash": 1610724894,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -539.9923,
      "y": -185.2584,
      "z": 47.44903
    },
    "Doors": [
      {
        "Position": {
          "x": -540.6429,
          "y": -184.1251,
          "z": 47.54192
        },
        "Hash": -1399537472
      },
      {
        "Position": {
          "x": -539.3419,
          "y": -186.3786,
          "z": 47.54192
        },
        "Hash": -1399537472
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:3_floor_c_cabinet",
    "Hash": -404974817,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -558.9829,
      "y": -199.3213,
      "z": 47.44596
    },
    "Doors": [
      {
        "Position": {
          "x": -557.8593,
          "y": -198.6742,
          "z": 47.53978
        },
        "Hash": -1399537472
      },
      {
        "Position": {
          "x": -560.1111,
          "y": -199.9744,
          "z": 47.53978
        },
        "Hash": -1399537472
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:3_floor_r_cabinet",
    "Hash": 484640727,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -563.9799,
      "y": -199.1042,
      "z": 47.46255
    },
    "Doors": [
      {
        "Position": {
          "x": -563.3284,
          "y": -200.2264,
          "z": 47.54161
        },
        "Hash": -1399537472
      },
      {
        "Position": {
          "x": -564.6292,
          "y": -197.9735,
          "z": 47.54161
        },
        "Hash": -1399537472
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:3_floor_cloakroom",
    "Hash": -370722257,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -564.6116,
      "y": -196.3258,
      "z": 47.45255
    },
    "Doors": [
      {
        "Position": {
          "x": -563.6326,
          "y": -195.7587,
          "z": 47.53984
        },
        "Hash": -1399537472
      }
    ],
    "Access": null
  },
  {
    "Name": "city_hall:3_floor_security",
    "Hash": -2010846998,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -542.0804,
      "y": -183.326,
      "z": 47.45291
    },
    "Doors": [
      {
        "Position": {
          "x": -537.9496,
          "y": -154.9054,
          "z": 37.54913
        },
        "Hash": -1399537472
      }
    ],
    "Access": null
  },

  // {
  //   "Name": "parliament:central:entry",
  //   "Hash": 73407724,
  //   "Locked": true,
  //   "DefaultState": true,
  //   "Interract": true,
  //   "ActionPoint": {
  //     "x": 2475.128,
  //     "y": -384.1369,
  //     "z": 94.41839
  //   },
  //   "Doors": [
  //     {
  //       "Position": {
  //         "x": 2475.127,
  //         "y": -385.4296,
  //         "z": 93.39353
  //       },
  //       "Hash": 1712998254
  //     },
  //     {
  //       "Position": {
  //         "x": 2475.127,
  //         "y": -382.8382,
  //         "z": 93.39359
  //       },
  //       "Hash": 1712998254
  //     }
  //   ],
  //   "Access": null
  // },
  // {
  //   "Name": "parliament:central:backdoor",
  //   "Hash": -1321861334,
  //   "Locked": true,
  //   "DefaultState": true,
  //   "Interract": true,
  //   "ActionPoint": {
  //     "x": 2460.566,
  //     "y": -384.1299,
  //     "z": 93.35416
  //   },
  //   "Doors": [
  //     {
  //       "Position": {
  //         "x": 2460.568,
  //         "y": -382.837,
  //         "z": 92.32228
  //       },
  //       "Hash": 1712998254
  //     },
  //     {
  //       "Position": {
  //         "x": 2460.568,
  //         "y": -385.4268,
  //         "z": 92.32183
  //       },
  //       "Hash": 1712998254
  //     }
  //   ],
  //   "Access": null
  // },
  // {
  //   "Name": "parliament:central:2_floor_l",
  //   "Hash": 1430738344,
  //   "Locked": true,
  //   "DefaultState": true,
  //   "Interract": true,
  //   "ActionPoint": {
  //     "x": 2463.041,
  //     "y": -394.3868,
  //     "z": 98.12984
  //   },
  //   "Doors": [
  //     {
  //       "Position": {
  //         "x": 2464.344,
  //         "y": -394.4405,
  //         "z": 98.14114
  //       },
  //       "Hash": 475664176
  //     },
  //     {
  //       "Position": {
  //         "x": 2461.744,
  //         "y": -394.4405,
  //         "z": 98.14114
  //       },
  //       "Hash": 475664176
  //     }
  //   ],
  //   "Access": null
  // },
  // {
  //   "Name": "parliament:central:2_floor_r",
  //   "Hash": 916756555,
  //   "Locked": true,
  //   "DefaultState": true,
  //   "Interract": true,
  //   "ActionPoint": {
  //     "x": 2463.046,
  //     "y": -373.8229,
  //     "z": 98.1114
  //   },
  //   "Doors": [
  //     {
  //       "Position": {
  //         "x": 2461.744,
  //         "y": -373.8236,
  //         "z": 98.14026
  //       },
  //       "Hash": 475664176
  //     },
  //     {
  //       "Position": {
  //         "x": 2464.344,
  //         "y": -373.8236,
  //         "z": 98.14026
  //       },
  //       "Hash": 475664176
  //     }
  //   ],
  //   "Access": null
  // },
  // {
  //   "Name": "parliament:central:3_floor_l",
  //   "Hash": -1839693868,
  //   "Locked": true,
  //   "DefaultState": true,
  //   "Interract": true,
  //   "ActionPoint": {
  //     "x": 2463.046,
  //     "y": -394.44,
  //     "z": 103.3304
  //   },
  //   "Doors": [
  //     {
  //       "Position": {
  //         "x": 2464.344,
  //         "y": -394.4405,
  //         "z": 103.3471
  //       },
  //       "Hash": 475664176
  //     },
  //     {
  //       "Position": {
  //         "x": 2461.744,
  //         "y": -394.4405,
  //         "z": 103.3471
  //       },
  //       "Hash": 475664176
  //     }
  //   ],
  //   "Access": null
  // },
  // {
  //   "Name": "parliament:central:3_floor_r",
  //   "Hash": 197194403,
  //   "Locked": true,
  //   "DefaultState": true,
  //   "Interract": true,
  //   "ActionPoint": {
  //     "x": 2463.048,
  //     "y": -373.8257,
  //     "z": 103.317
  //   },
  //   "Doors": [
  //     {
  //       "Position": {
  //         "x": 2461.744,
  //         "y": -373.8236,
  //         "z": 103.3471
  //       },
  //       "Hash": 475664176
  //     },
  //     {
  //       "Position": {
  //         "x": 2464.344,
  //         "y": -373.8236,
  //         "z": 103.3471
  //       },
  //       "Hash": 475664176
  //     }
  //   ],
  //   "Access": null
  // },
  // {
  //   "Name": "parliament:left:entry",
  //   "Hash": 1399292556,
  //   "Locked": true,
  //   "DefaultState": true,
  //   "Interract": true,
  //   "ActionPoint": {
  //     "x": 2519.786,
  //     "y": -415.2739,
  //     "z": 94.15539
  //   },
  //   "Doors": [
  //     {
  //       "Position": {
  //         "x": 2520.703,
  //         "y": -416.1875,
  //         "z": 93.11843
  //       },
  //       "Hash": 1712998254
  //     },
  //     {
  //       "Position": {
  //         "x": 2518.872,
  //         "y": -414.3567,
  //         "z": 93.11871
  //       },
  //       "Hash": 1712998254
  //     }
  //   ],
  //   "Access": null
  // },
  // {
  //   "Name": "parliament:left:security",
  //   "Hash": 202505791,
  //   "Locked": true,
  //   "DefaultState": true,
  //   "Interract": true,
  //   "ActionPoint": {
  //     "x": 2525.846,
  //     "y": -422.2766,
  //     "z": 94.23695
  //   },
  //   "Doors": [
  //     {
  //       "Position": {
  //         "x": 2520.956,
  //         "y": -424.406,
  //         "z": 93.1166
  //       },
  //       "Hash": 378644224
  //     }
  //   ],
  //   "Access": null
  // },
  // {
  //   "Name": "parliament:right:entry",
  //   "Hash": 490081725,
  //   "Locked": true,
  //   "DefaultState": true,
  //   "Interract": true,
  //   "ActionPoint": {
  //     "x": 2519.797,
  //     "y": -352.9724,
  //     "z": 94.16727
  //   },
  //   "Doors": [
  //     {
  //       "Position": {
  //         "x": 2518.871,
  //         "y": 353.8813,
  //         "z": 93.12227
  //       },
  //       "Hash": 1712998254
  //     },
  //     {
  //       "Position": {
  //         "x": 2520.703,
  //         "y": -352.049,
  //         "z": 93.12145
  //       },
  //       "Hash": 1712998254
  //     }
  //   ],
  //   "Access": null
  // },
  // {
  //   "Name": "parliament:right:security",
  //   "Hash": -1568481708,
  //   "Locked": true,
  //   "DefaultState": true,
  //   "Interract": true,
  //   "ActionPoint": {
  //     "x": 2525.836,
  //     "y": -345.9754,
  //     "z": 94.24054
  //   },
  //   "Doors": [
  //     {
  //       "Position": {
  //         "x": 2526.725,
  //         "y": -345.0884,
  //         "z": 94.26785
  //       },
  //       "Hash": 378644224
  //     }
  //   ],
  //   "Access": null
  // },
  {
    "Name": "mafia_5:gate",
    "Hash": 592031465,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -2557.934,
      "y": 1913.297,
      "z": 169.1261
    },
    "Doors": [
      {
        "Position": {
          "x": -2559.193,
          "y": 1910.86,
          "z": 169.0709
        },
        "Hash": 546378757
      },
      {
        "Position": {
          "x": -2556.658,
          "y": 1915.716,
          "z": 169.0709
        },
        "Hash": -1249591818
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_5:garage",
    "Hash": 635960217,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -2597.355,
      "y": 1926.585,
      "z": 167.3985
    },
    "Doors": [
      {
        "Position": {
          "x": -2597.095,
          "y": 1926.618,
          "z": 167.6456
        },
        "Hash": 1045731141
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_5:main_entry",
    "Hash": 414496744,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -2588.216,
      "y": 1910.298,
      "z": 167.541
    },
    "Doors": [
      {
        "Position": {
          "x": -2587.021,
          "y": 1910.384,
          "z": 167.65
        },
        "Hash": -1179908235
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_5:back_entry",
    "Hash": -1191283328,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -2598.739,
      "y": 1879.758,
      "z": 167.3272
    },
    "Doors": [
      {
        "Position": {
          "x": -2599.58,
          "y": 1880.748,
          "z": 167.4572
        },
        "Hash": -1456014945
      },
      {
        "Position": {
          "x": -2597.883,
          "y": 1878.775,
          "z": 167.4572
        },
        "Hash": -1456014945
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_5:ground_floor_entry",
    "Hash": 87078070,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -2602.333,
      "y": 1894.379,
      "z": 163.7202
    },
    "Doors": [
      {
        "Position": {
          "x": -2601.041,
          "y": 1894.477,
          "z": 163.8858
        },
        "Hash": -1456014945
      },
      {
        "Position": {
          "x": -2603.628,
          "y": 1894.251,
          "z": 163.8858
        },
        "Hash": -1456014945
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_5:stock:1",
    "Hash": 371176371,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -2603.129,
      "y": 1916.775,
      "z": 163.5483
    },
    "Doors": [
      {
        "Position": {
          "x": -2604.263,
          "y": 1916.66,
          "z": 163.6972
        },
        "Hash": 2093399617
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_5:stock:2",
    "Hash": 190684719,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -2593.101,
      "y": 1919.916,
      "z": 160.3624
    },
    "Doors": [
      {
        "Position": {
          "x": -2592.993,
          "y": 1918.703,
          "z": 160.5166
        },
        "Hash": -35610440
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_5:hall",
    "Hash": 468732452,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -2589.865,
      "y": 1908.842,
      "z": 163.8542
    },
    "Doors": [
      {
        "Position": {
          "x": -2589.756,
          "y": 1907.648,
          "z": 163.8802
        },
        "Hash": 1042741067
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_5:small_room",
    "Hash": -2002427741,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -2583.092,
      "y": 1905.534,
      "z": 163.8475
    },
    "Doors": [
      {
        "Position": {
          "x": -2582.991,
          "y": 1904.35,
          "z": 163.8802
        },
        "Hash": 1042741067
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_5:billiards:1",
    "Hash": 1036754990,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -2591.499,
      "y": 1904.449,
      "z": 163.8755
    },
    "Doors": [
      {
        "Position": {
          "x": -2591.606,
          "y": 1905.647,
          "z": 163.8802
        },
        "Hash": 1042741067
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_5:billiards:2",
    "Hash": 2107449296,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -2593.032,
      "y": 1895.231,
      "z": 163.8694
    },
    "Doors": [
      {
        "Position": {
          "x": -2591.827,
          "y": 1895.336,
          "z": 163.8802
        },
        "Hash": 1042741067
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_5:bedroom",
    "Hash": 2058339215,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -2596.686,
      "y": 1892.687,
      "z": 163.8355
    },
    "Doors": [
      {
        "Position": {
          "x": -2596.791,
          "y": 1893.877,
          "z": 163.8802
        },
        "Hash": 1042741067
      }
    ],
    "Access": null
  },
  {
    "Name": "home1:gate_1",
    "Hash": -1722037141,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1453.795,
      "y": -32.1254,
      "z": 55.52244
    },
    "Doors": [
      {
        "Position": {
          "x": -1452.903,
          "y": -29.55032,
          "z": 54.86719
        },
        "Hash": -349730013
      },
      {
        "Position": {
          "x": -1454.664,
          "y": -34.73074,
          "z": 54.86434
        },
        "Hash": -1918480350
      }
    ],
    "Access": null
  },
  {
    "Name": "home1:gate_2",
    "Hash": -2094161905,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1472.688,
      "y": -14.25324,
      "z": 55.29909
    },
    "Doors": [
      {
        "Position": {
          "x": -1475.353,
          "y": -14.71867,
          "z": 54.89672
        },
        "Hash": -349730013
      },
      {
        "Position": {
          "x": -1469.96,
          "y": -13.79652,
          "z": 54.89387
        },
        "Hash": -1918480350
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_2:entry_1",
    "Hash": -198601896,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -921.7756,
      "y": 814.3923,
      "z": 184.4897
    },
    "Doors": [
      {
        "Position": {
          "x": -920.5856,
          "y": 814.4665,
          "z": 184.5428
        },
        "Hash": -711771128
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_2:entry_2",
    "Hash": 644052939,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -931.3074,
      "y": 825.8658,
      "z": 184.5068
    },
    "Doors": [
      {
        "Position": {
          "x": -930.2101,
          "y": 825.948,
          "z": 184.6073
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -932.4106,
          "y": 825.7693,
          "z": 184.6073
        },
        "Hash": 1245831483
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_2:entry_3",
    "Hash": 1619323921,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -938.8608,
      "y": 815.0391,
      "z": 184.9263
    },
    "Doors": [
      {
        "Position": {
          "x": -938.7649,
          "y": 813.8371,
          "z": 184.9711
        },
        "Hash": -711771128
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_2:entry_4",
    "Hash": 48640209,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -932.4454,
      "y": 809.4331,
      "z": 184.9297
    },
    "Doors": [
      {
        "Position": {
          "x": -931.2332,
          "y": 809.5399,
          "z": 184.9711
        },
        "Hash": -711771128
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_2:kitchen",
    "Hash": 98197828,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -923.4094,
      "y": 820.3359,
      "z": 184.5083
    },
    "Doors": [
      {
        "Position": {
          "x": -923.5196,
          "y": 821.5334,
          "z": 184.5414
        },
        "Hash": -1687047623
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_2:laundry",
    "Hash": 390080012,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -927.4034,
      "y": 818.8119,
      "z": 184.5592
    },
    "Doors": [
      {
        "Position": {
          "x": -926.2137,
          "y": 818.9183,
          "z": 184.5414
        },
        "Hash": -1687047623
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_2:restroom",
    "Hash": 1987720968,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -931.7354,
      "y": 818.4386,
      "z": 184.5275
    },
    "Doors": [
      {
        "Position": {
          "x": -930.5425,
          "y": 818.5429,
          "z": 184.5468
        },
        "Hash": -1687047623
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_2:gym",
    "Hash": -817453497,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -933.699,
      "y": 821.3365,
      "z": 184.4584
    },
    "Doors": [
      {
        "Position": {
          "x": -933.8157,
          "y": 822.5195,
          "z": 184.5492
        },
        "Hash": -1687047623
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_2:stairs",
    "Hash": -969403631,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -936.2279,
      "y": 818.095,
      "z": 184.9087
    },
    "Doors": [
      {
        "Position": {
          "x": -937.4615,
          "y": 817.9963,
          "z": 184.9641
        },
        "Hash": -1687047623
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_2:balcony_1_1",
    "Hash": 1995560339,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -925.2843,
      "y": 814.0744,
      "z": 187.9553
    },
    "Doors": [
      {
        "Position": {
          "x": -924.1852,
          "y": 814.1672,
          "z": 188.0746
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -926.3856,
          "y": 813.986,
          "z": 188.0756
        },
        "Hash": 1245831483
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_2:balcony_1_2",
    "Hash": 1630185989,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -930.6882,
      "y": 813.6469,
      "z": 187.955
    },
    "Doors": [
      {
        "Position": {
          "x": -929.5876,
          "y": 813.7196,
          "z": 188.0746
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -931.79,
          "y": 813.5666,
          "z": 188.0756
        },
        "Hash": 1245831483
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_2:entertainment",
    "Hash": 1550859258,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -923.0703,
      "y": 817.7283,
      "z": 188.0405
    },
    "Doors": [
      {
        "Position": {
          "x": -922.9713,
          "y": 816.53,
          "z": 188.0207
        },
        "Hash": -1687047623
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_2:hall",
    "Hash": 1856793117,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -929.2888,
      "y": 819.898,
      "z": 188.001
    },
    "Doors": [
      {
        "Position": {
          "x": -928.0924,
          "y": 820.0014,
          "z": 188.0183
        },
        "Hash": -1687047623
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_2:balcony_2",
    "Hash": -1725103219,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -931.3159,
      "y": 825.924,
      "z": 187.9559
    },
    "Doors": [
      {
        "Position": {
          "x": -932.415,
          "y": 825.8253,
          "z": 188.0756
        },
        "Hash": 1245831483
      },
      {
        "Position": {
          "x": -930.2152,
          "y": 826.0037,
          "z": 188.0746
        },
        "Hash": 1245831483
      }
    ],
    "Access": null
  },
  {
    "Name": "mafia_2:bedroom",
    "Hash": -899648759,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -933.7811,
      "y": 823.5698,
      "z": 188.0093
    },
    "Doors": [
      {
        "Position": {
          "x": -933.6738,
          "y": 822.3608,
          "z": 188.0199
        },
        "Hash": -1687047623
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:main_entrance_1",
    "Hash": -1025717956,
    "Locked": false,
    "DefaultState": false,
    "Interract": true,
    "ActionPoint": {
      "x": 1845.006,
      "y": 2611.645,
      "z": 45.86983
    },
    "Doors": [
      {
        "Position": {
          "x": 1844.998,
          "y": 2604.813,
          "z": 44.63978
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:main_entrance_2",
    "Hash": -183784039,
    "Locked": false,
    "DefaultState": false,
    "Interract": true,
    "ActionPoint": {
      "x": 1818.566,
      "y": 2611.605,
      "z": 45.88353
    },
    "Doors": [
      {
        "Position": {
          "x": 1818.543,
          "y": 2604.813,
          "z": 44.611
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:main_entrance_r",
    "Hash": 770318037,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1792.784,
      "y": 2616.968,
      "z": 45.84258
    },
    "Doors": [
      {
        "Position": {
          "x": 1799.608,
          "y": 2616.975,
          "z": 44.60325
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:main_entrance_l_1",
    "Hash": 423703554,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1796.365,
      "y": 2596.545,
      "z": 46.27844
    },
    "Doors": [
      {
        "Position": {
          "x": 1797.761,
          "y": 2596.565,
          "z": 46.38731
        },
        "Hash": -1156020871
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:main_entrance_l_2",
    "Hash": 663474327,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1796.695,
      "y": 2591.715,
      "z": 46.30163
    },
    "Doors": [
      {
        "Position": {
          "x": 1798.09,
          "y": 2591.687,
          "z": 46.41784
        },
        "Hash": -1156020871
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:main_entrance_small_1",
    "Hash": 847018723,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1845.413,
      "y": 2586.324,
      "z": 45.93238
    },
    "Doors": [
      {
        "Position": {
          "x": 1845.402,
          "y": 2585.239,
          "z": 46.08133
        },
        "Hash": 320433149
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:main_entrance_small_2",
    "Hash": 600956302,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1819.238,
      "y": 2594.772,
      "z": 46.06484
    },
    "Doors": [
      {
        "Position": {
          "x": 1819.224,
          "y": 2593.681,
          "z": 46.15534
        },
        "Hash": 320433149
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:main_entrance_small_3",
    "Hash": 252228604,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1791.174,
      "y": 2593.305,
      "z": 46.0065
    },
    "Doors": [
      {
        "Position": {
          "x": 1791.161,
          "y": 2594.368,
          "z": 46.1037
        },
        "Hash": 320433149
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:main_entrance_small_4",
    "Hash": 5445265,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1765.28,
      "y": 2566.641,
      "z": 45.65059
    },
    "Doors": [
      {
        "Position": {
          "x": 1766.314,
          "y": 2566.634,
          "z": 45.75524
        },
        "Hash": 320433149
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:jail:1",
    "Hash": -331280351,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1690.18,
      "y": 2590.686,
      "z": 45.98945
    },
    "Doors": [
      {
        "Position": {
          "x": 1691.26,
          "y": 2590.691,
          "z": 46.08984
        },
        "Hash": 320433149
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:jail:2",
    "Hash": 50347423,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1691.095,
      "y": 2566.796,
      "z": 45.63204
    },
    "Doors": [
      {
        "Position": {
          "x": 1692.177,
          "y": 2566.795,
          "z": 45.73507
        },
        "Hash": 320433149
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:jail:3",
    "Hash": 281925946,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": 1686.676,
      "y": 2573.152,
      "z": 50.7065
    },
    "Doors": [
      {
        "Position": {
          "x": 1687.682,
          "y": 2573.136,
          "z": 50.80465
        },
        "Hash": 320433149
      }
    ],
    "Access": null
  },
  {
    "Name": "monzo:1",
    "Hash": -675136807,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1129.15,
      "y": 388.766,
      "z": 70.76119
    },
    "Doors": [
      {
        "Position": {
          "x": -1126.068,
          "y": 388.979,
          "z": 69.76716
        },
        "Hash": -2139443164
      }
    ],
    "Access": null
  },
  {
    "Name": "monzo:2",
    "Hash": -965175226,
    "Locked": true,
    "DefaultState": true,
    "Interract": true,
    "ActionPoint": {
      "x": -1091.787,
      "y": 369.8571,
      "z": 68.71388
    },
    "Doors": [
      {
        "Position": {
          "x": -1091.374,
          "y": 366.653,
          "z": 67.70918
        },
        "Hash": 1930237257
      }
    ],
    "Access": null
  },
  {
    "Name": "police:vinewood:kpz",
    "Hash": -895672798,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 564.6141,
      "y": 12.77213,
      "z": 83.10648
    },
    "Doors": [
      {
        "Position": {
          "x": 565.6828,
          "y": 12.34088,
          "z": 83.06334
        },
        "Hash": -618347292
      }
    ],
    "Access": null
  },
  {
    "Name": "bank:pacific:safe",
    "Hash": -522360406,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 255.2283,
      "y": 223.976,
      "z": 102.3932
    },
    "Doors": [
      {
        "Position": {
          "x": 255.2283,
          "y": 223.976,
          "z": 102.3932
        },
        "Hash": 961976194
      }
    ],
    "Access": null
  },
  {
    "Name": "bank:pacific:door:main",
    "Hash": -822719620,
    "Locked": false,
    "DefaultState": false,
    "Interract": false,
    "ActionPoint": {
      "x": 232.6054,
      "y": 214.1584,
      "z": 106.4049
    },
    "Doors": [
      {
        "Position": {
          "x": 232.6054,
          "y": 214.1584,
          "z": 106.4049
        },
        "Hash": 110411286
      },
      {
        "Position": {
          "x": 231.5075,
          "y": 216.5148,
          "z": 106.4049
        },
        "Hash": 110411286
      }
    ],
    "Access": null
  },
  {
    "Name": "gunshop:morningwood:door",
    "Hash": -568995845,
    "Locked": false,
    "DefaultState": false,
    "Interract": false,
    "ActionPoint": {
      "x": -1313.826,
      "y": -389.1259,
      "z": 36.84573
    },
    "Doors": [
      {
        "Position": {
          "x": -1314.465,
          "y": -391.6472,
          "z": 36.84573
        },
        "Hash": -8873588
      },
      {
        "Position": {
          "x": -1313.826,
          "y": -389.1259,
          "z": 36.84573
        },
        "Hash": 97297972
      }
    ],
    "Access": null
  },
  {
    "Name": "clothshop:takestylesity:door",
    "Hash": 417786753,
    "Locked": false,
    "DefaultState": false,
    "Interract": false,
    "ActionPoint": {
      "x": 418.5713,
      "y": -806.3979,
      "z": 29.64108
    },
    "Doors": [
      {
        "Position": {
          "x": 418.5713,
          "y": -808.674,
          "z": 29.64108
        },
        "Hash": -1148826190
      },
      {
        "Position": {
          "x": 418.5713,
          "y": -806.3979,
          "z": 29.64108
        },
        "Hash": 868499217
      }
    ],
    "Access": null
  },
  {
    "Name": "army:dock:gate:1",
    "Hash": -1897847877,
    "Locked": false,
    "DefaultState": false,
    "Interract": false,
    "ActionPoint": {
      "x": -187.3406,
      "y": -2515.309,
      "z": 5.047173
    },
    "Doors": [
      {
        "Position": {
          "x": -202.6151,
          "y": -2515.309,
          "z": 5.047173
        },
        "Hash": 1286392437
      },
      {
        "Position": {
          "x": -187.3406,
          "y": -2515.309,
          "z": 5.047173
        },
        "Hash": 1286392437
      }
    ],
    "Access": null
  },
  {
    "Name": "lscustom:berton:door",
    "Hash": -191285926,
    "Locked": false,
    "DefaultState": false,
    "Interract": false,
    "ActionPoint": {
      "x": -356.0905,
      "y": -134.7714,
      "z": 40.01295
    },
    "Doors": [
      {
        "Position": {
          "x": -356.0905,
          "y": -134.7714,
          "z": 40.01295
        },
        "Hash": -550347177
      }
    ],
    "Access": null
  },
  {
    "Name": "lscustom:2:door",
    "Hash": 1886110665,
    "Locked": false,
    "DefaultState": false,
    "Interract": false,
    "ActionPoint": {
      "x": 723.116,
      "y": -1088.831,
      "z": 23.83201
    },
    "Doors": [
      {
        "Position": {
          "x": 723.116,
          "y": -1088.831,
          "z": 23.23201
        },
        "Hash": 270330101
      }
    ],
    "Access": null
  },
  {
    "Name": "lscustom:3:door",
    "Hash": -1532222857,
    "Locked": false,
    "DefaultState": false,
    "Interract": false,
    "ActionPoint": {
      "x": -205.6828,
      "y": -1310.683,
      "z": 30.8957
    },
    "Doors": [
      {
        "Position": {
          "x": -205.6828,
          "y": -1310.683,
          "z": 30.29572
        },
        "Hash": -427498890
      }
    ],
    "Access": null
  },
  {
    "Name": "fib:door:faer:close",
    "Hash": -1148446119,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": -205.6828,
      "y": -1310.683,
      "z": 30.8957
    },
    "Doors": [
      {
        "Position": {
          "x": 116.6982,
          "y": -735.3205,
          "z": 258.3023
        },
        "Hash": -2051651622
      },
      {
        "Position": {
          "x": 119.1414,
          "y": -736.2098,
          "z": 258.3023
        },
        "Hash": -2051651622
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_1/1",
    "Hash": -1814420070,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1835.285,
      "y": 2689.104,
      "z": 44.4467
    },
    "Doors": [
      {
        "Position": {
          "x": 1835.285,
          "y": 2689.104,
          "z": 44.4467
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_2/1",
    "Hash": 1032030263,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1830.134,
      "y": 2703.499,
      "z": 44.4467
    },
    "Doors": [
      {
        "Position": {
          "x": 1830.134,
          "y": 2703.499,
          "z": 44.4467
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_1/2",
    "Hash": 319726597,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1776.701,
      "y": 2747.148,
      "z": 44.44669
    },
    "Doors": [
      {
        "Position": {
          "x": 1776.701,
          "y": 2747.148,
          "z": 44.44669
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_2/2",
    "Hash": -1746420486,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1762.196,
      "y": 2752.489,
      "z": 44.44669
    },
    "Doors": [
      {
        "Position": {
          "x": 1762.196,
          "y": 2752.489,
          "z": 44.44669
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_1/3",
    "Hash": 96504169,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1662.011,
      "y": 2748.703,
      "z": 44.44669
    },
    "Doors": [
      {
        "Position": {
          "x": 1662.011,
          "y": 2748.703,
          "z": 44.44669
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_2/3",
    "Hash": -2053760937,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1648.411,
      "y": 2741.668,
      "z": 44.44669
    },
    "Doors": [
      {
        "Position": {
          "x": 1648.411,
          "y": 2741.668,
          "z": 44.44669
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_1/4",
    "Hash": 950759230,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1584.653,
      "y": 2679.75,
      "z": 44.50947
    },
    "Doors": [
      {
        "Position": {
          "x": 1584.653,
          "y": 2679.75,
          "z": 44.50947
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_2/4",
    "Hash": 1829889871,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1575.719,
      "y": 2667.152,
      "z": 44.50947
    },
    "Doors": [
      {
        "Position": {
          "x": 1575.719,
          "y": 2667.152,
          "z": 44.50947
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_1/5",
    "Hash": 718558096,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1547.706,
      "y": 2591.282,
      "z": 44.50947
    },
    "Doors": [
      {
        "Position": {
          "x": 1547.706,
          "y": 2591.282,
          "z": 44.50947
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_2/5",
    "Hash": 1533232114,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1546.983,
      "y": 2576.13,
      "z": 44.39033
    },
    "Doors": [
      {
        "Position": {
          "x": 1546.983,
          "y": 2576.13,
          "z": 44.39033
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_1/6",
    "Hash": -299705818,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1550.93,
      "y": 2482.743,
      "z": 44.39529
    },
    "Doors": [
      {
        "Position": {
          "x": 1550.93,
          "y": 2482.743,
          "z": 44.39529
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_2/6",
    "Hash": -1065284048,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1558.221,
      "y": 2469.349,
      "z": 44.39529
    },
    "Doors": [
      {
        "Position": {
          "x": 1558.221,
          "y": 2469.349,
          "z": 44.39529
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_1/7",
    "Hash": 531742019,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1652.984,
      "y": 2409.571,
      "z": 44.44308
    },
    "Doors": [
      {
        "Position": {
          "x": 1652.984,
          "y": 2409.571,
          "z": 44.44308
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_2/7",
    "Hash": -289674587,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1667.669,
      "y": 2407.648,
      "z": 44.42879
    },
    "Doors": [
      {
        "Position": {
          "x": 1667.669,
          "y": 2407.648,
          "z": 44.42879
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_1/8",
    "Hash": 881977091,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1749.142,
      "y": 2419.812,
      "z": 44.42517
    },
    "Doors": [
      {
        "Position": {
          "x": 1749.142,
          "y": 2419.812,
          "z": 44.42517
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_2/8",
    "Hash": -1312329543,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1762.542,
      "y": 2426.507,
      "z": 44.43787
    },
    "Doors": [
      {
        "Position": {
          "x": 1762.542,
          "y": 2426.507,
          "z": 44.43787
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_1/9",
    "Hash": 642763391,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1808.992,
      "y": 2474.545,
      "z": 44.48077
    },
    "Doors": [
      {
        "Position": {
          "x": 1808.992,
          "y": 2474.545,
          "z": 44.48077
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:big_dors_2/9",
    "Hash": -800674373,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1813.749,
      "y": 2488.907,
      "z": 44.46368
    },
    "Doors": [
      {
        "Position": {
          "x": 1813.749,
          "y": 2488.907,
          "z": 44.46368
        },
        "Hash": 741314661
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:tower:1",
    "Hash": -1397157072,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1820.77,
      "y": 2620.77,
      "z": 45.95126
    },
    "Doors": [
      {
        "Position": {
          "x": 1820.77,
          "y": 2620.77,
          "z": 45.95126
        },
        "Hash": -1033001619
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:tower:2",
    "Hash": -1150308195,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1845.79,
      "y": 2698.621,
      "z": 45.95531
    },
    "Doors": [
      {
        "Position": {
          "x": 1845.79,
          "y": 2698.621,
          "z": 45.95531
        },
        "Hash": -1033001619
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:tower:3",
    "Hash": 1028994150,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1773.108,
      "y": 2759.7,
      "z": 45.88673
    },
    "Doors": [
      {
        "Position": {
          "x": 1773.108,
          "y": 2759.7,
          "z": 45.88673
        },
        "Hash": -1033001619
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:tower:4",
    "Hash": 1206012288,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1651.161,
      "y": 2755.436,
      "z": 45.87868
    },
    "Doors": [
      {
        "Position": {
          "x": 1651.161,
          "y": 2755.436,
          "z": 45.87868
        },
        "Hash": -1033001619
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:tower:5",
    "Hash": 1518595779,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1572.662,
      "y": 2679.191,
      "z": 45.72976
    },
    "Doors": [
      {
        "Position": {
          "x": 1572.662,
          "y": 2679.191,
          "z": 45.72976
        },
        "Hash": -1033001619
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:tower:6",
    "Hash": -469433913,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1537.811,
      "y": 2585.995,
      "z": 45.68915
    },
    "Doors": [
      {
        "Position": {
          "x": 1537.811,
          "y": 2585.995,
          "z": 45.68915
        },
        "Hash": -1033001619
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:tower:7",
    "Hash": -2023536507,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1543.241,
      "y": 2471.294,
      "z": 45.71201
    },
    "Doors": [
      {
        "Position": {
          "x": 1543.241,
          "y": 2471.294,
          "z": 45.71201
        },
        "Hash": -1033001619
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:tower:8",
    "Hash": -1800576231,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1658.584,
      "y": 2397.722,
      "z": 45.71526
    },
    "Doors": [
      {
        "Position": {
          "x": 1658.584,
          "y": 2397.722,
          "z": 45.71526
        },
        "Hash": -1033001619
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:tower:9",
    "Hash": 605356522,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1759.62,
      "y": 2412.837,
      "z": 45.71166
    },
    "Doors": [
      {
        "Position": {
          "x": 1759.62,
          "y": 2412.837,
          "z": 45.71166
        },
        "Hash": -1033001619
      }
    ],
    "Access": null
  },
  {
    "Name": "prison:tower:10",
    "Hash": -1754244531,
    "Locked": true,
    "DefaultState": true,
    "Interract": false,
    "ActionPoint": {
      "x": 1821.17,
      "y": 2476.265,
      "z": 45.68915
    },
    "Doors": [
      {
        "Position": {
          "x": 1821.17,
          "y": 2476.265,
          "z": 45.68915
        },
        "Hash": -1033001619
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:2_right_1",
    "Hash": -1845609704,
    "Locked": false,
    "DefaultState": false,
    "Interract": false,
    "ActionPoint": {
      "x": 311.119,
      "y": -576.9609,
      "z": 82.66291
    },
    "Doors": [
      {
        "Position": {
          "x": 312.164,
          "y": -577.3336,
          "z": 82.73534
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:2_right_2",
    "Hash": -2076401771,
    "Locked": false,
    "DefaultState": false,
    "Interract": false,
    "ActionPoint": {
      "x": 320.1232,
      "y": -580.2488,
      "z": 82.68005
    },
    "Doors": [
      {
        "Position": {
          "x": 319.0817,
          "y": -579.8702,
          "z": 82.73534
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:2_left_1",
    "Hash": 2022489144,
    "Locked": false,
    "DefaultState": false,
    "Interract": false,
    "ActionPoint": {
      "x": 313.226,
      "y": -571.1711,
      "z": 82.64675
    },
    "Doors": [
      {
        "Position": {
          "x": 314.2674,
          "y": -571.5482,
          "z": 82.73534
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  },
  {
    "Name": "hospital:vinewood:2_left_2",
    "Hash": 1548977094,
    "Locked": false,
    "DefaultState": false,
    "Interract": false,
    "ActionPoint": {
      "x": 322.235,
      "y": -574.4492,
      "z": 82.66537
    },
    "Doors": [
      {
        "Position": {
          "x": 321.1916,
          "y": -574.0684,
          "z": 82.73534
        },
        "Hash": 1639164763
      }
    ],
    "Access": null
  }
]

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let oldDimension = 0;


let pedsaying = null;
let pedtext = "";
let pedtext2 = null;


let lastEntCheck = 0;
let checkInterval = 200;
let backlightColor = [196, 17, 21];
let blockcontrols = false;
let hasmoney = false;
let isInSafeZone = -1;
let safeZones = {[-1]: false};
let lastCuffUpdate = Date.now();

const animalModels = [
    1125994524,
    2910340283,
    1126154828,
    1832265812,
    1318032802,
    351016938,
]

const pokerTableHash = mp.game.joaat("poker_table_gta_go");

function getLookingAtEntity() {
    let startPosition = global.localplayer.getBoneCoords(12844, 0.5, 0, 0);
    let resolution = mp.game.graphics.getScreenActiveResolution(1, 1);
    let secondPoint = mp.game.graphics.screen2dToWorld3d([resolution.x / 2, resolution.y / 2, (2 | 4 | 8)]);
    if (secondPoint == undefined) return null;

    startPosition.z -= 0.3;
    const result = mp.raycasting.testPointToPoint(startPosition, secondPoint, global.localplayer, (2 | 4 | 8 | 16));

    if (typeof result !== 'undefined') {
        // для проверки на педы. Если наведен на педа, то testPointToPoint
        // возвращает raycast, где .entity - число
        // в остальных случаях .entity - это EntityMp
        if (typeof result.entity === 'number') 
		{
			/*
            if (global.IsMyPet(result.entity)) {
                return mp.peds.atHandle(result.entity);
            }
			*/
        }
        else {
            if (typeof result.entity.type === 'undefined') return null;
        
            let entPos = result.entity.position;
            let lPos = global.localplayer.position;
            if (mp.game.gameplay.getDistanceBetweenCoords(entPos.x, entPos.y, entPos.z, lPos.x, lPos.y, lPos.z, true) > 8) return null;
            
            if(result.entity.model == pokerTableHash) {
                global.updatePokerLable(result.entity.handle);
                return null;
            }
            //if (result.entity.type == 'object' && result.entity.getVariable('data:object:id') == undefined) return null;

            return result.entity;
        }
    }
    return null;
}

function getNearestObjects() {
    try {
        let tempO = null;
        let tempODist = null;
        if  (global.localplayer.isInAnyVehicle(false)) {
            mp.players.forEach((player) => {
                if(!player) return;
                let posL = global.localplayer.position;
                let posO = player.position;
                let distance = mp.game.gameplay.getDistanceBetweenCoords(posL.x, posL.y, posL.z, posO.x, posO.y, posO.z, true);

                if  (global.localplayer != player && global.localplayer.dimension === player.dimension && distance < 2) {
                    if (tempO === null || distance < tempODist) {
                        tempO = player;
                        tempODist = distance;
                    }
                }
            });
        }
        else {
            mp.objects.forEach((object) => {
                if(!object) return;
                let posL = global.localplayer.position;
                let posO = object.position;

                if (object.getVariable('data:object:id') != undefined && global.localplayer.dimension === object.dimension ) {
                    let distance = mp.game.gameplay.getDistanceBetweenCoords(posL.x, posL.y, posL.z, posO.x, posO.y, posO.z, true);
                
                    if (distance < 3) {
                        if (tempO === null || distance < tempODist) {
                            tempO = object;
                            tempODist = distance;
                        }
                    }   
                }
            });
        }
        global.nearestObject = tempO;
    } catch (e) {
        if(global.sendException)mp.serverLog(`getNearestObjects: ${e.name }\n${e.message}\n${e.stack}`);
    }
}

let lastArmour = 0;
function checkArmorPlayer(){
    try {
        const armour = mp.players.local.getArmour();
        if(lastArmour !== armour){
            lastArmour = armour;
            mp.events.callRemote("equip:armor:check", armour)
        }
    } catch (e) {
        if(global.sendException)mp.serverLog(`checkArmorPlayer: ${e.name }\n${e.message}\n${e.stack}`);
	}    
}

setInterval(checkArmorPlayer, 2500)

mp.events.add('blockMove', function (argument) {
    blockcontrols = argument;
});

mp.events.add('CUFFED', function (argument) {
    global.cuffed = argument;
    
    //if (argument) mp.game.invoke(global.getNative("SET_FOLLOW_PED_CAM_VIEW_MODE"), 4);
});

mp.events.add('hasMoney', function (argument) {
    hasmoney = argument;
    if (!argument) global.localplayer.setEnableHandcuffs(false);
});

mp.events.add('safeZone', function (id, active) {
    if (safeZones[id] === undefined)
        safeZones[id] = true;
    if (active){
        isInSafeZone = id;
    }
    else if (isInSafeZone == id){//чтоб не деактивировать другую зону, если они рядом находятся
        isInSafeZone = -1;
    }
    updateGreenZoneHud();
});

mp.events.add('safeZones:setInActiveZones', function (offZones) {
    offZones.forEach(id => {
        safeZones[id] = false;
    });
    updateGreenZoneHud();
});

mp.events.add('safeZones:setActiveZone', function (id, active) {
    safeZones[id] = active;
    updateGreenZoneHud();
});

function updateGreenZoneHud() {
    let inZZ = (isInSafeZone > 0 && safeZones[isInSafeZone] === true) == true;
    global.gui.setData('hud/toggleGreenZone', inZZ);
    global.inGreenZone = inZZ;
}

mp.keys.bind(global.Keys.Key_E, false, function () { // Interaction key
    // mp.events.call('notify', 4, 9, global.cursorTarget, 3000);
    // mp.events.call('notify', 4, 9, mp.players.local.vehicle, 3000);
    if ((gui.isOpened() || global.localplayer.getVariable('InDeath') == true) || global.IsPlayingDM == true ||  global.cuffed) return; // !global.localplayer.isInAnyVehicle(false)
    if (global.circleOpen) {
        global.CloseCircle();
        return;
    }
    if (!global.loggedin || global.chatActive || Date.now() < global.lastCheck) return;
    if (global.cursorTarget)
    {
        if (global.inAction && global.cursorTarget.type !== "vehicle") return;
        switch (global.cursorTarget.type) {
            case "object":
                if (global.cursorTarget && mp.objects.exists(global.cursorTarget)) {
                    mp.events.callRemote('objectInteracted', global.cursorTarget);
                }
                global.cursorTarget = null;
                break;
            case "player":
                global.showCursor(true)
                mp.events.call('playerInteractedLocal', global.cursorTarget, 0);
                break;
            case "vehicle":
                global.showCursor(true)
                mp.events.call('playerInteractedLocal', global.cursorTarget, 1);
                //global.OpenCircle('Машина', 0);
                break;
        }
    }
    
    else if (global.nearestObject != null && mp.objects.exists(global.nearestObject) && global.nearestObject.type == "object") 
        mp.events.callRemote('objectInteracted', global.nearestObject);
    global.lastCheck = Date.now() + 500;
});

mp.keys.bind(global.Keys.Key_G, false, function () 
{
  
    if ((gui.isOpened() || global.localplayer.getVariable('InDeath') == true) || global.IsPlayingDM == true ||  global.cuffed) return;
	
    if (global.circleOpen) 
	{
        global.CloseCircle();
        return;
    }
    if (!global.loggedin || global.chatActive || Date.now() < global.lastCheck) return;
	
    if (global.localplayer.isInAnyVehicle(false))
	{
        global.showCursor(true)
        mp.events.call('playerInteractedLocal', mp.players.local.vehicle, 1);
    }
    global.lastCheck = Date.now() + 500;
});

let truckorderveh = null;

mp.events.add('SetOrderTruck', (vehicle) => {
    try {
        if(truckorderveh == null) truckorderveh = vehicle;
		else truckorderveh = null;
    } catch (e) {
        if(global.sendException)mp.serverLog(`Error in render.SetOrderTruck: ${e.name }\n${e.message}\n${e.stack}`);
	}
});

let lastCheckNearestObject = 0;
const checkNearestObjectInterval = 250;

let lastTimeLogSend = 0;
const logSendInterval = 10000;



mp.events.add('render', () => {
	try {
        if (global.localplayer.dimension != oldDimension) {
            mp.events.call("onChangeDimension", oldDimension, global.localplayer.dimension);
            oldDimension = global.localplayer.dimension;
        }
        if(mp.game.ui.isPauseMenuActive())
            mp.gui.cursor.visible = false; 
        if (global.phoneCameraIsOpened)
            mp.game.controls.disableControlAction(0, 200, true);

        // else 
        // if(mp.gui.cursor.visible !== global.cursorShow)
        //     mp.gui.cursor.visible = global.cursorShow;
            
        if(characterEditor) {
            mp.players.local.setRotation(global.editorRotation.x, global.editorRotation.y, global.editorRotation.z, 2, true);
            mp.players.local.setCoordsNoOffset(global.editorPosition.x, global.editorPosition.y, global.editorPosition.z, false, false, false);
        }
		if(pedsaying != null) {
			let pos = pedsaying.getBoneCoords(12844, 0.5, 0, 0);
			mp.game.graphics.drawText(pedtext, [pos.x, pos.y, pos.z+0.1], {
				font: 0,
				color: [255, 255, 255, 185],
				scale: [0.35, 0.35],
				outline: true
			});
			if(pedtext2 != null) {
				let pos = pedsaying.getBoneCoords(12844, 0.5, 0, 0);
				mp.game.graphics.drawText(pedtext2, [pos.x, pos.y, pos.z+0.017], {
					font: 0,
					color: [255, 255, 255, 185],
					scale: [0.35, 0.35],
					outline: true
				});
			}
		}
		if (!global.pidrgm) global.localplayer.setInvincible(false);
        mp.game.player.setLockonRangeOverride(1.5);
        mp.game.controls.disableControlAction(1, 7, true);
		// thanks to kemperrr
		if (mp.game.invoke(global.getNative('IS_CUTSCENE_ACTIVE'))) {
	        mp.game.invoke(global.getNative('STOP_CUTSCENE_IMMEDIATELY'))
		}

	    if (mp.game.invoke(global.getNative('GET_RANDOM_EVENT_FLAG'))) {
	        mp.game.invoke(global.getNative('SET_RANDOM_EVENT_FLAG'), false);
		}

		if (mp.game.invoke(global.getNative('GET_MISSION_FLAG'))) {
			mp.game.invoke(global.getNative('SET_MISSION_FLAG'), false);
		}


		if (global.pocketEnabled || global.cuffed) {
	        mp.game.controls.disableControlAction(2, 0, true);
	    }

	    if (blockcontrols) {
		    mp.game.controls.disableAllControlActions(2);
			mp.game.controls.enableControlAction(2, 30, true);
	        mp.game.controls.enableControlAction(2, 31, true);
		    mp.game.controls.enableControlAction(2, 32, true);
			mp.game.controls.enableControlAction(2, 1, true);
	        mp.game.controls.enableControlAction(2, 2, true);
		}
		if (hasmoney) {
	        global.localplayer.setEnableHandcuffs(true);
        }
        if (global.inGreenZone && global.getCurrentPlayerWeapon() != 911657153 && global.LOCAL_ADMIN_LVL == 0) {
            mp.game.controls.disableControlAction(2, 24, true);
            mp.game.controls.disableControlAction(2, 69, true);
            mp.game.controls.disableControlAction(2, 70, true);
            mp.game.controls.disableControlAction(2, 92, true);
            mp.game.controls.disableControlAction(2, 114, true);
            mp.game.controls.disableControlAction(2, 121, true);
            mp.game.controls.disableControlAction(2, 140, true);
            mp.game.controls.disableControlAction(2, 141, true);
            mp.game.controls.disableControlAction(2, 142, true);
            mp.game.controls.disableControlAction(2, 257, true);
            mp.game.controls.disableControlAction(2, 263, true);
            mp.game.controls.disableControlAction(2, 264, true);
            mp.game.controls.disableControlAction(2, 331, true);
        }
        
		if (mp.keys.isDown(32) && global.cuffed && lastCuffUpdate > Date.now()) {
			mp.events.callRemote("cuffUpdate");
	        lastCuffUpdate = Date.now() + 3000;
		}
        
		if (!global.localplayer.isInAnyVehicle(false) && !global.localplayer.isDead()) {
	        if (!global.circleOpen)
            global.cursorTarget = getLookingAtEntity();   
            if (global.cursorTarget && global.cursorTarget.getVariable && global.cursorTarget.getVariable('INVISIBLE') == true) global.cursorTarget = null;
		}
        else {
            if (global.cursorTarget !== global.nearestObject) global.cursorTarget = null;
        }
        
        if (Date.now() > lastCheckNearestObject) {
            getNearestObjects();
            lastCheckNearestObject = Date.now() + checkNearestObjectInterval;
        }

	    if (global.nearestObject != null && (global.cursorTarget == null || global.cursorTarget.type != "object")) {
            if (!mp.objects.exists(global.nearestObject)) return;
		    mp.game.graphics.drawText("•", [global.nearestObject.position.x, global.nearestObject.position.y, global.nearestObject.position.z], {
			    font: 0,
	            color: [182, 211, 0, 200],
		        scale: [0.5, 0.5],
			    outline: true
			});
		}
        else if (global.cursorTarget && !mp.players.local.isInAnyVehicle(false)) {
			if(global.cursorTarget != truckorderveh) {
                let pos = null;
                switch (global.cursorTarget.type) {
                    case "ped":
                        pos = global.cursorTarget.getCoords(true);
                        break;
                    default:
                        if(!global.cursorTarget) return;
                        pos = global.cursorTarget.position;
                        pos = new mp.Vector3(pos.x, pos.y, pos.z + 0.5);
                        break;
                }

				mp.game.graphics.drawText("•", [pos.x, pos.y, pos.z], {
					font: 0,
					color: [182, 211, 0, 200],
					scale: [0.5, 0.5],
					outline: false
				});
			}
		}
	} catch (e) {        
        if(global.sendException && Date.now() > lastTimeLogSend){
            lastTimeLogSend = Date.now() + logSendInterval;
            mp.serverLog(`Error in render.render: ${e.name }\n${e.message}\n${e.stack}`);
        } 
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let cruiseSpeed = -1;
let cruiseLastPressed = 0;
let showHint = true;
mp.game.ui.setHudColour(18, 182, 211, 0, 0);// green color

let hudstatus =
{
    safezone: null, // Last safezone size
    online: 0, // Last online int
    id: 0, // Player id
    lastCheck: 0,
    updateInterval: 250,
    street: null,
    area: null,

    invehicle: false,
    updatespeedTimeout: 0, // Timeout for optimization speedometer
    engine: false,
    doors: true,
    fuel: 0,
    health: 0
}

function getMinimapAnchor() {
    let sfX = 1.0 / 20.0;
    let sfY = 1.0 / 20.0;
    let safeZone = mp.game.graphics.getSafeZoneSize();
    let aspectRatio = mp.game.graphics.getScreenAspectRatio(false);
    let resolution = mp.game.graphics.getScreenActiveResolution(0, 0);
    let scaleX = 1.0 / resolution.x;
    let scaleY = 1.0 / resolution.y;

    let minimap = {
        width: scaleX * (resolution.x / (4 * aspectRatio)),
        height: scaleY * (resolution.y / 5.674),
        scaleX: scaleX,
        scaleY: scaleY,
        leftX: scaleX * (resolution.x * (sfX * (Math.abs(safeZone - 1.0) * 10))),
        bottomY: 1.0 - scaleY * (resolution.y * (sfY * (Math.abs(safeZone - 1.0) * 10))),
    };

    minimap.rightX = minimap.leftX + minimap.width;
    minimap.topY = minimap.bottomY - minimap.height;
    return minimap;
}

mp.events.add('gui:ready', () => {
    global.gui.setData('hud/setMinimapSize', JSON.stringify(getMinimapAnchor()));
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, () => {
    if (mp.game.ui.isPauseMenuActive()) {
        global.gui.setData('hud/setMinimapSize', JSON.stringify(getMinimapAnchor()));
        global.showHud(false)
        global.showHud(true)
    }
})

// HUD events
mp.events.add('notify', (type, layout, msg, time) => {
    let data = {
        type: type,
        position: layout,
        message: msg,
        time: time
    }
    global.gui.setData('notifyList/notify', JSON.stringify(data));
});

// Auth notify
mp.events.add('authNotify', (status, head, msg) => {
    let data = {
        status: status,
        head: head,
        msg: msg
    }
    global.gui.setData('auth/notifyAdd', JSON.stringify(data));
});

let currentLvl;
let state = '';
let expAfterFill = 0;
mp.events.add('exp:upd', (exp, lvl) => {
    if (global.frontendSoundsEnabled)
        mp.game.audio.playSoundFrontend(-1 , 'BASE_JUMP_PASSED', 'HUD_AWARDS', false)
    if (currentLvl === lvl) {
        state = 'charge';
        global.gui.setData('hud/setNextExp', exp);
        global.gui.setData('hud/toggleLevelUpShow', true);
    }
    else {
        state = 'fill';
        global.gui.setData('hud/setNextExp', 3 + currentLvl * 3);
        global.gui.setData('hud/toggleLevelUpShow', true);
        expAfterFill = exp;
        currentLvl = lvl;
    }
});
mp.events.add('exp:timerStoped', () => {
    switch (state) {
        case 'charge':
            setTimeout(() => {
                global.gui.setData('hud/toggleLevelUpShow', false);
            }, 5000);
            state = '';
            return;
        case 'fill':
            if (expAfterFill !== 0){
                global.gui.setData('hud/toggleLevelUpShow', false);
                state = 'charge';
                global.gui.setData('hud/setLevel', currentLvl);
                global.gui.setData('hud/setNextExp', expAfterFill);
                
                global.gui.setData('hud/toggleLevelUpShow', true);
                expAfterFill = 0;
            }
            setTimeout(() => {
                global.gui.setData('hud/toggleLevelUpShow', false);
                global.gui.setData('hud/setLevel', currentLvl);
            }, 5000);
            return;
        case '':
            setTimeout(() => {
                global.gui.setData('hud/toggleLevelUpShow', false);
            }, 5000);
    }
});
mp.events.add('exp:init', (exp, lvl) => {
    currentLvl = lvl;
    global.gui.setData('hud/setLevelUp', JSON.stringify({ lvl, exp }));
});


mp.events.add('alert', (message) => {
    global.gui.setData('hud/setNotificationShow', JSON.stringify(message));
});

mp.events.add('ready', function (myId, myLogin) {
    hudstatus.id = myId;
    global.gui.setData('hud/updateData', JSON.stringify({name: 'id', value: myId}));
    global.gui.setData('optionsMenu/setLogin', JSON.stringify(myLogin));
});

let introMoneyGiven = false;
mp.events.add('UpdateMoney', function (value) {
    global.gui.setData('hud/updateData', JSON.stringify({name: 'money', value}));
    if (global.frontendSoundsEnabled && introMoneyGiven)
        mp.game.audio.playSoundFrontend(-1, "REMOTE_PLYR_CASH_COUNTER_INCREASE", "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS", false);  
    if (!introMoneyGiven) introMoneyGiven = true;
});
mp.events.add('UpdateBank', function (value) {
    global.gui.setData('hud/updateData', JSON.stringify({name: 'bank', value}));
});
mp.events.add('setWanted', function (lvl) {
    global.gui.setData("hud/setWantedLevels", lvl)
});
mp.events.add("hud:arrest:timer:update", (time, reason)=>{
    global.gui.setData("hud/setArrestTimer", JSON.stringify({time, reason}))
});
mp.events.add("hud:arrest:timer:reset", ()=>{
    global.gui.setData("hud/resetArrestTimer")
});
function UpdateOnlineHud() {
    hudstatus.online = mp.players.length;
    global.gui.setData('hud/updateData', JSON.stringify({name: 'online', value: hudstatus.online}));
}
// mp.keys.bind(global.Keys.Key_F5, true, function () { // F5 key
//     global.gui.setData('hud/showHelp', 'true');
// });


mp.events.add('setCruiseSpeed', function (speed) {
    speed = parseInt(speed);
    if (speed === NaN || speed < 1) return;
    if (!mp.players.local.isInAnyVehicle(true) || !mp.players.local.vehicle || mp.players.local.vehicle.getPedInSeat(-1) != mp.players.local.handle) return;
	let vclass = mp.players.local.vehicle.getClass();
	if(vclass == 14 || vclass == 15 || vclass == 16) return;
	if (mp.players.local.vehicle.isOnAllWheels() == false) return;
	let veh = mp.players.local.vehicle;
	let curSpeed = veh.getSpeed();
	if(speed < curSpeed) {
		mp.events.call('notify', 4, 9, "client_20", 6000);
		return;
	}
    speed = speed / 3.6; // convert from kph to mps
    let maxSpeed = mp.game.vehicle.getVehicleModelMaxSpeed(veh.model);
    if (speed > maxSpeed) speed = maxSpeed;
    veh.setMaxSpeed(speed);
    //mp.gui.execute(`HUD.cruiseColor='#eebe00'`);
    cruiseSpeed = speed;
});

mp.events.add('newPassport', function (player, pass) {
    if (player && mp.players.exists(player))
        global.passports[player.name] = pass;
        mp.storage.data.passports = global.passports;
        //mp.storage.flush()
});

let showAltTabHint = false;
mp.events.add('showAltTabHint', function () {
    showAltTabHint = true;
    setTimeout(function () { showAltTabHint = false; }, 10000);
});

let tmr = null;
mp.events.add('SERVER::CLIENT::SET_TIME_BONUS', (minsBonus, moneyBonus) => {
    // mp.console.logInfo("I'm here 1", true, true);
    // if (tmr != null) clearTimeout(tmr);
    // tmr = setTimeout(function () {
    //     mp.console.logInfo("I'm here 2", true, true);
    //     let obj = {
    //         active: false,
    //         timeout: minsBonus,
    //         moneyBonus: moneyBonus--
    //     }

    //     if (moneyBonus < 1) {
    //         mp.console.logInfo("I'm here 4", true, true);
    //         obj.timeout -1
    //         mp.events.callRemote("CLIENT::SERVER::TRIGGER_BONUS_DONATE");
    //         clearTimeout(tmr)
    //     } else {
    //         mp.console.logInfo("I'm here 5", true, true);
    //         obj.active = true;
    //         global.gui.setData('hud/bonusDonateMoney', JSON.stringify(obj));
    //     }
    // }, 60000);

    global.gui.setData('hud/setBonusTime', JSON.stringify({
        timeout: minsBonus,
        moneyBonus: moneyBonus
    }));
});

mp.events.add('render', () => {
    // double-cursor fix
    if (!global.loggedin) return;

    // Disable HUD components.    
    mp.game.ui.hideHudComponentThisFrame(2); // HUD_WEAPON_ICON
    mp.game.ui.hideHudComponentThisFrame(3); // HUD_CASH
    mp.game.ui.hideHudComponentThisFrame(6); // HUD_VEHICLE_NAME
    mp.game.ui.hideHudComponentThisFrame(7); // HUD_AREA_NAME
    mp.game.ui.hideHudComponentThisFrame(8); // HUD_VEHICLE_CLASS
    mp.game.ui.hideHudComponentThisFrame(9); // HUD_STREET_NAME
    mp.game.ui.hideHudComponentThisFrame(19); // HUD_WEAPON_WHEEL
    mp.game.ui.hideHudComponentThisFrame(20); // HUD_WEAPON_WHEEL_STATS
    mp.game.ui.hideHudComponentThisFrame(22); // MAX_HUD_WEAPONS
    
    if (hudstatus.online != mp.players.length) {
        UpdateOnlineHud();
    }

    if (mp.players.local.isInAnyVehicle(false) && mp.players.local.vehicle != null) {
        if (cruiseSpeed != -1) // kostyl'
                veh.setMaxSpeed(cruiseSpeed);
                
		if (mp.players.local.vehicle.getPedInSeat(-1) == mp.players.local.handle && hudstatus.lastCheck < Date.now()) {
            hudstatus.lastCheck = Date.now() + hudstatus.updateInterval;
            if (!hudstatus.invehicle) 
                global.gui.setData('speedometer/setInVeh', true);
			hudstatus.invehicle = true;

			let veh = mp.players.local.vehicle;
            
			let petrol = veh.getVariable('PETROL');
			let maxpetrol = veh.getVariable('MAXPETROL');
			if (maxpetrol === undefined) maxpetrol = 100;
			if (petrol === undefined) petrol = 0;
			if (petrol > maxpetrol) petrol = maxpetrol;
			
			if (hudstatus.fuel != petrol) 
			{
				global.gui.setData('speedometer/setMaxFuel', maxpetrol);
				global.gui.setData('speedometer/setCurFuel', petrol);
				hudstatus.fuel = petrol;
			}
			
			let engine = veh.getIsEngineRunning();
			if (engine != null && engine !== hudstatus.engine) {
				global.gui.setData('speedometer/setEngine', engine == true);
				hudstatus.engine = engine;
			}

            let locked = veh.getDoorLockStatus() == 1 ? false : true;

            if (hudstatus.doors !== locked) {
                global.gui.setData('speedometer/setDoors', locked == true);
                hudstatus.doors = locked;
            }
            
            let speed = (veh.getSpeed() * 3.6).toFixed();
            global.gui.setData('speedometer/setCurSpeed', speed);
			hudstatus.updatespeedTimeout = Date.now();
		}
    } 
    else 
    {
        if (hudstatus.invehicle) {
            hudstatus.invehicle = false;
            global.gui.setData('speedometer/setInVeh', false);
            mp.players.local.setConfigFlag(32, false);    
            global.gui.setData('speedometer/setBelt', false);
        }
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {mp.nametags.enabled = false;

let reupdateTagLabel = [];
let tagLabelPool = [];

let playerPos = void 0;
//let playerTarget = void 0;
let playerAimAt = void 0;
let width = 0.025;
let height = 0.004;
let border = 0.001;
const actionShowTime = 15 * 1000;

let sendingExcept = false;

mp.events.add("tag:add:action", (id, msg)=>{
    let player = mp.players.atRemoteId(id);
    global.gui.pushChat(player.name.replace('_', ' '), msg, "#5D55FF");
    player.doAction = {action: msg, expiried: Date.now() + actionShowTime};
})

mp.events.add('setFriendList', function (friendlistString) {
    let friendlist = JSON.parse(friendlistString);
    friendlist.forEach(friend => {
        global.friends[friend.Nickname] = true;
    });
});

mp.events.add('addFriendToList', function (name) {
    global.friends[name] = true;
});

function calculateDistance(v1, v2) {
    let dx = v1.x - v2.x;
    let dy = v1.y - v2.y;
    let dz = v1.z - v2.z;

    return Math.sqrt(dx * dx + dy * dy + dz * dz);
}

global.playerIsFriend = (player)=>{
    return global.friends[player.name] !== undefined;
}

global.playerIsFractionMember = (player)=>{
    let localFraction = global.localplayer.getVariable('fraction');
    let playerFraction = player.getVariable('fraction');
    return localFraction != null && localFraction !== 0 && playerFraction != null && localFraction === playerFraction ;
}

global.playerIsFamilyMember = (player)=>{
    let localFamily = global.getVariable(mp.players.local, 'familyuuid', 0);
    let playerFamily = global.getVariable(player, 'familyuuid', 0);
    return localFamily !== 0 && localFamily === playerFamily;
}

global.iKnowThisPlayer = (player)=>{
    if(!player) return false;
    return player === mp.players.local || global.getVariable(mp.players.local, 'ALVL', 0) > 0 || global.playerIsFractionMember(player) || global.playerIsFamilyMember(player) || global.playerIsFriend(player);
}

const nameHash = {
    "name": {
        "firstName": "firstName",            
        "lastName": "lastName"
    }
}

mp.events.add('render', (nametags) => {

    if (!global.loggedin) return;
    playerPos = mp.players.local.position;
    playerAimAt = mp.game.player.getEntityIsFreeAimingAt();
    //playerTarget = mp.game.player.getTargetEntity();
    
    // Get variables
    let isAdmin = global.getVariable(mp.players.local, 'ALVL', 0) > 0;

    // Admin get target info
    /*if (isAdmin == true) {
        player = playerAimAt;
        if (player !== undefined && player.handle !== undefined && player.handle) {
            if (player.getType() === 4) {
                mp.game.graphics.drawText(player.name + ' (' + player.remoteId + ')', [0.5, 0.8], { font: 4, color: [255, 255, 255, 235], scale: [0.5, 0.5], outline: true });
            }
        }
    }*/

    // Player gamertags
    if (mp.storage.data.mainSettings.showNames) {

        //testTag(nametags); //<<<<<<<<<<<<<<<<<<<<<<<< COMMENT

        nametags.forEach(function (nametag) {
            try {
                    _player = nametag[0],
                    x = nametag[1],
                    y = nametag[2] - .035,
                    distance = nametag[3];
                
                if (calculateDistance(playerPos, _player.position) < 15.0) {
                    if (_player.getVariable('INVISIBLE') != true && _player.getVariable('HideNick') != true) {
                        
                        if (tagLabelPool[_player.remoteId] === undefined || reupdateTagLabel[_player.remoteId] === undefined || reupdateTagLabel[_player.remoteId] < Date.now()) {                            
                            reupdateTagLabel[_player.remoteId] = Date.now() + 500;
                            if(nameHash[_player.name] == undefined) {
                                const nameArray = _player.name.split('_');
                                nameHash[_player.name] = {"firstName": nameArray[0], "lastName": nameArray[1]}
                            }

                            let text = "";

                            //C_ID
                            //_player.getVariable('C_ID')
                            //if (_player.getVariable('ADM_NAME') === true)
                            //    text += "ADMINISTRATOR\n";
                            
                            if (isAdmin === true){                                
                                text += `${nameHash[_player.name].firstName} ${nameHash[_player.name].lastName} ${_player.getVariable('IS_MASK') == true ? '(M)' : ''}\nID: ${_player.getVariable('C_ID')}`;
                                //text += `Незнакомец\n#${_player.remoteId}`;
                            } else if (global.isFight || global.isDemorgan) {
                                text += `Незнакомец\n#${_player.getVariable('C_ID')}`;
                            } else if (global.playerIsFractionMember(_player) || global.playerIsFamilyMember(_player)){
                                text += `${nameHash[_player.name].firstName} ${nameHash[_player.name].lastName}\nID: ${_player.getVariable('C_ID')}`;
                            } else if (_player.getVariable('IS_MASK') == true) {
                                text += `Незнакомец\nID: ${_player.getVariable('C_ID')}`;
                            } else {
                                if (!global.playerIsFriend(_player))                                
                                    text += `Незнакомец\nID: ${_player.getVariable('C_ID')}`;
                                else
                                    text += `${nameHash[_player.name].firstName} ${nameHash[_player.name].lastName}\nID: ${_player.getVariable('C_ID')}`;
                            }
                            
                            let color;
                            if (global.localplayer.getVariable('fraction') != 7) { // only policeman could see carthiefs' red names
                                color = _player.getVariable('ADM_NAME') === true ? [182, 211, 0, 255] : [255, 255, 255, 255];
                            }
                            else {
                                color = _player.getVariable('REDNAME') === true ? [255, 0, 0, 255] : _player.getVariable('ADM_NAME') === true ? [182, 211, 0, 255] : [255, 255, 255, 255];
                            }
                            let hpNarmor = "";
                            let fraction = "";
                            
                            if(_player.doAction)
                            {
                                if(_player.doAction.expiried < Date.now()) {
                                    _player.doAction = undefined;
                                    text = `\n${text}`;
                                }else text = `~p~${_player.doAction.action}\n~w~${text}`;
                            }else text = `\n${text}`;

                            tagLabelPool[_player.remoteId] = { text, color: color, hpNarmor: hpNarmor, fraction: fraction };
                            //add action
                            
                        }
                        if (_player.vehicle) 
                            y += 0.065;
                        let label = tagLabelPool[_player.remoteId];
                        if (label !== undefined) {
                            if (!isAdmin || global.esptoggle != 1 && global.esptoggle != 3)
                            {
                                drawPlayerTag(_player, x, y, label.text, label.color, label.hpNarmor, label.fraction);
                                drawPlayerDead(_player, x, y);
                            }
                            drawPlayerVoiceIcon(_player, x, y);
                            drawPlayerIcon(_player, x, y);
                        }
                    }
                }
            } catch (e) {
                if (global.sendException && !sendingExcept) {
                    sendingExcept = true;
                    mp.serverLog(`Error in gametags.render: ${e.name}\n${e.message}\n${e.stack}`);
                } 
            }
        });
    }
});
function drawPlayerTag(player, x, y, displayname, color, hpNarmor, fraction) {
    //let position = player.getBoneCoords(12844, 0.6, 0, 0); //player.position;
    //position.z += 1.5;
    //let frameTime = lastFrameTime;
    //const frameRate = 1.0 / (mp.game.invoke("0x15C40837039FFAF7") / );

    
    // draw user name
    mp.game.graphics.drawText(displayname, [x, y], { font: 4, color: color, scale: [0.35, 0.35], outline: true });

    if (hpNarmor != "")
    {
        mp.game.graphics.drawText(`Frac: ${fraction}, ${hpNarmor}`, [x, y + 0.04], { font: 4, color: color, scale: [0.35, 0.35], outline: true });
    }
    // draw health & ammo bar
    else if (/*playerTarget != undefined && player.handle == playerTarget.handle ||*/ playerAimAt != undefined && player.handle == playerAimAt.handle || global.spectating) {
        y += 0.08;
        let health = player.getHealth();
        health = health <= 100 ? health / 100 : (health - 100) / 100;

        let armour = player.getArmour() / 100;
        if (armour > 0) {

            mp.game.graphics.drawRect(x, y, width + border * 2, height + border * 2, 0, 0, 0, 200);
            mp.game.graphics.drawRect(x, y, width, height, 150, 150, 150, 255);
            mp.game.graphics.drawRect(x - width / 2 * (1 - health), y, width * health, height, 255, 255, 255, 200);

            y -= 0.007;

            mp.game.graphics.drawRect(x, y, width + border * 2, height + border * 2, 0, 0, 0, 200);
            mp.game.graphics.drawRect(x, y, width, height, 41, 66, 78, 255);
            mp.game.graphics.drawRect(x - width / 2 * (1 - armour), y, width * armour, height, 48, 108, 135, 200);
        } else {

            mp.game.graphics.drawRect(x, y, width + border * 2, height + border * 2, 0, 0, 0, 200);
            mp.game.graphics.drawRect(x, y, width, height, 150, 150, 150, 255);
            mp.game.graphics.drawRect(x - width / 2 * (1 - health), y, width * health, height, 255, 255, 255, 200);
        }
    }
}

function drawPlayerVoiceIcon(player, x, y) {
    let lvl = global.getVariable(player, 'lvl', 0);
    if (player.isVoiceActive)
        drawVoiceSprite("mpleaderboard", 'leaderboard_audio_3', [0.7, 0.7], 0, lvl >= 2 ? [255, 255, 255, 255] : [255, 0, 0, 255], x, y - 0.02 * 0.7);
    else if (player.getVariable('voice.mute') == true)
        drawVoiceSprite("mpleaderboard", 'leaderboard_audio_mute', [0.7, 0.7], 0, [255, 0, 0, 255], x, y - 0.02 * 0.7);
}

function drawPlayerDead(player, x, y) {
    let InDeath = (player.getVariable('InDeath') == true);
    if (InDeath) {
        drawVoiceSprite("mpinventory", 'deathmatch', [0.7, 0.7], 0, [255, 0, 0, 255], x, y + 2 * 0.08);
        // mp.game.graphics.drawText("Dying", [x, y + 0.06], { font: 4, color: [70, 70, 70, 255], scale: [0.35, 0.35], outline: true });
    }
}

function drawPlayerIcon(player, x, y) {
    let colorIndex = global.getVariable(player, 'playerIcon:color', -1);
    let dict = global.getVariable(player, 'playerIcon:dict', 'none');
    let name = global.getVariable(player, 'playerIcon:name', 'none');
    if (dict == 'none' || name == 'none' || colorIndex == -1)
        return;
    let color = { "Red":255, "Green":255, "Blue":255 };
    let index = global.RageColorsList.findIndex(item => item.Number == colorIndex);
    if (index > -1)
        color = global.RageColorsList[index];
    drawVoiceSprite(dict, name, [0.3, 0.3], 0, [color.Red, color.Green, color.Blue, 255], x, y + 0.08);
}

function drawVoiceSprite(dict, name, scale, heading, color, x, y, layer) {
    if (mp.game.graphics.hasStreamedTextureDictLoaded(dict)) {
        const resolution = mp.game.graphics.getScreenActiveResolution(0, 0);
        const textureResolution = mp.game.graphics.getTextureResolution(dict, name);
        const textureScale = [scale[0] * textureResolution.x / resolution.x, scale[1] * textureResolution.y / resolution.y];
        if (typeof layer === 'number') mp.game.graphics.set2dLayer(layer);        
        mp.game.graphics.drawSprite(dict, name, x, y, textureScale[0], textureScale[1], heading, color[0], color[1], color[2], color[3]);
    } else mp.game.graphics.requestStreamedTextureDict(dict, true);
}

function testTag(nametags){
    const pos = mp.game.graphics.world3dToScreen2d(global.localplayer.position.x, global.localplayer.position.y, global.localplayer.position.z + 1.2)
    if(pos) nametags.push([global.localplayer, pos.x, pos.y, 5])
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {

global.goodScreenFadeOut = function(fadeoutTime, blackTime, fadeinTime) {
    mp.game.cam.doScreenFadeOut(fadeoutTime);

    setTimeout(() => {
        mp.game.cam.doScreenFadeIn(fadeinTime);
    }, blackTime);
}

global.input = {
    head: "",
    desc: "",
    len: "",
    cBack: "",
    set: function(h, d, l, c) {
        this.head = h, this.desc = d;
        this.len = l, this.cBack = c;
        if (gui.isOpened()) return;
        global.gui.setData('inputMenu/setData', JSON.stringify({tittle: this.head, plHolder: this.desc, length: this.len}))
    },
    open: function() {
        global.gui.openPage('InputMenu');
        //mp.events.call('startScreenEffect', "MenuMGHeistIn", 1, true);
    },
    close: function() {
        global.gui.close();
        //mp.events.call('stopScreenEffect', "MenuMGHeistIn");
    }
};

let maxAmount = 100000;
mp.events.add('input', (text) => {
    if (global.input.cBack == "") return;
	if (global.input.cBack == "petAttackPlayer") 
	{
		let number = parseInt(text);
		if (number === NaN || number < 0) return;
		
		mp.events.callRemote('server::pet:attackPlayer', number);
		global.input.close();
	}
	else if (global.input.cBack == "petAttackPet")
	{
		let number = parseInt(text);
		if (number === NaN || number < 0) return;
		
		mp.events.callRemote('server::pet:attackPet', number);
		global.input.close();
	}
	else if (global.input.cBack == "petSniffPlayer")
	{
		let number = parseInt(text);
		if (number === NaN || number < 0) return;
		
		mp.events.callRemote('server::pet:sniffTarget', number);
		global.input.close();
	}
    else if (global.input.cBack == "setCruise")
	{
		mp.events.call('setCruiseSpeed', text);
		global.input.close();
	}
    else
	{
        if(global.input.cBack == "player_givemoney" && text > maxAmount) {
            mp.events.call('notify', 4, 9,`client_70@${maxAmount}`, 3000)
            return;
        }
        mp.events.callRemote('inputCallback', global.input.cBack, text);
        global.input.cBack = "";
        global.input.close();
    }
});
mp.events.add('openInput', (h, d, l, c) => {
    if (gui.isOpened()) return;
    input.set(h, d, l, c);
    input.open();
})
mp.events.add('closeInput', () => {
        input.close();
})
// // // // //
global.dialog = {
    queue:[],
    current: undefined,
    
    add(item){
        this.queue.push(item)
        if(this.current == undefined) this.check();
    },

    pressY(){
        if(this.current !== undefined) {
                mp.events.callRemote('dialogCallback', this.current.callback, true);            
            this.check();
        }
    }, 

    pressN(){
        if(this.current !== undefined) {
                mp.events.callRemote('dialogCallback', this.current.callback, false);            
            this.check();
        }
    }, 
    check: function() {
        this.current = this.queue.shift();

        if(this.current != undefined)
        {
            if (global.gui.isOpened()) {
                mp.events.call('dialog:open', this.current.question, [
                    { Name: 'dialog_0', Icon: 'confirm' },
                    { Name: 'dialog_1', Icon: 'cancel' }
                ], dialogCallback);
            }
            else {
                global.gui.setData("questionMenu/setTitle", `'${this.current.question}'`)
            }
        }
        else 
            global.gui.setData("questionMenu/setTitle", '')

        
    },

    close: function() {
        global.gui.close(!global.gui.isOpened())
    },
}

const dialogCallback = (buttonIndex) => {
    // confirm
    if (buttonIndex === 0) {
        global.dialog.pressY();
    }
    // decline
    else {
        global.dialog.pressN();
    }
};

mp.keys.bind(global.Keys.Key_Y, false, ()=>{global.dialog.pressY()})

mp.keys.bind(global.Keys.Key_N, false, ()=>{global.dialog.pressN()})
    
mp.events.add('openDialog', (c, q) => {
    global.dialog.add({
        callback: c,
        question: q
    })
})

// STOCK //
mp.events.add('openStock', (data) => {
    global.gui.setData('stockMenu/setCount', data);
    global.gui.openPage('StockMenu');
});
mp.events.add('stock:get', (type, amount) => {
    global.gui.close();

    if (type == 'weapons') {
        mp.events.callRemote('openWeaponStock');
    } else {
        if (isNaN(parseInt(amount))) return;
        mp.events.callRemote('stock::change', 'take_stock', type, amount);
    }
});
mp.events.add('stock:put', (type, amount) => {
    global.gui.close();

    if (type == 'weapons') {
        mp.events.callRemote('openWeaponStock');
    } else {
        if (isNaN(parseInt(amount))) return;
        mp.events.callRemote('stock::change', 'put_stock', type, amount);
    }
});



// SM DATA //
mp.events.add('policeg', () => {
    let data = [
        "Nightstick",
        "Pistol",
        "CombatPDW",
        "PumpShotgun",
        "StunGun",
        "Broni",
        "Medikamenti",
        "Pistol Ammo x12",
        "SMG Ammo x30",
        "Shotguns Ammo x6",
        "Radio Set"
    ];
    openSM(4, JSON.stringify(data));
});
mp.events.add('fbiguns', () => {
    let data = [
        "StunGun",
        "Combat Pistol",
        "Combat PDW",
        "Carbine Rifle",
        "Heavy Sniper",
        "Broni",
        "Medikamentebi",
        "Pistol Ammo x12",
        "SMG Ammo x30",
        "Rifles Ammo x30",
        "Sniper Ammo x5",
        "Sashvi",
        "Radio Set"
    ];
    openSM(3, JSON.stringify(data));
});
mp.events.add('govguns', () => {
    let data = [
        "Tazer",
        "Pistol",
        "Advanced Rifle",
        "Gusenberg Sweeper",
        "Broni",
        "Medikamentebi",
        "Pistol Ammo x12",
        "SMG Ammo x30",
        "Rifles Ammo x30",
        "Radio Set"
    ];
    openSM(6, JSON.stringify(data));
});
mp.events.add('armyguns', () => {
    let data = [
        "Pistol",
        "carbine",
        "CombatMG",
        "Broni",
        "Medikamentebi",
        "Pistol Ammo x12",
        "Rifles Ammo x30",
        "SMG Ammo x100",
        "Radio Set"
    ];
    openSM(7, JSON.stringify(data));
});
mp.events.add('refereeg', () => {
    let data = [
        "Tazer",
        "Pistol",
        "Advanced Rifle",
        "Broni",
        "Medikamentebi",
        "Pistol Ammo x12",
        "SMG Ammo x30",
        "Rifles Ammo x30",
        "Radio Set"
    ];
    openSM(10, JSON.stringify(data));
});
mp.events.add('mavrshop', () => {
    let data = [
        ["client_45", "1000$"],
        ["client_46", "1000$"],
        ["client_47", "2000$"],
        ["client_48", "5000$"]
    ];
    openSM(2, JSON.stringify(data));
});
mp.events.add('gangmis', () => {
    let data = [
        "client_49",
        "client_50",
    ];
    openSM(8, JSON.stringify(data));
});
mp.events.add('mafiamis', () => {
    let data = [
        "client_51",
        "client_52",
        "client_53",
    ];
    openSM(9, JSON.stringify(data));
});
mp.events.add('shop', (json) => {
    let data = JSON.parse(json);
    openSM(1, JSON.stringify(data));
})

// PETROL //

let fuelMenuOpen = false;
mp.events.add('gasStation:buyFuel', (key, liters, playmentType) => {
    mp.events.callRemote('gasStation:buypetrol', key, liters, playmentType);
    closeFuelMenu();
});

function closeFuelMenu()
{
	if (!fuelMenuOpen) return;
	
	global.gui.close();
	fuelMenuOpen = false;
}

mp.events.add('openPetrol', (st, stplus, diesel, deluxe, electro) => {
    if(!mp.players.local.vehicle) return;
    let data = 
	{ 
        cur: mp.players.local.vehicle.getVariable('PETROL'), 
        max: mp.players.local.vehicle.getVariable('MAXPETROL'),
        price1: st,
        price2: stplus,
        price3: diesel,
        price4: deluxe,
        price5: electro,
        active: mp.players.local.vehicle.getVariable('TYPEFUEL'),
    };
    
    // global.gui.setData('gasStation/setData', JSON.stringify(data));
    // global.gui.setData('gasStation/setCurrentPage', JSON.stringify(
    //     {
    //         page: 'FuelPage',
    //         data: null
    //     }));
    // global.gui.setData('gasStation/setFuelTypes', JSON.stringify([
    //     {
    //         key: 'standart',
    //         title: 'Standart',
    //         cost: price
    //     }
    // ]));

    global.gui.openPage('GasStation');
	fuelMenuOpen = true;
    // `window.Environment.call('W:GasStation:SetData', JSON.stringify(data))`

    global.gui.call(`window.Environment.call('W:GasStation:SetData', `+JSON.stringify(data)+`)`);
    // window.Environment.call('W:GasStation:SetData', {cur: 30, max: 50})
});

mp.events.add('gasStation:close', () => {
    closeFuelMenu();
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    closeFuelMenu();
});

// PLAYERLIST //
let pliststate = false;

mp.keys.bind(global.Keys.Key_F8, false, function() { // F8
    if  (global.getVariable(mp.players.local, 'ALVL', 0) >= 2) {
        if (pliststate) closePlayerList();
        else openPlayerList();
    }
});

function openPlayerList() {
    if (gui.isOpened()) return;
    let list =[];
    mp.players.forEach(player => 
	{
        let item = [];
		let uuid = player.getVariable('C_ID');
		if (uuid >= 0) item.push(uuid);
		else item.push(-1);
        item.push(player.name);
        item.push(global.getVariable(player, 'C_LVL', 0));
        item.push(global.getVariable(player, 'Ping', -1));
        list.push(item);
    });
    global.gui.setData('playerList/setData', JSON.stringify(list))
    global.gui.openPage("PlayerList");
    pliststate = true;
}

function closePlayerList() {
    pliststate = false;
    global.gui.close();
}
// MATS //

mp.events.add('matsOpen', (isArmy, isMed) => {
    global.gui.setData('stockPoint/setData', JSON.stringify([isMed, isArmy]));
    global.gui.openPage('StockPoint');
});

mp.events.add('matsL', (type) => {
    global.gui.close();

    switch (type) {
        case 0:
            global.input.set("client_58", "client_59", 4, "loadmats");
            global.input.open();
            break;
        case 1:
            global.input.set("client_60", "client_61", 4, "loaddrugs");
            global.input.open();
            break;
        case 2:
            global.input.set("client_62", "client_63", 4, "loadmedkits");
            global.input.open();
            break;
    }
});

mp.events.add('matsU', (type) => {
    global.gui.close();

    switch (type) {
        case 0:
            global.input.set("client_64", "client_59", 4, "unloadmats");
            global.input.open();
            break;
        case 1:
            global.input.set("client_65", "client_61", 4, "unloaddrugs");
            global.input.open();
            break;
        case 2:
            global.input.set("client_66", "client_63", 4, "unloadmedkits");
            global.input.open();
            break;
    }
});

    
    // BODY CUSTOM //
function getCameraOffset(pos, angle, dist) {
    angle = angle * 0.0174533;
    pos.y = pos.y + dist * Math.sin(angle);
    pos.x = pos.x + dist * Math.cos(angle);
    return pos;
}

// WEAPON CRAFT //
mp.events.add('openWCraft', (frac, mats) => {
    global.gui.setData('craftMenu/setData', JSON.stringify({frac, mats}));
    global.gui.openPage("CraftMenu");
})

mp.events.add('updateWCraft', (mats) => {
    global.gui.setData('craftMenu/updateMats',  mats);
})
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const OverlayDTO = __webpack_require__(32)
const ClothesDTO = __webpack_require__(33)
const CustomizationCamera = __webpack_require__(35)
const ParentsDTO = __webpack_require__(36)
const FaceFeaturesDTO = __webpack_require__(37)
const HairsDTO = __webpack_require__(38)


class Customization{
    constructor() {
        this.slot = -1;
        this.gender = true;
        this.eyeColor = 0;
        this.overlayData = {};
        this.features = {};
        
        this.clothes = new ClothesDTO(14, 0, 1);
        this.parents = new ParentsDTO(0, 21, .5, .5);
        this.hairs = new HairsDTO(0,0,0);
        this.customizationCamera = new CustomizationCamera();

        this.initOverlays();
        this.initFeatures();
        this.loadEvents();
    }

    loadEvents(){
        mp.events.add('customization:gender:change', gender=> this.changeGender(gender));
        mp.events.add('customization:update', (param, value) => this.updateCustomization(param, value));
        mp.events.add('customization:save', (firstName, lastName) => this.saveCharacter(firstName, lastName));
        mp.events.add("customization:destroy", ()=>this.customizationCamera.destroy());
        mp.events.add("customization:create", (slot)=>this.create(slot));
        mp.events.add("customization:camera:switch", (isCloth)=>this.switchCamera(isCloth));
    }

    create(slot){
        this.slot = slot;
        // mp.events.call('notify', 4, 9, this.slot, 10000);
        global.gui.setData("customization/isNotFirstCreate", this.slot < 0 );
        global.gui.setData("customization/resetGender");
        mp.game.cam.doScreenFadeOut(0);
        global.gui.setData("setBackground", "0");
        mp.players.local.freezePosition(true);
        global.characterEditor = true;
        global.gui.close();
        setTimeout(()=>{
            this.customizationCamera.loadEditorCamera();            
            this.changeGender(true);
            global.gui.close();
            global.gui.openPage("Customization");
            global.gui.playSound("editor_bg", .02, true);
            mp.game.cam.doScreenFadeIn(1000);
        }, 700)
    }

    switchCamera(isCloth){
        this.customizationCamera.switch(isCloth)
        this.clothes.update(isCloth);
    }

    initOverlays(){
        for (let index = 0; index < 13; index++) {
            this.overlayData[index] = new OverlayDTO(index, -1, 0, 0, 1);
        }
    }

    initFeatures(){
        for (let i = 0; i < 20; i++){
            this.features[i] = new FaceFeaturesDTO(i, 0.0);
        } 
    }

    changeGender(gender){
        this.gender = gender;
        this.clothes.changeGender(this.gender);
        if (this.gender) {
            mp.players.local.model = mp.game.joaat('mp_m_freemode_01');           
        }
        else {
            mp.players.local.model = mp.game.joaat('mp_f_freemode_01');
        }
    
        this.parents.apply();
        this.updateOverlays();
        this.clothes.setDefault();
        this.hairs.apply();
        this.updateFeatures();
    }    

    updateOverlays() {
        Object.values(this.overlayData).forEach(o=>o.apply())   
        mp.players.local.setEyeColor(this.eyeColor);
    }

    updateFeatures(){
        for (let i = 0; i < 20; i++) 
            this.features[i].apply();
    }

    updateCustomization(param, value){
        switch (param) {
            case "similar":
                this.parents.updateSimilarity(value);
                break;
            case "skin":
                this.parents.updateSkin(value);
                break;
            case "noseWidth": 
                this.features[0].setValue(value)
                break;
            case "noseHeight": 
                this.features[1].setValue(value);
                break;
            case "noseLength": 
                this.features[2].setValue(value); 
                break;
            case "noseBridge":
                this.features[3].setValue(value);
                break;
            case "noseTip":
                this.features[4].setValue(value);
                break;
            case "noseBridgeShift":
                this.features[5].setValue(value); 
                break;
            case "browHeight":
                this.features[6].setValue(value);
                break;
            case "browWidth": 
                this.features[7].setValue(value); 
                break;
            case "cheekboneHeight": 
                this.features[8].setValue(value);
                break;
            case "cheekboneWidth": 
                this.features[9].setValue(value);
                break;
            case "cheekWidth": 
                this.features[10].setValue(value);
                break;
            case "eyes": 
                this.features[11].setValue(value);
                break;
            case "lips": 
                this.features[12].setValue(value); 
                break;
            case "jawWidth": 
                this.features[13].setValue(value);
                break;
            case "jawHeight": 
                this.features[14].setValue(value);
                break;
            case "chinLength": 
                this.features[15].setValue(value);
                break;
            case "chinPosition":                 
                this.features[16].setValue(value);
                break;
            case "chinWidth": 
                this.features[17].setValue(value); 
                break;
            case "chinShape": 
                this.features[18].setValue(value); 
                break;
            case "neckWidth": 
                this.features[19].setValue(value);
                break;
            case "father":
                this.parents.setFather(value);
                break;
            case "mother":
                this.parents.setMother(value);
                break;
                    //Hair colors
            case "hair":
                this.hairs.setHair(value);
                break;
            case "hairColor1":                
                this.hairs.setColor1(value);
                break;
            case "hairColor2":
                this.hairs.setColor2(value);
                break;
            case "eyebrows":
                this.overlayData[2].updateIndex(value);
                break;
            case "eyebrowsColor1":
                this.overlayData[2].updateColor1(value);
                break;
            case "eyebrowsColor2":
                this.overlayData[2].updateColor2(value);
                break;            
            case "beard":
                let overlay = (value == 0) ? 255 : value - 1;
                this.overlayData[1].updateIndex(overlay);
                break;
            case "beardColor1":
                this.overlayData[1].updateColor1(value);
                break;
            case "beardColor2":
                this.overlayData[1].updateColor2(value);
                break;
            case "chest":
                this.overlayData[10].updateIndex(value);
                break;
            case "chestColor1":
                this.overlayData[10].updateColor1(value);
                break;
            case "chestColor2":
                this.overlayData[10].updateColor2(value);
                break;
                    //Makeup colors
            case "makeup":            
                this.overlayData[4].updateIndex(value);
                break;
            case "makeupColor1":
                this.overlayData[4].updateColor1(value);
                break;
            case "makeupColor2":
                this.overlayData[4].updateColor2(value);
                break;
            case "makeupOpacity":
                this.overlayData[4].updateOpacity(value);
                break;
            case "blush":
                this.overlayData[5].updateIndex(value);
                break;
            case "blushColor1":
                this.overlayData[5].updateColor1(value);
                break;
            case "blushColor2":
                this.overlayData[5].updateColor2(value);
                break;
            case "blushOpacity":
                this.overlayData[5].updateOpacity(value);
                break;
            case "lipstick":
               this.overlayData[8].updateIndex(value);
                break;
            case "lipstickColor1":
                this.overlayData[8].updateColor1(value);
                break;            
            case "lipstickColor2":
                this.overlayData[8].updateColor2(value);
                break;
            case "lipstickOpacity":
                this.overlayData[8].updateOpacity(value);
                break;

                    //skin
            case "complexion":
                this.overlayData[6].updateIndex(value);
                break;
            case "sunDamage":
                this.overlayData[7].updateIndex(value);
                break;
            case "bodyBlemish":
                this.overlayData[11].updateIndex(value);
                break;
            case "ageing":                
                this.overlayData[3].updateIndex(value);
                break;
            case "blemish":
                this.overlayData[0].updateIndex(value);
                break;            
            case "moles":
                this.overlayData[9].updateIndex(value);
                break;

                    //clothes
            case "top":
                this.clothes.updateShirt(value);
                break;
            case "pants":
                this.clothes.updatePants(value);
                break;
            case "shoes":
                this.clothes.updateShoes(value);
                break;
            case "eyesColor":
                this.eyeColor = value;
                mp.players.local.setEyeColor(this.eyeColor);
                break;
            default: break;
        }        
        
    }

    saveCharacter(firstName, lastName){
        setTimeout(()=>{
            // mp.events.call('notify', 4, 9, this.slot, 10000);
            // mp.events.call('notify', 4, 9, firstName, 10000);
            // mp.events.call('notify', 4, 9, lastName, 10000);
            mp.events.callRemote(
                "customization:save", 
                this.slot, firstName, lastName, this.gender, this.eyeColor,                
                JSON.stringify(this.parents),                 
                JSON.stringify(this.hairs), 
                JSON.stringify(Object.values(this.features)), 
                JSON.stringify(this.overlayData), 
                JSON.stringify(this.clothes)
            );                
        }, 800);
    }
}

global.customize = new Customization();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = class OverlayDTO{
    constructor(overlayId, index, color1, color2, opacity) {
        this.OverlayId = parseInt(overlayId);
        this.Index = parseInt(index);
        this.Color1 = parseInt(color1);
        this.Color2 = parseInt(color2);
        this.Opacity = parseInt(opacity);
        
        if(this.OverlayId === 4 || this.OverlayId === 5 || this.OverlayId === 8 ){
            this.ColorType = 2;        
        }            
        else if(this.OverlayId === 1 || this.OverlayId === 2 || this.OverlayId === 10 ){
            this.ColorType = 1;
        }else
            this.ColorType = 0;
    }

    updateIndex(value){
        this.Index = parseInt(value);
        this.apply();
    } 
    
    updateColor1(value){
        this.Color1 = parseInt(value);
        this.apply();
    }
    
    updateColor2(value){
        this.Color2 = parseInt(value);
        this.apply();
    }
    
    updateOpacity(value){
        this.Opacity = parseInt(value);
        this.apply();
    }

    apply(){      
        mp.players.local.setHeadOverlay(this.OverlayId, this.Index, this.Opacity, 0, 0);
        mp.players.local.setHeadOverlayColor(this.OverlayId, this.ColorType, this.Color1, this.Color2);
    }
}

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const ClothesModel = __webpack_require__(34);

const maleBody = {
    "0": 0,
    "5": 5,
    "9": 0,
    "14": 12,
    "15": 15
}
const femaleBody  = {
    "0": 0,
    "5": 4,
    "9": 0,
    "14": 14,
    "15": 15
}
//items: [0,5,9,14],
module.exports = class ClotesDTO{
    constructor(top, pants, shoes) {
        this.gender = true;
        this.Shirt = parseInt(top);
        this.Pants = parseInt(pants);
        this.Shoes = parseInt(shoes);
        this.defaultShirt = parseInt(top);
        this.defaultPants = parseInt(pants);
        this.defaultShoes = parseInt(shoes);
    }

    changeGender(gender){
        this.gender = gender;
    }

    updateShirt(value){
        this.Shirt = value;
        this.setSelected();
    }

    updatePants(value){
        this.Pants = value;
        this.setSelected();
    }

    updateShoes(value){
        this.Shoes = value;
        this.setSelected();
    }

    setDefault(){
        global.setClothing(mp.players.local, 11, this.defaultShirt, 0, 0);
        global.setClothing(mp.players.local, 4, this.defaultPants, 0, 0);
        global.setClothing(mp.players.local, 6, this.defaultShoes, 0, 0);
        global.setClothing(mp.players.local, 3, 15, 0, 0);
        global.setClothing(mp.players.local, 8, 15, 0, 0);
    }

    setSelected(){
        global.setClothing(mp.players.local, 11, this.Shirt, 0, 0);
        global.setClothing(mp.players.local, 4, this.Pants, 0, 0);
        global.setClothing(mp.players.local, 6, this.Shoes, 0, 0);
        global.setClothing(mp.players.local, 3, this.gender ? maleBody[this.Shirt] : femaleBody[this.Shirt], 0, 0);
        global.setClothing(mp.players.local, 8, 15, 0, 0);
    }
    update(isCloth){
        if(isCloth)
            this.setSelected();
        else
            this.setDefault();
    }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 34 */
/***/ (function(module, exports) {

module.exports = class ClothesModel{
    constructor(type ,drawableId, bodyId, undershitId) {
        this.type = type;
        this.drawable = drawableId;
        this.body = bodyId;
        this.undershit = undershitId;
    }    
}

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {module.exports = class CustomizationCamera{
    constructor() {
        this.isClothes = false;
        this.moveSettings = {
            size: {
                x: 30,
                y: 30
            },
            showIcons: [false, false, false, false],
            values:[
                {//LEFT X
                    value: 30,
                    min: -50,
                    max: 110,
                    step: 5,
                    invert: true,
                    enabled: true,
                    callback: "camMoveAngleX"
                },
                {//LEFT Y
                    value: 0.0,
                    min: -.25,
                    max: .25,
                    step: .05,
                    invert: false,
                    enabled: true,
                    callback: "camMoveCamZ"
                },
                {//RIGHT X
                    value: 2,
                    min: 1,
                    max: 3,
                    step: .1,
                    invert: false,
                    enabled: false,
                    callback: ""
                },
                {//RIGHT Y
                    value: 2,
                    min: 1,
                    max: 3,
                    step: .1,
                    invert: true,
                    enabled: false,
                    callback: ""
                },
                { //WHEELE
                    value: -1,
                    min: -1,
                    max: -.5,
                    step: .1,
                    invert: true,
                    enabled: true,
                    callback: "camSetDist"
                }
            ]
        }        
    }

    switch(trigger){
        if(this.isClothes === trigger) return;
        this.isClothes = trigger;
        if(this.isClothes)
            this.loadClothesCamera();
        else
            this.loadEditorCamera();
    }

    loadClothesCamera(){
        const point = mp.players.local.getBoneCoords(0,0.05,0,0);
        const camera = mp.players.local.getBoneCoords(0,0.05,0.2,0);
    
        global.customCamera.setPos(camera );
        global.customCamera.setPoint(point);
        global.customCamera.moveCamZ(0.05);
        global.customCamera.setDist(-2.5);
        global.customCamera.moveAngleX(30);
        global.customCamera.switchOn(0);
        this.disabeCameraMove();
        global.gui.setData('mouseMove/setSettings', JSON.stringify(this.moveSettings));
        global.gui.setData('mouseMove/setEnebled', true);
    }

    loadEditorCamera(){
        const point = mp.players.local.getBoneCoords(12844,0.05,0,0);
        const camera = mp.players.local.getBoneCoords(12844,0.05,0.2,0);
    
        global.customCamera.setPos(camera );
        global.customCamera.setPoint(point);
        global.customCamera.moveCamZ(0.05);
        global.customCamera.setDist(-1);
        global.customCamera.moveAngleX(30);
        global.customCamera.switchOn(0);
        this.enableCameraMove();
        global.gui.setData('mouseMove/setSettings', JSON.stringify(this.moveSettings));
        global.gui.setData('mouseMove/setEnebled', true);
    }

    disabeCameraMove(){
        this.moveSettings.values[0].enabled = false;
        this.moveSettings.values[1].enabled = false;
        this.moveSettings.values[4].enabled = false;
    }

    enableCameraMove(){
        this.moveSettings.values[0].enabled = true;
        this.moveSettings.values[1].enabled = true;
        this.moveSettings.values[4].enabled = true;
    }

    destroy(){
        global.gui.close();
        global.characterEditor = false;
        global.gui.setData('mouseMove/setEnebled', false);
        global.gui.stopSound();
        mp.players.local.freezePosition(false);
        global.customCamera.switchOff(0);

        mp.events.call('showAltTabHint');
        global.showHud(true);
    }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 36 */
/***/ (function(module, exports) {

module.exports = class ParentsDTO{
    constructor(father, mother, similarity, skin) {
        this.Father = parseInt(father);
        this.Mother = parseInt(mother);
        this.Skin = parseFloat(skin);
        this.Similarity = parseFloat(similarity);
    }

    updateSimilarity(value){
        this.Similarity = parseFloat(value);
        this.apply();
    }

    updateSkin(value){
        this.Skin = parseFloat(value);
        this.apply();
    }

    setFather(value){
        this.Father = parseInt(value);
        this.apply();
    }

    setMother(value){
        this.Mother = parseInt(value);
        this.apply();
    }

    apply(){
        mp.players.local.setHeadBlendData(
            this.Mother,
            this.Father,
            0,
    
            this.Mother,
            this.Father,
            0,
    
            this.Similarity,
            this.Skin,
            0.0,
    
            true
        );
    }
}

/***/ }),
/* 37 */
/***/ (function(module, exports) {

module.exports = class FaceFeaturesDTO{
    constructor(overlayId, value) {
        this.OverlayId = parseInt(overlayId);
        this.Value = parseFloat(value);
    }

    setValue(value){
        this.Value = parseFloat(value);
        this.apply();
    }

    apply(){
        mp.players.local.setFaceFeature(this.OverlayId, this.Value);
    }
}

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {module.exports = class HairsDTO{
    constructor(hair, color1, color2) {
        this.Id = parseInt(hair);
        this.Color1 = parseInt(color1);
        this.Color2 = parseInt(color2);
    }

    setHair(id){
        this.Id = parseInt(id);
        this.apply();
    }

    setColor1(id){
        this.Color1 = parseInt(id);
        this.apply();
    }

    setColor2(id){
        this.Color2 = parseInt(id);
        this.apply();
    }

    apply(){
        global.setClothing(mp.players.local, 2, this.Id, 0, 0);
        mp.players.local.setHairColor(this.Color1, this.Color2);
    }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const Use3d = true;
const UseAutoVolume = true;
const MaxRange = 10.0;
const voiceStates = {
    ONLY_LOCAL: 0,
    WITH_RADIO: 1
}
const voice = {
    nowState: 0
}

const enableMicrophone = () => {
    if (global.chatActive || !global.loggedin) return;

    if (mp.players.local.getVariable('voice.muted') === true || mp.players.local.getVariable('InDeath') == true) return;
    if (global.isFight) return;

    if (mp.voiceChat.muted) {
        mp.voiceChat.muted = false;
        global.gui.setData('hud/updateData', JSON.stringify({ name: 'mic', value: true }));
        mp.players.local.playFacialAnim("mic_chatter", "mp_facial");
    }

    if (voice.nowState === voiceStates.WITH_RADIO) {
        addPlayerToSpeakItems(mp.players.local);
    }
}

const disableMicrophone = () => {
    if (!global.loggedin) return;
    if (!mp.voiceChat.muted) {
        mp.voiceChat.muted = true;
        global.gui.setData('hud/updateData', JSON.stringify({ name: 'mic', value: false }));
        mp.players.local.playFacialAnim("mood_normal_1", "facials@gen_male@variations@normal");
    }

    if (voice.nowState === voiceStates.WITH_RADIO) {
        removePlayerFromSpeakItems(mp.players.local);
    }
}

const speakItems = [];

function addPlayerToSpeakItems(player) {
    const rightIndex = speakItems.findIndex(i => i.id === player.remoteId);
    if (rightIndex > -1) return;

    const item = {
        id: player.remoteId,
        name: player.name
    };

    speakItems.push(item);

    global.gui.setData('hud/addSpeakItem', JSON.stringify(item));
    global.gui.setData('sounds/play', JSON.stringify({ name: "radio_turn_on", volume: 1, loop: false }));
}

function removePlayerFromSpeakItems(player) {
    setTimeout(() => {
        if (!player.isVoiceActive)
            global.gui.setData('hud/removeSpeakItem', player.remoteId);

        const rightIndex = speakItems.findIndex(item => item.id === player.remoteId);
        if (rightIndex === -1) return;

        speakItems.splice(rightIndex, 1)
        global.gui.setData('sounds/play', JSON.stringify({ name: "radio_turn_off", volume: 1, loop: false }));
    }, 100)
}
mp.events.add("gui:ready", ()=>{
    global.keyActions["microphone"].subscribe(enableMicrophone, true);
    global.keyActions["microphone"].subscribe(disableMicrophone, false);
})

let g_voiceMgr =
{
    listeners: [],

    add: function (player, notify) {
        if (this.listeners.indexOf(player) === -1) {
            if (notify) mp.events.callRemote("add_voice_listener", player);
            this.listeners.push(player);

            if (player.isRoomMuted) {
                player.voiceVolume = 0.0;
                player.voice3d = true;
            }

            player.isLocalListening = true;
        }
    },

    remove: function (player, notify) {
        let idx = this.listeners.indexOf(player);
        if (idx !== -1) {
            if (notify) mp.events.callRemote("remove_voice_listener", player);
            this.listeners.splice(idx, 1);
            player.isLocalListening = false;
            player.voice3d = false;
        }
    },

    getLocalVolume: function (player) {
        let playerPos = player.position;
        let dist = mp.game.system.vdist(playerPos.x, playerPos.y, playerPos.z, localPos.x, localPos.y, localPos.z);
        return 1 - (dist / MaxRange);
    },

    setLocalVoice: function (player) {
        let volumeToSet = this.getLocalVolume(player);
        player.voiceVolume = volumeToSet;
        player.voice3d = true;
    }
};

mp.events.add("playerQuit", (player) => {
    if (player.isLocalListening) g_voiceMgr.remove(player, false);

    //if (player.isRoomListening) RadioRoom.remove(player);
});

const RadioRoom = {
    realPlayerNames: [],
    connectedPlayers: [],
    isRoomMuted: false,
    isConnected: false,

    add: function (player, muted) {
        let item = { id: player.remoteId, object: player };
        this.connectedPlayers.push(item);
        this.realPlayerNames[player.remoteId] = player.name;

        player.isRoomListening = true;
        this.setPlayerMute(player, muted);
    },

    remove: function (player) {
        let item = this.connectedPlayers.find(element => element.id === player.remoteId);
        let idx = this.connectedPlayers.indexOf(item);

        if (idx !== -1) {
            this.connectedPlayers.splice(idx, 1);
            this.realPlayerNames[player.remoteId] = undefined;

            player.isRoomListening = false;

            if (player.isLocalListening) {
                g_voiceMgr.setLocalVoice(player);
            }
        }
    },

    removeById: function (id) {
        let item = this.connectedPlayers.find(p => p.id === id);
        let idx = this.connectedPlayers.indexOf(item);

        if (idx !== -1) {
            let player = this.connectedPlayers[idx].object;

            this.connectedPlayers.splice(idx, 1);
            this.realPlayerNames[id] = undefined;

            player.isRoomListening = false;
        }
    },

    setPlayerMute: function (player, muted) {
        if (muted) {
            if (player.isLocalListening) {
                g_voiceMgr.setLocalVoice(player);
            }
            else {
                player.voiceVolume = 0.0;
            }
        }
        else {
            if (!this.isRoomMuted) {
                player.voice3d = false;
                player.voiceVolume = 5;
            }
        }

        player.isRoomMuted = muted;
    },

    toggleMuteRoom: function () {
        this.isRoomMuted = !this.isRoomMuted;
        global.gui.setData('radio/setIsMuted', this.isRoomMuted);

        if (this.isRoomMuted) {
            this.connectedPlayers.forEach(p => {
                if (p.object.isLocalListening) {
                    g_voiceMgr.setLocalVoice(p.object);
                }
                else {
                    p.object.voice3d = false;
                    p.object.voiceVolume = 0;
                }
            })
        }
        else {
            this.connectedPlayers.forEach(p => {
                if (p.object.isRoomMuted) {
                    if (p.object.isLocalListening) {
                        g_voiceMgr.setLocalVoice(p.object);
                    }
                }
                else {
                    p.object.voice3d = false;
                    p.object.voiceVolume = 5;
                }
            })
        }
    },

    isPlayerConnected: function (player) {
        return this.connectedPlayers.findIndex(p => p.id === player.remoteId) !== -1;
    },

    clearRoom: function () {
        this.connectedPlayers.forEach(p => {
            this.remove(p.object);
        })
    },

    validatePlayer: function (player) {
        if (this.realPlayerNames[player.remoteId] !== player.name) {
            return false;
        }
        else {
            return true;
        }
    }
}

// events from serverside
mp.events.add('voice.radio:add', (player, isMuted) => {
    RadioRoom.add(player, isMuted);
});

mp.events.add('voice.radio:addRange', (playersArray, playersMuteState) => {
    RadioRoom.isConnected = true;
    global.gui.setData('radio/setIsConnected', true);

    playersArray.forEach((remoteId, index) => {
        let player = mp.players.atRemoteId(remoteId);
        RadioRoom.add(player, playersMuteState[index]);
    });
});

mp.events.add('voice.radio:toggleMute', (player, mute) => {
    RadioRoom.setPlayerMute(player, mute);
});

mp.events.add('voice.radio:remove', (player) => {
    RadioRoom.remove(player);
});

mp.events.add('voice.radio:removeById', (remoteId) => {
    RadioRoom.removeById(remoteId);
});

mp.events.add('voice.radio:disconnect', () => {
    if (voice.nowState === voiceStates.WITH_RADIO) {
        switchVoiceState();
    }

    RadioRoom.isConnected = false;
    global.gui.setData('radio/setIsConnected', false);

    RadioRoom.clearRoom();
});

mp.events.add('voice.radio:open', () => {
    global.gui.closeInventory();
    global.gui.openPage('Radio', false);
});

// events from clientside
mp.events.add('radio:setWave', (wave) => {
    mp.events.callRemote('voice.radio::connectWave', wave);
});

mp.events.add('radio:clearWave', () => {
    mp.events.callRemote('voice.radio::clearWave');
});

mp.events.add('radio:mute', () => {
    RadioRoom.toggleMuteRoom();

    if (voice.nowState === voiceStates.WITH_RADIO) {
        switchVoiceState();
    }
});

mp.events.add('radio:close', () => {
    gui.close();
});

function switchVoiceState() {
    if (!RadioRoom.isConnected) return;

    if (voice.nowState === voiceStates.ONLY_LOCAL) {
        voice.nowState = voiceStates.WITH_RADIO;
        mp.events.callRemote('voice.radio::switchState', 'WITH_RADIO');
    }
    else {
        voice.nowState = voiceStates.ONLY_LOCAL;
        mp.events.callRemote('voice.radio::switchState', 'ONLY_LOCAL');
    }

    global.gui.setData('hud/setVoiceState', voice.nowState);
}

mp.keys.bind(global.Keys.Key_OEM_COMMA, false, switchVoiceState);

mp.events.add('voice.mute', () => {
    disableMicrophone();
})

let PHONE = {
    target: null,
    status: false
};

mp.events.add('voice.phoneCall', (target) => {
    if (!PHONE.target) {
        PHONE.target = target;
        PHONE.status = true;
        mp.events.callRemote("add_voice_listener", target);
        target.voiceVolume = 5.0;
        target.voice3d = false;
        g_voiceMgr.remove(target, false);
    }
});
mp.events.add("voice.phoneStop", () => {
    if (PHONE.target) {
        if (mp.players.exists(PHONE.target)) {
            let localPos = mp.players.local.position;
            const playerPos = PHONE.target.position;
            let dist = mp.game.system.vdist(playerPos.x, playerPos.y, playerPos.z, localPos.x, localPos.y, localPos.z);
            if (dist > MaxRange) mp.events.callRemote("remove_voice_listener", PHONE.target);
            else g_voiceMgr.add(PHONE.target, false);
        } else mp.events.callRemote("remove_voice_listener", PHONE.target);
        PHONE.target = null;
        PHONE.status = false;
    }
});

let f3KD = 0;

mp.keys.bind(global.Keys.Key_F3, true, () => {
    if(f3KD > Date.now()) return;
    f3KD = Date.now() + 15000;
    mp.events.call('notify', 2, 9, "client_41", 3000);
    mp.voiceChat.cleanupAndReload(true, true, true);

});


mp.events.add('playerStartTalking', (player) => {
    //if (PHONE.target != player) player.voice3d = true;

    if (player.handle !== 0) {
        player.playFacialAnim("mic_chatter", "mp_facial");
    }

    if (player.isRoomListening && !player.isRoomMuted && !RadioRoom.isRoomMuted && RadioRoom.validatePlayer(player)) {
        player.voiceVolume = 5;
        addPlayerToSpeakItems(player);
    }
    else if (PHONE.target === player) {
        player.voiceVolume = 5;
    }
    else if (!player.isLocalListening) {
        player.voiceVolume = 0;
    }

});

mp.events.add('playerStopTalking', (player) => {
    if (player.handle !== 0) {
        player.playFacialAnim("mood_normal_1", "facials@gen_male@variations@normal");
    }

    if (RadioRoom.validatePlayer(player)) {
        removePlayerFromSpeakItems(player);
    }
});

let localPos = mp.players.local.position;
let playerPos = mp.players.local.position;
setInterval(() => {
    localPos = mp.players.local.position;
    if(global.mediaMute){
        if(g_voiceMgr.listeners.length > 0){
            g_voiceMgr.listeners.forEach(player => {
                let notify = !player.isRoomListening;
                g_voiceMgr.remove(player, notify);
            })
        }
    }
    mp.players.forEachInStreamRange(player => {
        if(global.mediaMute) return;
        if (player != mp.players.local) {
            if (!player.isLocalListening && (!PHONE.target || PHONE.target != player)) {
                playerPos = player.position;
                const lvl = global.getVariable(player, 'lvl', 0);
                if (mp.game.system.vdist(playerPos.x, playerPos.y, playerPos.z, localPos.x, localPos.y, localPos.z) <= MaxRange) {
                    if(mp.storage.data.mainSettings.muteLowLevel && lvl < mp.storage.data.mainSettings.muteLowLevelValue) return;
                    let notify = !player.isRoomListening;
                    g_voiceMgr.add(player, notify);
                }
            }
        }
    });

    g_voiceMgr.listeners.forEach((player) => {
        if (player.handle !== 0) {
            playerPos = player.position;
            let dist = mp.game.system.vdist(playerPos.x, playerPos.y, playerPos.z, localPos.x, localPos.y, localPos.z);
            const lvl = global.getVariable(player, 'lvl', 0);
            if (dist > MaxRange || (mp.storage.data.mainSettings.muteLowLevel && lvl < mp.storage.data.mainSettings.muteLowLevelValue)) {
                let notify = !player.isRoomListening;
                g_voiceMgr.remove(player, notify);
            }
            else if (UseAutoVolume && (!player.isRoomListening || player.isRoomMuted)) {
                player.voiceVolume = 1 - (dist / MaxRange);
            }
        } else {
            let notify = !player.isRoomListening;
            g_voiceMgr.remove(player, notify);
        }
    });
}, 350);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let Peds = [
    { Hash: -1105179493, Pos: new mp.Vector3(638.3456, 206.6573, 97.69418), Angle: 256.1577 }, // JoeMinuteman Parking
    { Hash: -1105179493, Pos: new mp.Vector3(-1216.897, -644.9938, 25.882), Angle: 309.4338 }, // JoeMinuteman Parking
    { Hash: -1105179493, Pos: new mp.Vector3(-17.30688, 6303.709, 31.39), Angle: 35.76939 }, // JoeMinuteman Parking
    { Hash: 1809430156, Pos: new mp.Vector3(-777.173, 20.87795, 40.66997), Angle: 333.8539 }, // HasJew01AMM Priest
    { Hash: 1657546978, Pos: new mp.Vector3(2753.742, 3480.687, 55.65), Angle: 242.727 }, // Technician Work
    { Hash: -2078561997, Pos: new mp.Vector3(1417.378, 6343.877, 24.00321), Angle: 274.7821 }, // Car Thief Work
    { Hash: -413447396, Pos: new mp.Vector3(-1189.708, -2933.827, 13.94469), Angle: 165.4088 }, // Transporteur Work
    { Hash: 0xE6631195, Pos: new mp.Vector3(-2188.892, 4275.267, 49.17898), Angle: 63.32428 }, // Hunter shop ped
    { Hash: 330231874, Pos: new mp.Vector3(2439.151, 4962.98, 46.81056), Angle: 340 }, // Alexander Lukashenko
    { Hash: 0x432CA064, Pos: new mp.Vector3(1117.406, 220.53, -51.55516), Angle: 85 }, // CashierCasino
];

Peds.forEach(ped => {
    mp.peds.newValid(ped.Hash, ped.Pos, ped.Angle, 0);
});

global.clientPedLoaded = true;
opened = false;

function ExitMenu() {
    global.gui.close();
    opened = false;
    global.showCursor(false)
}

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        ExitMenu();
});

mp.events.add('toggleTestInv', function(page) {
    opened = true;
    switch(page){
        case 1: 
            global.gui.openPage('Spawn');
            break;
        // case 2: 
        //     global.gui.openPage('TestMenu');
        //     break;
        // case 3: 
        //     global.gui.openPage('TestCust');
        //     break;
        // // case 4: 
        // //     global.gui.openPage('NewAuth');
        // //     break;
        // case 4: 
        //     global.gui.openPage('MenuPerson');
        //     break;
        default: 
            global.gui.openPage('Spawn');
            break;
    }
});

const Natives = {
    SWITCH_OUT_PLAYER: '0xAAB3200ED59016BC',
    SWITCH_IN_PLAYER: '0xD8295AF639FD9CB8',
    IS_PLAYER_SWITCH_IN_PROGRESS: '0xD9D2CFFF49FAB35F'
};

mp.events.add('toggleTestCam', function(page) {
    switch(page){
        case 0: 
            mp.game.invoke(Natives.SWITCH_OUT_PLAYER, global.localplayer.handle, 0, parseInt(0));
            break;
        case 1: 
            mp.game.invoke(Natives.SWITCH_OUT_PLAYER, global.localplayer.handle, 0, parseInt(1));
            break;
        case 2: 
            mp.game.invoke(Natives.SWITCH_OUT_PLAYER, global.localplayer.handle, 0, parseInt(2));
            break;
        case 3: 
            mp.game.invoke(Natives.SWITCH_OUT_PLAYER, global.localplayer.handle, 0, parseInt(3));
            break;
        case 4: 
            mp.game.invoke(Natives.SWITCH_IN_PLAYER, global.localplayer.handle);
            break;
    }
});

mp.events.add('freeze', (toggle) => {
    global.localplayer.freezePosition(toggle == true);
});

mp.events.add('destroyCamera', function() {
    mp.game.cam.renderScriptCams(false, false, 3000, true, true);
});

let lastScreenEffect = "";
mp.events.add('startScreenEffect', function(effectName, duration, looped) {
    try {
        lastScreenEffect = effectName;
        mp.game.graphics.startScreenEffect(effectName, duration, looped);
    } catch (e) {
        if(global.sendException) mp.serverLog(`Error in main.startScreenEffect: ${e.name}\n${e.message}\n${e.stack}`);
	}
});

mp.events.add('stopScreenEffect', function(effectName) {
    try {
        let effect = (effectName == undefined) ? lastScreenEffect : effectName;
        mp.game.graphics.stopScreenEffect(effect);
    } catch (e) {
        if(global.sendException) mp.serverLog(`Error in main.stopScreenEffect: ${e.name}\n${e.message}\n${e.stack}`);
	}
});

mp.events.add('stopAndStartScreenEffect', function(stopEffect, startEffect, duration, looped) {
    try {
        mp.game.graphics.stopScreenEffect(stopEffect);
        mp.game.graphics.startScreenEffect(startEffect, duration, looped);
    } catch (e) {
        if(global.sendException) mp.serverLog(`Error in main.stopAndStartScreenEffect: ${e.name}\n${e.message}\n${e.stack}`);
	}
});

mp.events.add('setPocketEnabled', function(state) {
   global.pocketEnabled = Boolean(state);
    if (Boolean(state)) {
        mp.gui.execute("fx.set('inpocket')");
        mp.game.invoke(global.getNative("SET_FOLLOW_PED_CAM_VIEW_MODE"), 4);
    } else {
        mp.gui.execute("fx.reset()");
    }
});

mp.events.add('connected', function() {
    mp.game.ui.displayHud(false);
});

mp.events.add('ready', function() {
	mp.game.graphics.setTimecycleModifier("default");
    mp.game.ui.displayHud(true);
});

mp.events.add('kick', (notify) => {
    if(notify != null)
        mp.events.call('notify', 4, 9, notify, 10000);
    mp.events.call('onConnectionLost');
    mp.events.callRemote('kickclient');
});

mp.events.add("onConnectionLost", ()=>{
    try {
        global.customWeaponsModels.forEach(weapon => {
            if(weapon) mp.game.object.deleteObject(weapon);
        });
    } catch (e) {
        if(global.sendException) mp.serverLog(`Error in main.onConnectionLost: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

let followingTarget = null;

mp.events.add('setFollow', (toggle, entity) => {
	if (!toggle) 
	{
		global.localplayer.clearTasks();
		followingTarget = null;
		return;
	}
	
	if (!entity || !mp.players.exists(entity)) return;
	
	followingTarget = entity;
	global.localplayer.taskFollowToOffsetOf(entity.handle, 0, 0, 0, 1, -1, 1, true);
});

mp.keys.bind(global.Keys.Key_E, false, function() { // E key
    if (!global.loggedin|| global.chatActive || global.editing || global.lastCheck > Date.now() || global.gui.isOpened() || global.IsPlayingDM || global.inAction || global.cuffed) return;
    if(global.localplayer.farmAction < 0){       
        mp.events.callRemote('interactionPressed');        
        global.lastCheck = Date.now() + 500;
        //global.acheat.pos();
    } else {
        global.farmAction(global.localplayer.farmAction);
    }
});
function onKeyLockPress(){
    if (!global.loggedin|| global.chatActive || global.editing || global.lastCheck > Date.now() || global.gui.isOpened() || global.IsPlayingDM) return;
    mp.events.callRemote('lockCarPressed');     
    global.lastCheck = Date.now() + 500;
}

function onKeyEnginePress(){
    if (!global.loggedin|| global.chatActive || global.editing || global.lastCheck > Date.now() || global.gui.isOpened() || global.IsPlayingDM) return;
    if  (mp.players.local.isInAnyVehicle(false) && mp.players.local.vehicle.getSpeed() <= 3) {
        mp.events.callRemote('engineCarPressed');
        global.lastCheck = Date.now() + 500;
        if(global.isTransporteurWorker) 
            mp.events.callRemote("WORK::TRANSPORTEUR::ENGINE::START::CLIENT");
    }
}

mp.events.add("gui:ready", ()=>{
    global.keyActions["engine"].subscribe(onKeyEnginePress, true);

    global.keyActions["lock"].subscribe(onKeyLockPress, true);
    
})


// mp.keys.bind(global.Keys.Key_L, false, function() { // L key
//     if (!global.loggedin|| global.chatActive || global.editing || global.lastCheck > Date.now() || global.gui.isOpened() || global.IsPlayingDM) return;
//     mp.events.callRemote('lockCarPressed');        
//     global.lastCheck = Date.now() + 500;
// });

mp.keys.bind(global.Keys.Key_LEFT, true, () => {
    SetTurnSignal(1);
});

mp.keys.bind(global.Keys.Key_RIGHT, true, () => {
    SetTurnSignal(2);
});

mp.keys.bind(global.Keys.Key_DOWN, true, () => {
    SetTurnSignal(3);
});

//1 - left, 2 - right, 3 - both
function SetTurnSignal(turnSignal) {
    if (global.checkIsAnyActivity()) return;
    if (mp.gui.cursor.visible) return;
    if  (mp.players.local.vehicle) {
        if (mp.players.local.vehicle.getPedInSeat(-1) != mp.players.local.handle) return;
        if (global.lastCheck > Date.now()) return;
        global.lastCheck = Date.now() + 500;
        let currTurnSignal = mp.players.local.vehicle.getVariable('veh:turnSignal');
        if ((typeof currTurnSignal) === 'undefined' || currTurnSignal == null)
            currTurnSignal = 0;
        if (currTurnSignal != turnSignal)
            mp.events.callRemote("veh:setTurnSignal", mp.players.local.vehicle, turnSignal);
        else
            mp.events.callRemote("veh:setTurnSignal", mp.players.local.vehicle, 0);
    }
}

let engineLastCheck = 0;

mp.keys.bind(global.Keys.Key_X, false, function() { // X key
    if (!global.loggedin|| global.chatActive || global.editing ||  global.lastCheck > Date.now() || global.gui.isOpened() || global.IsPlayingDM || global.inAction) return;
    mp.events.callRemote('playerPressCuffBut');
    global.lastCheck = Date.now() + 500;
});

function CheckMyWaypoint() {
    try {
        let coord = global.getWayPoint();       
        if(coord) mp.events.callRemote('syncWaypoint', coord.x, coord.y);
    } catch (e) {
        if(global.sendException) mp.serverLog(`Error in main.CheckMyWaypoint: ${e.name}\n${e.message}\n${e.stack}`);
	}
}

global.getWayPoint = ()=>{
    try {
        if (mp.game.invoke('0x1DD1F58F493F1DA5')) {
            let foundblip = false;
            let blipIterator = mp.game.invoke('0x186E5D252FA50E7D');
            let totalBlipsFound = mp.game.invoke('0x9A3FF3DE163034E8');
            let FirstInfoId = mp.game.invoke('0x1BEDE233E6CD2A1F', blipIterator);
            let NextInfoId = mp.game.invoke('0x14F96AA50D6FBEA7', blipIterator);
            let coord;
            for (let i = FirstInfoId, blipCount = 0; blipCount != totalBlipsFound; blipCount++, i = NextInfoId) {
                if (mp.game.invoke('0x1FC877464A04FC4F', i) == 8) {
                    coord = mp.game.ui.getBlipInfoIdCoord(i);
                    foundblip = true;
                    break;
                }
            }
            if (foundblip) return {x: coord.x, y: coord.y};        
        }
    } catch (e) {
        if(global.sendException) mp.serverLog(`Error in global.getWaypoint: ${e.name}\n${e.message}\n${e.stack}`);
	}
}

mp.keys.bind(global.Keys.Key_Z, false, function() { // Z key
    if(global.lastCheck > Date.now()) return;
    if(global.reportPosirion !== -1){
        global.lastCheck = Date.now() + 500;
        let coord = global.getWayPoint();       
        if(coord) {
            mp.events.callRemote('report:position', global.reportPosirion, coord.x, coord.y);
            mp.game.ui.setFrontendActive(false);
            global.reportPosirion = -1;
            mp.game.wait(200);
            mp.gui.cursor.visible = true;
        }
        return;
    }
    if (!global.loggedin|| global.chatActive || global.editing || global.gui.isOpened() || global.IsPlayingDM) return;
    if(mp.players.local.vehicle) {
        if(mp.players.local.vehicle.getPedInSeat(-1) != mp.players.local.handle) CheckMyWaypoint();
        else {
            if(mp.players.local.vehicle.getClass() == 18) 
                mp.events.callRemote('syncSirenSound', mp.players.local.vehicle);
        }
    } else mp.events.callRemote('playerPressFollowBut');
    global.lastCheck = Date.now() + 500;
});

mp.keys.bind(global.Keys.Key_OEM_3, false, function() {
    if(mp.gui.cursor.visible){
        if(global.gui.opened && !global.gui.curPage) 
            global.gui.close();
        if(global.chatActive) 
            global.gui.hideChat();        
        global.showCursor(false);
    }else
        global.showCursor(true);
});


let lastPos = new mp.Vector3(0, 0, 0);

mp.game.gameplay.setFadeInAfterDeathArrest(false);
mp.game.gameplay.setFadeInAfterLoad(false);

mp.events.add('render', () => {
    if  (global.chatActive || /*global.cursorShow ||*/ mp.players.local.getVariable('InDeath') == true || global.IsFreezeDM) {
        mp.game.gameplay.setFadeOutAfterDeath(false);
        mp.game.controls.disableAllControlActions(2);
        mp.game.controls.enableControlAction(2, 1, true);
        mp.game.controls.enableControlAction(2, 2, true);
        mp.game.controls.enableControlAction(2, 3, true);
        mp.game.controls.enableControlAction(2, 4, true);
        mp.game.controls.enableControlAction(2, 5, true);
        mp.game.controls.enableControlAction(2, 6, true);
    }

    if (mp.game.controls.isControlPressed(0, 32) ||
        mp.game.controls.isControlPressed(0, 33) ||
        mp.game.controls.isControlPressed(0, 321) ||
        mp.game.controls.isControlPressed(0, 34) ||
        mp.game.controls.isControlPressed(0, 35) ||
        mp.game.controls.isControlPressed(0, 24) ||
        mp.players.local.getVariable('InDeath') == true) {
        afkSecondsCount = 0;
    } else if  (mp.players.local.isInAnyVehicle(false) && mp.players.local.vehicle && mp.players.local.vehicle.getSpeed() != 0) {
        afkSecondsCount = 0;
    } else if (global.spectating) { // Чтобы не кикало администратора в режиме слежки
        afkSecondsCount = 0;
    }
});


var jail_interval = void 0;
mp.events.add("Client_CheckIsInJail", function () {
	if (jail_interval) return;
	if (!jail_interval) {
		jail_interval = setInterval(function () {
            // mp.events.call('notify', 4, 2, mp.game.system.vdist(1692.573, 2519.978, 45.565, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z), 1000);
			if (!skip_jail_check && mp.game.system.vdist(1692.573, 2519.978, 45.565, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z) > 220) {
				mp.events.callRemote('Server_GetJailBack');
			}
		}, 1000);
	}
});

var skip_jail_check = false;
mp.events.add("Client_SkipCheckJail", function (arg) {
	skip_jail_check = arg;
});

mp.events.add("Client_CheckIsInJailDestroy", function () {
	if (jail_interval) {
		clearInterval(jail_interval);
		jail_interval = null;
	}
});


// mp.events.add('render', () => {
//     //ARREST_TIMER
//     if(mp.players.local.getVariable('ARREST_TIMER')){
//         const pos1 = mp.players.local.position;
//         const pos2 = new mp.Vector3(1711.0012, 2581.5393, 45.588715);
//         const distance = mp.game.system.vdist(pos1.x, pos1.y, pos1.z, pos2.x, pos2.y, pos2.z);

//         if (distance > 100) {
//             mp.events.call('notify', 4, 2, mp.players.local.getVariable('ARREST_TIMER'), 1000);
//         } 
//     }

// })    



mp.events.add("playerRuleTriggered", (rule, counter) => {
    if (rule === 'ping' && counter > 5) {
        mp.events.call('notify', 4, 2, "client_36", 5000);
        mp.events.callRemote("kickclient");
    }
});

mp.events.add('GetWPAdmin', () => { // Возвращает координаты точки админа
    try {
        let blipIterator = mp.game.invoke('0x186E5D252FA50E7D');
        let totalBlipsFound = mp.game.invoke('0x9A3FF3DE163034E8');
        let FirstInfoId = mp.game.invoke('0x1BEDE233E6CD2A1F', blipIterator);
        let NextInfoId = mp.game.invoke('0x14F96AA50D6FBEA7', blipIterator);
        let coord;
        for (let i = FirstInfoId, blipCount = 0; blipCount != totalBlipsFound; blipCount++, i = NextInfoId) {
            if (mp.game.invoke('0x1FC877464A04FC4F', i) == 8) {
                coord = mp.game.ui.getBlipInfoIdCoord(i);
                break;
            }
        }
        mp.events.callRemote('getWayPoint', coord.x, coord.y, id);
    } catch (e) {
        if(global.sendException)mp.serverLog(`Error in main.GetWPAdmin: ${e.name }\n${e.message}\n${e.stack}`);
    }
});

mp.keys.bind(global.Keys.Key_F4, false, ()=>{
    if(mp.keys.isDown(17) || mp.keys.isDown(18)) return;
    if (!global.loggedin || global.getVariable(mp.players.local, 'ALVL', 0) < 1 ||  global.lastCheck > Date.now()) return;
    global.lastCheck = Date.now() + 500;
    mp.events.callRemote('tpmark');
});

mp.events.add('GetMyWaypoint', () => { // Передача по метке
    try {
        let blipIterator = mp.game.invoke('0x186E5D252FA50E7D');
        let totalBlipsFound = mp.game.invoke('0x9A3FF3DE163034E8');
        let FirstInfoId = mp.game.invoke('0x1BEDE233E6CD2A1F', blipIterator);
        let NextInfoId = mp.game.invoke('0x14F96AA50D6FBEA7', blipIterator);
        let coord = {x:0,y:0,z:0};
        for (let i = FirstInfoId, blipCount = 0; blipCount != totalBlipsFound; blipCount++, i = NextInfoId) {
            if (mp.game.invoke('0x1FC877464A04FC4F', i) == 8) {
                coord = mp.game.ui.getBlipInfoIdCoord(i);
                break;
            }
        }
        mp.game.streaming.setFocusArea(coord.x, coord.y, coord.z, 0, 0, 0);

        setTimeout(()=>{
            coord.z = mp.game.gameplay.getGroundZFor3dCoord(coord.x, coord.y, 1000.1, 1.4, false);
            mp.events.callRemote('getWayPoint', coord.x, coord.y, coord.z + 1);
            mp.game.invoke(global.NATIVES.RESET_FOCUS_AREA);
        }, 50)
	}catch(e){
        if(global.sendException)mp.serverLog(`Error in main.GetMyWaypoint: ${e.name }\n${e.message}\n${e.stack}`);
    }
});

let toggleBigMap = false;
let showFullMap = false;

let seetdown = false;
mp.keys.bind(global.Keys.Key_P, false, function() { // O key
    if (!global.loggedin || global.chatActive || mp.gui.cursor.visible || global.editing || global.gui.isOpened()) return;
    seetdown = !seetdown;
    if (seetdown)
        mp.events.callRemote('aSelected', 12, 7);
    else
        mp.events.callRemote('aSelected', 12, 0);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {mp.events.add('bizsetts:changeOrderPrice', (value, productName) => {
    mp.events.callRemote('bizsetts::changeOrderPrice', value, productName);
});

mp.events.add('bizsetts:changeMaxPrice', (value, productName) => {
    mp.events.callRemote('bizsetts::changeMaxPrice', value, productName);
});

mp.events.add('bizsetts:changeMinPrice', (value, productName) => {
    mp.events.callRemote('bizsetts::changeMinPrice', value, productName);
});

mp.events.add('bizsetts:changeStockCapacity', (value, productName) => {
    mp.events.callRemote('bizsetts::changeStockCapacity', value, productName);
});

mp.events.add('bizsetts:delete', (productName) => {
    mp.events.callRemote('bizsetts::delete', productName);
});

mp.events.add('bizsetts:addnew', () => {
    mp.events.callRemote('bizsetts::addnew');
});

mp.events.add('bizsetts:close', () => {
    global.gui.close();
});

mp.events.add('bizsetts:open', (data) => {
    global.gui.setData(`businessMenu/setData`, data);
    global.gui.openPage('BusinessMenu');
});

mp.events.add('bizsetts:updateData', (data) => {
    global.gui.setData(`businessMenu/setData`, data);
});


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let markers = [];
let blips = [];

mp.game.invoke('0xB98236CAAECEF897', true);

mp.events.add('createBlip', (id, sprite, name, position, scale, color, dimension) => 
{
	if (typeof blips[id] !== 'undefined') 
	{
        blips[id].destroy();
        blips[id] = undefined;
    }
    blips[id] = mp.blips.new(sprite, position,
	{
		name: name,
		scale: scale,
		color: color,
		alpha: 255,
		drawDistance: 100,
		shortRange: false,
		rotation: 0,
		dimension: dimension,
	});
});
mp.events.add('deleteBlip', (uid) => {
	if (typeof blips[uid] === 'undefined') return;
	
    blips[uid].destroy();
	blips[uid] = undefined;
});

mp.events.add('createCheckpoint', function (uid, type, position, scale, dimension, r, g, b, dir) {
    if (typeof markers[uid] !== 'undefined') 
	{
        markers[uid].destroy();
        markers[uid] = undefined;
    }
    markers[uid] = mp.checkpoints.new(type, position, scale,
	{
		color: [r, g, b, 200],
		visible: true,
		dimension: dimension
	});
});
mp.events.add('createMarker', function (uid, type, position, scale, dimension, r, g, b, rot) {
    if (typeof markers[uid] !== 'undefined')
	{
        markers[uid].destroy();
        markers[uid] = undefined;
    }
    markers[uid] = mp.markers.new(type, position, scale,
	{
		rotation: rot,
		color: [r, g, b, 200],
		visible: true,
		dimension: dimension
	});
});

mp.events.add('deleteCheckpoint', function (uid) 
{
    if (typeof markers[uid] === 'undefined') return;
	
    markers[uid].destroy();
    markers[uid] = undefined;
});

mp.events.add('createWaypoint', function (x, y) {
    mp.game.ui.setNewWaypoint(x, y);
});

let workBlip = null;
mp.events.add('createWorkBlip', function (position) {
    if (workBlip != null) workBlip.destroy();
    workBlip = mp.blips.new(0, position,
	{
		name: "checkpoint",
		scale: 1,
		color: 49,
		alpha: 255,
		drawDistance: 100,
		shortRange: false,
		rotation: 0,
		dimension: 0,
	});
});
mp.events.add('deleteWorkBlip', function () {
    if (workBlip == null) return;
	
    workBlip.destroy();
    workBlip = null;
});

let familyBlip = null;
mp.events.add('createFamilyBlip', function (position) 
{
    if (familyBlip != null) familyBlip.destroy();
    familyBlip = mp.blips.new(357, position, {
        name: "Семья",
        scale: 1,
        color: 5,
        alpha: 255,
        drawDistance: 100,
        shortRange: true,
        rotation: 0,
        dimension: 0,
    });
});

mp.events.add('deleteFamilyBlip', function () {
    if (familyBlip == null) return;
	
	familyBlip.destroy();
    familyBlip = null;
});

let garageBlip = null;
mp.events.add('createGarageBlip', function (position) {
    if (garageBlip != null)
        garageBlip.destroy();
    garageBlip = mp.blips.new(524, position,
        {
            name: "Гараж",
            scale: 1,
            color: 45,
            alpha: 255,
            drawDistance: 100,
            shortRange: true,
            rotation: 0,
            dimension: 0,
        });
});

let MisBlip = [null, null, null, null, null, null, null];
mp.events.add('createMissionGarageBlip', (position, val) => {
    try {
        if (MisBlip[val] != null)
            MisBlip[val].destroy();
        MisBlip[val] = mp.blips.new(473, position,
            {
                name: "Закрытый Гараж",
                scale: 1,
                color: 45,
                alpha: 125,
                drawDistance: 100,
                shortRange: true,
                rotation: 0,
                dimension: 0,
            });
    } catch (e) { 
        if(global.sendException) mp.serverLog(`Error in checkpoints.createMissionGarageBlip: ${e.name}\n${e.message}\n${e.stack}`);
     }

});

mp.events.add('deleteMissionGarageBlip', () => {
    try {
        MisBlip.forEach(function (bliper) {
            if (bliper != null)
                bliper.destroy();
            bliper = null;
        });
    } catch (e) {  
        if(global.sendException) mp.serverLog(`Error in checkpoints.deleteMissionGarageBlip: ${e.name}\n${e.message}\n${e.stack}`);
     }
});

mp.events.add('deleteGarageBlip', function () {
    if (garageBlip != null)
        garageBlip.destroy();
    garageBlip = null;
});

mp.events.add('changeBlipColor', function (blip, color) {
    try {
        if (blip == null) return;
        blip.setColour(color);
    } catch (e) {
        if(global.sendException) mp.serverLog(`Error in checkpoints.changeBlipColor: ${e.name}\n${e.message}\n${e.stack}`);
       }
});

mp.events.add('changeBlipAlpha', function (blip, alpha) {
    try {
        if (blip == null) return;
        blip.setAlpha(alpha);
    } catch (e) {
        if(global.sendException) mp.serverLog(`Error in checkpoints.changeBlipAlpha: ${e.name}\n${e.message}\n${e.stack}`);
      }
});

let PrisMafBlip = null;
mp.events.add('createPrisMafBlip', (position) => {
    try {
        if (PrisMafBlip != null)
            PrisMafBlip.destroy();
        PrisMafBlip = mp.blips.new(310, position,
            {
                name: "Тюремная мафия",
                scale: 1,
                color: 4,
                alpha: 255,
                drawDistance: 0,
                shortRange: true,
                rotation: 0,
                dimension: 0,
            }
        );
    }
    catch (e) {
        if(global.sendException) mp.serverLog(`Error in checkpoints.createPrisMafBlip: ${e.name}\n${e.message}\n${e.stack}`);
       }

});

mp.events.add('deletePrisMafBlip', () => {
    try {
        if (PrisMafBlip != null)
            PrisMafBlip.destroy();
        PrisMafBlip = null;
    }
    catch (e) { 
        if(global.sendException) mp.serverLog(`Error in checkpoints.deletePrisMafBlip: ${e.name}\n${e.message}\n${e.stack}`);
       }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let spamProtection = 0;
let spamProtectionTime = 1000;

function isSpam(){
    if(spamProtection > Date.now()) return true;
    spamProtection = Date.now() + spamProtectionTime;
    return false;
}

function open(dynamic){
    if (!global.isFight && (mp.players.local.dimension == 11333377 || mp.players.local.dimension == 1337))
        return;
    if(global.playerInventory.id === -1){
        mp.events.callRemote("inv:get:personal")
        return;
    }
    if(global.gui.isOpened()) return;
    mp.events.callRemote("inv:open");
    global.gui.setData("inventory/setDynamic", `'${dynamic}'`);
    global.gui.openInventory();
    global.inventoryOpened = true;
}

function close(){
    global.gui.closeInventory();
    mp.events.callRemote("inv:close", global.stockId);
    global.gui.setData("inventory/close");
    global.stockId = -1;
    global.inventoryOpened = false;
}

function onKeyPres(){
    if(mp.keys.isDown(17) || mp.keys.isDown(18)) return;
    if (global.inventoryOpened) close();
    else {
        if(isSpam()) return;
        if (
            !global.loggedin|| 
            global.chatActive || 
            global.editing || 
            global.cuffed || 
            global.localplayer.getVariable('InDeath') == true || 
            global.IsPlayingDM == true
        ) return;
        open("Equip");
    }
}

mp.events.add("gui:ready", ()=>{
    global.keyActions["inventory"].subscribe(onKeyPres, true);
})

mp.events.add("gui:inv:close", ()=>{
    close();
})

mp.events.addDataHandler("InDeath", (entity, isDeath) => {
    if (entity === mp.players.local && global.inventoryOpened && isDeath == true)
        close();
});

// mp.keys.bind(global.Keys.Key_TAB, false, function () { 
//     if (global.inventoryOpened) close();
//     else {
//         if(isSpam()) return;
//         if (
//             !global.loggedin|| 
//             global.chatActive || 
//             global.editing || 
//             global.cuffed || 
//             global.localplayer.getVariable('InDeath') == true || 
//             global.IsPlayingDM == true
//         ) return;
//         open("Equip");
//     }
// });

mp.keys.bind(global.Keys.Key_ESCAPE, false, function() {
    if (global.inventoryOpened) {
        mp.game.ui.setPauseMenuActive(false);
        close();
    }
});

global.playerInventory = {
    id: -1, 
    items: []
};

global.playerEquip = {
    clothes: {
      "1": null,
      "2": null,
      "3": null,
      "4": null,
      "5": null,
      "6": null,
      "7": null,
      "8": null,
      "9": null,
      "11": null,
      "10": null,
      "12": null,
      "13": null,
      "14": null
    },
    weapons: {
        "1": null,
        "2": null,
        "3": null,
        "4": null
      }
};

global.stockId = -1;
//personal
mp.events.add("inv:set:personal", (id)=>{
    global.playerInventory.id = id;
    global.gui.setData('inventory/setPersonalId', `'${id}'`);
});

//open close
mp.events.add("cef:inv:close", ()=>{
    close();
})

mp.events.add("inv:open:stock", (id, type)=>{
    global.stockId = id;
    global.gui.setData("inventory/setStock", JSON.stringify({id, type}));
    //mp.serverLog(`inv:open:stock: ${id} ${type}`);
    open("Stock");
})

//equips
mp.events.add("inv:clear:equip", ()=>{
    global.gui.setData('inventory/clearEquip');
})

mp.events.add("inv:update:equip", (type, slot, item)=>{
    if(type == 1){
        global.playerEquip.weapons[slot] = item == null ? null : {id: item[0], count: 1, index: slot}
    }else{
        global.playerEquip.clothes[slot] = item == null ? null : {id: item[0], count: 1, index: slot}
    }
    global.gui.setData('inventory/updateEquip', JSON.stringify({type, slot, item}));
})

mp.events.add("inv:update:item", (id, item)=>{
    //mp.serverLog(`inv:update:item ${id} ${JSON.stringify(item)}`);
  
    if(global.playerInventory.id == id ){
        const index = global.playerInventory.items.findIndex(i=>i.index == item[2]);
        if(index == -1){
            if(item[1] > 0) 
                global.playerInventory.items.push({id: item[0], count: item[1], index: item[2]});
        }else{
            if(item[1] > 0)
                global.playerInventory.items[index].count = item[1];
            else
                global.playerInventory.items.splice(index, 1);
        }
    }
    global.gui.setData('inventory/updateItem', JSON.stringify({id, item}));
})

mp.events.add("inv:update", updateInventory)

let waitInventoryReady = 10;
function updateInventory(id, items, maxWeight, size){
    if(global.playerInventory.id == -1 && waitInventoryReady > 0){
        waitInventoryReady--;
        setTimeout(()=>{
            updateInventory(id, items, maxWeight, size);
        }, 1000)
        return;
    }

    if(global.playerInventory.id == id ){
        global.playerInventory.items = [];        
        global.playerInventory.maxWeight = maxWeight;
        global.playerInventory.size = size;
        items.forEach(item => {
            global.playerInventory.items.push({
                id: item[0],
                count: item[1],
                index: item[2]
            })

        });
    }
    // mp.serverLog(`1inv:update2: ${items} ${JSON.parse(items)}`);
    //mp.serverLog(`2inv:update2: ${items} ${JSON.stringify(items)}`);
    global.gui.setData('inventory/update', JSON.stringify({id, items, maxWeight, size}));
}


mp.events.add("inv:update:near", (items)=>{   
    // mp.serverLog(`1inv:update:near: ${items} ${JSON.parse(items)}`);
    //mp.serverLog(`2inv:update:near: ${items} ${JSON.stringify(items)}`);
    global.gui.setData('inventory/update', JSON.stringify({id:0, items, maxWeight: -1, size: 2}));
})

function placeOnGround(obj){
    const position = obj.getCoords(true);
    const z = mp.game.gameplay.getGroundZFor3dCoord(position.x, position.y, position.z, 0.0, false);
    obj.setCoordsNoOffset(position.x, position.y, z + .05, true, true, true);
}

mp.events.add("inv:use:item", (index)=>{
    if(global.inAction) return;
    if(mp.players.local.hasOwnProperty("attachedWeapons") && mp.players.local.attachedWeapons["weapon:current"]){
        mp.events.call('notify', 1, 9, "act:canc:w", 3000);
        return;
    } 
    mp.events.callRemote("inv:use:item", index);
})

// mp.events.addDataHandler("data:object:id", (obj, value)=>{
//     if(obj.getType() != 3 || obj.handle == 0) return;
//     placeOnGround(obj);
// })

// mp.events.add("entityStreamIn", (obj)=>{
//     if(obj.getType() != 3) return;
//     placeOnGround(obj);
// })

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;
mp.events.add("furnitureStore:open", (price) => {        
    opened = global.gui.openPage("FurnitureShop");
    global.gui.setData('furnitureShop/setPricePart', JSON.stringify(price))
});

mp.events.add("furnitureShop:buy", (data) => {
    // [{key: item.key, count: item.count}, {key: item.key, count: item.count}]
    closeMenu();
    mp.events.callRemote('furnitureStore:playerBought', data)
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function() {
    if(opened)
        closeMenu();
});

function closeMenu(){
    opened = false
    global.gui.close()
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {


__webpack_require__(46);
// require('./driftPoints.js');
__webpack_require__(47);
__webpack_require__(48);
__webpack_require__(49);



/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
//god speed
let godSpeedModOn = false;
let godSpeedOn = false;
let step = 10;
let currSpeed = 200;

mp.events.add('godspeedon', (newspeed, newstep) => {
    if (global.getVariable(mp.players.local, 'ALVL', 0) < 1)
        return;
    godSpeedModOn = !godSpeedModOn;
    step = newstep;
    currSpeed = newspeed / 3.6;
});

mp.keys.bind(global.Keys.Key_NUMPAD8, false, function () {
    if (!global.loggedin || global.getVariable(mp.players.local, 'ALVL', 0) < 1 || !godSpeedModOn || global.chatActive || mp.gui.cursor.visible || global.editing || global.gui.isOpened()) return;
    currSpeed += (step / 3.6);
    if (currSpeed > 1000)
        currSpeed = 1000;
});
mp.keys.bind(global.Keys.Key_NUMPAD2, false, function () {
    if (!global.loggedin || global.getVariable(mp.players.local, 'ALVL', 0) < 1 || !godSpeedModOn || global.chatActive || mp.gui.cursor.visible || global.editing || global.gui.isOpened()) return;
    currSpeed -= (step / 3.6);
    if (currSpeed < -1000)
        currSpeed = -1000;
});
mp.keys.bind(global.Keys.Key_NUMPAD7, false, function () {
    if (!global.loggedin || global.getVariable(mp.players.local, 'ALVL', 0) < 1 || !godSpeedModOn || global.chatActive || mp.gui.cursor.visible || global.editing || global.gui.isOpened()) return;
    step /= 10;
    if (step < 1)
        step = 1;
});
mp.keys.bind(global.Keys.Key_NUMPAD9, false, function () {
    if (!global.loggedin || global.getVariable(mp.players.local, 'ALVL', 0) < 1 || !godSpeedModOn || global.chatActive || mp.gui.cursor.visible || global.editing || global.gui.isOpened()) return;
    step *= 10;
    if (step > 1000)
        step = 1000;
});
mp.keys.bind(global.Keys.Key_NUMPAD5, false, function () {
    if (!global.loggedin || global.getVariable(mp.players.local, 'ALVL', 0) < 1 || !godSpeedModOn || global.chatActive || mp.gui.cursor.visible || global.editing || global.gui.isOpened()) return;
    godSpeedOn = !godSpeedOn;
});
mp.keys.bind(global.Keys.Key_NUMPAD0, false, function () {
    if (!global.loggedin || global.getVariable(mp.players.local, 'ALVL', 0) < 1 || !godSpeedModOn || global.chatActive || mp.gui.cursor.visible || global.editing || global.gui.isOpened()) return;

    if (mp.players.local.isInAnyVehicle(true)) {
        if (mp.players.local.vehicle) {
            mp.players.local.vehicle.setForwardSpeed(currSpeed);
        }
    }
});
mp.keys.bind(global.Keys.Key_NUMPAD1, false, function () {
    if (!global.loggedin || global.getVariable(mp.players.local, 'ALVL', 0) < 1 || !godSpeedModOn || global.chatActive || mp.gui.cursor.visible || global.editing || global.gui.isOpened()) return;

    if (mp.players.local.isInAnyVehicle(true)) {
        if (mp.players.local.vehicle) {
            mp.players.local.vehicle.setMaxSpeed(currSpeed);
        }
    }
});


mp.events.add('render', () => {
    if (!godSpeedModOn)
        return;
    if (!global.loggedin || global.getVariable(mp.players.local, 'ALVL', 0) < 1 || !godSpeedModOn) return;

    mp.game.graphics.drawText('GodSpeed:' + godSpeedOn, [0.5, 0.005], {
        font: 7,
        color: [255, 100, 100, 185],
        scale: [0.4, 0.4],
        outline: true
    });
    mp.game.graphics.drawText('Speed:' + Math.round(currSpeed * 3.6), [0.5, 0.030], {
        font: 7,
        color: [255, 100, 100, 185],
        scale: [0.4, 0.4],
        outline: true
    });
    mp.game.graphics.drawText('Step:' + step, [0.5, 0.055], {
        font: 7,
        color: [255, 100, 100, 185],
        scale: [0.4, 0.4],
        outline: true
    });

    if (godSpeedOn && mp.players.local.isInAnyVehicle(true)) {
        if (mp.players.local.vehicle) {
            mp.players.local.vehicle.setForwardSpeed(currSpeed);
        }
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
global.VehicleNeons = new Map();

let nextUpdateNeonTime = Date.now();
let _intervalUpdateNeon = 500;


function CheckExistVehicle(vehicle) {
    return (vehicle && vehicle.type === 'vehicle' && vehicle.handle !== 0);
}

function GetNormalize(value, defaultValue) {
    if ((typeof value) === 'undefined' || value == undefined || value == null)
        return defaultValue;
    else
        return value;
}

function SetHLColor(vehicle, color) {
    try {
        if (vehicle && mp.vehicles.exists(vehicle))
            mp.game.invoke(global.getNative("_SET_VEHICLE_HEADLIGHTS_COLOUR"), vehicle.handle, color);
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in vehiclesync.SetHLColor: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

global.EntityStreamInTuning = (vehicle) => {

    let hlcolor = global.getVariable(vehicle, 'hlcolor', 0);
    SetHLColor(vehicle, hlcolor);

    let tyreColor = global.getVariable(vehicle, 'tyrecolor', [240, 240, 240]);
    vehicle.toggleMod(20, true);
    vehicle.setTyreSmokeColor(tyreColor[0], tyreColor[1], tyreColor[2]);

    let paintTypeP = global.getVariable(vehicle, 'paintTypeCarPrim', 1);
    vehicle.setModColor1(paintTypeP, 0, 0);


    let paintTypeS = global.getVariable(vehicle, 'paintTypeCarSec', 1);
    vehicle.setModColor2(paintTypeS, 0);

    let pearlColor = global.getVariable(vehicle, 'pearlColorCar', 0);
    let wheelcolor = global.getVariable(vehicle, 'wheelcolor', 0);

    vehicle.setExtraColours(pearlColor, wheelcolor);

    let flashingneon = global.getVariable(vehicle, 'veh:flashingneon', null);
    if (flashingneon != null) {
        vehicle.setNeonLightEnabled(0, true);
        vehicle.setNeonLightEnabled(1, true);
        vehicle.setNeonLightEnabled(2, true);
        vehicle.setNeonLightEnabled(3, true);
        global.VehicleNeons.delete(vehicle);
        if (flashingneon.length > 0)
            vehicle.setNeonLightsColour(flashingneon[0][0], flashingneon[0][1], flashingneon[0][2]);
        if (flashingneon.length > 1)
            global.VehicleNeons.set(vehicle, { colors: flashingneon, currColor: 0 });
    }
}

mp.events.addDataHandler('veh:flashingneon', (vehicle, flashingneon) => {
    if (!CheckExistVehicle(vehicle))
        return;
    if ((typeof flashingneon) !== 'undefined' && flashingneon != null) {
        vehicle.setNeonLightEnabled(0, true);
        vehicle.setNeonLightEnabled(1, true);
        vehicle.setNeonLightEnabled(2, true);
        vehicle.setNeonLightEnabled(3, true);
        global.VehicleNeons.delete(vehicle);
        if (flashingneon.length > 0)
            vehicle.setNeonLightsColour(flashingneon[0][0], flashingneon[0][1], flashingneon[0][2]);
        if (flashingneon.length > 1)
            global.VehicleNeons.set(vehicle, { colors: flashingneon, currColor: 0 });
    }
    else {
        vehicle.setNeonLightEnabled(0, false);
        vehicle.setNeonLightEnabled(1, false);
        vehicle.setNeonLightEnabled(2, false);
        vehicle.setNeonLightEnabled(3, false);
        global.VehicleNeons.delete(vehicle);
    }
});

mp.events.add('veh:setTyreBurst', () => {
    let vehicle = mp.players.local.vehicle;
    if (!CheckExistVehicle(vehicle))
        return;
    vehicle.setTyreBurst(0, false, 1000);
    vehicle.setTyreBurst(1, false, 1000);
    vehicle.setTyreBurst(4, false, 1000);
    vehicle.setTyreBurst(5, false, 1000);
});
mp.events.addDataHandler("hlcolor", (vehicle, color) => {
    if (!CheckExistVehicle(vehicle))
        return;
    SetHLColor(vehicle, GetNormalize(color, 0));
});

mp.events.addDataHandler("tyrecolor", (vehicle, color) => {
    if (!CheckExistVehicle(vehicle))
        return;
    if ((typeof color) !== 'undefined' && color != null) {
        vehicle.toggleMod(20, true);
        vehicle.setTyreSmokeColor(color[0], color[1], color[2]);
    }
    else {
        vehicle.toggleMod(20, true);
        vehicle.setTyreSmokeColor(240, 240, 240);
    }
});

mp.events.addDataHandler("paintTypeCarPrim", (vehicle, paintType) => {
    if (!CheckExistVehicle(vehicle))
        return;
    vehicle.setModColor1(GetNormalize(paintType, 1), 0, 0);
    let pearlColor = global.getVariable(vehicle, 'pearlColorCar', 0);
    let wheelcolor = global.getVariable(vehicle, 'wheelcolor', 0);
    vehicle.setExtraColours(pearlColor, wheelcolor);
});

mp.events.addDataHandler("paintTypeCarSec", (vehicle, paintType) => {
    if (!CheckExistVehicle(vehicle))
        return;
    if (typeof (paintType) !== 'undefined' && paintType != null)
        vehicle.setModColor2(GetNormalize(paintType, 1), 0);
});

mp.events.addDataHandler("pearlColorCar", (vehicle, color) => {
    if (!CheckExistVehicle(vehicle))
        return;
    let wheelcolor = global.getVariable(vehicle, 'wheelcolor', 0);
    vehicle.setExtraColours(GetNormalize(color, 0), wheelcolor);
});

mp.events.addDataHandler("wheelcolor", (vehicle, color) => {
    if (!CheckExistVehicle(vehicle))
        return;
    let pearlColor = global.getVariable(vehicle, 'pearlColorCar', 0);
    vehicle.setExtraColours(pearlColor, GetNormalize(color, 0));
});


mp.events.add('render', () => {
    //Обновление неона
    if (Date.now() > nextUpdateNeonTime) {
        nextUpdateNeonTime = Date.now() + _intervalUpdateNeon;
        for (let key of global.VehicleNeons.keys()) {
            if (key != null && key != undefined && mp.vehicles.exists(key)) {
                global.VehicleNeons.get(key).currColor = ++global.VehicleNeons.get(key).currColor % global.VehicleNeons.get(key).colors.length;
                var color = global.VehicleNeons.get(key).colors[global.VehicleNeons.get(key).currColor];
                key.setNeonLightsColour(color[0], color[1], color[2]);
            }
        }
    }
});

mp.events.add('entityStreamOut', (vehicle) => {
    if (!vehicle || vehicle.type !== "vehicle") return;
    if (global.VehicleNeons.has(vehicle))
        global.VehicleNeons.delete(vehicle);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {

let nextUpdateDoorBrokeTime = Date.now();
let _intervalUpdateDoorBroke = 500;

let nextUpdateDirtTime = Date.now();
let _intervalUpdateDirt = 20000;

let currDirtLvl = 0;
let coefDirtLvl = 0.3;

let _healthWhenEngineBreak = 50;
let oldEngineHealth = 1000;

let _distance = 0;
let _oldPosition = new mp.Vector3(0, 0, 0);

let driverSeat = 0;

function CheckExistVehicle(vehicle) {
    return (vehicle && vehicle.type === 'vehicle' && vehicle.handle !== 0);
}

mp.events.add("viewVariableData", (vehicle, variable) => {
    try {
        if (vehicle) {
            mp.gui.chat.push(`${JSON.stringify(global.getVariable(vehicle, variable, "None"))}`);
            mp.serverLog(JSON.stringify(global.getVariable(vehicle, variable, "None")));
        }

    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in vehiclesync.entityStreamIn: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

let vehicleControlBlock = false;
mp.events.add("vehicleControl", (toggle) => 
{
    vehicleControlBlock = toggle;
});

mp.events.add("veh:offRadio", () => {
    if (mp.players.local.vehicle) {
        mp.events.callRemote('VehStream_RadioChange', mp.players.local.vehicle, 255);
        mp.game.audio.setRadioToStationName("OFF");
    }
});

// F - seats in driver, G - seats in passanger
mp.events.add('render', () => {

    mp.game.controls.disableControlAction(0, 58, true);
    if (global.getVariable(mp.players.local, 'InDeath', false) || global.cuffed)
	{
        mp.game.controls.disableControlAction(0, 23, true);
	}
	
	if (vehicleControlBlock) 
	{
		mp.game.controls.disableControlAction(27, 71, true); // W
		mp.game.controls.disableControlAction(27, 72, true); // S
		mp.game.controls.disableControlAction(27, 63, true); // A
		mp.game.controls.disableControlAction(27, 64, true); // D
	}
	
});

mp.keys.bind(global.Keys.Key_G, false, () => {
    try {
        if (global.checkIsAnyActivity()) return;
        if (global.getVariable(mp.players.local, 'InDeath', false)) return;
        if (!mp.players.local.vehicle) {
            let vehicle = getClosestVehicleInRange(5);
            global.seatVehicleOnClearPlace(vehicle, mp.players.local, 5000, 5)
        }
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in vehiclesync.seatVehicleOnClearPlace: ${e.name}\n${e.message}\n${e.stack}`);
        return false;
    }
});

mp.keys.bind(global.Keys.Key_B, false, () => {
    let localPlayer = mp.players.local;
    if (localPlayer.vehicle && localPlayer.vehicle.getPedInSeat(-1) === localPlayer.handle && localPlayer.vehicle.getClass() === 18) {
        localPlayer.vehicle.getVariable('silentMode') ? mp.gui.notify(mp.gui.notifyType.INFO, "Вы включили звук сирен", 3000) : mp.gui.notify(mp.gui.notifyType.INFO, "Вы отключили звук сирен", 3000);
        mp.events.callRemote('syncSirens', localPlayer.vehicle)
    }
});


global.seatVehicleOnClearPlace = (vehicle, ped, time, distance) => {
    try {
        if (vehicle === null)
            return false;
        if (!vehicle || !vehicle.isAnySeatEmpty() || vehicle.getSpeed() > 5)
            return false;
        if (calcDist(vehicle.position, ped.getCoords(true)) > distance)
            return false;
        let maxSeat = mp.game.vehicle.getVehicleModelMaxNumberOfPassengers(vehicle.model);
        for (let seatIndex = 0; seatIndex < maxSeat - 1; seatIndex++) {
            if (vehicle.isSeatFree(seatIndex) && vehicle.getDoorLockStatus() == 1) {
                if (seatIndex > 2) {
                    ped.taskOpenVehicleDoor(vehicle.handle, time, 1, 2);
                    setTimeout(() => {
                        ped.setIntoVehicle(vehicle.handle, seatIndex);
                    }, time);
                } else
                    ped.taskEnterVehicle(vehicle.handle, time, seatIndex, 2, 1, 0);
                return true;
            }
        }
        return false;

    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in vehiclesync.seatVehicleOnClearPlace: ${e.name}\n${e.message}\n${e.stack}`);
        return false;
    }
}

function getClosestVehicleInRange(range) {
    const vehiclesInRange = [];
    mp.vehicles.forEachInStreamRange((vehicle) => {
        const distSquared = calcDist(vehicle.position, mp.players.local.position);
        if (distSquared <= range) {
            vehiclesInRange.push({ vehicle, distSquared });
        }
    });

    vehiclesInRange.sort((a, b) => a.distSquared - b.distSquared);

    return vehiclesInRange[0] ? vehiclesInRange[0].vehicle : null;
}

global.calcDist = function (v1, v2) {
    return mp.game.system.vdist(
        v1.x,
        v1.y,
        v1.z,
        v2.x,
        v2.y,
        v2.z
    );
}


mp.events.add('render', () => {
    if (!mp.players.local.isInAnyVehicle(true) || !mp.players.local.vehicle)
        return;
    let vehicle = mp.players.local.vehicle;
    if (vehicle.getPedInSeat(-1) !== mp.players.local.handle)
        return;

    let torque = global.getVariable(vehicle, 'ENGINETORQUE', 1);
    let transmissCoef = global.getVariable(vehicle, 'veh:coefTransm', 1);
    vehicle.setEngineTorqueMultiplier(torque * transmissCoef);

    //Костыль, чтоб делать проверти только у личных авто, -100 - лишние проверки не делаем
    let dontCheck = global.getVariable(vehicle, 'veh:doorBreak', -100);


    if (Date.now() > nextUpdateDirtTime) {
        nextUpdateDirtTime = Date.now() + _intervalUpdateDirt;

        //Обновление грязи
        let vehClear = global.getVariable(vehicle, 'veh:vehDirtClear', 0) * 1000;
        if (Date.now() > vehClear) {
            let dirt = vehicle.getDirtLevel();
            let newDirt = currDirtLvl + (dirt - currDirtLvl) * coefDirtLvl;
            currDirtLvl = newDirt > 15 ? 15 : newDirt;
        }
        mp.events.callRemote('veh:setDirtLevel', currDirtLvl);

        //отправляем пройденное расстояние
        if (_distance > 1) {
            if (dontCheck != -100)
                mp.events.callRemote('veh:addDistance', vehicle, _distance);
            mp.events.call('personalEvents:invokeEvents', "Driving", _distance);
            _distance = 0;
        }
    }

    //Ломаем тормоза
    if (dontCheck != -100 && global.getVariable(vehicle, 'veh:BrakesBroke', false)) {
        if (vehicle.getSpeed() > 2)
            if (vehicle.getSpeedVector(true).y > 0)
                mp.game.controls.disableControlAction(27, 72, true);
            else if (vehicle.getSpeedVector(true).y < 0)
                mp.game.controls.disableControlAction(27, 71, true);
        mp.game.controls.disableControlAction(27, 76, true);
    }

    //Проверки на повреждения
    if (Date.now() > nextUpdateDoorBrokeTime) {
        nextUpdateDoorBrokeTime = Date.now() + _intervalUpdateDoorBroke;

        if (dontCheck != -100) {
            //ломаем двери
            let door = global.getVariable(vehicle, 'veh:doorBreak', 0);
            for (let i = 0; i < 8; i++) {
                if ((door >> i) % 2 == 0 && vehicle.isDoorDamaged(i))
                    mp.events.callRemote('veh:doorBroken', i);
            }

            //Ломаем движок
            if (oldEngineHealth > _healthWhenEngineBreak && vehicle.getEngineHealth() <= _healthWhenEngineBreak)
                mp.events.callRemote('veh:engBroken');
            oldEngineHealth = vehicle.getEngineHealth();
        }

        //Пройденное расстояние
        let diffDist = mp.game.gameplay.getDistanceBetweenCoords(vehicle.position.x, vehicle.position.y, vehicle.position.z, _oldPosition.x, _oldPosition.y, _oldPosition.z, true);
        if (diffDist < 100)
            _distance += diffDist;
        _oldPosition = vehicle.position;
    }
});

mp.events.addDataHandler("silentMode", (entity, value) => {
    if (entity.type === "vehicle") entity.setSirenSound(value);
});

//Sync data on stream in
mp.events.add("entityStreamIn", (vehicle) => {
    try {
		if (!vehicle) return;
        if (vehicle.type !== "vehicle") return;

		let isShowRoomVehicle = global.getVariable(vehicle, 'veh:showRoom', false);
		if (isShowRoomVehicle) 
		{
			mp.game.streaming.requestCollisionAtCoord(vehicle.position.x, vehicle.position.y, vehicle.position.z);
			vehicle.setLoadCollisionFlag(true);
			vehicle.setMaxSpeed(0);
			vehicle.setOnGroundProperly();
			vehicle.setUndriveable(true);
			vehicle.setEngineOn(false, false, true);
			return;
		}
		
        if (vehicle.type === 'vehicle' && vehicle.getClass() === 18 && vehicle.hasVariable('silentMode')) vehicle.getVariable('silentMode') ? vehicle.setSirenSound(true) : vehicle.setSirenSound(false);
        vehicle.freezePosition(true);
        //Needed to stop vehicles from freaking out
        mp.game.streaming.requestCollisionAtCoord(vehicle.position.x, vehicle.position.y, vehicle.position.z);
        vehicle.setLoadCollisionFlag(true);

        //Set doors unbreakable for a moment
        let x = 0;
        for (x = 0; x < 8; x++) {
            vehicle.setDoorBreakable(x, false);
        }

        let enginePower = global.getVariable(vehicle, 'ENGINEPOWER', 0);
        let engineHealth = global.getVariable(vehicle, 'veh:engineHealth', 1000);
        SetVehicleEnginePower(vehicle, enginePower, engineHealth);

        let engState = global.getVariable(vehicle, 'veh:engineStatus', false);
        vehicle.setEngineOn(engState, engState, !engState);
        vehicle.setUndriveable(true);

        let doorStatus = global.getVariable(vehicle, 'veh:doorStatus', 0);
        for (let index = 0; index < 8; index++) {
            let st = (doorStatus >> index) % 2;
            if (st == 1)
                vehicle.setDoorOpen(index, false, false);
            else
                vehicle.setDoorShut(index, false);
        }

        let doorBreak = global.getVariable(vehicle, 'veh:doorBreak', 0);
        for (let index = 0; index < 8; index++) {
            let st = (doorBreak >> index) % 2;
            if (st == 1)
                vehicle.setDoorBroken(index, true);
        }

        let dirtLevel = global.getVariable(vehicle, 'veh:dirtLevel', 0);
        vehicle.setDirtLevel(dirtLevel);

        
        let turnSignal = global.getVariable(vehicle, 'veh:turnSignal', 0);
        if (turnSignal % 2 == 1)
            vehicle.setIndicatorLights(1, true);
        else
            vehicle.setIndicatorLights(1, false);
        if (turnSignal > 1)
            vehicle.setIndicatorLights(0, true);
        else
            vehicle.setIndicatorLights(0, false);

        let isFreeze = global.getVariable(vehicle, 'veh:isFreeze', false);
        vehicle.freezePosition(isFreeze);

        global.EntityStreamInTuning(vehicle);
        global.VehicleSetSharedDataHandlingMods(vehicle);
        //Make doors breakable again
        setTimeout(() => {
            for (x = 0; x < 8; x++) {
                if (vehicle && mp.vehicles.exists(vehicle))
                    vehicle.setDoorBreakable(x, true);
            }
            if (!isFreeze) vehicle.freezePosition(false);
        }, 1500);
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in vehiclesync.entityStreamIn: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

mp.events.add("player:teleportInCar", (position, time) => {
    let vehicle = mp.players.local.vehicle;
    if (!vehicle) return;
    vehicle.setCoordsNoOffset(position.x, position.y, position.z, false, false, false);
    mp.events.call("FixTeleportInVehicle", time);
});

mp.events.add("FixTeleportInVehicle", (time) => {
    let vehicle = mp.players.local.vehicle;
    if (!vehicle) return;
    setTimeout(() => {
        vehicle.setOnGroundProperly();
        vehicle.freezePosition(true);
        setTimeout(() => {
            vehicle.freezePosition(false);
            vehicle.setOnGroundProperly();
        }, time);
        vehicle.setPaintFade(1);
    }, 0);
});

mp.events.add("playerEnterVehicle", (vehicle, seat) => {
    try {
        if (!CheckExistVehicle(vehicle)) return;
        if (seat == -1)
		{
            let engState = global.getVariable(vehicle, 'veh:engineStatus', false);
            vehicle.setEngineOn(engState, engState, !engState);
            vehicle.setUndriveable(!engState);
            _oldPosition = vehicle.position;
            currDirtLvl = global.getVariable(vehicle, 'veh:dirtLevel', 5);
            _distance = 0;
            oldEngineHealth = vehicle.getEngineHealth();

            mp.players.local.setConfigFlag(32, true);
            updateBeltSound();
            godSpeedOn = false;
            global.reduce = false;
        }
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in vehiclesync.playerEnterVehicle: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

mp.events.add("VehStream_SetSirenSound", (veh, status) => {
    try {
        if (!CheckExistVehicle(veh))
            return;
        if (veh.getClass() == 18)
            veh.setSirenSound(status);
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in vehiclesync.VehStream_SetSirenSound: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

let soundIdBelt = 2;
let timerSoundBelt = null;

function updateBeltSound() {
    try {
        let vehicle = mp.players.local.vehicle;
        if (!CheckExistVehicle(vehicle)) return;
        if (mp.players.local.vehicle.getPedInSeat(-1) != mp.players.local.handle) return;
		
		let vehicleClass = vehicle.getClass();
		if (vehicleClass == 8 || vehicleClass == 13) return;
		
        let belt = mp.players.local.getConfigFlag(32, true);
        let engine = vehicle.getIsEngineRunning();
        stopBeltTimeout();
        if (engine && belt) {
            mp.game.audio.playSoundFromEntity(soundIdBelt, "Crate_Beeps", vehicle.handle, "MP_CRATE_DROP_SOUNDS", true, 0);
            timerSoundBelt = setTimeout(() => {
                mp.game.audio.playSoundFromEntity(soundIdBelt, "DEVICE", vehicle.handle, "EPSILONISM_04_SOUNDSET", true, 0);
            }, 5000);
        }
        else
            mp.game.audio.playSoundFromEntity(soundIdBelt, "DEVICE", vehicle.handle, "EPSILONISM_04_SOUNDSET", true, 0);
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in vehiclesync.updateBeltSound: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

function stopBeltTimeout() {
    if (timerSoundBelt) {
        clearTimeout(timerSoundBelt);
        timerSoundBelt = null;
    }
}

mp.keys.bind(global.Keys.Key_1, false, () => {
    if (global.checkIsAnyActivity()) return;
    if (mp.keys.isUp(global.Keys.Key_RCONTROL))
        taskWarpIntoVehicleDriverSeat();
});
function taskWarpIntoVehicleDriverSeat() {
    try {
        let vehicle = mp.players.local.vehicle;
        if (!CheckExistVehicle(vehicle))
            return;
        if (mp.players.local.vehicle.getPedInSeat(-1) == mp.players.local.handle)
            return;
        mp.players.local.taskWarpIntoVehicle(vehicle.handle, -1);
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in vehiclesync.taskWarpIntoVehicleDriverSeat: ${e.name}\n${e.message}\n${e.stack}`);
    }
};

mp.events.add("VehStream_SetLockStatus", (veh, status) => {
    try {
        if (!CheckExistVehicle(veh))
            return;
        if (status)
            mp.game.audio.playSoundFromEntity(1, "Remote_Control_Close", veh.handle, "PI_Menu_Sounds", true, 0);
        else
            mp.game.audio.playSoundFromEntity(1, "Remote_Control_Open", veh.handle, "PI_Menu_Sounds", true, 0);


        veh.setIndicatorLights(0, true);
        veh.setIndicatorLights(1, true);
        setTimeout(() => {
            veh.setIndicatorLights(0, false);
            veh.setIndicatorLights(1, false);
        }, 2000);

    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in vehiclesync.VehStream_SetLockStatus: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

mp.events.add("VehStream_PlayerExitVehicleAttempt", (vehicle, engState) => {
    if (!CheckExistVehicle(vehicle))
        return;
    vehicle.setEngineOn(engState, engState, !engState);
    vehicle.setUndriveable(engState);
    if (vehicle != null && _distance > 1) {
        mp.events.callRemote('veh:addDistance', vehicle, _distance);
        _distance = 0;
    }
});

mp.events.add("gui:ready", () => {
    global.keyActions["belt"].subscribe(beltPressKey, true);
})

function beltPressKey() {
    if (!global.localplayer.isInAnyVehicle(true)) return;
    let flag = mp.players.local.getConfigFlag(32, true);
    mp.players.local.setConfigFlag(32, !flag);
    global.gui.setData('speedometer/setBelt', flag);
    //mp.events.callRemote('seatbelt');   
    global.RefreshHints();
    updateBeltSound();
}


// mp.keys.bind(global.Keys.Key_J, true, () => {
//     if (!global.localplayer.isInAnyVehicle(true)) return;
//     let flag = mp.players.local.getConfigFlag(32, true);
//     mp.players.local.setConfigFlag(32, !flag);
//     global.gui.setData('speedometer/setBelt', flag);
//     //mp.events.callRemote('seatbelt');    
//     global.RefreshHints();
// });

function SetVehicleEnginePower(vehicle, power, engineHealth) {
    let pwr = (power + 100) * (engineHealth + 1000) / 2000 - 100;
    vehicle.setEnginePowerMultiplier(pwr);
}




mp.events.addDataHandler('ENGINEPOWER', (vehicle, enginePower) => {
    if (!CheckExistVehicle(vehicle))
        return;
    if ((typeof enginePower) !== 'undefined' && enginePower != null) {
        let engineHealth = global.getVariable(vehicle, 'veh:engineHealth', 1000);
        SetVehicleEnginePower(vehicle, enginePower, engineHealth);
    }
});

mp.events.addDataHandler('veh:engineHealth', (vehicle, engineHealth) => {
    if (!CheckExistVehicle(vehicle))
        return;
    if ((typeof engineHealth) !== 'undefined' && engineHealth != null) {
        let enginePower = global.getVariable(vehicle, 'ENGINEPOWER', 0);
        SetVehicleEnginePower(vehicle, enginePower, engineHealth);
    }
});

mp.events.addDataHandler('veh:engineStatus', (vehicle, status) => {
    if (!CheckExistVehicle(vehicle))
        return;
    if ((typeof status) !== 'undefined' && status != null) {
        vehicle.setEngineOn(status, status, !status);
        vehicle.setUndriveable(!status);
        if (mp.players.local.vehicle == vehicle) {
            updateBeltSound();
            global.RefreshHints();
        }
    }

});

mp.events.addDataHandler('veh:doorStatus', (vehicle, doorStatus) => {
    if (!CheckExistVehicle(vehicle))
        return;
    if ((typeof doorStatus) !== 'undefined' && doorStatus != null) {
        for (let index = 0; index < 8; index++) {
            let st = (doorStatus >> index) % 2;
            if (st == 1)
                vehicle.setDoorOpen(index, false, false);
            else
                vehicle.setDoorShut(index, false);
        }
    }
});

mp.events.addDataHandler('veh:doorBreak', (vehicle, doorBreak) => {
    if (!CheckExistVehicle(vehicle))
        return;
    if ((typeof doorBreak) !== 'undefined' && doorBreak != null) {
        for (let index = 0; index < 8; index++) {
            let st = (doorBreak >> index) % 2;
            if (st == 1)
                vehicle.setDoorBroken(index, true);
        }
    }
});

mp.events.addDataHandler('veh:dirtLevel', (vehicle, dirtLevel) => {
    if (!CheckExistVehicle(vehicle))
        return;
    if ((typeof dirtLevel) !== 'undefined' && dirtLevel != null) {
        vehicle.setDirtLevel(dirtLevel);
        if (vehicle.getPedInSeat(-1) == mp.players.local.handle) {
            currDirtLvl = dirtLevel;
        }

    }
});

mp.events.addDataHandler('veh:isFreeze', (vehicle, isFreezed) => {
    if (!CheckExistVehicle(vehicle))
        return;
    if ((typeof isFreezed) !== 'undefined' && isFreezed != null) {
        vehicle.freezePosition(isFreezed);
    }
});

mp.events.addDataHandler('veh:turnSignal', (vehicle, turnSignal) => {
    if (!CheckExistVehicle(vehicle))
        return;
    if ((typeof turnSignal) !== 'undefined' && turnSignal != null) {
        if (turnSignal % 2 == 1)
            vehicle.setIndicatorLights(1, true);
        else
            vehicle.setIndicatorLights(1, false);
        if (turnSignal > 1)
            vehicle.setIndicatorLights(0, true);
        else
            vehicle.setIndicatorLights(0, false);
    }
});



//car key

let carKeyOpen = false;

mp.events.add('vehicle::key::openKey', (vehicleId) => {
    mp.events.call('cef:inv:close');
    global.gui.setData('hud/openKey', JSON.stringify({ show: true, vehicleId: vehicleId }));
    carKeyOpen = true;
    global.showCursor(true);
});

mp.keys.bind(global.Keys.Key_DOWN, false, () => {
    if (carKeyOpen) {
        carKeyOpen = false;
        global.gui.setData('hud/openKey', JSON.stringify({ show: false, vehicleId: 0 }));
        global.showCursor(false);
    }
});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const keyList = __webpack_require__(6)


global.reduce = false;
let handlingData = {};
// let keyList = [

//     'handlingName', //параметр, отвечающий за название транспортного средства в игре (макс. 14 прописных букв, может также содержать цифры);
//     'fMass', //параметр, отвечающий за массу транспортного средства в килограммах. (от 0.0 до 10000.0 и более);
//     'fInitialDragCoeff', //начальный коэффициент аэродинамического сопротивления (от 0 до 120);
//     'fPercentSubmerged', //процент от высоты транспортного средства в воде, при котором оно начинает «плыть», погружаясь затем в воду. (любое значение с плавающей точкой, например 0.85 - равно 85 %).
//     'vecCentreOfMassOffset', //координаты x, y, z, отвечающие за вектор центра массы (от -10.0 до 10.0);x - положительное значение смещает центр тяжести вправо.y - положительное значение смещает центр тяжести вперед.z - положительное значение смещает центр тяжести вверх.
//     'vecInertiaMultiplier', //координаты x, y, z, отвечающие за множитель вектора инерции (от -10. до 10.0);


//     //TransmissionParams
//     'fDriveBiasFront', //параметр, отвечающий за привод транспортного средства. Так, значение 0.0 определяет заднеприводный транспорт; 1.0', //переднеприводный; 0.5', //полноприводный транспорт (на 4 колеса).
//     'nInitialDriveGears', //параметр, отвечающий за количество передач (от 1 до 16);
//     'fInitialDriveForce', //множитель тягового усиления (ускорение) транспортного средства (от 0.01 до 2.0. Значение 1.0 не влияет на множитель.);
//     'fDriveInertia', //множитель, отвечающий за инерцию двигателя (за то, как быстро набираются обороты, от 0.01 до 2.0. Значение 1.0 не влияет на множитель.);
//     'fClutchChangeRateScaleUpShift', //множитель сцепления при смещении вверх;
//     'fClutchChangeRateScaleDownShift', //множитель сцепления при смещении вниз;
//     'fInitialDriveMaxFlatVel', //теоретическая максимальная скорость транспортного средства в км/ч (от 0.00 до 500.0 и более. Изменение данного значения не гарантирует достижение этой скорости); Умножьте значение из файла на 0.82 чтобы получить скорость в миля/час Умножьте значение из файла на 1.32 чтобы получить скорость в км/час
//     'fBrakeForce', //множитель силы торможения транспортного средства (от 0.01 до 2.0. Значение 1.0 не влияет на множитель);
//     'fBrakeBiasFront', //параметр, отвечающий за равномерное распределение силы торможения между передней и задней осей (от 0.0 до 1.0. Значение 0.0 увеличивает силу торможения только для задней оси; 1.0', //для передней оси; 0.5', //равномерно. В жизни, автомобили как правила имеют более высокую силу торможения передней оси, например 0.65);
//     'fHandBrakeForce', //параметр, отвечающий за мощность ручного тормоза транспортного средства;
//     'fSteeringLock', //множитель максимального угла поворота руля (от 0.01 до 2.0. Значение в радиусе 0.1', //0.2 сымитирует транспорт с удлиненной колесной базой. Высокое значение данного параметра приведет к заносу);


//     'fTractionCurveMax', //параметр, отвечающий за сцепление колес на повороте;
//     'fTractionCurveMin', //параметр, отвечающий за пробуксовку колес;
//     'fTractionCurveLateral', //параметр, отвечающий за боковую силу сцепления;
//     'fTractionSpringDeltaMax', //параметр, отвечающий за расстояние от земли, при котором транспортное средство теряет сцепление;
//     'fLowSpeedTractionLossMult', //параметр, отвечающий за силу сцепления транспортного средства при низкой скорости (значение 0.0', //исходная сила сцепления);
//     'fCamberStiffnesss', //параметр, отвечающий за угол развала колес у мотоциклов;
//     'fTractionBiasFront', //параметр, отвечающий за распределение тяги между передними и задними колесами (от 0.01 до 0.99);
//     'fTractionLossMult', //параметр, отвечающий за потерю сцепления шины с дорогой;

//     'fSuspensionForce', //(1 / сила * количество колес)', //нижний предел силы при полном выдвижении (сила подвески);
//     'fSuspensionCompDamp', //параметр, отвечающий за силу и интенсивность вибрации подвески;
//     'fSuspensionReboundDamp', //параметр, отвечающий за силу и интенсивность вибрации подвески на высоких скоростях;
//     'fSuspensionUpperLimit', //(визуально) максимальная высота кузова транспортного средства;
//     'fSuspensionLowerLimit', //(визуально) минимальная высота кузова транспортного средства;
//     'fSuspensionRaise', //параметр, отвечающий за высоту подвески;
//     'fSuspensionBiasFront', //параметр, отвечающий за смещение подвески вперед (большое значение подходит для грузовиков);
//     'fAntiRollBarForce', //параметр, отвечающий за силу стабилизатора подвески;
//     'fAntiRollBarBiasFront', //параметр, отвечающий за смещение силы стабилизатора подвески вперед;
//     'fRollCentreHeightFront', //параметр, отвечающий за высоту центра крена;
//     'fRollCentreHeightRear', //параметр, отвечающий за высоту центра крена;



//     'fCollisionDamageMult', //множитель урона от столкновения (от 0.0 до 10.0. Значение 0.0 означает нулевой урон, 10.0', //десятикратный урон);
//     'fWeaponDamageMult', //множитель урона от оружия (от 0.0 до 10.0. Значение 0.0 означает нулевой урон, 10.0', //десятикратный урон);
//     'fDeformationDamageMult', //множитель урона от деформации (от 0.0 до 10.0. Значение 0.0 означает нулевой урон, 10.0', //десятикратный урон с последующей поломкой);
//     'fEngineDamageMult', //множитель урона, получаемого двигателем. Может привести к взрыву или выходу из строя;
//     'fPetrolTankVolume', //параметр, отвечающий за количество топлива вытыкаемого после выстрела по бензобаку;
//     'fOilVolume', //параметр, отвечающий за уровень масла/черный дым?;



//     'fSeatOffsetDistX', //координаты расстояния от двери до сидения;
//     'fSeatOffsetDistY', //координаты расстояния от двери до сидения;
//     'fSeatOffsetDistZ', //координаты расстояния от двери до сидения;
//     'nMonetaryValue', //стоимость транспортного средства;
//     'strModelFlags', //флаги модели. Самая правая значащая цифра является первой:
// ];

global.getHandling = (vehicle, key) => {
    return Math.round(parseFloat(vehicle.getHandling(key)) * 1000) / 1000;
}

global.setHandling = (vehicle, key, value) => {
    if (value !== undefined && value != null)
        vehicle.setHandling(key, value);
}

global.getSharedHandling = (vehicle, keyID) => {
    let value = vehicle.getVariable(`veh:handl:${keyID}`)
    InitDefaultValue(vehicle, keyList[keyID]);
    if ((typeof value) === 'undefined' || value == undefined || value == null)
        return global.GetDefaultHandling(vehicle, keyList[keyID])
    else
        return Math.round(parseFloat(value.replace(',', '.')) * 1000) / 1000;
}

function InitDefaultValue(vehicle, key) {
    if (!handlingData[vehicle.model]) {
        handlingData[vehicle.model] = {};
        handlingData[vehicle.model][key] = global.getHandling(vehicle, key);
    }
    else if (handlingData[vehicle.model][key] === undefined) {
        handlingData[vehicle.model][key] = global.getHandling(vehicle, key);
    }
}

global.GetDefaultHandling = (vehicle, key) => {
    InitDefaultValue(vehicle, key);
    return handlingData[vehicle.model][key]
}

function CheckExistVehicle(vehicle) {
    return (vehicle && vehicle.type === 'vehicle' && vehicle.handle !== 0);
}

Object.keys(keyList).forEach(keyID => {
    if (keyID != 999) {
        mp.events.addDataHandler(`veh:handl:${keyID}`, (vehicle, value) => AddDataHandler(keyID, vehicle));
    }
});

function AddDataHandler(keyID, vehicle) {
    if (!CheckExistVehicle(vehicle))
        return;
    global.setHandling(
        vehicle,
        keyList[keyID],
        global.getSharedHandling(vehicle, keyID)
    );
}

global.VehicleSetSharedDataHandlingMods = (vehicle) => {
    Object.keys(keyList).forEach(keyID => {
        if (keyID != 999) {
            global.setHandling(
                vehicle,
                keyList[keyID],
                global.getSharedHandling(vehicle, keyID)
            );
        }
    });
}

mp.events.add("veh:setHandling", (key, value) => {
    let getHandling = global.getHandling(mp.players.local.vehicle, key);
    let getDefaultHandling = global.GetDefaultHandling(mp.players.local.vehicle, key);
    mp.gui.chat.push(`${key} - get: ${getHandling}, getDefault: ${getDefaultHandling}`);
    mp.players.local.vehicle.setHandling(key, value);
    getHandling = global.getHandling(mp.players.local.vehicle, key);
    getDefaultHandling = global.GetDefaultHandling(mp.players.local.vehicle, key);
    mp.gui.chat.push(`${key} - set: ${value}, get: ${getHandling}, getDefault: ${getDefaultHandling}`);
});

mp.events.add("veh:checkHandling", (key) => {
    let getHandling = global.getHandling(mp.players.local.vehicle, key);
    let getDefaultHandling = global.GetDefaultHandling(mp.players.local.vehicle, key);
    mp.gui.chat.push(`${key} - get: ${getHandling}, getDefault: ${getDefaultHandling}`);
});


mp.events.add("gui:ready", () => {
    global.keyActions["reduce"].subscribe(ChangeReduce, true);
})

// mp.keys.bind(global.Keys.Key_6, false, ChangeReduce);

function ChangeReduce() {
    if (!global.localplayer.isInAnyVehicle(true)) return;
    if (!global.loggedin || global.chatActive || global.editing || global.lastCheck > Date.now()) return;
    if (!global.getVariable(mp.players.local.vehicle, `veh:handl:999`, false) && !global.shopReduce) {
        mp.events.call('notify', 1, 9, `handling:reduce:dontSystem`, 1500);
        return;
    }
    global.reduce = !global.reduce;
    mp.players.local.vehicle.setReduceGrip(global.reduce);
    mp.events.call('notify', 2, 9, `handling:reduce:${global.reduce}`, 1500);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let gangZones = [
    { "center": { "x": 319.8332, "y": -2185.118, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 413.347351, "y": -2094.81226, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 506.861542, "y": -2004.50671, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 229.5276, "y": -2091.60376, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 323.041779, "y": -2001.29822, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 416.555969, "y": -1910.99255, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 510.070129, "y": -1820.687, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 139.222015, "y": -1998.0896, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 232.736191, "y": -1907.784, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 326.250366, "y": -1817.47839, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 419.764526, "y": -1727.17285, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 513.2787, "y": -1636.86719, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 48.9164276, "y": -1904.57544, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 142.4306, "y": -1814.2699, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 235.944778, "y": -1723.96423, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 329.458923, "y": -1633.65869, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 422.973145, "y": -1543.353, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": -41.38916, "y": -1811.06128, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 52.1250153, "y": -1720.75574, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 145.639191, "y": -1630.45007, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 239.153351, "y": -1540.14453, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 332.667542, "y": -1449.83887, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": -131.694748, "y": -1717.54712, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": -38.1805725, "y": -1627.24158, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 55.3336029, "y": -1536.93591, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 148.847763, "y": -1446.63037, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": -128.48616, "y": -1533.72742, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": -34.9719849, "y": -1443.42175, "z": 90.95729 }, "width": 130.0, "rot": 44.0, "color": 1 },
    { "center": { "x": 734.3699, "y": -2488.151, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 863.8752, "y": -2499.4812, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 993.3805, "y": -2510.81128, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 745.700134, "y": -2358.64551, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 875.205444, "y": -2369.97583, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 1004.71075, "y": -2381.306, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 1134.21606, "y": -2392.63623, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 757.0304, "y": -2229.14014, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 886.5357, "y": -2240.47046, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 1016.041, "y": -2251.80054, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 1145.54639, "y": -2263.13086, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 768.360657, "y": -2099.63477, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 897.865967, "y": -2110.965, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 1027.37134, "y": -2122.29517, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 1156.87659, "y": -2133.62549, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 779.6909, "y": -1970.12939, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 909.1962, "y": -1981.45959, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 1038.70154, "y": -1992.78992, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 791.0212, "y": -1840.624, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 920.5265, "y": -1851.95422, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 1050.03174, "y": -1863.28455, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 802.35144, "y": -1711.11865, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 931.85675, "y": -1722.44885, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 813.6817, "y": -1581.61328, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 943.187, "y": -1592.94348, "z": 90.95729 }, "width": 130.0, "rot": -5.0, "color": 1 },
    { "center": { "x": 1427.01978, "y": -2490.7312, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1557.0, "y": -2493.0, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1429.28857, "y": -2360.751, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1559.2688, "y": -2363.01978, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1431.55737, "y": -2230.77075, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1561.5376, "y": -2233.03955, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1433.82617, "y": -2100.79053, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1563.8064, "y": -2103.05933, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1306.11475, "y": -1968.5415, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1436.095, "y": -1970.8103, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1566.0752, "y": -1973.0791, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1308.38354, "y": -1838.56128, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1438.36377, "y": -1840.83008, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1568.344, "y": -1843.09888, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1180.67212, "y": -1706.31226, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1310.65234, "y": -1708.581, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1440.63257, "y": -1710.84985, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1570.61279, "y": -1713.11865, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1182.94092, "y": -1576.332, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1312.92114, "y": -1578.60083, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1442.90137, "y": -1580.86963, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 },
    { "center": { "x": 1572.88159, "y": -1583.13843, "z": 90.95729 }, "width": 130.0, "rot": -1.0, "color": 1 }];

let blips = [];
mp.events.add('loadCaptureBlips', function (json) 
{
    let colors = JSON.parse(json);
    for (let i = 0; i < colors.length; i++) {
        gangZones[i].color = colors[i];
    }

    gangZones.forEach(element => 
	{
		const blip = mp.blips.new(5, element.center,
		{
			name: "",
			radius: 65,
			color: element.color,
			alpha: 100,
			drawDistance: 100,
			shortRange: false,
			rotation: element.rot,
			dimension: -1,
		});

		blips.push(blip);
    });
});


mp.events.add('setZoneColor', function (id, color) 
{
	if (blips.length == 0) return;
    if (!blips[id]) return;
	
    mp.game.invoke(global.getNative("SET_BLIP_COLOUR"), blips[id].handle, color);
});

mp.events.add('setZoneFlash', function (id, state, color) 
{
	if (blips.length == 0) return;
	if (!blips[id]) return;

    mp.game.invoke(global.getNative("SET_BLIP_FLASH_TIMER"), blips[id].handle, 1000);
    mp.game.invoke(global.getNative("SET_BLIP_FLASHES"), blips[id].handle, state);
});

mp.events.add('render', () => 
{
	if (blips.length == 0) return;
	
	let i = 0;
	blips.forEach(blip => 
	{
		if (!gangZones[i]) return;
		
		mp.game.invoke(global.getNative("SET_BLIP_ROTATION"), blip.handle, gangZones[i++].rot);
	});
});


mp.events.add("onConnectionLost", () =>
{
	if (blips.length == 0) return;
	
	blips.forEach(blip => 
	{
		blip.destroy();
	});
	blips = [];
});

// mp.events.add('loadCustomBlips', (loadBlips) => {
//     if (loadBlips != null && loadBlips != undefined) {
//         let point = JSON.parse(loadBlips);   
//         let i=0;     
//          point.forEach(element => {
//             //mp.blips.new() mp.game.ui.addBlipForRadius
//             let blip = mp.game.ui.addBlipForRadius(element.center.x, element.center.y, element.center.z, element.width/2);
//             mp.game.invoke(global.getNative("SET_BLIP_SPRITE"), blip, 5);
//             mp.game.invoke(global.getNative("SET_BLIP_ALPHA"), blip, 175);
//             mp.game.invoke(global.getNative("SET_BLIP_COLOUR"), blip, element.c);
//             blipsRot[i]=element.rot;
//             blips.push(blip);
//             i++;
//         });
//     }
// });

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let enviroment = 
{
    updateWeather: true,
    updateTime: true, 
    time: [0,0],
    date: [29, 7, 2020],
    weather: "EXTRASUNNY"
}

function formatIntZero(num, length) { 
    
    return ("0" + num).slice(length); 
} 

mp.events.add('Enviroment_Time', (data) => 
{
    if (data == undefined) return;
	
    enviroment.time = data;
	let time = `${formatIntZero(enviroment.time[0], -2)}:${formatIntZero(enviroment.time[1], -2)}`;
	global.gui.setData('hud/updateData', JSON.stringify({name: 'time', value: time }));
})

mp.events.add("weather:set:rain", (val)=>
{
    mp.game.invoke("0x643E26EA6E024D92", val);
});

mp.events.add('Enviroment_Date', (data) => 
{
    if (data == undefined) return;
	
	enviroment.date = data;
	let date = `${formatIntZero(enviroment.date[0], -2)}.${formatIntZero(enviroment.date[1], -2)}.${enviroment.date[2]}`;   
	global.gui.setData('hud/updateData', JSON.stringify({name: 'date', value: date }));
})

mp.events.add('Enviroment_Weather', (weather) => {
    enviroment.weather = weather;
    global.gui.setData('smartphone/weatherPage/setNowWeather', JSON.stringify(enviroment.weather));
})

mp.events.add('Enviroment_Start', (timeData, dateData, weather) => {
    setTimeout(() => 
	{
        enviroment.time = timeData;
        enviroment.date = dateData;
        let time = `${formatIntZero(enviroment.time[0], -2)}:${formatIntZero(enviroment.time[1], -2)}`;
        global.gui.setData('hud/updateData', JSON.stringify({name: 'time', value: time }));
       
        let date = `${formatIntZero(enviroment.date[0], -2)}.${formatIntZero(enviroment.date[1], -2)}.${enviroment.date[2]}`;   
        global.gui.setData('hud/updateData', JSON.stringify({name: 'date', value: date }));
        enviroment.weather = weather;
        global.gui.setData('smartphone/weatherPage/setNowWeather', JSON.stringify(enviroment.weather));
    }, 3000);
})

let adminTimerStop = false;
mp.events.add('switchTime', (val) => {
    adminTimerStop = (val == true);
})

mp.events.add('stopTime', () => {
    enviroment.updateTime = false;
    enviroment.updateWeather = false;
    mp.game.gameplay.setWeatherTypeNow('EXTRASUNNY');
    mp.game.time.setClockTime(0, 0, 0);
})
mp.events.add('resumeTime', () => {
    enviroment.updateTime = true;
    enviroment.updateWeather = true;
    mp.game.gameplay.setWeatherTypeNow(enviroment.weather);
    mp.game.time.setClockTime(enviroment.time[0], enviroment.time[1], 0);
})

setInterval(() => 
{
    if (enviroment.updateWeather) mp.game.gameplay.setWeatherTypeNowPersist(enviroment.weather);
    if(!adminTimerStop && enviroment.updateTime) 
	{
        let hour = enviroment.time[0];
        let min = enviroment.time[0];
        if(hour > 20 || hour < 5)
		{
            hour = 21;
            min = 0;
        }
        mp.game.time.setClockTime(hour, min, 0);
    }
}, 1000);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let rtimer = null;
let nowplaying;

function vehradio(entity) {
    if (entity && mp.vehicles.exists(entity)) {
        if  (mp.players.local.vehicle === entity) {
            let vehrad = entity.getVariable('vehradio');
            nowplaying = mp.game.invoke(global.getNative("GET_PLAYER_RADIO_STATION_INDEX"));
            if (entity.getPedInSeat(-1) == mp.players.local.handle) {
                if (vehrad != nowplaying) mp.events.callRemote('VehStream_RadioChange', entity, nowplaying);
            } else {
                if (vehrad == 255) mp.game.audio.setRadioToStationName("OFF");
                else {
                    if (vehrad != nowplaying) {
                        mp.game.invoke(global.getNative("SET_FRONTEND_RADIO_ACTIVE"), true);
                        mp.game.invoke(global.getNative("SET_RADIO_TO_STATION_INDEX"), vehrad);
                    }

                }
            }
        }
    } else {
        if (rtimer != null) {
            clearInterval(rtimer);
            rtimer = null;
        }
    }
};

mp.events.add("playerEnterVehicle", (entity, seat) => {
    if (entity) {
        if (rtimer != null) clearInterval(rtimer);
        rtimer = setInterval(() => { vehradio(entity); }, 1000);
    }
});

mp.events.add("playerLeaveVehicle", (entity) => {
    if (rtimer != null) {
        clearInterval(rtimer);
        rtimer = null;
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 53 */
/***/ (function(module, exports) {

//let colChapeCamera = mp.colshapes.newSphere(1.0,1.0,75.0,10.0);
let Cameras = [
    {shape: mp.colshapes.newTube(294.0111, -499.0111, 43, 18, 5, {dimension: 0}), speedlimit: 80},
    {shape: mp.colshapes.newTube(219.5493, -688.0111, 37, 21, 5, {dimension: 0}), speedlimit: 80},
    {shape: mp.colshapes.newTube(-428.5026, -235.0853, 36, 18, 5, {dimension: 0}), speedlimit: 80},
    {shape: mp.colshapes.newTube(-544.0111, -290.0111, 35, 15, 5, {dimension: 0}), speedlimit: 80},
];
let reason = 'cl:speed:check';
Cameras.forEach(Camera => {   
    Camera.shape.dimension = 0;
});

function playerEnterColshapeHandler(shape) {
    Cameras.forEach(Camera => {        
        if(shape == Camera.shape) 
        {
            if  (mp.players.local.isInAnyVehicle(false) && mp.players.local.vehicle)
            {
                var speed = Math.floor (mp.players.local.vehicle.getSpeed() * 3.6);
                if (speed>Camera.speedlimit)
                {                   
                    let sum = Math.ceil((speed-Camera.speedlimit)/10.0)*50;
                    mp.events.callRemote('speeding_mulct', speed, Camera.speedlimit, sum, reason);
                }
            }
        }
    });
    
}

mp.events.add("playerEnterColshape", playerEnterColshapeHandler);


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {mp.keys.bind(global.Keys.Key_E, false, actionButton); //e

//data handler
mp.events.addDataHandler("fshActive", setFishingActive);

//remote events
mp.events.add("fshShow", showFisingAction);
mp.events.add("fshFShop", openFishTraderPage);
mp.events.add("fshUpCage", updateCage);
mp.events.add("fshMGStart", startMiniGame);
mp.events.add("fshDSpots", deleteSeaSpots);
mp.events.add("fshUSpots", updateSeaSpots);

//cef events
mp.events.add("cef_buyGear", buyGear);
mp.events.add("cef_dropFish", dropFish);
mp.events.add("cef_endMiniGame", endMG);



mp.events.add("render",()=>{
    if(mp.players.local.rod !== undefined) {
        mp.game.controls.disableControlAction(0, 30, true);
        mp.game.controls.disableControlAction(0, 31, true);
        mp.game.controls.disableControlAction(0, 32, true);
        mp.game.controls.disableControlAction(0, 33, true);
        mp.game.controls.disableControlAction(0, 34, true);
        mp.game.controls.disableControlAction(0, 35, true);
        mp.game.controls.disableControlAction(0, 45, true);
        mp.game.controls.disableControlAction(0, 69, true);
        mp.game.controls.disableControlAction(0, 140, true);
        mp.game.controls.disableControlAction(0, 141, true);
        mp.game.controls.disableControlAction(0, 142, true);
    }
})

function checkTick(){
    if(fishers.length > 0){
        for (let index = 0; index < fishers.length; index++) {
            const fisher = fishers[index];
            if(!fisher.rod) fishers.splice(index, 1);
        }
    }
}

const fishers = [];
let checkTimer = Date.now();
let checkPeriod = 1;

global.fishingMiniGame = false;
let lastPress = Date.now();
const FISHING_ROD_MODEL = "prop_fishing_rod_01";
const BONE_LEFTHAND_ID = 60309;
mp.players.local.rod = undefined;
let seaBlips = [];

const SPOT_RADIUS_IN_SEA = 20;
const BLIP_SPOT_SPRITE = 317;
const BLIP_SPOT_COLOR = 29;
const BLIP_SPOT_SPRITE_CIRCLE = 1;

const ANIM_DICT = "amb@world_human_stand_fishing@idle_a";
const ANIM_NAME = "idle_c";

mp.game.streaming.requestAnimDict(ANIM_DICT);
/**
 * comon functions
 */
function actionButton(){
    if(!global.loggedin || global.isPhoneOpened || global.inAction) return;
    if (gui.isOpened()) return;
    if(mp.players.local.isSwimming()) return;
    if(mp.players.local.vehicle) return;
    if(lastPress > Date.now()) {
        return ;
    }
    lastPress = Date.now() + 1000;
    mp.events.callRemote("fshAction");
}

async function setFishingActive(entity, value){
    if(entity.type !== 'player' || !mp.players.exists(entity)) return;
    switch (value) {
        case 0:
            if(entity.rod) {
                entity.rod.destroy();
                entity.rod = undefined;
            }
            break;
        case 1:
            if(entity.rod) entity.rod.destroy();
            entity.rod = mp.objects.new(mp.game.joaat(FISHING_ROD_MODEL), entity.position ,{alpha: 255, dimension: entity.dimension});
            while (entity.rod && !entity.rod.doesExist()) {
                await mp.game.waitAsync(0);
            }
            if(!entity.rod) return;
            entity.rod.attachTo(entity.handle, entity.getBoneIndex(BONE_LEFTHAND_ID), 0, -0.02, 0, 0, -10, 20, true, true, false, false, 0, true);
            entity.taskPlayAnim(ANIM_DICT, ANIM_NAME, 8.0, 1.0, -1, 2, 1.0, false, false, false);
            break;
        case 2:
            entity.taskPlayAnim(ANIM_DICT, ANIM_NAME, 8.0, 1.0, -1, 3, 1.0, false, false, false);
            break;
        default:
            break;
    }
}
let opened = false;

mp.keys.bind(global.Keys.Key_ESCAPE, false, function() {
    if (global.gui.curPage == "FishingStore") {
        global.gui.close();
    }
});

function setData(name, data){
    global.gui.setData('fishing/setData', {name, data});
}
/**
 * end comon functions
 */


/**
 * remote events
*/
function showFisingAction(show){
    if(!show && mp.players.local.rod) {
        mp.players.local.rod.destroy();
        mp.players.local.rod = undefined;
    }
    global.fishingMiniGame = show;
    global.gui.setData('fishing/setShowAction', `${global.fishingMiniGame}`);
}

function openFishTraderPage(cageData){
    global.gui.setData("fishingStore/setCageItems", JSON.stringify(cageData));
    global.gui.openPage("FishingStore");
}

function updateCage(data){   
    global.gui.setData('fishingStore/setCageItems', JSON.stringify(data));
}

function startMiniGame(difficult){
    global.fishingMiniGame = true;
    global.gui.opened = true;
    global.gui.setData('fishing/startMinigame', `'${difficult}'`)
}

function deleteSeaSpots(){
    seaBlips.forEach(blip => {
        blip.destroy();
    });
    seaBlips = [];
}

function updateSeaSpots(positions){
    if(seaBlips.length > 0) deleteSeaSpots();
    const seaSpots = JSON.parse(positions);
    seaSpots.forEach(pos => {
        seaBlips.push(mp.blips.new(BLIP_SPOT_SPRITE, new mp.Vector3(pos.x, pos.y, pos.z), {color: BLIP_SPOT_COLOR, name: "Рыбное место", scale: 2, shortRange: true}));
    });    
    mp.events.call('notify', 4, 9, "client_13", 3000);
}
/**
 * end remote events
*/


/**
 * cef events
*/

function buyGear(id){
    if(lastPress > Date.now()) {
        return ;
    }
    lastPress = Date.now() + 1000;
    mp.events.callRemote("fshBuyGear", id);
}

function dropFish(id, count){
    mp.events.callRemote("fshDropFish", id, count);
}

function cellFish(id, count){
    mp.events.callRemote("fshCellFish", id, count);
}

function endMG(status){
    global.fishingMiniGame = false;
    global.gui.opened = false;
    mp.events.callRemote("fshMGEnd", status);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 55 */
/***/ (function(module, exports) {


let renderTarget = null;

const SCREEN_DIAMONDS = "CASINO_DIA_PL";
const SCREEN_SKULLS = "CASINO_HLW_PL";
const SCREEN_SNOW = "CASINO_SNWFLK_PL";
const SCREEN_WIN = "CASINO_WIN_PL";

const targetName = "casinoscreen_01";
let targetModel = mp.game.joaat('vw_vwint01_video_overlay');
const textureDict = "Prop_Screen_Vinewood";
const textureName = "BG_Wall_Colour_4x4";
let loaded = false;

async function loadWalls(){
    if(loaded) return;
    if(!mp.game.graphics.hasStreamedTextureDictLoaded(textureDict)){
        mp.game.graphics.requestStreamedTextureDict(textureDict, false);

        while (!mp.game.graphics.hasStreamedTextureDictLoaded(textureDict)) {
            await mp.game.waitAsync(0); 
        }
    }

    mp.game.ui.registerNamedRendertarget(targetName, false);
    mp.game.ui.linkNamedRendertarget(targetModel);

    //  SET_TV_CHANNEL_PLAYLIST
    mp.game.invoke("0xF7B38B8305F1FE8B", 0, SCREEN_DIAMONDS, true)

    mp.game.graphics.setTvAudioFrontend(true);
    mp.game.graphics.setTvVolume(-100);
    mp.game.graphics.setTvChannel(0);

    renderTarget = mp.game.ui.getNamedRendertargetRenderId(targetName);

    loaded = true;
}

function unloadWalls(){    
    if(!loaded || renderTarget === null) return;
    mp.game.ui.releaseNamedRendertarget(targetName);
    mp.game.ui.isNamedRendertargetRegistered(targetName);
    mp.game.graphics.setStreamedTextureDictAsNoLongerNeeded(textureDict);
    mp.game.graphics.setTvChannel(-1);
    loaded = false;
}

mp.events.add("onChangeInteriors", (newId, oldId)=>{
    if(newId === 275201){
        if(!loaded)
            loadWalls();
    }else if(oldId === 275201 && loaded){
        unloadWalls();
    }
})

mp.events.add('render', function () {
    if (loaded === true) {
        mp.game.ui.setTextRenderId(renderTarget);            
        mp.game.invoke("0x61BB1D9B3A95D802", 4) //  SET_SCRIPT_GFX_DRAW_ORDER
        mp.game.invoke("0xC6372ECD45D73BCD", true); //  SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU
        //  _DRAW_INTERACTIVE_SPRITE
        mp.game.invoke('0x2BC54A8188768488', textureDict, textureName, 0.25, 0.5, 0.5, 1.0, 0.0, 255, 255, 255, 255);
        mp.game.graphics.drawTvChannel(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
        mp.game.ui.setTextRenderId(1);
    }
});

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function openCashBox() {
    global.gui.openPage('ChipsTradeMenu');
}

mp.events.add('openCasinoOwnerMenu', (name, stateShare, casinoShare, amount) => {
    global.gui.setData('casinoOwner/setData', 
        JSON.stringify({ name: name, stateShare: stateShare, casinoShare: casinoShare, amount: amount }));
    global.gui.openPage('CasinoOwner');
})
mp.events.add('casinoOwner:closeInterface', (currentTax) => {
    mp.events.callRemote("casino:setTax", currentTax)
    global.gui.close();
})
mp.events.add('casinoOwner:update', (amount) => {
    global.gui.setData('casinoOwner/setAmount', amount);
})


mp.events.add('openCashbox', (playerbank) => {   
    global.gui.setData('chipsTradeMenu/setBank', playerbank);
    openCashBox();
})

mp.events.add('playerBoughtChips', (black, red, blue, green, yellow) => {
    mp.events.callRemote('player:boughtChips', black, red, blue, green, yellow);
    global.gui.close();
})

mp.events.add('playerSoldChips', () => {
    mp.events.callRemote('player:soldChips');
    global.gui.close();
})

mp.events.add('showCasinoHud', (json) => {
    if (currInteriorId === 275201)
        global.gui.setData("hud/setIsChipsList", true)
    else
        global.gui.setData("hud/setIsChipsList", false)

    let data = JSON.parse(json);
    //JSON.stringify(data);    
    global.gui.setData("hud/setChipValue", JSON.stringify({type: "red", value: data.Red}))
    global.gui.setData("hud/setChipValue", JSON.stringify({type: "black", value: data.Black}))
    global.gui.setData("hud/setChipValue", JSON.stringify({type: "blue", value: data.Blue}))
    global.gui.setData("hud/setChipValue", JSON.stringify({type: "green", value: data.Green}))
    global.gui.setData("hud/setChipValue", JSON.stringify({type: "yellow", value: data.Yellow}))
})


mp.events.add('hideCasinoHud', () => {
    global.gui.setData("hud/setIsChipsList", false)
})

mp.events.add('roulette:updatePlayerBank', (totalBank, chipsData) => {
    global.gui.setData('casino/setData', JSON.stringify({playerBalance:totalBank}));
    let dto = JSON.parse(chipsData);
    JSON.stringify(dto);

    global.gui.setData("hud/setChipValue", JSON.stringify({type: "black", value: dto.Black}))
    global.gui.setData("hud/setChipValue", JSON.stringify({type: "green", value: dto.Green}))
    global.gui.setData("hud/setChipValue", JSON.stringify({type: "red", value: dto.Red}))
    global.gui.setData("hud/setChipValue", JSON.stringify({type: "blue", value: dto.Blue}))
    global.gui.setData("hud/setChipValue", JSON.stringify({type: "yellow", value: dto.Yellow}))
})

mp.events.add('roulette:clearStats', () => {
    global.gui.setData('casino/resetStats');    
})

mp.events.add('roulette:sentStats', (statsDto) => {
    let data = JSON.parse(statsDto);
    global.gui.setData('casino/addStat', JSON.stringify( {
        value: data.WinNumber,
        color: global.colors[data.WinNumber + 1][1], 
        result: data.Result, 
        win: data.Winning
    }));
})
mp.events.add('roulettes:stats:update', statsDto => {
    const newData = [];
    statsDto.forEach(data=>{
        newData.push({
            throwValue: data.WinNumber,
            throwValueColor: global.colors[data.WinNumber + 1][1],
            win: data.Result === "win",
            gain: data.Winning
        })
    })
    global.gui.setData('roulette/updateStateList', JSON.stringify(newData));
})

let currInteriorId = -1;

mp.events.add("onChangeInteriors", (newId, oldId)=>{
    currInteriorId = newId;
    if(newId === 275201)
        global.gui.setData("hud/setIsChipsList", true)
    else if(oldId === 275201)
        global.gui.setData("hud/setIsChipsList", false)    
})
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {//let global.boardObjects = [];
let maxPlayers = 6;
let loadedPoker = false;
let _currentBet = 0;
let MinBetInDollars = 0;
//player data
let pokerPlayers = {
    name: [" ", " ", " ", " ", " ", " "],
    cards: [
        [],
        [],
        [],
        [],
        [],
        []
    ],
    wincards: [
        [],
        [],
        [],
        [],
        [],
        []
    ],
    money: [0, 0, 0, 0, 0, 0],
    move: [" ", " ", " ", " ", " ", " "],
    currBet: [0, 0, 0, 0, 0, 0],
    isWinner: [false, false, false, false, false, false],
    images: [null, null, null, null, null, null],
}
//table data
let TableCards = []
let TableCardsWins = []
let Bank = []
let activePlayer = null;
//self data
let FullBank = 0
let stateMyMove = false;
let stateBuyChips = true;
let myBet = 0;
let autoCheckActive = false;
let playerBetAutoCheck = false;
let CardDisable = false;


let myPlace = -1;
let pokerCam = null;


global.updatePokerLable = (handle) => {
    global.boardObjects.forEach(board => {
        if (board.handle == handle) {
            mp.game.graphics.drawText(board.info, [board.position.x, board.position.y, board.position.z + 2.1], {
                font: 7,
                color: [255, 255, 255, 185],
                scale: [0.3, 0.3],
                outline: true
            });
        }
    });
}

mp.events.add('poker:enterPoker', (id, balance, members, place, minBet) => {
    if (!global.gui.openPage('Poker')) return;
    clearAllPlayers();
    playingGameId = id;
    myPlace = place;
    MinBetInDollars = minBet;
    let pos = global.boardObjects[id].position;
    let rot = global.boardObjects[id].rotation;
    let play = JSON.parse(members);
    for (let player of play) {
        pushOnPlayers(player)
    }
    FullBank = balance;
    global.gui.setData('poker/setCurrentPlayerChipsBalance', JSON.stringify(pokerPlayers.money[myPlace])); //меню докупки
    global.gui.setData('poker/setCurrentMoveTime', JSON.stringify(60)); //таймер хода
    global.gui.setData('poker/setMinChipsValue', JSON.stringify(MinBetInDollars * 2)); //минимальный баланс для игры


    global.gui.setData("hud/setIsChipsList", false) //прячем худ казино
    global.gui.setData('poker/resetRangeSlider');

    //камера
    pokerCam = mp.cameras.new('casino', new mp.Vector3(pos.x, pos.y, pos.z + 2), new mp.Vector3(-90, 0, rot.z), 70);
    //pokerCam.pointAtCoord(pos.x, pos.y, pos.z + 2);
    pokerCam.setActive(true);
    mp.game.cam.renderScriptCams(true, true, 1000, true, true);

    global.showCursor(true);
    isAtTable = true;
    autoCheckActive = false;
    playerBetAutoCheck = false;
    CardDisable = false;
    synchronization();
    sit();
});

mp.events.add('poker:TableCard', (_tableCards) => {
    let Cards = JSON.parse(_tableCards);
    TableCards = [];
    TableCardsWins = [];
    if (Cards != null)
        for (let i = 0; i < 5; i++) {
            if (Cards[i] != null) {
                TableCards.push(getCard(Cards[i]));
                if (Cards[i].Wins)
                    TableCardsWins.push(i);
            }
        }
    synchronization();
});

mp.events.add('poker:WinCombins', (_tableCards, listWinsThisStep, sumWins, currentBank) => {
    global.gui.setData('poker/setWinCount', JSON.stringify(0)); //сбрасываем
    let Cards = JSON.parse(_tableCards);
    let winners = JSON.parse(listWinsThisStep);
    let BankList = JSON.parse(currentBank);
    TableCardsWins = [];
    for (let i = 0; i < 5; i++) {
        if (Cards[i] != null) {
            if (Cards[i].Wins)
                TableCardsWins.push(i);
        }
    }

    pokerPlayers.wincards = [
        [],
        [],
        [],
        [],
        [],
        []
    ];
    pokerPlayers.isWinner = [false, false, false, false, false, false];
    synchronization();
    for (let player of winners) {
        pokerPlayers.wincards[player._place] = [];
        if (player.openCard[0].Wins)
            pokerPlayers.wincards[player._place].push(0);
        if (player.openCard[1].Wins)
            pokerPlayers.wincards[player._place].push(1);
        pokerPlayers.isWinner[player._place] = true;
        pokerPlayers.move[player._place] = "+" + sumWins;
        pokerPlayers.money[player._place] = player.Balance;
    }
    Bank = BankList;
    synchronization();
    setTimeout(function () {
        global.gui.setData('poker/setWinCount', JSON.stringify(sumWins));
    }, 100);
});

mp.events.add('poker:newPlayer', (player) => {
    let play = JSON.parse(player);
    pushOnPlayers(play);
    synchronization();
});

mp.events.add('poker:playersCard', (players, cards) => {
    let play = JSON.parse(players);
    let mycards = JSON.parse(cards);
    for (let player of play) {
        if (player.openCard[0] != null) {
            pokerPlayers.cards[player._place][0] = getCard(player.openCard[0]);
            pokerPlayers.cards[player._place][1] = getCard(player.openCard[1]);
        } else if (player.IsOnDealing)
            pokerPlayers.cards[player._place] = ["back", "back"];
    }
    if (mycards != null && mycards[0] != null) {
        pokerPlayers.cards[myPlace][0] = getCard(mycards[0]);
        pokerPlayers.cards[myPlace][1] = getCard(mycards[1]);
    }
    synchronization();
});

mp.events.add('poker:giveMyCards', (place, cards) => {
    let mycards = JSON.parse(cards);
    if (mycards != null && mycards[0] != null) {
        pokerPlayers.cards[place][0] = getCard(mycards[0]);
        pokerPlayers.cards[place][1] = getCard(mycards[1]);
    }
    synchronization();
});

mp.events.add('poker:playerMove', (move, place, balance, isOnDealing, currBetPlayer) => {
    pokerPlayers.move[place] = move;
    pokerPlayers.money[place] = balance;
    pokerPlayers.currBet[place] = currBetPlayer;
    _currentBet = currBetPlayer;
    if (!isOnDealing && place != myPlace)
        pokerPlayers.cards[place] = [];
    else if (!isOnDealing && place == myPlace) {
        CardDisable = true;
        stateBuyChips = true;
        makeMove(); //вызываем на случай, если сброс был по таймеру
    }
    if (move == "Wait") {
        pokerPlayers.move[place] = "client_39";
        if (place != myPlace) {
            activePlayer = (place - myPlace + maxPlayers) % maxPlayers;
            global.gui.setData('poker/setCurrentMoveTime', JSON.stringify(0)); //таймер хода
            global.gui.setData('poker/setCurrentMoveTime', JSON.stringify(60)); //таймер хода
        }
    } else
        activePlayer = null;
    activeAutoCheck();
    synchronization();
});

mp.events.add('poker:NewDealing', () => {
    pokerPlayers.move = [" ", " ", " ", " ", " ", " "];
    pokerPlayers.cards = [
        [],
        [],
        [],
        [],
        [],
        []
    ];
    pokerPlayers.wincards = [
        [],
        [],
        [],
        [],
        [],
        []
    ];
    pokerPlayers.isWinner = [false, false, false, false, false, false];
    pokerPlayers.currBet = [0, 0, 0, 0, 0, 0];
    Bank = [];
    CardDisable = false;
    global.gui.setData('poker/setAllBets', JSON.stringify(Bank)); //обнуляем банк

    TableCards = [];
    stateBuyChips = true;
    synchronization();
});

mp.events.add('poker:NewRound', () => {
    pokerPlayers.move = [" ", " ", " ", " ", " ", " "];
    pokerPlayers.currBet = [0, 0, 0, 0, 0, 0];
    _currentBet = 0;
    global.gui.setData('poker/setRatesDone', JSON.stringify(false)); //анимация фишек
    activeAutoCheck();
    synchronization();
});

mp.events.add('poker:EndRound', (bank) => {
    let allBank = JSON.parse(bank);
    Bank = allBank;
    global.gui.setData('poker/setAllBank', JSON.stringify(Bank));
    global.gui.setData('poker/setRatesDone', JSON.stringify(true)); //анимация фишек

});

mp.events.add('poker:changeBank', (place, balance, MyFullBank, currBet) => {
    pokerPlayers.money[place] = balance;
    pokerPlayers.currBet[place] = currBet;
    if (place == myPlace)
        FullBank = MyFullBank;

    synchronization();
});

mp.events.add('poker:AllFoldButPlayer', (_place, currentWinSUm) => {
    TableCardsWins = [];
    global.gui.setData('poker/setWinCount', JSON.stringify(0)); //сбрасываем
    pokerPlayers.isWinner[_place] = true;
    pokerPlayers.move[_place] = "+" + currentWinSUm;
    pokerPlayers.money[_place] = pokerPlayers.money[_place] + currentWinSUm;
    Bank = [];
    synchronization();
    setTimeout(function () {
        global.gui.setData('poker/setWinCount', JSON.stringify(currentWinSUm));
    }, 100);
});


mp.events.add('poker:changeImage', (_place, image) => {
    pokerPlayers.images[_place] = image;
    synchronization();
});



//player make bet
mp.events.add('poker:requestMakingBet', (currentBet, myCurBet) => {
    global.gui.setData('poker/setCurrentMoveTime', JSON.stringify(0)); //таймер хода
    _currentBet = currentBet;
    stateMyMove = true;
    stateBuyChips = false;
    activePlayer = 0;
    myBet = myCurBet;
    let check = _currentBet - myCurBet;
    if (check > pokerPlayers.money[myPlace])
        check = pokerPlayers.money[myPlace];
    let minValueToRaise = _currentBet * 2;
    if (minValueToRaise == 0)
        minValueToRaise = MinBetInDollars * 2;
    global.gui.setData('poker/setCurrentPlayerMoveValues', JSON.stringify({ checkValue: check, minValue: minValueToRaise, stepValue: MinBetInDollars * 2 }));


    global.gui.setData('poker/setCurrentMoveTime', JSON.stringify(60)); //таймер хода
    synchronization();
    global.gui.setData('poker/resetRangeSlider');
    global.gui.setData('poker/initRangeSlider');
    if (playerBetAutoCheck && _currentBet == myBet) {
        makeMove();
        mp.events.callRemote('player:pokerBet', 'Check', 0);
    }
});


//player make bet
mp.events.add('poker:leavePlayer', (place) => {
    clearPlayer(place);
    synchronization();

});

mp.events.add('poker:buyChips', (count) => {
    if (count > FullBank) return;
    if (!stateBuyChips) return;
    mp.events.callRemote('player:pokerBuyChips', count);
});

mp.events.add('poker:fold', () => {
    stateBuyChips = true;
    makeMove();
    mp.events.callRemote('player:pokerBet', 'Fold', 0);
});

mp.events.add('poker:check', () => {
    makeMove();
    let bet = 'Check';
    if (_currentBet > myBet)
        bet = 'Call';
    mp.events.callRemote('player:pokerBet', bet, 0);
});

mp.events.add('poker:raise', (amount) => {
    makeMove();
    mp.events.callRemote('player:pokerBet', 'Raise', amount);
});

mp.events.add('poker:allIn', () => {
    makeMove();
    mp.events.callRemote('player:pokerBet', 'AllIn', 0);
});

mp.events.add('poker:exit', () => {
    exitPoker();
});

mp.events.add('poker:autoCheck', (value) => {
    playerBetAutoCheck = value;
});



function makeMove() {
    global.gui.setData('poker/setCurrentMoveTime', JSON.stringify(0)); //таймер хода
    stateMyMove = false;
    activePlayer = null;
    pokerPlayers.move[myPlace] = " ";
    global.gui.setData('poker/resetRangeSlider');
    synchronization();
}

//отображает все локальные данные в интерфейсе
function synchronization() {
    if (myPlace > -1) {
        let k = 1;
        for (let i = myPlace + 1; i < maxPlayers; i++) {
            displayPlayer(i, k);
            k++;
        }
        for (let i = 0; i < myPlace; i++) {
            displayPlayer(i, k);
            k++;
        }
        //мои данные
        
        global.gui.setData('poker/setCurrentPlayerData', JSON.stringify({
            currentPlayer: {
                bank: FullBank, //мой банк
                chipsCount: pokerPlayers.money[myPlace], //мои фишки для игры
                cards: pokerPlayers.cards[myPlace], //мои карты
                winCombinations: pokerPlayers.wincards[myPlace], //мои выигрышные карты
                state: pokerPlayers.move[myPlace], //мое действие
                isWinner: pokerPlayers.isWinner[myPlace], //моя ставка
                cardsDisabled: CardDisable,//прозрачность карт, если сбросил
                avatar: pokerPlayers.images[myPlace], //аватарка
            },
            bankAvailable: stateBuyChips, //возможность докупки
            activePlayer: activePlayer, //игрок, который ходит
            grantAutoCheck: autoCheckActive, //autocheck

            cardsDistribution: TableCards,
            cardsDistributionCombinations: TableCardsWins,

        })); //мой банк
        global.gui.setData('poker/setCurrentPlayerMove', JSON.stringify(stateMyMove)); //активность кнопок
        global.gui.setData('poker/setCurrentPlayerCurrentRate', JSON.stringify(pokerPlayers.currBet[myPlace])); //моя ставка
        global.gui.setData('poker/setAllBank', JSON.stringify(Bank));

        // global.gui.setData('poker/setCurrentPlayerBank', JSON.stringify(FullBank)); //мой банк
        // global.gui.setData('poker/setCurrentPlayerChipsCount', JSON.stringify(pokerPlayers.money[myPlace])); //мои фишки для игры
        // global.gui.setData('poker/setCurrentPlayerCards', JSON.stringify(pokerPlayers.cards[myPlace])); //мои карты
        // global.gui.setData('poker/setCurrentPlayerWinCombinations', JSON.stringify(pokerPlayers.wincards[myPlace])); //мои выигрышные карты
        // global.gui.setData('poker/setCurrentPlayerState', JSON.stringify(pokerPlayers.move[myPlace])); //мое действие
        // global.gui.setData('poker/setbankAvailable', JSON.stringify(stateBuyChips)); //возможность докупки
        // global.gui.setData('poker/setActivePlayer', JSON.stringify(activePlayer)); //игрок, который ходит
        // global.gui.setData('poker/setCurrentPlayerIsWinner', JSON.stringify(pokerPlayers.isWinner[myPlace])); //моя ставка
        // global.gui.setData('poker/setGrantAutoCheck', JSON.stringify(autoCheckActive)); //autocheck
        // global.gui.setData('poker/setCurrentPlayerCardsDisabled', JSON.stringify(CardDisable)); //прозрачность карт, если сбросил
        //стол
        // global.gui.setData('poker/setCardsDistribution', JSON.stringify(TableCards));
        // global.gui.setData('poker/setCardsDistributionCombinations', JSON.stringify(TableCardsWins));

    }
}

function displayPlayer(place, relativePlace) {
    if (pokerPlayers.name[place] != " ") {
        global.gui.setData('poker/hideUser', JSON.stringify({ id: relativePlace, show: true }));

        global.gui.setData('poker/setOtherPlayerData', JSON.stringify({ 
            id: relativePlace,
            name: pokerPlayers.name[place],
            chipsCount: pokerPlayers.money[place],
            state: pokerPlayers.move[place],
            cards: pokerPlayers.cards[place],
            winCombinations: pokerPlayers.wincards[place],
            isWinner: pokerPlayers.isWinner[place],
            avatar: pokerPlayers.images[place],
        }));
        global.gui.setData('poker/setOtherPlayerCurrentRate', JSON.stringify({ id: relativePlace, value: pokerPlayers.currBet[place] })); //текущая ставка
        // global.gui.setData('poker/setOtherPlayerName', JSON.stringify({ id: relativePlace, name: pokerPlayers.name[place] })); //имя игрока
        // global.gui.setData('poker/setOtherPlayerChipsCount', JSON.stringify({ id: relativePlace, value: pokerPlayers.money[place] })); //деньги игрока
        // global.gui.setData('poker/setOtherPlayerState', JSON.stringify({ id: relativePlace, value: pokerPlayers.move[place] })); //действие игрока
        // global.gui.setData('poker/setUserCards', JSON.stringify({ id: relativePlace, cards: pokerPlayers.cards[place] })); //карты игрока
        // global.gui.setData('poker/setOtherPlayerWinCombinations', JSON.stringify({ id: relativePlace, combinations: pokerPlayers.wincards[place] })); //выигрышные карты игрока
        // global.gui.setData('poker/setOtherPlayerIsWinner', JSON.stringify({ id: relativePlace, value: pokerPlayers.isWinner[place] }));
    } else {
        global.gui.setData('poker/hideUser', JSON.stringify({ id: relativePlace, show: false }));
    }

}

function exitPoker() {
    if (!isAtTable) return;
    global.gui.close();
    mp.game.cam.renderScriptCams(false, true, 10, true, false);
    global.showCursor(false)
    global.gui.setData("hud/setIsChipsList", true) //прячем худ казино
    mp.events.callRemote('player:leftPoker');
    playingGameId = -1;
    isAtTable = false;
    clearAllPlayers();
    standUp();
}

function pushOnPlayers(player) {
    let place = player._place;
    clearPlayer(place);
    pokerPlayers.name[place] = player.clientName;
    if (player.openCard[0] != null) {
        pokerPlayers.cards[place][0] = getCard(player.openCard[0]);
        pokerPlayers.cards[place][1] = getCard(player.openCard[1]);
    } else if (player.IsOnDealing) {
        pokerPlayers.cards[place] = ["back", "back"];
    }
    pokerPlayers.money[place] = player.Balance
    pokerPlayers.move[place] = player._move
    pokerPlayers.currBet[place] = player.currBet;
    pokerPlayers.images[place] = player.Image;
}

function clearPlayer(place) {
    pokerPlayers.name[place] = " ";
    pokerPlayers.cards[place] = [];
    pokerPlayers.money[place] = 0;
    pokerPlayers.wincards[place] = [];
    pokerPlayers.move[place] = " ";
    pokerPlayers.currBet[place] = 0;
    pokerPlayers.isWinner[place] = false;
    pokerPlayers.images[place] = null;
}

function clearAllPlayers() {
    pokerPlayers = {
        name: [" ", " ", " ", " ", " ", " "],
        cards: [
            [],
            [],
            [],
            [],
            [],
            []
        ],
        money: [0, 0, 0, 0, 0, 0],
        wincards: [
            [],
            [],
            [],
            [],
            [],
            []
        ],
        move: [" ", " ", " ", " ", " ", " "],
        currBet: [0, 0, 0, 0, 0, 0],
        isWinner: [false, false, false, false, false, false],
        images: [null, null, null, null, null, null],
    }
    CardDisable = false;
    TableCards = []
}

function activeAutoCheck() {
    if (pokerPlayers.currBet[myPlace] == _currentBet)
        autoCheckActive = true;
    else {
        autoCheckActive = false;
        playerBetAutoCheck = false;
        global.gui.setData('poker/setAutoCheck', JSON.stringify(playerBetAutoCheck)); //обнуляем autocheck
    }
}

function getCard(Card) {
    let resultCard;
    switch (Card.Suit) {
        case 0:
            resultCard = "HH";
            break;
        case 1:
            resultCard = "DD";
            break;
        case 2:
            resultCard = "CC";
            break;
        case 3:
            resultCard = "SS";
            break;
    }
    return resultCard + Card.Value;
}


let chairPoint;
let chairDirection;
let enterAnimName;
let exitAnimName;
let chair;

function sit() {
    chair = myPlace + 1;
    chairPoint = global.boardObjects[playingGameId].getWorldPositionOfBone(global.boardObjects[playingGameId].getBoneIndexByName(`chair_base_0${chair}`));
    chairDirection;
    switch (chair) {
        case 1:
            enterAnimName = "sit_enter_left";
            chairDirection = global.boardObjects[playingGameId].rotation.z - 135;
            break;
        case 2:
            enterAnimName = "sit_enter_left";
            chairDirection = global.boardObjects[playingGameId].rotation.z + 135;
            break;
        case 3:
            enterAnimName = "sit_enter_left";
            chairDirection = global.boardObjects[playingGameId].rotation.z + 90;
            break;
        case 4:
            enterAnimName = "sit_enter_right";
            chairDirection = global.boardObjects[playingGameId].rotation.z + 90;
            break;
        case 5:
            enterAnimName = "sit_enter_right";
            chairDirection = global.boardObjects[playingGameId].rotation.z + 45;
            break;
        case 6:
            enterAnimName = "sit_enter_right";
            chairDirection = global.boardObjects[playingGameId].rotation.z - 45;
            break;
    }
    global.localplayer.taskPlayAnimAdvanced("anim_casino_b@amb@casino@games@shared@player@", enterAnimName, chairPoint.x, chairPoint.y, chairPoint.z, 0, 0, chairDirection, -8, 1, -1, 5642, 0, 2, 0);
}

function standUp() {
    switch (chair) {
        case 1:
            exitAnimName = "sit_exit_left";
            break;
        case 2:
            exitAnimName = "sit_exit_left";
            break;
        case 3:
            exitAnimName = "sit_exit_left";
            break;
        case 4:
            exitAnimName = "sit_exit_right";
            break;
        case 5:
            exitAnimName = "sit_exit_right";
            break;
        case 6:
            exitAnimName = "sit_exit_right";
            break;
    }
    chair = null;
    global.localplayer.stopAnim(enterAnimName, "anim_casino_b@amb@casino@games@shared@player@", 0.0);
    global.localplayer.taskPlayAnimAdvanced("anim_casino_b@amb@casino@games@shared@player@", exitAnimName, chairPoint.x, chairPoint.y, chairPoint.z, 0, 0, chairDirection, -8, 1, -1, 136704, 0, 2, 0);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let isPlacing = false;
let boardPivotPoint;
let boardHeight = 0.95;
let chipVelocity = 0.003;
let chipAcceleration = 1;
let rouletteCam = null;
let dimension = 0;
let boardPeds = {};
let playingGameId = -1;
let loaded = false;
let isAtTable = false;
let chairIndex = -1;
let ball;
let lastResult;
let chipsFromServer = [0, 0, 0, 0, 0];

mp.events.add('roulette:updatePlayerBank', (totalBank, chipsData) => {
    let dto = JSON.parse(chipsData);
    chipsFromServer[0] = dto.Black;
    chipsFromServer[1] = dto.Red;
    chipsFromServer[2] = dto.Blue;
    chipsFromServer[3] = dto.Green;
    chipsFromServer[4] = dto.Yellow;
})

mp.events.add('player:loadedRoulleteBoard', (data) => {
    let tables = JSON.parse(data);
    let board = null;
    tables.forEach(table => {
        switch (table.type) {
            case "Roulette":            
                board = mp.objects.new(mp.game.joaat('vw_prop_casino_roulette_01'), table.position,
                    {
                        rotation: table.rotation,
                        alpha: 255,
                        dimension: table.dimension
                    });
                board.setCollision(true, true);
                global.boardObjects[table.id] = board;
            
                let ped = mp.peds.newValid('mp_f_execpa_02', new mp.Vector3(table.position.x, table.position.y + 0.55, table.position.z + 1), 177.7, 0);
                if (ped != null)
                    boardPeds[table.id] = ped;
                break;
            case "Poker":
                board = mp.objects.new(mp.game.joaat('poker_table_gta_go'), table.position, {
                   rotation: table.rotation,
                   alpha: 255,
                   dimension: table.dimension
                });
                if(board){
                    board.info = table.message;
                    global.boardObjects[table.id] = board;
                }
                                
                break;
        }
    });

    mp.game.streaming.requestAnimDict("anim_casino_b@amb@casino@games@roulette@table")
    mp.game.streaming.requestAnimDict("anim_casino_b@amb@casino@games@shared@player@");
    mp.game.streaming.requestAnimDict("anim_casino_b@amb@casino@games@roulette@dealer");

    mp.peds.newValid('mp_f_execpa_02', new mp.Vector3(1117.406, 220.53, -49.55516), 85, 0);
    mp.peds.newValid('s_m_y_barman_01', new mp.Vector3(1110.982, 209.5823, -49.55), 30, 0);

    let phIntID = mp.game.interior.getInteriorAtCoords(1117.755, 220.1409, -49.55515);
    mp.game.interior.refreshInterior(phIntID);
    loaded = true;
});

let wheelResults = [19, 31, 18, 6, 21, 33, 16, 4, 23, 35, 14, 2, 0, 28, 9, 26, 30, 11, 7, 20, 32, 17, 5, 22, 34, 15, 3, 24, 36, 13, 1, 37, 27, 10, 25, 29, 12, 8];

mp.events.add('roulette:wheelAnim', (flag, result) => {
    lastResult = result;
    let bone = global.boardObjects[playingGameId].getWorldPositionOfBone(global.boardObjects[playingGameId].getBoneIndexByName("Roulette_Wheel"));

    if (flag) {
        if (ball != null) {
            ball.destroy();
            ball = null;
        }
        ball = mp.objects.new(mp.game.joaat('vw_prop_roulette_ball'), bone);
        global.boardObjects[playingGameId].playAnim("intro_wheel", "anim_casino_b@amb@casino@games@roulette@table", 1000, true, true, false, 0, 5642);
        ball.playAnim("intro_ball", "anim_casino_b@amb@casino@games@roulette@table", 1000, true, false, false, 0, 136704);//136704
        boardPeds[playingGameId].taskPlayAnimAdvanced("anim_casino_b@amb@casino@games@roulette@dealer", "spin_wheel", boardPivotPoint.x + 0.207, boardPivotPoint.y - 0.075, bone.z - 1, 0, 0, 0, -8, 1, -1, 5642, 0, 2, 0);
    }
    playBallAnim(flag);
});

function playBallAnim(flag) {
    if (flag) {
        let timer = setInterval(() => {
            if (!isAtTable) return;
            let bone = global.boardObjects[playingGameId].getWorldPositionOfBone(global.boardObjects[playingGameId].getBoneIndexByName("Roulette_Wheel"));
            ball.position = bone;
            ball.rotation = new mp.Vector3(0, 0, 15);
            global.boardObjects[playingGameId].playAnim(`exit_${wheelResults.lastIndexOf(lastResult)}_wheel`, "anim_casino_b@amb@casino@games@roulette@table", 1000, false, true, false, 0, 5642);
            ball.playAnim(`exit_${wheelResults.lastIndexOf(lastResult)}_ball`, "anim_casino_b@amb@casino@games@roulette@table", 1000, false, false, false, 0, 5642);

            clearInterval(timer);
        }, 6000);
    }
    else {
        boardPeds[playingGameId].taskPlayAnimAdvanced("anim_casino_b@amb@casino@games@roulette@dealer", "clear_chips_zone1", boardPivotPoint.x, boardPivotPoint.y, boardPivotPoint.z, 0, 0, 0, -8, 1, -1, 5642, 0, 2, 0);
        resetBets();
    }
};

let screenCoords = [
    [],
    [],
    [],
    [],
    []
];

mp.events.add('player:enterRoulette', (id, /*balance,*/ chairId) => {
    global.gui.openPage('Roulette');
    mp.events.callRemote('player:requestBank');
    playingGameId = id;
    let pos = global.boardObjects[id].position;
    let rot = global.boardObjects[id].rotation;
    chairIndex = chairId;
    boardPivotPoint = new mp.Vector3(pos.x, pos.y, pos.z);
    fillBets();
    global.showCursor(true);
    isAtTable = true;
    rouletteCam = mp.cameras.new('casino', new mp.Vector3(pos.x, pos.y, pos.z + 2.2), new mp.Vector3(-90, 0, 0), 70);
    rouletteCam.setActive(true);
    mp.game.cam.renderScriptCams(true, true, 1000, false, false);
    sit();
    clearHighlight();
})

mp.events.add('server:updateTimer', (stageDto) => {
    let dto = JSON.parse(stageDto);
    JSON.stringify(dto);
    global.gui.setData('casino/setData', JSON.stringify({ seconds: dto.Seconds, currentStage: dto.Name }));
})

mp.events.add('player:startPlacingBets', () => {
    global.showCursor(true);
    isPlacing = true;
})

mp.events.add('player:endPlacingBets', () => {
    isPlacing = false;
    destroyChipModels();
    clearHighlight();
})

mp.events.add('roulette:requestTimerInfo', () => {
    mp.events.callRemote('player:sentTimerInfo', mp.gui.execute(`rouletteHud.seconds`))
})

let chairPoint;
let chairDirection;
let enterAnimName;
let exitAnimName;

function sit() {
    chairPoint = global.boardObjects[playingGameId].getWorldPositionOfBone(global.boardObjects[playingGameId].getBoneIndexByName(`Chair_Base_0${chairIndex}`));
    chairDirection;
    switch (chairIndex) {
        case 1:
            enterAnimName = "sit_enter_right";
            chairDirection = global.boardObjects[playingGameId].rotation.z + 90;
            break;
        case 2:
            enterAnimName = "sit_enter_right";
            chairDirection = global.boardObjects[playingGameId].rotation.z + 90;
            break;
        case 3:
            enterAnimName = "sit_enter_right";
            chairDirection = global.boardObjects[playingGameId].rotation.z - 180;
            break;
        case 4:
            enterAnimName = "sit_enter_left";
            chairDirection = global.boardObjects[playingGameId].rotation.z + 90;
            break;
    }
    mp.players.local.taskPlayAnimAdvanced("anim_casino_b@amb@casino@games@shared@player@", enterAnimName, chairPoint.x, chairPoint.y, chairPoint.z, 0, 0, chairDirection, -8, 1, -1, 5642, 0, 2, 0);
    syncronizeAnim(true, enterAnimName, 5642, chairPoint.x, chairPoint.y, chairPoint.z);
}

function standUp() {
    switch (chairIndex) {
        case 1:
            exitAnimName = "sit_exit_left";
            break;
        case 2:
            exitAnimName = "sit_exit_left";
            break;
        case 3:
            exitAnimName = "sit_exit_right";
            break;
        case 4:
            exitAnimName = "sit_exit_left";
            break;
    }
    mp.players.local.stopAnim(enterAnimName, "anim_casino_b@amb@casino@games@shared@player@", 0.0);
    mp.events.callRemote("player:stopAnim");
    mp.players.local.taskPlayAnimAdvanced("anim_casino_b@amb@casino@games@shared@player@", exitAnimName, chairPoint.x, chairPoint.y, chairPoint.z, 0, 0, chairDirection, -8, 1, -1, 136704, 0, 2, 0);
    syncronizeAnim(true, exitAnimName, 136704, chairPoint.x, chairPoint.y, chairPoint.z);
    chairIndex = -1;
}

let screenNumbers = [
    [],
    [],
    []
];
let screenBottoms = [];
let screenRows = [];
let screenDozens = [];
let screenZeros = [
    [0.45, 0.44],
    [0.45, 0.58]
]

function fillScreenBets() {
    fillNumberScreenBets();
    fillDozenScreenBets();
    fillBottomScreenBets();
    fillRowScreenBets();
}

let numScreenWidth = 0.028;
let numScreenHeight = 0.080;
let botScreenwidth = 2 * numScreenWidth;

function fillNumberScreenBets() {
    let num3 = [0.48, 0.42];
    for (let i = 0; i < 3; i++) {
        for (let j = 0; j < 12; j++) {
            screenNumbers[i][j] = screenCalc(num3, j, i);
        }
    }
}

function fillBottomScreenBets() {
    let num18 = [0.48, 0.72];
    for (let i = 0; i < 6; i++) {
        screenBottoms[i] = [num18[0] + (i * botScreenwidth), num18[1]];
    }
}

function fillRowScreenBets() {
    let row1 = [0.79, 0.42];
    for (let i = 0; i < 3; i++) {
        screenRows[i] = [row1[0], row1[1] + (i * numScreenHeight)];
    }
}

function fillDozenScreenBets() {
    let d1 = [0.52, 0.67];
    for (let i = 0; i < 3; i++) {
        screenDozens[i] = [d1[0] + (i * 2 * botScreenwidth), d1[1]];
    }
}

function clearHighlight() {
    for (let i = 0; i < 3; i++) {
        for (let j = 0; j < 12; j++) {
            markers[i][j].setVisible(false, false);
        }
    }
    zeroMarkers.forEach(x => x.setVisible(false, false));
}

let res = mp.game.graphics.getScreenActiveResolution(0, 0);
let aspectRatio = mp.game.invoke('0xF1307EF624A80D87', false);

mp.events.add('click', (x, y, upOrDown, leftOrRight, relativeX, relativeY, worldPosition, hitEntity) => {
    if (!isPlacing) return;
    if (leftOrRight == 'right') {
        if (upOrDown == 'up') {
            cancelLastBet();
        }
        return;
    }
    if (chipModels.filter(c => c.length != 0).length == 0) return;

    if (bet === undefined) return;

    if (upOrDown == 'up') {
        if (parseInt(bet) >= 0 || parseInt(bet) <= 0 || bet.length == 2) {//if number
            let index = (bet[1] + 1) * 3 - bet[0];
            placeBet(index);
        }
        else {
            placeBet(bet);
        }
    }
});

function screenRelToWorld(camPos, camRot, screenCoords) {
    let camForward = rotationToDirection(camRot);
    let rotUp = camRot + new mp.Vector3(10, 0, 0);
    let rotDown = camRot + new mp.Vector3(-10, 0, 0);
    let rotLeft = camRot + new mp.Vector3(0, 0, -10);
    let rotRight = camRot + new mp.Vector3(0, 0, 10);

    let camRight = rotationToDirection(rotRight) - rotationToDirection(rotLeft);
    let camUp = rotationToDirection(rotUp) - rotationToDirection(rotDown);

    let rollRad = -degToRad(camRot.y);

    let camRightRoll = camRight * Math.cos(rollRad) - camUp * Math.sin(rollRad);
    let camUpRoll = camRight * Math.sin(rollRad) + camUp * Math.cos(rollRad);

    let point3d = camPos + camForward * 10.0 + camRightRoll + camUpRoll;

    let point2d = worldToScreenRel(point3d);
    if (!flag) return camPos + camForward * 10.0;
    let point3dzero = camPos + camForward * 10.0;
    let point2dzero = worldToScreenRel(point3dzero);
    if (!flag) return camPos + camForward * 10.0;

    const eps = 0.001;
    if (Math.abs(point2d.x - point2dzero.x) < eps || Math.abs(point2d.y - point2dzero.y) < eps) return camPos + camForward * 10.0;
    let scaleX = (screenCoords.x - point2dzero.x) / (point2d.x - point2dzero.x);
    let scaleY = (screenCoords.y - point2dzero.y) / (point2d.y - point2dzero.y);
    let point3Dret = camPos + camForward * 10.0 + camRightRoll * scaleX + camUpRoll * scaleY;
    return point3Dret;
}

let flag;
function worldToScreenRel(worldCoords) {
    let x = 0;
    let y = 0;
    let screenCoords;
    if (!mp.game.invoke('0x34E82F05DF2974F5', worldCoords.x, worldCoords.y, worldCoords.z, x, y)) {
        screenCoords = new mp.Vector3();
        flag = false;
        return screenCoords;
    }
    screenCoords = new mp.Vector3((x - 0.5) * 2, (y - 0.5) * 2, 0);
    flag = true;
    return screenCoords;
}

function degToRad(deg) {
    return deg * Math.PI / 180.0;
}
function rotationToDirection(rotation) {
    let z = degToRad(rotation.z);
    let x = degToRad(rotation.x);
    let num = Math.abs(Math.cos(x));
    let v = new mp.Vector3(-Math.sin(z) * num, Math.cos(z) * num, Math.sin(x))
    return v;
}
global.colors = [//todo: one line array
    [1, "red"],
    [2, "black"],
    [3, "red"],
    [4, "black"],
    [5, "red"],
    [6, "black"],
    [7, "red"],
    [8, "black"],
    [9, "red"],
    [10, "black"],
    [11, "black"],
    [12, "red"],
    [13, "black"],
    [14, "red"],
    [15, "black"],
    [16, "red"],
    [17, "black"],
    [18, "red"],
    [19, "red"],
    [20, "black"],
    [21, "red"],
    [22, "black"],
    [23, "red"],
    [24, "black"],
    [25, "red"],
    [26, "black"],
    [27, "red"],
    [28, "black"],
    [29, "black"],
    [30, "red"],
    [31, "black"],
    [32, "red"],
    [33, "black"],
    [34, "red"],
    [35, "black"],
    [36, "red"],
    [37, "green"],
    [38, "green"],
];

let ratioFactor = aspectRatio / 1070386381;

let bet;
mp.events.add('render', () => {
    if (!isPlacing) return;

    let mouseRel = { x: mp.gui.cursor.position[0] / res.x, y: mp.gui.cursor.position[1] / res.y };

    bet = detectBet(mouseRel.x, mouseRel.y);
    clearHighlight();

    if (bet == undefined) return;
    if (parseInt(bet) >= 0 || parseInt(bet) <= 0) {//if number
        if (bet == 0) return;
        markers[2 - bet[0]][11 - bet[1]].setVisible(true, false);
        setChipPosition(markers[2 - bet[0]][11 - bet[1]].position.x, markers[2 - bet[0]][11 - bet[1]].position.y);
        return;
    }
    if (bet.includes('firstrow')) {
        i = 0;
        for (let j = 0; j < 12; j++) {
            markers[2 - i][11 - j].setVisible(true, false);
            setChipPosition(markers[2 - i][0].position.x + numWidth, markers[2 - i][0].position.y);
        }
        return;
    }
    if (bet.includes('secondrow')) {
        i = 1;
        for (let j = 0; j < 12; j++) {
            markers[2 - i][11 - j].setVisible(true, false);
            setChipPosition(markers[2 - i][0].position.x + numWidth, markers[2 - i][0].position.y);
        }
        return;
    }
    if (bet.includes('thirdrow')) {
        i = 2;
        for (let j = 0; j < 12; j++) {
            markers[2 - i][11 - j].setVisible(true, false);
            setChipPosition(markers[2 - i][0].position.x + numWidth, markers[2 - i][0].position.y);
        }
        return;
    }
    if (bet.includes('firstdozen')) {
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 4; j++) {
                markers[2 - i][11 - j].setVisible(true, false);
                setChipPosition(markers[0][10].position.x + numWidth / 2, markers[0][11].position.y - numHeight / 2 - dozenBetHeight / 1.5);
            }
        }
        return;
    }
    if (bet.includes('seconddozen')) {
        for (let i = 0; i < 3; i++) {
            for (let j = 4; j < 8; j++) {
                markers[2 - i][11 - j].setVisible(true, false);
                setChipPosition(markers[0][6].position.x + numWidth / 2, markers[0][6].position.y - numHeight / 2 - dozenBetHeight / 1.5);
            }
        }
        return;
    }
    if (bet.includes('thirddozen')) {
        for (let i = 0; i < 3; i++) {
            for (let j = 8; j < 12; j++) {
                markers[2 - i][11 - j].setVisible(true, false);
                setChipPosition(markers[0][2].position.x + numWidth / 2, markers[0][3].position.y - numHeight / 2 - dozenBetHeight / 1.5);
            }
        }
        return;
    }
    if (bet.includes('even')) {
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 12; j++) {
                let index = (11 - j) * 3 - 2 - i;
                if (index % 2 === 0) {
                    markers[2 - i][11 - j].setVisible(true, false);
                    setChipPosition(markers[0][9].position.x + numWidth / 2, markers[0][9].position.y - numHeight - numWidth / 2);
                }
            }
        }
        return;
    }
    if (bet.includes('odd')) {
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 12; j++) {
                let index = (11 - j) * 3 - 2 - i;
                if (index % 2 !== 0) {
                    markers[2 - i][11 - j].setVisible(true, false);
                    setChipPosition(markers[0][3].position.x + numWidth / 2, markers[0][3].position.y - numHeight - numWidth / 2);
                }
            }
        }
        return;
    }
    if (bet.includes('red')) {
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 12; j++) {
                let index = (j + 1) * 3 - i;
                if (colors[index - 1][1] == "red") {
                    markers[2 - i][11 - j].setVisible(true, false);
                    setChipPosition(markers[0][7].position.x + numWidth / 2, markers[0][3].position.y - numHeight - numWidth / 2);
                }
            }
        }
        return;
    }
    if (bet.includes('black')) {
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 12; j++) {
                let index = (j + 1) * 3 - i;
                if (colors[index - 1][1] == "black") {
                    markers[2 - i][11 - j].setVisible(true, false);
                    setChipPosition(markers[0][5].position.x + numWidth / 2, markers[0][3].position.y - numHeight - numWidth / 2);
                }
            }
        }
        return;
    }
    if (bet.includes('firsthalf')) {
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 6; j++) {
                markers[2 - i][11 - j].setVisible(true, false);
                setChipPosition(markers[0][11].position.x + numWidth / 2, markers[0][3].position.y - numHeight - numWidth / 2);
            }
        }
        return;
    }
    if (bet.includes('lasthalf')) {
        for (let i = 0; i < 3; i++) {
            for (let j = 6; j < 12; j++) {
                markers[2 - i][11 - j].setVisible(true, false);
                setChipPosition(markers[0][1].position.x + numWidth / 2, markers[0][3].position.y - numHeight - numWidth / 2);
            }
        }
        return;
    }
    if (bet == 'zero') {
        zeroMarkers[0].setVisible(true, false);
        setChipPosition(markers[0][11].position.x - 1.2 * numWidth, markers[0][11].position.y + numWidth / 2);
        return;
    }
    if (bet == 'dzero') {
        zeroMarkers[1].setVisible(true, false);
        setChipPosition(markers[2][11].position.x - 1.2 * numWidth, markers[2][11].position.y - numWidth / 2);
        return;
    }
});

function detectBet(x, y) {
    let distx;
    let disty;
    for (let i = 0; i < 3; i++) {
        //-------cornerbets-----
        // for(let j = 0; j < 12; j++) {
        //     distx = Math.abs(screenNumbers[i][j][0] - x);
        //     disty = Math.abs(screenNumbers[i][j][1] - y);
        //     if (j < 11 && i < 2){
        //         distx2 = Math.abs(screenNumbers[i][j+1][0] - x);
        //         disty2 = Math.abs(screenNumbers[i][j+1][1] - y);
        //         distx3 = Math.abs(screenNumbers[i+1][j][0] - x);
        //         disty3 = Math.abs(screenNumbers[i+1][j][1] - y);
        //         if (Math.abs(distx - distx2) < 0.004 && Math.abs(disty - disty3) < 0.005){
        //             return [i,j,i,j+1,i+1,j,i+1,j+1];
        //         }
        //     }
        //     // if (j > 0 && i > 0){
        //     //     distx2 = Math.abs(screenNumbers[i][j-1][0] - x);
        //     //     disty2 = Math.abs(screenNumbers[i][j-1][1] - y);
        //     //     if (Math.abs(distx - distx2) < 0.004 && disty == disty2 && disty < numScreenHeight){
        //     //         return [i,j,i,j-1];
        //     //     }
        //     // }            
        // }
        //------numbers----------
        for (let j = 0; j < 4; j++) {
            distx = Math.abs(screenNumbers[i][j][0] - x);
            disty = Math.abs(screenNumbers[i][j][1] - y);
            if (distx < numScreenWidth - 0.014 * ratioFactor && disty < numScreenHeight) {
                return [i, j];
            }
        }

        for (let j = 4; j < 8; j++) {
            distx = Math.abs(screenNumbers[i][j][0] - x);
            disty = Math.abs(screenNumbers[i][j][1] - y);
            if (distx < numScreenWidth - 0.014 && disty < numScreenHeight) {
                return [i, j];
            }
        }
        for (let j = 8; j < 12; j++) {
            distx = Math.abs(screenNumbers[i][j][0] - x);
            disty = Math.abs(screenNumbers[i][j][1] - y);
            if (distx < numScreenWidth - 0.014 && disty < numScreenHeight) {
                return [i, j];
            }
            // //double
            // distx = Math.abs(screenNumbers[i][j][0] - 0.018 - x);
            // disty = Math.abs(screenNumbers[i][j][1] - y);
            // if (j < 11){
            //     distx2 = Math.abs(screenNumbers[i][j+1][0] - x);
            //     disty2 = Math.abs(screenNumbers[i][j+1][1] - y);
            //     if (distx - distx2 < 0.004 && distx - distx2 > 0 && disty == disty2 && disty < numScreenHeight){
            //         return [i,j,i,j+1];
            //     }
            // }
            // if (j > 0){
            //     distx2 = Math.abs(screenNumbers[i][j-1][0] - 0.018 - x);
            //     disty2 = Math.abs(screenNumbers[i][j-1][1] - y);
            //     if (distx - distx2 < 0.004 && distx - distx2 > 0 && disty == disty2 && disty < numScreenHeight){
            //         return [i,j,i,j-1];
            //     }                
            // }
            // if (i < 2){
            //     distx2 = Math.abs(screenNumbers[i+1][j][0] - 0.018 - x);
            //     disty2 = Math.abs(screenNumbers[i+1][j][1] - y);
            //     if (Math.abs(disty - disty2) < 0.006 && distx == distx2 && distx < numScreenWidth + 0.014){
            //         return [i,j,i+1,j];
            //     }
            // }
            // if (i > 0){
            //     distx2 = Math.abs(screenNumbers[i-1][j][0] - 0.018 - x);
            //     disty2 = Math.abs(screenNumbers[i-1][j][1] - y);
            //     if (Math.abs(disty - disty2) < 0.006 && distx == distx2 && distx < numScreenWidth + 0.014){
            //         return [i,j,i-1,j];
            //     }
            // }
        }
        //-----------------
        distx = Math.abs(screenDozens[i][0] - 0.018 - x);
        disty = Math.abs(screenDozens[i][1] - y);
        if (distx < 4 * numScreenWidth - 0.014 && disty < numScreenWidth / 2) {
            switch (i) {
                case 0:
                    return 'firstdozen';
                case 1:
                    return 'seconddozen';
                case 2:
                    return 'thirddozen';
            }
        }
        distx = Math.abs(screenRows[i][0] - x);
        disty = Math.abs(screenRows[i][1] - y);
        if (distx < numScreenWidth - 0.001 && disty < numScreenHeight) {
            switch (i) {
                case 0:
                    return 'firstrow';
                case 1:
                    return 'secondrow';
                case 2:
                    return 'thirdrow';
            }
        }
    }
    for (let k = 0; k < 6; k++) {
        distx = Math.abs(screenBottoms[k][0] - 0.014 - x);
        disty = Math.abs(screenBottoms[k][1] - y);
        if (distx < 2 * numScreenWidth - 0.014 && disty < numScreenWidth) {
            switch (k) {
                case 0:
                    return 'firsthalf';
                case 1:
                    return 'even';
                case 2:
                    return 'red';
                case 3:
                    return 'black';
                case 4:
                    return 'odd';
                case 5:
                    return 'lasthalf';
            }
        }
    }
    distx = Math.abs(screenZeros[0][0] - x);
    disty = Math.abs(screenZeros[0][1] - y);
    if (distx < 2 * numScreenWidth - 0.01 && disty < numScreenHeight - 0.03) {
        return 'dzero';
    }
    distx = Math.abs(screenZeros[1][0] - x);
    disty = Math.abs(screenZeros[1][1] - y);
    if (distx < 2 * numScreenWidth - 0.01 && disty < numScreenHeight - 0.03) {
        return 'zero';
    }
}

function fillBets() {
    fillNumberBets();
    fillBottomBets();
    fillDozens();
    fillRowBets();

    fillMarkers();
    fillScreenBets()
}

let n_3 = [-0.05700, 0.134];
let numWidth = 0.08;
let numHeight = 0.14;
let betsNum = [
    [],
    [],
    []
];

let n_1_18 = [-0.0155, -0.3684]
let bottomBetHeight = numWidth;
let bottomBetWidth = numHeight;
let betsBottom = [];

let betsZeros = [
    [-0.1434, 0.0941],
    [-0.1434, -0.1476]
];
let zerosBetHeight = numHeight * 1.5;
let zerosBetwidth = numWidth * 2;

let firstDozen = [0.0693, -0.2953];
let dozenBetWidth = 2 * bottomBetWidth;
let dozenBetHeight = 0.0568;
let betsDozen = [];

let firstRowBet = [0.9045, 0.1305];
let rowHeight = numHeight;
let rowWidth = numWidth;
let betsRow = [];
let markers = [
    [],
    [],
    []
];
let zeroMarkers = [];

function fillMarkers() {
    for (let i = 0; i < 3; i++) {
        for (let j = 0; j < 12; j++) {
            let v3;
            if (i == 0) v3 = new mp.Vector3(boardPivotPoint.x - betsNum[i][j][0] + 0.77, boardPivotPoint.y - betsNum[i][j][1] - 0.062, boardPivotPoint.z + boardHeight);
            else if (i == 1) v3 = new mp.Vector3(boardPivotPoint.x - betsNum[i][j][0] + 0.77, boardPivotPoint.y - betsNum[i][j][1] - 0.03, boardPivotPoint.z + boardHeight);
            else if (i == 2) v3 = new mp.Vector3(boardPivotPoint.x - betsNum[i][j][0] + 0.77, boardPivotPoint.y - betsNum[i][j][1] - 0.01, boardPivotPoint.z + boardHeight);
            createMarker(i, j, v3.x, v3.y);
        }
    }
    let mark = mp.objects.new(mp.game.joaat('vw_prop_vw_marker_01a'), new mp.Vector3(boardPivotPoint.x - 0.137, boardPivotPoint.y - 0.147, boardPivotPoint.z + boardHeight),
        {
            rotation: new mp.Vector3(0, 0, global.boardObjects[playingGameId].rotation.z),
            alpha: 255,
            dimension: dimension
        });
    zeroMarkers.push(mark);
    mark = mp.objects.new(mp.game.joaat('vw_prop_vw_marker_01a'), new mp.Vector3(boardPivotPoint.x - 0.137, boardPivotPoint.y + 0.10, boardPivotPoint.z + boardHeight),
        {
            rotation: new mp.Vector3(0, 0, global.boardObjects[playingGameId].rotation.z),
            alpha: 255,
            dimension: dimension
        });
    zeroMarkers.push(mark);
    zeroMarkers.forEach(x => x.setCollision(false, false));
    zeroMarkers.forEach(x => x.setVisible(false, false));
}

function createMarker(i, j, x, y) {
    let mark = mp.objects.new(mp.game.joaat('vw_prop_vw_marker_02a'), new mp.Vector3(x, y, boardPivotPoint.z + boardHeight),
        {
            rotation: new mp.Vector3(0, 0, global.boardObjects[playingGameId].rotation.z),
            alpha: 255,
            dimension: dimension
        });
    mark.setCollision(true, false);
    //mark.setVisible(false, false);
    markers[i][j] = mark;
}

function calc([x, y], mX, mY) {
    return [(x + (numWidth * mX)).toFixed(3), (y - (numHeight * mY)).toFixed(3)];
}

function screenCalc([x, y], mX, mY) {
    return [(x + (numScreenWidth * mX)), (y + (numScreenHeight * mY))];
}

function fillNumberBets() {
    for (let i = 0; i < 3; i++) {
        for (let j = 0; j < 12; j++) {
            betsNum[i][j] = calc(n_3, j, i);
        }
    }
}

function fillBottomBets() {
    for (let i = 0; i < 6; i++) {
        betsBottom[i] = [n_1_18[0] + (i * bottomBetWidth), n_1_18[1]];
    }
}

function fillDozens() {
    for (let i = 0; i < 3; i++) {
        betsDozen[i] = [firstDozen[0] + (i * dozenBetWidth), firstDozen[1]];
    }
}

function fillRowBets() {
    for (let i = 0; i < 3; i++) {
        betsRow[i] = [firstRowBet[0], firstRowBet[1] - (i * rowHeight)];
    }
}

function exit() {
    if (!isAtTable) return;
    isPlacing = false;
    stopReaction();
    mp.game.cam.renderScriptCams(false, true, 10, true, false);
    global.showCursor(false)
    mp.events.callRemote('player:leftRoulette');
    global.gui.close();
    clearHighlight();
    destroyChipModels();
    global.gui.setData('casino/setData', JSON.stringify({ seconds: 0 }));
    playingGameId = -1;
    resetBets();
    deleteMarkers();
    isAtTable = false;
    mp.events.callRemote('player:requestBank');
    standUp();
}

let bets = [];
let betsChips = [];
let currentChipSet = [0, 0, 0, 0, 0];
let allChipModels = [];

function placeBet(betName) {
    //if (bets.find(b => b == etName) != undefined) return;
    let totalChips = 0;
    for (let i = 0; i < 5; i++) {
        totalChips += chipsFromServer[i];
    }
    if (totalChips == 0) return;
    for (let i = 0; i < 5; i++) {
        if (chipsFromServer[i] < currentChipSet[i]) {
            return;
        }
    }
    let placedBetIndex = bets.lastIndexOf(betName);
    let array = [
        [],
        [],
        [],
        [],
        []
    ];
    if (placedBetIndex != -1) {//если такая ставка уже стояла
        for (let i = 0; i < 5; i++) {
            for (let j = 0; j < currentChipSet[i]; j++) {
                if (j >= 8) continue;//больше 8 вверх не растет
                if (allChipModels[placedBetIndex][i][j] == undefined) {
                    let chip = mp.objects.new(mp.game.joaat(chipImplementations[i]), new mp.Vector3(chipModels[i][j].position.x, chipModels[i][j].position.y, chipModels[i][j].position.z));
                    array[i].push(chip);
                }
                else {
                    let chip = mp.objects.new(mp.game.joaat(chipImplementations[i]), new mp.Vector3(allChipModels[placedBetIndex][i][j].position.x, allChipModels[placedBetIndex][i][j].position.y, allChipModels[placedBetIndex][i][j].position.z + j * chipZoffset));
                    array[i].push(chip);
                }
            }
        }
        allChipModels.push(array);
    }

    bets.push(betName);
    betsChips.push(currentChipSet);

    if (placedBetIndex == -1)//real shit
    {
        for (let i = 0; i < 5; i++) {
            for (let j = 0; j < currentChipSet[i]; j++) {
                if (j >= 8) continue;//больше 8 вверх не растет
                let chip = mp.objects.new(mp.game.joaat(chipImplementations[i]), new mp.Vector3(chipModels[i][j].position.x, chipModels[i][j].position.y, chipModels[i][j].position.z));
                array[i].push(chip);
            }
        }
        allChipModels.push(array);
    }

    mp.events.callRemote('player:placedBet', betName, currentChipSet[0], currentChipSet[1], currentChipSet[2], currentChipSet[3], currentChipSet[4]);
    mp.events.callRemote('player:requestBank');
    //currentChipSet = [0,0,0,0,0];
    //destroyChipModels();
}

function cancelLastBet() {
    if (currentChipSet.filter(b => b > 0).length > 0) {
        destroyChipModels();
        mp.events.callRemote('player:requestBank');
        return;
    }

    if (bets.length == 0) return;
    bets.pop();
    currentChipSet = betsChips.pop();

    let cModels = allChipModels.pop();
    cModels.forEach(x => x.forEach(c => c.destroy()));

    updateChipModels();
    mp.events.callRemote('player:canceledBet');
    mp.events.callRemote('player:requestBank');
}

function resetBets() {
    currentChipSet = [0, 0, 0, 0, 0];
    bets = [];
    betsChips = [];
    allChipModels.forEach(c => c.forEach(x => x.forEach(b => b.destroy())));
    allChipModels = [];
}

function updateChipModels() {
    for (let i = 0; i < 5; i++) {
        if (currentChipSet[i] > 0) {
            for (let j = 0; j < currentChipSet[i]; j++) {
                createChipModel(i);
            }
        }
    }
}

function deleteMarkers() {
    markers.forEach(x => x.forEach(
        m => m.destroy()
    ));
    markers = [
        [],
        [],
        []
    ];
    zeroMarkers.forEach(x => x.destroy());
    zeroMarkers = [];
}

mp.events.add('roulette:exit:pressed', () => {
    exit();
})

mp.events.add('roulette:shipset:update', (bet) => {
    if (!isPlacing) return;
    switch (bet) {
        case 'black':
            currentChipSet[0]++;
            global.gui.setData("hud/subChipValue", "black")
            break;
        case 'red':
            currentChipSet[1]++;
            global.gui.setData("hud/subChipValue", "red")
            break;
        case 'blue':
            currentChipSet[2]++;
            global.gui.setData("hud/subChipValue", "blue")
            break;
        case 'green':
            currentChipSet[3]++;
            global.gui.setData("hud/subChipValue", "green")
            break;
        case 'yellow':
            currentChipSet[4]++;
            global.gui.setData("hud/subChipValue", "yellow")
            break;
    }
    updateChipModels();
});

let currentReaction;
mp.events.add('roulette:reaction:play', (reaction) => {
    currentReaction = reaction;
    mp.players.local.taskPlayAnimAdvanced("anim_casino_b@amb@casino@games@shared@player@", currentReaction, chairPoint.x, chairPoint.y, chairPoint.z, 0, 0, chairDirection, -8, 1, -1, 5642, 0, 2, 0);
    mp.events.callRemote("player:playAnim", 5642, "anim_casino_b@amb@casino@games@shared@player@", currentReaction, chairPoint.x, chairPoint.y, chairPoint.z, chairDirection);
});

function syncronizeAnim(play, animName, flag, x, y, z) {
    if (play) {
        // mp.events.callRemote("player:playAnim", flag, "anim_casino_b@amb@casino@games@shared@player@", animName, x, y, z);
    }
    else {
        // mp.events.callRemote("player:stopAnim");
    }
}

function stopReaction() {
    if (currentReaction != null || currentReaction != undefined)
        mp.players.local.stopAnim("anim_casino_b@amb@casino@games@shared@player@", currentReaction, 0.0);
    syncronizeAnim(false, currentReaction);
}

const chipYoffset = 0.02;
const chipXoffset = 0.02;
const chipZoffset = 0.01;
let chipModels = [
    [],
    [],
    [],
    [],
    []
];
let chipImplementations = ['vw_prop_chip_10kdollar_x1', 'vw_prop_chip_100dollar_x1', 'vw_prop_chip_500dollar_x1', 'vw_prop_chip_5kdollar_x1', 'vw_prop_chip_1kdollar_x1'];

function createChipModel(type) {
    if (currentChipSet[type] >= 8) return;
    let chip = mp.objects.new(mp.game.joaat(chipImplementations[type]), new mp.Vector3(boardPivotPoint.x - 0.35, boardPivotPoint.y - 0.45, boardPivotPoint.z + boardHeight + currentChipSet[type] * chipZoffset), {
        alpha: 120
    });
    chipModels[type].push(chip);
}

function setChipPosition(globalX, globalY) {
    let types = [];
    for (let i = 0; i < 5; i++) {
        if (currentChipSet[i] > 0) {
            types.push(i);
        }
    }
    switch (types.length) {
        case 0:
            return;
        case 1:
            set2dPosition(chipModels[types[0]], globalX, globalY);
            break;
        case 2:
            set2dPosition(chipModels[types[0]], globalX + chipXoffset, globalY);
            set2dPosition(chipModels[types[1]], globalX - chipXoffset, globalY);
            break;
        case 3:
            set2dPosition(chipModels[types[0]], globalX + chipXoffset, globalY);
            set2dPosition(chipModels[types[1]], globalX - chipXoffset, globalY);
            set2dPosition(chipModels[types[2]], globalX - 2 * chipXoffset, globalY);
            break;
        case 4:
            set2dPosition(chipModels[types[0]], globalX + chipXoffset, globalY - chipYoffset);
            set2dPosition(chipModels[types[1]], globalX - chipXoffset, globalY + chipYoffset);
            set2dPosition(chipModels[types[2]], globalX + chipXoffset, globalY + chipYoffset);
            set2dPosition(chipModels[types[3]], globalX - chipXoffset, globalY - chipYoffset);
            break;
        case 5:
            set2dPosition(chipModels[types[0]], globalX + chipXoffset, globalY - chipYoffset);
            set2dPosition(chipModels[types[1]], globalX - chipXoffset, globalY + chipYoffset);
            set2dPosition(chipModels[types[2]], globalX + chipXoffset, globalY + chipYoffset);
            set2dPosition(chipModels[types[3]], globalX - chipXoffset, globalY - chipYoffset);
            set2dPosition(chipModels[types[4]], globalX - 2 * chipXoffset, globalY + chipYoffset / 2);
            break;
    }
}

function set2dPosition(array, relX, relY) {
    array.forEach(a => a.position = new mp.Vector3(relX, relY, a.position.z));
}

function destroyChipModels() {
    if (chipModels.filter(c => c.length != 0).length == 0) return;
    chipModels.forEach(c => c.forEach(x => x.destroy()));
    chipModels = [
        [],
        [],
        [],
        [],
        []
    ];
    currentChipSet = [0, 0, 0, 0, 0];
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var _module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);


const player = mp.players.local;

mp.events.add(
{
    'render': () => 
    {
        const data = _module__WEBPACK_IMPORTED_MODULE_0__[/* luckywheel */ "a"].interaction;
        if (mp.game.gameplay.getDistanceBetweenCoords(player.position.x, player.position.y, player.position.z, data.pos.x, data.pos.y, data.pos.z, true) < data.radius 
            && !(!global.loggedin || global.chatActive || global.editing || global.menuOpened || global.cuffed)
            )
        {
            if (!data.isNear)
            {
                data.isNear = true;
                mp.keys.bind(data.button, false, _module__WEBPACK_IMPORTED_MODULE_0__[/* luckywheel */ "a"].onClick);
                data.sendNotify('Нажмите ~INPUT_CONTEXT~ , для прокрутки колеса');
            }
        }
        else if (data.isNear)
        {
            data.isNear = false;
            mp.keys.unbind(data.button, false, _module__WEBPACK_IMPORTED_MODULE_0__[/* luckywheel */ "a"].onClick);
            data.clearNotify();
        }
    },
    'luckywheel.cometoluckywheel': (pos) => 
    {
        _module__WEBPACK_IMPORTED_MODULE_0__[/* luckywheel */ "a"].comeToLuckyWheel(pos);
    },
    'luckywheel.spin': (pos) => 
    {
        _module__WEBPACK_IMPORTED_MODULE_0__[/* luckywheel */ "a"].object.spin(pos);
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let weddingIsOpen = false;

mp.events.add('marriage:invite', () => {
   global.gui.openPage('WeddingMenu');
   weddingIsOpen = true;
   global.gui.setData('weddingMenu/setIsWeddingComplete', JSON.stringify(false));
});

mp.events.add('marriage:inputName', (name) => {
    closeMenu();
    mp.events.callRemote('marriage:callbackInvite', name);
});

mp.events.add('marriage:cancelPropose', () => {
    closeMenu();
});

function closeMenu() 
{
	if (!weddingIsOpen) return;
	
    global.gui.close();
	weddingIsOpen = false;
}

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
	closeMenu();
});

mp.events.add('marriage:proposal', (name) => {
    global.gui.openPage('WeddingNotification');
    global.gui.setData('weddingMenu/setWeddingName', JSON.stringify(name));
});

mp.events.add('marriage:apply', () => {
    closeMenu();
    mp.events.callRemote('marriage:callbackProposal', true);
});

mp.events.add('marriage:decline', () => {
    closeMenu();
    mp.events.callRemote('marriage:callbackProposal', false);
});

mp.events.add('marriage:complete', (name) => 
{
	weddingIsOpen = true;
    global.gui.openPage('WeddingMenu');
	global.gui.setData('weddingMenu/setIsWeddingComplete', JSON.stringify(true));
	global.gui.setData('weddingMenu/setCongratulationsName', JSON.stringify(name));
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {mp.game.streaming.requestAnimDict("anim@mp_point");

const gameplayCam = mp.cameras.new("gameplay");
let pointing =
{
	active: false,
	interval: null,
	lastSent: 0,
	start: function () 
	{
		if (this.active) return;
		
		this.active = true;

		mp.game.streaming.requestAnimDict("anim@mp_point");
		while(!mp.game.streaming.hasAnimDictLoaded("anim@mp_point")) mp.game.wait(0);
		mp.game.invoke("0x0725a4ccfded9a70", global.localplayer.handle, 0, 1, 1, 1);
		global.localplayer.setConfigFlag(36, true)
		global.localplayer.taskMoveNetwork("task_mp_pointing", 0.5, false, "anim@mp_point", 24);
		mp.game.streaming.removeAnimDict("anim@mp_point");

		this.interval = setInterval(this.process.bind(this), 0);
	},

	stop: function () 
	{
		if (!this.active) return;
		
		clearInterval(this.interval);
		this.interval = null;

		this.active = false;

		mp.game.invoke("0xd01015c7316ae176", global.localplayer.handle, "Stop");
		if (!mp.game.invoke("0x84A2DD9AC37C35C1", global.localplayer.handle)) mp.game.invoke("0x176CECF6F920D707", global.localplayer.handle);
		mp.game.invoke("0x0725a4ccfded9a70", global.localplayer.handle, 1, 1, 1, 1);
		global.localplayer.setConfigFlag(36, false);
	},

	lastSync: 0,

	getRelativePitch: function () 
	{
		let camRot = gameplayCam.getRot(2);

		return camRot.x - global.localplayer.getPitch();
	},

	process: function () 
	{
		if (!this.active) return;
		
		if (global.sceneStarted) 
		{
			this.stop();
			return;
		}
		mp.game.invoke("0x921ce12c489c4c41", global.localplayer.handle);
		let camPitch = this.getRelativePitch();
		if (camPitch < -70.0) camPitch = -70.0;
		else if (camPitch > 42.0) camPitch = 42.0;
		camPitch = (camPitch + 70.0) / 112.0;
		let camHeading = mp.game.cam.getGameplayCamRelativeHeading();
		let cosCamHeading = mp.game.system.cos(camHeading);
		let sinCamHeading = mp.game.system.sin(camHeading);
		if (camHeading < -180.0) camHeading = -180.0;
		else if (camHeading > 180.0) camHeading = 180.0;
		camHeading = (camHeading + 180.0) / 360.0;
		let coords = global.localplayer.getOffsetFromGivenWorldCoords((cosCamHeading * -0.2) - (sinCamHeading * (0.4 * camHeading + 0.3)), (sinCamHeading * -0.2) + (cosCamHeading * (0.4 * camHeading + 0.3)), 0.6);
		let blocked = (typeof mp.raycasting.testPointToPoint([coords.x, coords.y, coords.z - 0.2], [coords.x, coords.y, coords.z + 0.2], global.localplayer.handle, 7) !== 'undefined');
		mp.game.invoke('0xd5bb4025ae449a4e', global.localplayer.handle, "Pitch", camPitch)
		mp.game.invoke('0xd5bb4025ae449a4e', global.localplayer.handle, "Heading", camHeading * -1.0 + 1.0)
		mp.game.invoke('0xb0a6cfd2c69c1088', global.localplayer.handle, "isBlocked", blocked)
		mp.game.invoke('0xb0a6cfd2c69c1088', global.localplayer.handle, "isFirstPerson", mp.game.invoke('0xee778f8c7e1142e2', mp.game.invoke('0x19cafa3c87f7c2ff')) == 4)

		if ((Date.now() - this.lastSent) > 100) 
		{
			this.lastSent = Date.now();
			mp.events.callRemoteUnreliable("server.fpsync.update", camPitch, camHeading);
		}
	}
}


function getPlayerByRemoteId(remoteId) 
{
    let pla = mp.players.atRemoteId(remoteId);
    if (pla == undefined || pla == null) return null;
    return pla;
}

mp.events.add("client.fpsync.update", (remoteId, camPitch, camHeading) => 
{
	let localPlayer = mp.players.local;
	if (localPlayer.remoteId === remoteId) return;
	let netPlayer = getPlayerByRemoteId(parseInt(remoteId));
	if (netPlayer != null && 0 !== netPlayer.handle && netPlayer != localPlayer) 
	{
		netPlayer.lastReceivedPointing = Date.now();

		if (!netPlayer.pointingInterval) 
		{
			
			netPlayer.pointingInterval = setInterval((function () 
			{
				if ((Date.now() - netPlayer.lastReceivedPointing) > 1000) 
				{
					clearInterval(netPlayer.pointingInterval);

					netPlayer.lastReceivedPointing = undefined;
					netPlayer.pointingInterval = undefined;


					if (!mp.players.exists(netPlayer) || 0 === netPlayer.handle) return;

					mp.game.invoke("0xd01015c7316ae176", netPlayer.handle, "Stop");
					if (!netPlayer.isInAnyVehicle(true)) mp.game.invoke("0x0725a4ccfded9a70", netPlayer.handle, 1, 1, 1, 1);
					netPlayer.setConfigFlag(36, false);
					mp.game.invoke("0x84A2DD9AC37C35C1", netPlayer.handle) || mp.game.invoke("0x176CECF6F920D707", netPlayer.handle);

				}
			}).bind(netPlayer), 500);

			mp.game.streaming.requestAnimDict("anim@mp_point");
			while(!mp.game.streaming.hasAnimDictLoaded("anim@mp_point")) mp.game.wait(0);

			mp.game.invoke("0x0725a4ccfded9a70", netPlayer.handle, 0, 1, 1, 1);
			netPlayer.setConfigFlag(36, true)
			netPlayer.taskMoveNetwork("task_mp_pointing", 0.5, false, "anim@mp_point", 24);
			mp.game.streaming.removeAnimDict("anim@mp_point");
		}

		mp.game.invoke('0xd5bb4025ae449a4e', netPlayer.handle, "Pitch", camPitch)
		mp.game.invoke('0xd5bb4025ae449a4e', netPlayer.handle, "Heading", camHeading * -1.0 + 1.0)
		mp.game.invoke('0xb0a6cfd2c69c1088', netPlayer.handle, "isBlocked", 0);
		mp.game.invoke('0xb0a6cfd2c69c1088', netPlayer.handle, "isFirstPerson", 0);
	}
});

mp.keys.bind(global.Keys.Key_N, true, () => {
    if (mp.gui.cursor.visible || global.sceneStarted) return;
	
    pointing.start();
});

mp.keys.bind(global.Keys.Key_N, false, () => {
    pointing.stop();
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {mp.events.add('openjudgemenu', () => {
    global.gui.openPage("JudgeMenu")
});

mp.events.add('judje:close', () => {
    gui.close();
});

mp.events.add('judje:arrest', (name, time, message) => {
    mp.events.callRemote('judgearest', name, time, message);
    gui.close();
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const moveSettings = {
    size: {
        x: 60,
        y: 35
    },
    position: {
        left: '90%',
        top: '90%',
    },
    showIcons: [false, false, false, false],
    values: [
        {//LEFT X
            value: 160,
            min: -1800,
            max: 1800,
            step: 5,
            invert: true,
            enabled: true,
            callback: "camMoveAngleX"
        },
        {//LEFT Y
            value: 0,
            min: -0.6,
            max: 2.6,
            step: .2,
            invert: false,
            enabled: true,
            callback: "camMoveCamZ"
        },
        {//RIGHT X
            value: 2,
            min: 1,
            max: 3,
            step: .1,
            invert: false,
            enabled: false,
            callback: ""
        },
        {//RIGHT Y
            value: 0,
            min: -1,
            max: 1,
            step: .1,
            invert: true,
            enabled: false,
            callback: "camMovePointZ"
        },
        { //WHEELE
            value: 4,
            min: .5,
            max: 15,
            step: .5,
            invert: false,
            enabled: true,
            callback: "camSetDist"
        }
    ]
}
let tuningTypes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48]; //этот тюнинг проверям для каждой машине
let tuningTypesAll = [11, 18, 22, 23, 51, 53, 55, 1000, 1001, 1003]; //этот тюнинг есть у всех авто
let tuningTypesAllMoto = [11, 18, 22, 23, 24, 51, 53, 1000, 1003]; //этот тюнинг есть у всех мото
let fixTuningCar = [
    { model: "impaler3", fixmod: [5, 9, 7, 10, 41, 43] },
    { model: "issi3", fixmod: [9, 7, 26, 35, 41, 43] },
    { model: "issi4", fixmod: [9, 7, 10, 26, 35, 41, 43] },
    { model: "issi5", fixmod: [9, 7, 10, 26, 35, 41, 43] },
    { model: "issi6", fixmod: [9, 7, 10, 26, 35, 41, 43] },
    { model: "revolter", fixmod: [10] },
]
let percentCarPrice = 5000000;  //для расчета коэффициента зависимости стоимости детали от цены на авто
let config = [];  //доступный тюнинг на авто
let modelCar = ""; //Машина, в которой находится игрок
let modelPrice = 20000000; //цена текущей машины
let priceOnePart = 100; //цена за материал на текущем LSCustom
let opened = false;
let vehicleComponents = null; //установленный на авто тюнинг
let currVehClass = -1;  //класс авто
let cntTurboStage = 1;
let disableMods = [];

//Текущая ветка
let currentCategory = "";
let currentComponent = "";
let currentWheelType = "";

//установленные компоненты
let currComp = -1;
let currMod = -1;
let currWheelType = -1;
let currPrice = 0;

//установленный цвет
let currentPearl = -1;
let currentMod1 = 0;
let currentMod2 = 0;
let currentFirstColor = {
    r: 0, g: 0, b: 0
};
let currentSecColor = {
    r: 0, g: 0, b: 0
};

//установленный неон
let currentNeon = {
    r: 0, g: 0, b: 0, a: 0
};
let currentNeon2 = {
    r: 0, g: 0, b: 0, a: 0
};
//установленный цвет дыма шин
let currentTyreSmokeColor = {
    r: 0, g: 0, b: 0, a: 0
};

let tuningRanks = [
    '0',
    'I',
    'II',
    'III',
    'IV',
    'V',
    'VI',
    'VII',
    'VIII',
    'IX',
    'X',
]


let fullTuning = [
    { id: 0, title: "client_71", key: "Spoilers", parent: "body" },
    { id: 1, title: "client_72", key: "FrontBumper", parent: "body" },
    { id: 2, title: "client_73", key: "RearBumper", parent: "body" },
    { id: 3, title: "client_74", key: "SideSkirt", parent: "body" },
    { id: 4, title: "client_75", key: "Exhaust", parent: "body" },
    { id: 5, title: "client_76", key: "Frame", parent: "body" },
    { id: 6, title: "client_77", key: "Grille", parent: "body" },
    { id: 7, title: "client_78", key: "Hood", parent: "body" },
    { id: 8, title: "client_79", key: "Fender", parent: "body" },
    { id: 9, title: "client_80", key: "RightFender", parent: "body" },
    { id: 10, title: "client_81", key: "Roof", parent: "body" },
    { id: 11, title: "client_82", key: "Engine", parent: "power" },
    { id: 12, title: "client_83", key: "Brakes", parent: "power" },
    { id: 13, title: "client_84", key: "Transmission", parent: "power" },
    { id: 14, title: "client_85", key: "Horns", parent: "painting" },
    { id: 15, title: "client_86", key: "Suspension", parent: "body" },
    { id: 16, title: "client_87", key: "Armor", parent: "body" },
    { id: 22, title: "client_88", key: "Xenon", parent: "painting" },
    { id: 23, title: "client_89", key: "FrontWheels", parent: "body" },
    { id: 24, title: "client_90", key: "BackWheels", parent: "body" },
    { id: 25, title: "client_91", key: "Plateholders", parent: "body" },
    { id: 26, title: "client_92", key: "VanityPlates", parent: "body" },
    { id: 27, title: "client_93", key: "TrimDesign", parent: "body" },
    { id: 28, title: "client_94", key: "Ornaments", parent: "body" },
    { id: 29, title: "client_95", key: "Cabin", parent: "body" },
    { id: 30, title: "client_96", key: "DialDesign", parent: "body" },
    { id: 31, title: "client_97", key: "DoorDesign", parent: "body" },
    { id: 32, title: "client_98", key: "Seats", parent: "body" },
    { id: 33, title: "client_99", key: "SteeringWheel", parent: "body" },
    { id: 34, title: "client_100", key: "ShiftLever", parent: "body" },
    { id: 35, title: "client_101", key: "Plaques", parent: "body" },
    { id: 36, title: "client_102", key: "Speakers", parent: "body" },
    { id: 37, title: "client_103", key: "Trunk", parent: "body" },
    { id: 38, title: "client_104", key: "Hydraulics", parent: "body" },
    { id: 39, title: "client_105", key: "EngineBlock", parent: "body" },
    { id: 40, title: "client_106", key: "AirFilter", parent: "body" },
    { id: 41, title: "client_107", key: "Struts", parent: "body" },
    { id: 42, title: "client_108", key: "ArchCover", parent: "painting" },
    { id: 43, title: "client_109", key: "Aerials", parent: "body" },
    { id: 44, title: "client_110", key: "Trim", parent: "body" },
    { id: 46, title: "client_111", key: "WindowsTypes", parent: "body" },
    { id: 48, title: "client_112", key: "Livery", parent: "painting" },
    { id: 51, title: "client_113", key: "WheelsColor", parent: "painting" },
    { id: 53, title: "client_114", key: "NumberType", parent: "body" },
    { id: 54, title: "client_115", key: "PearlColor", parent: "painting" },
    { id: 55, title: "client_116", key: "WindowToning", parent: "body" },
    { id: 1000, title: "client_117", key: "Color", parent: "painting" },
    { id: 1002, title: "client_118", key: "SecColor", parent: "painting" },
    { id: 1001, title: "client_119", key: "Neon", parent: "painting" },
    { id: 1003, title: "client_169", key: "TyreSmokeColor", parent: "painting" },
    { id: 18, title: "client_120", key: "Turbo", parent: "power" },
];

let typePower = {
    0: "Lower",
    1: "Street",
    2: "Sport",
    3: "Race"
}

let xenonColor = {
    0: "client_121", //белый
    1: "client_122", //светло синий
    2: "client_123", //голубой
    3: "client_124", //зеленый
    4: "client_125", //лаймовый
    5: "client_126", //желтый
    6: "client_127", //оранжевый
    7: "client_128", //темно оранжевый
    8: "client_129", //красный
    9: "client_130", //розовый
    10: "client_131", //пурпурный
    11: "client_132", //фиолетовый
    12: "client_133", //синий
}
let wheelTypes = [
    { title: "Sport", key: 0, image: "Sport" },
    { title: "Muscle", key: 1, image: "Muscle" },
    { title: "Lowrider", key: 2, image: "Lowrider" },
    { title: "SUV", key: 3, image: "SUV" },
    { title: "Offroad", key: 4, image: "Offroad" },
    { title: "Tuner", key: 5, image: "Tuner" },
    { title: "Exclusive", key: 7, image: "Exclusive" },
    { title: "Benny Original", key: 8, image: "Benny1" },
    { title: "Benny Bespoke", key: 9, image: "Benny2" },
    { title: "F1", key: 10, image: "F1" },
]
let motoWhell = {
    title: "Motorcycles", key: 6, image: "Motorcycles"
}
let toning = [
    { title: "Stock", key: -1 },
    { title: "client_134", key: 1 }, //PURE_BLACK
    { title: "client_135", key: 2 }, //DARKSMOKE
    { title: "client_136", key: 3 }, //LIGHTSMOKE
    { title: "client_137", key: 5 }, //GREEN
]

let colorTypeItems = [
    { id: 0, title: 'client_138' },
    { id: 1, title: 'client_139' },
    { id: 3, title: 'client_140' },
    { id: 4, title: 'client_141' },
    { id: 5, title: 'client_142' }
]
//#region start

function GetTuningPars() {
    config = [];
    tuningTypes.forEach(index => {
        let count = mp.players.local.vehicle.getNumMods(index)
        if (count > 0)
            config[index] = count;
    });
}

mp.events.add('lsCustom:openTun', (pricePart, carModel, modelPr, components, vehclass, turboStage) => {

    modelCar = carModel; //Машина, в которой находится игрок
    modelPrice = modelPr; //цена текущей машины
    priceOnePart = pricePart; //цена за материал на текущем LSCustom
    cntTurboStage = turboStage; //количество уровней турбо на авто
    currVehClass = vehclass;
    GetTuningPars(); //загружаем конфиг
    vehicleComponents = JSON.parse(components);
    opened = global.gui.openPage('CarTunningMenu');
    if(!opened) return;
    global.gui.setData('carTunningMenu/setCurrentTab', JSON.stringify("FirstTab"));
    global.gui.setData('carTunningMenu/setSliderColors', JSON.stringify(global.RageColorsList));
    global.gui.setData('carTunningMenu/setColorTypeItems', JSON.stringify(colorTypeItems.map(item => ({ id: item.id, title: item.title}))));
    global.gui.setData('carTunningMenu/setSpecificationMaxValues', JSON.stringify({
        speed: 300,
        braking: 350,
        acceleration: 300,
        traction: 100
    }));
    global.gui.setData('carTunningMenu/setThirdTabData', JSON.stringify({ parent: "WheelsColor", items: null })); //сбрасываем третью страницу, чтоб предыдущий цвет в палитре не кэшировался
    DropState();
    //настройки камеры
    const pos = mp.players.local.position;
    global.customCamera.setPos(new mp.Vector3(pos.x, pos.y, pos.z + .6));
    global.customCamera.setPoint(new mp.Vector3(pos.x, pos.y, pos.z + .6));
    global.customCamera.moveCamZ(0);
    global.customCamera.setDist(4);
    global.customCamera.moveAngleX(160);
    global.customCamera.switchOn(0);
    global.gui.setData('mouseMove/setSettings', JSON.stringify(moveSettings));
    global.gui.setData('mouseMove/setEnebled', true);

    global.gui.setData('carTunningMenu/setCurrentTab', JSON.stringify("FirstTab"));
    setTimeout(function () {
        global.showCursor(true);
    }, 100);
    InitPowerMenu();
    disableMods = fixTuningCar.find(item => mp.game.joaat(item.model) == mp.players.local.vehicle.model);

});

//#endregion

//#region Set SecondTab

//открывыаем список компонентов в категории
mp.events.add('lsCustom:openListCat', (parrent) => {

    let list = GetListCat(parrent);
    global.gui.setData('carTunningMenu/setSecondTabData', JSON.stringify(list));
    if (parrent == 'power')
        UpdatePowerMenu();
});

function GetListCat(currParent) {
    let currItems = fullTuning.filter(item =>
        item.parent == currParent &&
        CheckSolveMod(item.id) &&
        ((config[item.id] !== undefined && config[item.id] != null) ||
            (tuningTypesAll.includes(item.id) && currVehClass != 8) ||
            (tuningTypesAllMoto.includes(item.id) && currVehClass == 8)))
        .map(item => ({ title: item.title, key: item.key }));
    currentCategory = currParent;
    return { parent: currParent, items: currItems };
}

//#endregion

//#region Set ThirdTab

//открываем список модификаций в компоненте
mp.events.add('lsCustom:openListTun', (component) => {
    if (component == "Color" || component == "Neon" || component == "TyreSmokeColor") {
        global.gui.setData('carTunningMenu/setThirdCurrentMainColorType', JSON.stringify({ id: vehicleComponents.PaintTypePrim, title: colorTypeItems.find(item => item.id == vehicleComponents.PaintTypePrim).title}));
        global.gui.setData('carTunningMenu/setColorPickerMainColor', JSON.stringify(`${vehicleComponents.PrimColor.Red}, ${vehicleComponents.PrimColor.Green}, ${vehicleComponents.PrimColor.Blue}`));
        global.gui.setData('carTunningMenu/setThirdCurrentAdditionalColorType', JSON.stringify({ id: vehicleComponents.PaintTypeSec, title: colorTypeItems.find(item => item.id == vehicleComponents.PaintTypeSec) }));
        global.gui.setData('carTunningMenu/setColorPickerAdditionalColor', JSON.stringify(`${vehicleComponents.SecColor.Red}, ${vehicleComponents.SecColor.Green}, ${vehicleComponents.SecColor.Blue}`));
        
        let neonColor1 = vehicleComponents.NeonColors.length > 0 ? vehicleComponents.NeonColors[0] : {Red:0, Green:0, Blue:0, Alpha:0};
        let neonColor2 = vehicleComponents.NeonColors.length > 1 ? vehicleComponents.NeonColors[1] : {Red:0, Green:0, Blue:0, Alpha:0};
        global.gui.setData('carTunningMenu/setColorPickerNeonColor', JSON.stringify(`${neonColor1.Red}, ${neonColor1.Green}, ${neonColor1.Blue}`));
        global.gui.setData('carTunningMenu/setColorPickerNeon2Color', JSON.stringify(`${neonColor2.Red}, ${neonColor2.Green}, ${neonColor2.Blue}`));
        global.gui.setData('carTunningMenu/setColorPickerTyreSmokeColor', JSON.stringify(`${vehicleComponents.TyreSmokeColor.Red}, ${vehicleComponents.TyreSmokeColor.Green}, ${vehicleComponents.TyreSmokeColor.Blue}`));
    }
    let list = GetListTuning(component);
    global.gui.setData('carTunningMenu/setThirdTabData', JSON.stringify(list));
    let title = fullTuning.find(item => item.key == component).title;
    global.gui.setData('carTunningMenu/setThirdTabDataTitle', JSON.stringify(title));

    let compon = fullTuning.find(item => item.key == component);
    currComp = compon.id;
    currMod = GetNowSetMod(currentComponent);
    global.gui.setData('carTunningMenu/setCurrentSelectItem', JSON.stringify(currMod));
    switch (component) {
        case "Frame":
        case "Ornaments":
        case "Cabin":
        case "DialDesign":
        case "DoorDesign":
        case "Seats":
        case "SteeringWheel":
        case "ShiftLever":
        case "Speakers":
        case "Plaques":
            mp.players.local.vehicle.setDoorOpen(0, true, true); //двери
            mp.players.local.vehicle.setDoorOpen(1, true, true);
            break;
        case "EngineBlock":
        case "AirFilter":
        case "Struts":
            mp.players.local.vehicle.setDoorOpen(4, true, true); //капот
            break;
        case "Trunk":
        case "Hydraulics":
            mp.players.local.vehicle.setDoorOpen(5, true, true); //багажник
            break;
        case "Color":
            SetCurrentColor();
            break;
        case "Neon":
            SetCurrentNeon("Neon");
            SetCurrentNeon("Neon2");
            mp.players.local.vehicle.setEngineOn(true, true, !false);
            break;
        case "Xenon":
            mp.players.local.vehicle.setEngineOn(true, true, !false);
            mp.players.local.vehicle.setLights(2);
            break;
        case "TyreSmokeColor":
            mp.players.local.vehicle.setEngineOn(true, true, !false);
            mp.players.local.vehicle.setTyresCanBurst(false);
            mp.game.invoke('0xC429DCEEB339E129', mp.players.local.handle, mp.players.local.vehicle.handle, 30, 1000000);
            break;
    }
    if (currentCategory == 'power')
        UpdatePowerMenu();
    SetPrice(0);
});

function GetListTuning(component) {
    let listTuning = [];
    let currComp = fullTuning.find(item => item.key == component);
    listTuning.push({ title: "Stock", key: -1, image: `secondTab/${currentCategory}/${component}.png`, rank: tuningRanks[1] });
    if (component == "Brakes" || component == "Transmission") {
        for (var i = 0; i < 3; i++) {
            listTuning.push({ title: `${typePower[i + 1]} ${component}`, key: i, image: `secondTab/${currentCategory}/${component}.png`, rank: tuningRanks[i + 2] });
        }
    }
    else if (component == "Engine") {
        for (var i = 0; i < 4; i++) {
            listTuning.push({ title: `Stage${i + 1} ${component}`, key: i, image: `secondTab/${currentCategory}/${component}.png`, rank: tuningRanks[i + 2] });
        }
    }
    else if (component == "Suspension") {
        for (var i = 0; i < 4; i++) {
            listTuning.push({ title: `${currComp.title}@${typePower[i]}`, key: i, image: `secondTab/${currentCategory}/${component}.png`, rank: tuningRanks[i + 2] });
        }
    }
    else if (component == "Armor") {
        for (var i = 0; i < 5; i++) {
            listTuning.push({ title: `${currComp.title}@${(i + 1) * 20}%`, key: i, image: `secondTab/${currentCategory}/${component}.png`, rank: tuningRanks[i + 2] });
        }
    }
    else if (component == "Turbo") {
        for (var i = 0; i < cntTurboStage; i++)
            listTuning.push({ title: `${currComp.title}@Stage${i + 1}`, key: i, image: `secondTab/${currentCategory}/${component}.png`, rank: tuningRanks[i + 2] });
    }
    else if (component == "Xenon") {
        for (var i = 0; i < 13; i++) {
            listTuning.push({ title: `${xenonColor[i]}@${currComp.title}`, key: i, image: `thirdTab/${component}/Color${i}.png`, rank: tuningRanks[2] });
        }
    }
    else if (component == "NumberType") {
        listTuning = [];
        for (var i = 0; i < 6; i++) {
            listTuning.push({ title: `${currComp.title}@${i + 1}`, key: i, image: `secondTab/${currentCategory}/${component}.png`, rank: tuningRanks[2] });
        }
    }
    else if (component == "WindowToning") {
        listTuning = [];
        toning.forEach(index => {
            listTuning.push({ title: index.title, key: index.key, image: `secondTab/${currentCategory}/${component}.png`, rank: tuningRanks[2] });
        });
    }
    else if (component == "FrontWheels" || component == "BackWheels") {
        listTuning = [];

        if (currVehClass == 8) {
            listTuning.push({ title: motoWhell.title, key: motoWhell.key, image: `thirdTab/${component}/${motoWhell.image}.png`, rank: undefined });
        }
        else {
            wheelTypes.forEach(index => {
                listTuning.push({ title: index.title, key: index.key, image: `thirdTab/${component}/${index.image}.png`, rank: undefined });
            });
        }
    }
    //все остальные
    else if (config[currComp.id] != undefined && config[currComp.id] != null) {
        for (var i = 0; i < config[currComp.id]; i++) {
            listTuning.push({ title: `${currComp.title}@${i + 1}`, key: i, image: `secondTab/${currentCategory}/${component}.png`, rank: tuningRanks[2] });
        }
    }
    //цвета
    else if (currComp.title != undefined && currComp.title != null) {
        listTuning = [];
        listTuning.push({ title:currComp.title, key: 0, image: `secondTab/${currentCategory}/${component}.png`, rank: tuningRanks[1] });
        if (component == "Color")
            listTuning.push({ title: "Stock Pearl", key: 1, image: `secondTab/${currentCategory}/${component}.png`, rank: tuningRanks[1] });
        if (component == "Neon")
            listTuning.push({ title: "Stock Neon", key: 1, image: `secondTab/${currentCategory}/${component}.png`, rank: tuningRanks[1] });
        if (component == "TyreSmokeColor")
            listTuning.push({ title: "Stock Smoke Color", key: 1, image: `secondTab/${currentCategory}/${component}.png`, rank: tuningRanks[1] });
    }
    currentComponent = component;
    return { parent: component, items: listTuning };
}

function SetCurrentColor() {
    currentPearl = GetNowSetMod("PearlColor")
    currentMod1 = vehicleComponents.PaintTypePrim;
    currentMod2 = vehicleComponents.PaintTypeSec;
    currentFirstColor = {
        r: vehicleComponents.PrimColor.Red, g: vehicleComponents.PrimColor.Green, b: vehicleComponents.PrimColor.Blue
    };
    currentSecColor = {
        r: vehicleComponents.SecColor.Red, g: vehicleComponents.SecColor.Green, b: vehicleComponents.SecColor.Blue
    };
};

function SetCurrentNeon(type) {
    try {
        let neonColor = vehicleComponents.NeonColors;
        if (type == 'Neon')
            if (neonColor.length > 0)
                currentNeon = {
                    r: neonColor[0].Red, g: neonColor[0].Green, b: neonColor[0].Blue, a: neonColor[0].Alpha
                };
            else
                currentNeon = {
                    r: 0, g: 0, b: 0, a: 0
                };
        if (type == 'Neon2')
            if (neonColor.length > 1)
                currentNeon2 = {
                    r: neonColor[1].Red, g: neonColor[1].Green, b: neonColor[1].Blue, a: neonColor[1].Alpha
                };
            else
                currentNeon2 = {
                    r: 0, g: 0, b: 0, a: 0
                };
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in lscustoms.SetCurrentNeon: ${e.name}\n${e.message}\n${e.stack}`);
    }
};

function SetCurrentTyreSmokeColor() {
    try {
        currentTyreSmokeColor = {
            r: vehicleComponents.TyreSmokeColor.Red, g: vehicleComponents.TyreSmokeColor.Green, b: vehicleComponents.TyreSmokeColor.Blue, a: vehicleComponents.TyreSmokeColor.Alpha
        };
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in lscustoms.SetCurrentTyreSmokeColor: ${e.name}\n${e.message}\n${e.stack}`);
    }
};

//#endregion

//#region Set WheelTab

//получаем список дисков заданного типа
mp.events.add('lsCustom:chooseWheelType', (wheel) => {
    let list = GetWheelList(wheel);
    global.gui.setData('carTunningMenu/setFourthTabData', JSON.stringify(list));
    let wheelType = wheelTypes.find(item => item.key == wheel);
    if (currVehClass == 8)
        wheelType = motoWhell;
    global.gui.setData('carTunningMenu/setFourthTabDataTitle', JSON.stringify(wheelType.title));
    if ((GetNowSetMod("WheelsType") == currWheelType) || (GetNowSetMod(currentComponent) == -1))
        global.gui.setData('carTunningMenu/setCurrentSelectItem', JSON.stringify(GetNowSetMod(currentComponent)));
});

function GetWheelList(wheel) {
    mp.players.local.vehicle.setWheelType(wheel);
    currWheelType = wheel;
    let listWheels = [];
    let wheelType = wheelTypes.find(item => item.key == wheel);
    if (currVehClass == 8)
        wheelType = motoWhell;
    keys = Object.keys(global.tuningWheels[wheel]);
    listWheels.push({ title: "Stock", key: -1, image: `thirdTab/${currentComponent}/${wheelType.image}.png`, rank: tuningRanks[1] });
    for (var i = 1; i < keys.length; i++) {
        listWheels.push({ title: `${wheelType.title} ${i}`, key: i - 1, image: `thirdTab/${currentComponent}/${wheelType.image}.png`, rank: tuningRanks[2] });
    }
    currentWheelType = wheelType.title;
    return { parent: currentComponent, items: listWheels };
}

//#endregion

//#region ChangeMod

//смена детали
mp.events.add('lsCustom:clickTun', (comp, variant) => {
    let compon = fullTuning.find(item => item.key == comp);
    switch (comp) {
        case "Color":
            if (variant == 1) {
                currentPearl = -1;
                UpdateColor();
            }
            break;
        case "Neon":
            if (variant == 1) {
                currentNeon = {
                    r: 0, g: 0, b: 0, a: 0
                };
                currentNeon2 = {
                    r: 0, g: 0, b: 0, a: 0
                };
                UpdateNeon();
            }
            break;
        case "TyreSmokeColor":
            if (variant == 1) {
                currentTyreSmokeColor = {
                    r: 0, g: 0, b: 0, a: 0
                };
                UpdateTyreSmokeColor();
            }
            break;
        case "WheelsColor":
            break;
        default:
            if (compon != undefined && compon != null)
                ChangeModClick(comp, variant);
            break;
    }
    if (currentCategory == 'power')
        UpdatePowerMenu();
    global.gui.setData('carTunningMenu/setCurrentSelectItem', JSON.stringify(variant));
});

function ChangeModClick(comp, variant) {
    let compon = fullTuning.find(item => item.key == comp);
    switch (comp) {
        case "Horns":
            mp.players.local.vehicle.setMod(compon.id, variant);
            mp.players.local.vehicle.startHorn(2000, 0, true);
            break;
        case "WindowToning":
            mp.players.local.vehicle.setWindowTint(variant);
            break;
        case "NumberType":
            mp.players.local.vehicle.setNumberPlateTextIndex(variant);
            break;
        case "Xenon":
            if (variant >= 0) {
                mp.players.local.vehicle.setMod(22, 0);
                mp.game.invoke('0xE41033B25D003A07', mp.players.local.vehicle.handle, parseInt(variant));
            }
            else
                mp.players.local.vehicle.setMod(22, -1);
            break;
        default:
            if (compon != undefined && compon != null) {
                mp.players.local.vehicle.setMod(compon.id, variant);
            }
            break;
    }
    currComp = compon.id;
    currMod = variant;
    updatePrice();
}


//смена цвета в палитре
mp.events.add('lsCustom:changeColor', (r, g, b, type) => {
    if (type == "Color") {
        currentFirstColor = {
            r: r, g: g, b: b
        };
        UpdateColor()
    }
    else if (type == "SecColor") {
        currentSecColor = {
            r: r, g: g, b: b
        };
        UpdateColor()
    }
    else if (type == "Neon") {
        currentNeon = {
            r: r, g: g, b: b, a: 1
        };
        UpdateNeon();
    }
    else if (type == "Neon2") {
        currentNeon2 = {
            r: r, g: g, b: b, a: 1
        };
        UpdateNeon();
    }
    else if (type == "TyreSmokeColor") {
        if (r == 0 && g == 0 && b == 0)
            r = 1;
        currentTyreSmokeColor = {
            r: r, g: g, b: b, a: 1
        };
        UpdateTyreSmokeColor();
    }
});

//скрытие палитры
mp.events.add('lsCustom:changeToggleIsPicker', (isPicker, type) => {
    switch (type) {
        case "Color":
            if (!isPicker) {
                currentMod1 = vehicleComponents.PaintTypePrim;
                currentFirstColor = {
                    r: vehicleComponents.PrimColor.Red, g: vehicleComponents.PrimColor.Green, b: vehicleComponents.PrimColor.Blue
                };
                UpdateColor();
            }
            break;
        case "SecColor":
            if (!isPicker) {
                currentMod2 = vehicleComponents.PaintTypeSec;
                currentSecColor = {
                    r: vehicleComponents.SecColor.Red, g: vehicleComponents.SecColor.Green, b: vehicleComponents.SecColor.Blue
                };
                UpdateColor();
            }
            break;
        case "Neon":
        case "Neon2":
            if (!isPicker) {
                SetCurrentNeon(type);
                UpdateNeon();
            }
            break;
        case "TyreSmokeColor":
            if (!isPicker) {
                SetCurrentTyreSmokeColor();
                UpdateTyreSmokeColor();
            }
            break;
    }
});

//смена цвета ползунком
mp.events.add('lsCustom:changeColorSlider', (color) => {
    switch (currentComponent) {
        case "Color":
            currentPearl = color;
            UpdateColor();
            break;
        case "WheelsColor":
            mp.players.local.vehicle.setExtraColours(GetNowSetMod("PearlColor") == -1 ? 0 : GetNowSetMod("PearlColor"), color);
            currComp = 51;
            currMod = color;
            updatePrice();
            break;
    }
});

//скрытие ползунка
mp.events.add('lsCustom:changeToggleIsSlider', (isSlider) => {
    switch (currentComponent) {
        case "Color":
            currentPearl = GetNowSetMod("PearlColor");
            UpdateColor();
            break;
        case "WheelsColor":
            mp.players.local.vehicle.setExtraColours(GetNowSetMod("PearlColor") == -1 ? 0 : GetNowSetMod("PearlColor"), GetNowSetMod("WheelsColor") == -1 ? 0 : GetNowSetMod("WheelsColor"));
            currComp = 51;
            currMod = GetNowSetMod("WheelsColor");
            updatePrice();
            break;
    }
});


//смена типа покраски
mp.events.add('lsCustom:changePaintType', (paintType, type) => {
    if (type == 'Color') {
        currentMod1 = paintType;
    }
    else if (type == 'SecColor') {
        currentMod2 = paintType;
    }
    UpdateColor();
});


//обновление цвета
function UpdateColor() {
    mp.players.local.vehicle.setModColor1(currentMod1, 0, 0);
    mp.players.local.vehicle.setModColor2(currentMod2, 0);
    mp.players.local.vehicle.setCustomPrimaryColour(currentFirstColor.r, currentFirstColor.g, currentFirstColor.b);
    mp.players.local.vehicle.setCustomSecondaryColour(currentSecColor.r, currentSecColor.g, currentSecColor.b);
    mp.players.local.vehicle.setExtraColours(currentPearl == -1 ? 0 : currentPearl, GetNowSetMod("WheelsColor") == -1 ? 0 : GetNowSetMod("WheelsColor"));
    updatePrice();
};

//обновление цвета неона
function UpdateNeon() {
    let vehicle = mp.players.local.vehicle;
    let neonColor = [];
    if (currentNeon.a > 0)
        neonColor.push([currentNeon.r, currentNeon.g, currentNeon.b, currentNeon.a ]);
    if (currentNeon2.a > 0) {
        if (currentNeon.a <= 0)
            neonColor.push([0, 0, 0, 0 ]);
        neonColor.push([currentNeon2.r, currentNeon2.g, currentNeon2.b,  currentNeon2.a]);
    }
    global.VehicleNeons.delete(vehicle);
    if (neonColor.length > 0) {
        vehicle.setNeonLightEnabled(0, true);
        vehicle.setNeonLightEnabled(1, true);
        vehicle.setNeonLightEnabled(2, true);
        vehicle.setNeonLightEnabled(3, true);
        vehicle.setNeonLightsColour(neonColor[0][0], neonColor[0][1], neonColor[0][2]);
        if (neonColor.length > 1)
            global.VehicleNeons.set(vehicle, { colors: neonColor, currColor: 0 });
    }
    else {
        vehicle.setNeonLightEnabled(0, false);
        vehicle.setNeonLightEnabled(1, false);
        vehicle.setNeonLightEnabled(2, false);
        vehicle.setNeonLightEnabled(3, false);
    }
    updatePrice();
};

//обновление цвета дыма шин
function UpdateTyreSmokeColor() {
    mp.players.local.vehicle.toggleMod(20, true);
    if (currentTyreSmokeColor.a > 0) {
        mp.players.local.vehicle.setTyreSmokeColor(currentTyreSmokeColor.r, currentTyreSmokeColor.g, currentTyreSmokeColor.b);
    }
    else {
        mp.players.local.vehicle.setTyreSmokeColor(240, 240, 240);
    }


    updatePrice();
};

function InitPowerMenu() {
    let currPowers = GetNowSetMod("Engine") + GetNowSetMod("Turbo") + 2;
    let lscSpeed = mp.game.vehicle.getVehicleModelMaxSpeed(mp.players.local.vehicle.model) / 1.2 + currPowers * 2;
    let lscBrakes = mp.players.local.vehicle.getMaxBraking() * 100;
    let lscBoost = (mp.players.local.vehicle.getAcceleration() + currPowers * 0.1) * 100;
    let lscClutch = mp.players.local.vehicle.getMaxTraction() * 10;
    global.gui.setData('carTunningMenu/setSpecificationsValues', JSON.stringify({
        title: modelCar,
        speed: Math.floor(lscSpeed * 10) / 10,
        braking: Math.floor(lscBrakes * 10) / 10,
        acceleration: Math.floor(lscBoost * 10) / 10,
        traction: Math.floor(lscClutch * 10) / 10
    }));
}

function UpdatePowerMenu() {
    let currPowers = (currentComponent == "Engine" ? currMod : GetNowSetMod("Engine")) + (currentComponent == "Turbo" ? currMod : GetNowSetMod("Turbo")) + 2;
    let lscSpeed = mp.game.vehicle.getVehicleModelMaxSpeed(mp.players.local.vehicle.model) / 1.2 + currPowers * 2;
    let lscBrakes = mp.players.local.vehicle.getMaxBraking() * 100;
    let lscBoost = (mp.players.local.vehicle.getAcceleration() + currPowers * 0.1) * 100;
    let lscClutch = mp.players.local.vehicle.getMaxTraction() * 10;
    global.gui.setData('carTunningMenu/setSpecificationsPossibleValues', JSON.stringify({
        speed: Math.floor(lscSpeed * 10) / 10,
        braking: Math.floor(lscBrakes * 10) / 10,
        acceleration: Math.floor(lscBoost * 10) / 10,
        traction: Math.floor(lscClutch * 10) / 10
    }));
}
//#region  Update price

function GetPriceByMod(component, modelPrice, variant, wheelType = -2) {

    if ((global.tuningPartsPrice == undefined || global.tuningPartsPrice[component] == undefined) && component != "FrontWheels" && component != "BackWheels")
        return 0;
    if (variant == -1)
        return global.tuningPartsPrice[component].Stock;
    let price;
    if (component == "FrontWheels" || component == "BackWheels")
        price = global.tuningWheels[wheelType][variant];
    else
        price = global.tuningPartsPrice[component].Modifire;
    let modelKoef = modelPrice / percentCarPrice * global.tuningPartsPrice[component].KoefCar + 1;
    return Math.floor((price + Math.floor(global.tuningPartsPrice[component].Step * variant)) * modelKoef);
};

function updatePrice() {
    try {
        currPrice = 0;
        switch (currentComponent) {
            case "Color":
                if (vehicleComponents.PaintTypePrim != currentMod1 || vehicleComponents.PrimColor.Red != currentFirstColor.r || vehicleComponents.PrimColor.Green != currentFirstColor.g || vehicleComponents.PrimColor.Blue != currentFirstColor.b)
                    currPrice += Math.floor(global.tuningColorPrice[currentMod1].Stock * (modelPrice / percentCarPrice * global.tuningColorPrice[currentMod1].KoefCar + 1));
                if (vehicleComponents.PaintTypeSec != currentMod2 || vehicleComponents.SecColor.Red != currentSecColor.r || vehicleComponents.SecColor.Green != currentSecColor.g || vehicleComponents.SecColor.Blue != currentSecColor.b)
                    currPrice += Math.floor(global.tuningColorPrice[currentMod2].Stock * (modelPrice / percentCarPrice * global.tuningColorPrice[currentMod2].KoefCar + 1));
                if (currentPearl != GetNowSetMod("PearlColor")) {
                    if (currentPearl == -1)
                        currPrice += global.tuningColorPrice[2].Stock;
                    else
                        currPrice += global.tuningColorPrice[2].Modifire;
                }
                break;
            case "Neon":
                let colors = vehicleComponents.NeonColors;
                if (colors.length <= 0 || (colors[0].Red != currentNeon.r || colors[0].Green != currentNeon.g || colors[0].Blue != currentNeon.b || colors[0].Alpha != currentNeon.a))
                    if (currentNeon.a <= 0)
                        currPrice += global.tuningColorPrice[6].Stock * (modelPrice / percentCarPrice * global.tuningColorPrice[6].KoefCar + 1);
                    else
                        currPrice += global.tuningColorPrice[6].Modifire * (modelPrice / percentCarPrice * global.tuningColorPrice[6].KoefCar + 1);
                if (colors.length <= 1 || (colors[1].Red != currentNeon2.r || colors[1].Green != currentNeon2.g || colors[1].Blue != currentNeon2.b || colors[1].Alpha != currentNeon2.a))
                    if (currentNeon2.a <= 0)
                        currPrice += global.tuningColorPrice[8].Stock * (modelPrice / percentCarPrice * global.tuningColorPrice[8].KoefCar + 1);
                    else
                        currPrice += global.tuningColorPrice[8].Modifire * (modelPrice / percentCarPrice * global.tuningColorPrice[8].KoefCar + 1);
                break;
            case "TyreSmokeColor":
                if (vehicleComponents.TyreSmokeColor.Red != currentTyreSmokeColor.r || vehicleComponents.TyreSmokeColor.Green != currentTyreSmokeColor.g || vehicleComponents.TyreSmokeColor.Blue != currentTyreSmokeColor.b || vehicleComponents.TyreSmokeColor.Alpha != currentTyreSmokeColor.a)
                    if (currentTyreSmokeColor.a <= 0)
                        currPrice += global.tuningColorPrice[7].Stock * (modelPrice / percentCarPrice * global.tuningColorPrice[7].KoefCar + 1);
                    else
                        currPrice += global.tuningColorPrice[7].Modifire * (modelPrice / percentCarPrice * global.tuningColorPrice[7].KoefCar + 1);
                break;
            case "FrontWheels":
            case "BackWheels":
                if ((GetNowSetMod(currentComponent) == currMod && GetNowSetMod("WheelsType") == currWheelType) || (GetNowSetMod(currentComponent) == currMod && currMod == -1))
                    currPrice = 0;
                else
                    currPrice = GetPriceByMod(currentComponent, modelPrice, currMod, currWheelType);
                break;
            default:
                if (GetNowSetMod(currentComponent) == currMod)
                    currPrice = 0;
                else
                    currPrice = GetPriceByMod(currentComponent, modelPrice, currMod, currWheelType);
                break;
        }
        SetPrice(currPrice);
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in lscustoms.updatePrice: ${e.name}\n${e.message}\n${e.stack}`);
    }
};

function SetPrice(price) {
    price *= priceOnePart;
    global.gui.setData('carTunningMenu/setCurrentItemPrice', JSON.stringify(price));
    if (price > 0)
        global.gui.setData('carTunningMenu/setIsBuyEnable', JSON.stringify(true));
    else
        global.gui.setData('carTunningMenu/setIsBuyEnable', JSON.stringify(false));
}

//#endregion


//#endregion

//#region Set BackTab

mp.events.add('lsCustom:backPage', (page) => {
    DropState();
    let compon = fullTuning.find(item => item.key == currentComponent);
    if (page == "SecondTab" && currentComponent != "FrontWheels" && currentComponent != "BackWheels") {
        //откатываем тюнинг
        switch (currentComponent) {
            case "Color":
                SetCurrentColor();
                UpdateColor();
                break;
            case "Neon":
                SetCurrentNeon("Neon");
                SetCurrentNeon("Neon2");
                UpdateNeon();
                break;
            case "TyreSmokeColor":
                SetCurrentTyreSmokeColor();
                UpdateTyreSmokeColor();
                break;
            case "WheelsColor":
                mp.players.local.vehicle.setExtraColours(GetNowSetMod("PearlColor") == -1 ? 0 : GetNowSetMod("PearlColor"), GetNowSetMod(currentComponent));
                break;
            case "WindowToning":
                mp.players.local.vehicle.setWindowTint(GetNowSetMod(currentComponent));
                break;
            case "NumberType":
                mp.players.local.vehicle.setNumberPlateTextIndex(GetNowSetMod(currentComponent));
                break;
            default:
                mp.players.local.vehicle.setMod(compon.id, GetNowSetMod(currentComponent));
                break;
        }
        currentComponent = "";
        global.gui.setData('carTunningMenu/setThirdTabData', JSON.stringify({ parent: "WheelsColor", items: null }));
    }
    else if (page == "ThirdTab") {
        //откатываем тюнинг колес
        mp.players.local.vehicle.setWheelType(GetNowSetMod("WheelsType"));
        mp.players.local.vehicle.setMod(compon.id, GetNowSetMod(currentComponent));
    }
    else if (page == "FirstTab") {
        currentCategory = "";
    }

    if (currentCategory == 'power')
        UpdatePowerMenu();

    global.gui.setData('carTunningMenu/setCurrentSelectItem', JSON.stringify(-2));
});

function DropState() {
    mp.players.local.clearTasks();
    mp.players.local.vehicle.setDoorShut(0, false);
    mp.players.local.vehicle.setDoorShut(1, false);
    mp.players.local.vehicle.setDoorShut(4, false);
    mp.players.local.vehicle.setDoorShut(5, false);
    mp.players.local.vehicle.setEngineOn(false, true, !false);
    mp.players.local.vehicle.setLights(0);
    mp.players.local.vehicle.setTyresCanBurst(true);
    currComp = -1;
    currMod = -1;
    currWheelType = -1;
}

//#endregion



//#region Buy tuning

mp.events.add('lsCustom:buyTuning', () => {
    if (currPrice == 0)
        return;
    switch (currentComponent) {
        case "Color":
            mp.events.callRemote('lsCustom:buyColor', currentFirstColor.r, currentFirstColor.g, currentFirstColor.b, currentSecColor.r, currentSecColor.g, currentSecColor.b, currentMod1, currentMod2, currentPearl);
            break;
        case "Neon":
            mp.events.callRemote('lsCustom:buyNeon', currentNeon.r, currentNeon.g, currentNeon.b, currentNeon.a, 'neon', currentNeon2.r, currentNeon2.g, currentNeon2.b, currentNeon2.a);
            break;
        case "TyreSmokeColor":
            mp.events.callRemote('lsCustom:buyNeon', currentTyreSmokeColor.r, currentTyreSmokeColor.g, currentTyreSmokeColor.b, currentTyreSmokeColor.a, 'tyresmoke');
            break;
        default:
            mp.events.callRemote('lsCustom:buyModTuning', currComp, currMod, currWheelType);
            break;
    }
});



//#endregion


//#region Function

function GetNowSetMod(tuningName) {
    keys = Object.keys(vehicleComponents.Components);
    let nowSetMod = keys.find(item => item == tuningName);
    if ((nowSetMod === undefined || nowSetMod == null))
        return -1;
    else
        return vehicleComponents.Components[nowSetMod];
}

function CheckSolveMod(mod) {
    if (disableMods === undefined)
        return true;
    else {
        if (disableMods.fixmod.includes(mod))
            return false;
        else return true;
    }
}

//#endregion



mp.events.add('tuningUpd', function (components) {
    vehicleComponents = JSON.parse(components);
    switch (currentComponent) {
        case "Color":
            SetCurrentColor();
            break;
        case "Neon":
            SetCurrentNeon("Neon");
            SetCurrentNeon("Neon2");
            break;
        case "TyreSmokeColor":
            SetCurrentTyreSmokeColor();
            break;
        default:
            currComp = 0;
            currMod = 0;
            break;
    }
    SetPrice(0);
});


mp.events.add('lsCustom:exitTun', () => {
    ExitTuning();
});

function ExitTuning() {
    global.gui.setData('mouseMove/setEnebled', false);
    global.gui.close();
    mp.events.callRemote('lsCustom:exitTuning');
    global.customCamera.switchOff(0);
    opened = false;
    DropState();
    global.showCursor(false)
}

// mp.keys.bind(global.Keys.Key_F7, false, function () {
//     if (opened)
//         ExitTuning();
// });
mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        ExitTuning();
});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {//dialogCallback

mp.events.add("dthscrtimer",(time)=>{
    global.gui.setData('deathScreen/updateTime', time);
})

mp.events.add("dthscr",(medics)=>{
    global.gui.setData('deathScreen/showBtns', medics);
    global.gui.setData('deathScreen/setTime', 180);
    global.gui.close();
    setTimeout(()=>{ 
        global.showHud(false);
        mp.gui.chat.show(true);
        //global.showCursor(true);
    }, 500)
})

mp.events.add("dthscrclose",()=>{
    global.gui.close();
    mp.game.cam.doScreenFadeOut(0);
	global.customCamera.switchOff(0);
	setTimeout(()=>{
		mp.game.cam.doScreenFadeIn(1000);
	}, 1000)
    global.gui.setData('deathScreen/close');
    global.showCursor(false);
})

let sf;
let dethOn = false;
let cameraPos = new mp.Vector3();
let controlBegine = Date.now();

const deathDict = "dead";
const deathAnims = ["dead_a","dead_b","dead_c","dead_d","dead_e","dead_f","dead_g","dead_h"];
const playersInDeath = [];

function deathHandler(inDeath){
	try {
        if(dethOn === inDeath) return;
		if(inDeath == true){
			//sf = mp.game.graphics.requestScaleformMovie("mp_big_message_freemode");
			// while(!mp.game.graphics.hasScaleformMovieLoaded(sf))
			// 	mp.game.wait(0);
			controlBegine = Date.now() + 3000;
			// mp.game.graphics.pushScaleformMovieFunction(sf, "SHOW_SHARD_WASTED_MP_MESSAGE");
			// mp.game.graphics.pushScaleformMovieFunctionParameterString("~r~WASTED");
			// mp.game.graphics.pushScaleformMovieFunctionParameterString("");
			// mp.game.graphics.pushScaleformMovieFunctionParameterInt(5);
			// mp.game.graphics.popScaleformMovieFunctionVoid();
			cameraPos = mp.players.local.position;
			cameraPos.z += 1.2;			
			global.customCamera.setPos(cameraPos);
			global.customCamera.setPoint(mp.players.local.position);
			global.customCamera.switchOn(2500);
			mp.game.audio.playSoundFrontend(-1, "Bed", "WastedSounds", true);
			mp.game.graphics.setTimecycleModifier("MP_death_grade");
		}else{
			mp.game.cam.doScreenFadeOut(0);
			global.customCamera.switchOff(0);
			mp.game.graphics.setTimecycleModifier("default");
			setTimeout(()=>{
				mp.game.cam.doScreenFadeIn(1000);
			}, 500)
		}
		dethOn = inDeath;
		
	} catch (e) {
		mp.serverLog(`scaleform: ${e.message}`);
	}
}


mp.events.addDataHandler("InDeath", (entity, isDeath) => {
	if(isDeath){
		entity.currentDeathAnim = deathAnims[Math.floor(Math.random()*deathAnims.length)];
		playersInDeath.push(entity);
	}else{
		const index = playersInDeath.findIndex(p=>p === entity);
		if(index !== -1){
			if(playersInDeath[index] && playersInDeath[index].doesExist())
				playersInDeath[index].clearTasksImmediately();

			playersInDeath.splice(index, 1);
		}
	}
    if (entity === mp.players.local)
        deathHandler(isDeath);
});

mp.events.add('render', () => {   
	try{	
		if(dethOn){
			//mp.game.graphics.drawScaleformMovieFullscreen(sf, 255, 255, 255, 255, false);
			if(Date.now() > controlBegine){
				const dir = global.gameplayCam.getDirection();
				const point = new mp.Vector3(cameraPos.x + dir.x, cameraPos.y + dir.y, cameraPos.z + dir.z);	
				global.customCamera.setPoint(point);
				global.customCamera.update();
			}
		}		
	} catch (e) {
		mp.serverLog(`deathscreen.render: ${e.message}`);
	}
})

setInterval(() => {
	playersInDeath.forEach(player => {
		if(player && player.doesExist() && player.currentDeathAnim){
			if(!player.isPlayingAnim(deathDict, player.currentDeathAnim, 3))
				player.taskPlayAnim(deathDict, player.currentDeathAnim, 8.0, 8.0, -1, 1, 0, false, false, false);
		}
	});
}, 500);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

﻿__webpack_require__(66)
__webpack_require__(67)
__webpack_require__(69)

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {global.IsPlayingDM = false; // default param
global.IsFreezeDM = false;
global.soundVolumeDM = 0.15;
global.HasArenaData = false;
global.IsVote = false;
//global.IsSpectating = false;

function closeMenuIfOpened(){
    if (global.HasArenaData){
        global.gui.close();
        global.HasArenaData = false;
        mp.events.callRemote('ARENA:CLOSE')
    }
}

mp.keys.bind(global.Keys.Key_ESCAPE, false, closeMenuIfOpened)

//#region Событие приходит от VUE

mp.events.add('arena:showRating', () => {
    mp.events.callRemote('arenarating');
    global.gui.close();
})

// Добавляем игрока в команду
mp.events.add('ARENA::JOIN::LOBBY::VUE', (team, lobbyId) => {
    mp.events.callRemote("ARENA::JOIN::LOBBY::CLIENT", team, lobbyId);
})

// Создаем игру
mp.events.add('ARENA::ADD::LOBBY::VUE', (mode, map, maxPlayers, weapon, rounds, bet) => {
    mp.events.callRemote("ARENA::ADD::LOBBY::CLIENT", mode, map, maxPlayers, weapon, rounds, bet);
})

// Запускаем игру
mp.events.add('ARENA::START::LOBBY::VUE', (lobbyId) => {
    mp.events.callRemote("ARENA::START::LOBBY::CLIENT", lobbyId);
})

// Сетим игрока, чтобы работали функции кика и запуска игры у создателя
mp.events.add('ARENA::SET::PLAYER::NAME::VUE', () => {
    global.gui.setData("arenaMenu/setCurrentPlayer", JSON.stringify(global.localplayer.name));
    //mp.events.call('notify', 4, 9, global.localplayer.name, 15000);
})

// Игрок отсоединяется от лобби, в котором заплатил налоги
mp.events.add('ARENA::LOBBY::LEAVE::VUE', (lobbyId) => {
    mp.events.callRemote("ARENA::LOBBY::LEAVE::CLIENT", lobbyId);
    global.gui.setData("arenaMenu/setCurrentTab", JSON.stringify('MainTab'));
    // Меняем вкладку на главную
    //global.gui.setData("arenaMenu/setCurrentTab", 'MainTab');
})

// Игрок пытается присоединиться к лобби по ID
mp.events.add('ARENA::JOIN::LOBBY::BY::ID::VUE', (lobbyId) => {
    global.gui.setData("arenaMenu/setCurrentLobbieId", lobbyId);
})

// Игрок пытается кикнуть игрока
mp.events.add('ARENA::KICK::LOBBY::VUE', (playerName, lobbyId) => {
    mp.events.callRemote("ARENA::LOBBY::KICK::CLIENT", playerName, lobbyId);
})

//#endregion

//#region Событие приходит от Сервера

// Пользователь встал на кулшейп арены и нажал E
mp.events.add('ARENA::OPEN::GUI::SERVER', (battles) => {
    // if (battles != null) {
    //     global.gui.setData("arenaMenu/setData", battles);
    // }
    global.gui.setData("arenaMenu/setCurrentTab", JSON.stringify('MainTab')); 
    global.gui.setData("arenaMenu/setData", battles);
    global.HasArenaData = global.gui.openPage("ArenaMenu");
})

// Открываем у создателя лобби, которое он создал
mp.events.add('ARENA::OPEN::LOBBY::SERVER', (lobbyId) => {
    if (!global.HasArenaData) return;
    global.gui.setData("arenaMenu/setCurrentLobbieId", lobbyId);
})

mp.events.add('ARENA:DEACTIVATE::LOBBY::SERVER', (lobbyId) => {
    if (!global.HasArenaData) return;
    global.gui.setData("arenaMenu/setLobbyIsStarted", JSON.stringify({ lobbyId: lobbyId, value: true }));
})


// Добавляем созданную на сервере игру в UI
mp.events.add('ARENA::ADD::LOBBY::SERVER', (lobby) => {
    if (!global.HasArenaData) return;
    global.gui.setData("arenaMenu/createLobbiesItem", lobby);
    global.gui.setData("arenaMenu/setIsCreate", false);
})

// Удаляем начавшуюся на сервере игру в UI
mp.events.add('ARENA::REMOVE::LOBBY::SERVER', (roomId) => {
    if (!global.HasArenaData) return;
    global.gui.setData("arenaMenu/removeLobbie", roomId);
})

// Событие приходит со стороны сервера - добавляем игрока в команду
mp.events.add('ARENA::PLAYER::SWITCH::TEAM::SERVER', (player) => {
    if (!global.HasArenaData) return;
    global.gui.setData("arenaMenu/switchPlayerTeam", player);
})

// Событие приходит со стороны сервера - меняем команду игрока
mp.events.add('ARENA::JOIN::LOBBY::SERVER', (player) => {
    if (!global.HasArenaData) return;
    global.gui.setData("arenaMenu/joinLobbieTeam", player);
})

// Событие приходит со стороны сервера - игрок попал в матч. Устанавливаем переменные
mp.events.add('ARENA::CHANGE::STATE::SERVER', (isPlaying) => {
    global.IsPlayingDM = isPlaying;
})

// Закрываем главное окно на клиенте (события получаем из VUE - "Закрыть главное окно")
mp.events.add('ARENA::CLOSE::GUI::SERVER', closeMenuIfOpened)

// Закрываем главное окно на клиенте (события получаем из VUE - "Закрыть главное окно")
mp.events.add('ARENA::PLAYER::FREEZE::SERVER', (isFreeze) => {
    global.IsFreezeDM = isFreeze;
})

// Событие приходит со стороны сервера - воспроизвести звук
mp.events.add('ARENA::SOUND::PLAY::SERVER', (songName) => {
    global.gui.playSound(songName, global.soundVolumeDM, false);
})

// Событие приходит со стороны сервера - меняем громкость звука
mp.events.add('ARENA::SOUND::VOLUME::SERVER', (volume) => {
    volume /= 10
    global.soundVolumeDM = volume
})

// Событие приходит со стороны сервера - удаляем игрока из лобби
mp.events.add('ARENA::LOBBY::LEAVE::SERVER', (player) => {
    if (!global.HasArenaData) return;
    global.gui.setData("arenaMenu/removePlayerFromLobbie", player);
})

//#endregion

//#region Killstat HUD

global.IsKillogOppened = false;

// Начальная инициализация киллстат state
mp.events.add('ARENA::KILLOG::OPEN::SERVER', (currentDMPlayer, playersDM) => {
    global.gui.setData('hud/setKillstatCurrentUser', currentDMPlayer);
    global.gui.setData('hud/setKillstatItems', playersDM);
    global.gui.setData('hud/setKillstatType', JSON.stringify({value: ''}));
    global.gui.setData('hud/setIsKillStat', true); 
    //global.gui.setData('hud/startKillstatTimer', 600);
})

// Запуск таймера раунда
mp.events.add('ARENA::MAP::TIME::SET::SERVER', (timeLeftSeconds) => {
    global.gui.setData('hud/startKillstatTimer', timeLeftSeconds);
})

// Запуск/Завершение голосования
mp.events.add('ARENA::MAP::VOTE::SET::SERVER', (isVote) => {
    global.IsVote = isVote; // Устанавливаем переменную для голосования
    //global.gui.setData('hud/setIsKillStat', !isVote); // Закрываем/Открываем топ
    global.gui.setData('hud/startKillstatTimer', 20); // Голосование за смену карты - 20 секунд
    global.gui.setData('hud/setIsFullKillStat', isVote); // Открываем/Закрываем Общий стат
    global.gui.setData('hud/setIsVote', isVote); // Открываем/Закрываем карты для голосования
    global.IsFreezeDM = isVote; // Фризим игроков
    global.showCursor(isVote);
})

// Отключаем голосование, если игрок вышел во время голосования!
mp.events.add('ARENA::CHANGE::STATE::VOTE::SERVER', (isVote) => {
    global.IsVote = isVote;
    global.gui.setData('hud/setIsVote', isVote);
})

// Событие приходит со стороны сервера - идет смена карты
mp.events.add('ARENA::CHANGE::ROOM::ISVOTE::SERVER', (roomDTO) => {
    if (!global.HasArenaData) return;
    global.gui.setData("arenaMenu/setLobbieIsMapChange", roomDTO);
})

// Событие приходит со стороны сервера - обновляем данные, которые увидит пользователь, когда включится голосование!
mp.events.add('ARENA::CHANGE::VOTE::ITEMS::SERVER', (maps) => {
    if (!global.HasArenaData) return;
    global.gui.setData("hud/setVoteItems", maps);
})

// Пользователь выбирает карту
mp.events.add('ARENA::CHOOSE::MAP::NAME::VUE', (mapTitle) => {
    mp.events.call('ARENA::SOUND::PLAY::SERVER', 'choice2'); // Воспроизводим звук выбора
    mp.events.callRemote("ARENA::CHOOSE::MAP::NAME::CLIENT", mapTitle); // Передаем выбор на сервер
})

// Закрываем киллстат после выхода
mp.events.add('ARENA::KILLOG::CLOSE::SERVER', () => {
    global.gui.setData('hud/setIsKillStat', false); 
    global.gui.setData('hud/setIsFullKillStat', false);
    //global.gui.setData('hud/startKillstatTimer', 600);
})

// Обновить килл state
mp.events.add('ARENA::KILLOG::UPDATE::SERVER', (playersDM) => {
    global.gui.setData('hud/setKillstatItems', playersDM);
})

// Открыть, закрыть киллстат tab
mp.keys.bind(global.Keys.Key_TAB, false, function () {
    if (!global.IsPlayingDM || global.IsVote) return; 
    // Если не ДМ или идет голосование - блокируем
    if (!IsKillogOppened) {
        global.gui.setData('hud/setIsKillStat', false); 
        global.gui.setData('hud/setIsFullKillStat', true);
        global.showCursor(true);
        IsKillogOppened = true; 
    } else {
        global.gui.setData('hud/setIsKillStat', true); 
        global.gui.setData('hud/setIsFullKillStat', false);
        global.showCursor(false);
        IsKillogOppened = false;
    }
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (!global.IsPlayingDM || global.IsVote) return;
    if (IsKillogOppened) {
        global.gui.setData('hud/setIsKillStat', true);
        global.showCursor(false);
        global.gui.setData('hud/setIsFullKillStat', false);
        IsKillogOppened = false;
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const PlayersBlipTracker = __webpack_require__(68)
let tracker

mp.events.add({
    'arena:battle:start': (members, currentMember, startTimer) => {
        global.IsPlayingDM = true;
        
        mp.events.call('weapon:detachAll');
        
        global.gui.setData('hud/setKillstatCurrentUser', currentMember);
        global.gui.setData('hud/setKillstatType', JSON.stringify({value: ''}));
        global.gui.setData('hud/setKillstatItems', members);
        
        if (startTimer === true) global.gui.setData('hud/startKillstatTimer', 5 * 60);
        global.gui.setData('hud/setIsKillStat', true);
        global.gui.close();
        
        mp.events.add('playerDeath', deathHandler);
        
        global.gui.playSound('play', 0.2, false);
        mp.keys.bind(global.Keys.Key_I, false, leaveArena)
        
        const dto = { show: true, items: [{ key: 'I', text: 'cl:btlmngr:leave' }] }
        global.gui.setData('hud/setPromptData', JSON.stringify(dto));
    },
    
    'arena:battle:stop': () => {
        global.IsPlayingDM = false;
        
        mp.events.call('weapon:updateAttach');

        global.gui.setData('hud/setIsKillStat', false);
        global.gui.setData('hud/setIsFullKillStat', false);
        
        mp.events.call('notify', 2, 9, "arena_dm_28", 4000);
        
        mp.events.remove('playerDeath', deathHandler);
        global.gui.setData('hud/stopKillstatTimer');
        
        openResultWindow();

        const dto = { show: false, items: [] }
        global.gui.setData('hud/setPromptData', JSON.stringify(dto));
        mp.keys.unbind(global.Keys.Key_I, false, leaveArena)
        
        if (tracker) tracker.stop();
    },
    
    'arena:tracking:start': (teammateRemoteIds) => {
        tracker = new PlayersBlipTracker(JSON.parse(teammateRemoteIds));
        tracker.startTracking();
    },

    'arena:tracking:stop': () => {
        if (tracker) tracker.stop();
    },
    
    'arena:sr': (data) => {
        if (global.IsPlayingDM){
            mp.events.call('notify', 1, 9, "arena_dm_32", 4000);
            return;
        }
        resultWindowOpened = true;
        global.showCursor(true);
        global.gui.setData('hud/setKillstatItems', data);
        global.gui.setData('hud/setKillstatType', JSON.stringify({value: 'global_rating'}));
        global.gui.setData('hud/setIsFullKillStat', true);
    },
    
    'arena:endRound': (winnerTeam) => {
        if (winnerTeam === 0) global.gui.playSound('twin2', 0.2, false);
        else global.gui.playSound('ctwin1', 0.2, false);
    }
});

function leaveArena() {
    if (!global.chatActive)
        mp.events.callRemote('ab:leave')
}

function deathHandler(player, reason, killer) {
    if (!global.IsPlayingDM) return;
    if (!player || !killer) return;

    if (killer.name !== mp.players.local.name) return;

    //mp.game.graphics.startScreenEffect('SuccessNeutral', 300, false);
    
    global.gui.playSound('kill', 0.2, false);
}

let resultWindowOpened = false;
function closeResultWindow() {
    if (!resultWindowOpened) return;
    resultWindowOpened = false;
    global.showCursor(false);
    global.gui.setData('hud/setIsFullKillStat', false);
}
function openResultWindow() {
    resultWindowOpened = true;
    global.gui.setData('hud/setKillstatType', JSON.stringify({value: 'match_result'}));
    global.showCursor(true);
    global.gui.setData('hud/setIsFullKillStat', true);
}
mp.keys.bind(global.Keys.Key_ESCAPE, false, closeResultWindow);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 68 */
/***/ (function(module, exports) {

﻿class PlayersBlipTracker {
    constructor(playersRemoteIds) {
        this.blips = []
        this.remoteIds = playersRemoteIds
    }
    
    startTracking() {
        mp.players.forEach(p => {
            if (this.remoteIds.indexOf(p.remoteId) !== -1) {
                let blip = mp.blips.new(0, p.position, {dimension: mp.players.local.dimension})                
                this.blips.push(blip)
            }
        })
        this.timer = setInterval(() => {this.blipUpdateHandler()}, 100)
    }
   
    stop() {
        clearInterval(this.timer)
        setTimeout(() => {
            this.blips.forEach(b =>{
                if(b && b.doesExist()) b.destroy()
            })
            delete this
        }, 110)
    }
    
    blipUpdateHandler() {
        for (let i = 0; i < this.blips.length; i++) {
            if (mp.players.atRemoteId(this.remoteIds[i]))
                this.blips[i].setCoords(mp.players.atRemoteId(this.remoteIds[i]).getCoords(true))
        }
    }
}
module.exports = PlayersBlipTracker

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {﻿let currentCheckPoint;
let currentBlip;
let currentRaceStartTime;
let isRacingNow

mp.events.add({
    'race:start': (vehicleRemoteId) => {
        currentRaceStartTime = Date.now();
        //if (!mp.players.local.isInAnyVehicle(false)) return;
        
        for (let i = 0; i <= 4000; i++){
            if (mp.vehicles.atRemoteId(vehicleRemoteId).doesExist()) break;
        }
        let veh = mp.vehicles.atRemoteId(vehicleRemoteId);
        mp.players.local.setIntoVehicle(veh.handle, -1)
        
        mp.game.audio.playSoundFrontend(-1, "5s_To_Event_Start_Countdown", "UNIQ_FM_Events_Soundset", false);
        for (let i = 5; i >= 1; i--){
            mp.gui.notify(mp.gui.notifyType.INFO, `${i}`, 2000);
        }
        mp.gui.notify(mp.gui.notifyType.INFO, 'GO!', 2000);

        if (mp.players.local.vehicle)
            mp.players.local.vehicle.freezePosition(true);
        
        isRacingNow = true;
        
        setTimeout(() => {
            if (!mp.players.local.vehicle) return;
            mp.players.local.vehicle.freezePosition(false);
        }, 5000)
    },
    'render': () => {
        if (!isRacingNow) return;
        mp.game.controls.disableControlAction(2, 75, true);
    },
    'race:setCP': (point, nextPoint) => {
        const p = JSON.parse(point);
        createCheckPoint(6, new mp.Vector3(p.x, p.y, p.z + 1), JSON.parse(nextPoint), false)
        createBlip(127, JSON.parse(point), 1);
    },
    'race:setFinish': (point) => {
        createCheckPoint(4, JSON.parse(point), new mp.Vector3(0, 0, 0), true);
        createBlip(309, JSON.parse(point), 2);
    },
    'race:clear': clear,
    'race:openMenu': openMenu,
    'playerEnterCheckpoint': (checkpoint) => {
        //if (player !== mp.players.local) return;
        if (!checkpoint.hasOwnProperty('isRacing')) return;
        if (!mp.players.local.isInAnyVehicle(false)) return;
        
        if (checkpoint.isRacingFinish === true) {
            mp.events.callRemote('race:enteredFinish', ((Date.now() - currentRaceStartTime) / 1000))
            mp.game.audio.playSoundFrontend(-1, "Enter_Area", "DLC_Lowrider_Relay_Race_Sounds", false)
        }
        else {
            mp.events.callRemote('race:enteredCP')
            mp.game.audio.playSoundFrontend(-1, "Enter_Area", "DLC_Lowrider_Relay_Race_Sounds", false)
        }
    }
});

mp.keys.bind(global.Keys.Key_F, false, function () {
    if (!isRacingNow || !mp.players.local.isInAnyVehicle(false)) return;
    mp.events.callRemote('race:openleaveDialog')
});

function createCheckPoint(type, position, nextPos, isFinish) {
    if (currentCheckPoint) currentCheckPoint.destroy();
    currentCheckPoint = mp.checkpoints.new(type, position, 8, {
        direction: nextPos,
        dimension: mp.players.local.dimension
    });
    currentCheckPoint.isRacingFinish = isFinish;
    currentCheckPoint.isRacing = true;
}

function createBlip(type, position, color) {
    if (currentBlip) currentBlip.destroy();
    currentBlip = mp.blips.new(type, position, {
        color: color,
        shortRange: false,
        dimension: mp.players.local.dimension
    });
    // setBlipRoute
    mp.game.invoke('0x4F7D8A9BFB0B43E9', currentBlip.handle, true);
}

function clear() {
    if (currentBlip) currentBlip.destroy();
    if (currentCheckPoint) currentCheckPoint.destroy();
    currentBlip = null;
    currentCheckPoint = null;
    isRacingNow = false;
    mp.events.call('arena:tracking:stop')
}

let menuOpened = false;
function openMenu() {
    menuOpened = true;
    global.gui.openPage('Events')
}
mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (menuOpened) {
        global.gui.close();
        menuOpened = false;
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {//#region Server

mp.events.add('WORK::TECHNICIAN::DIAGNOSTIC::SERVER', () => {
    global.gui.openPage("WorkMiniGame");
})

mp.events.add('WORK::TECHNICIAN::DIAGNOSTIC::RESULT::VUE', (isSuccess) => {
    mp.events.callRemote("WORK::TECHNICIAN::DIAGNOSTIC::RESULT::CLIENT", isSuccess);
    global.gui.close();
})

//#endregion
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {//#region Server

global.isCarThiefWorker = false;
global.isCarUnlocked = false;
global.isCarStarted = false;
global.agent = null;
global.mapRadius = null;

// user entered to colshape and pressed E
mp.events.add('WORK::CARTHIEF::DIAGNOSTIC::SERVER', () => {
    global.gui.openPage("WorkMiniGame");
})

mp.events.add('WORK::CARTHIEF::DIAGNOSTIC::RESULT::VUE', (isSuccess) => {
    mp.events.callRemote("WORK::CARTHIEF::GAME::RESULT::CLIENT", isSuccess);
    global.gui.close();
})

mp.events.add('WORK::CARTHIEF::PED::CRETATE', (hash, x, y, z, angle, dimension) => {
    agent = mp.peds.newValid(hash, new mp.Vector3(x, y, z), angle, dimension);
})

mp.events.add('WORK::CARTHIEF::PED::DELETE', () => {
    if (agent !== null) agent.destroy();
})

mp.events.add("WORK::CARTHIEF::CREATE::RADIUS", (position, radius, color) => {
    // let position = JSON.parse(pos)
    
    mapRadius = mp.game.ui.addBlipForRadius(position.x, position.y, position.z, radius);
	mp.game.invoke('0x45FF974EEE1C8734', mapRadius, 175);
	mp.game.invoke('0x03D7FB09E75D6B7E', mapRadius, color);
})

mp.events.add("WORK::CARTHIEF::DELETE::RADIUS", () => {
    if (mapRadius == null) return;
    mp.game.invoke('0x45FF974EEE1C8734', mapRadius, 0);
    mp.game.invoke('0xFF0B610F6BE0D7AF');
})

// open veh
mp.keys.bind(global.Keys.Key_O, false, function () {
    if (!isCarThiefWorker || isCarUnlocked) return;
    mp.events.callRemote("WORK::CARTHIEF::GAME::START::CLIENT", 'O');
})

// start veh
mp.keys.bind(global.Keys.Key_I, false, function () {
    // Police try to start car?
    if (!mp.players.local.isInAnyVehicle(false)) return;

    let fraction = mp.players.local.getVariable('fraction');
    if (fraction == 7) {
        mp.events.callRemote("WORK::CARTHIEF::POLICEMAN::START::ENGINE");
        // Could break a car!
        return;
    }

    if (!isCarThiefWorker || !isCarUnlocked) return;
    mp.events.callRemote("WORK::CARTHIEF::GAME::START::CLIENT", 'I');
})


mp.events.add('WORK::CARTHIEF::CHANGE::STATE::SERVER', (isPlaying) => {
    global.isCarThiefWorker = isPlaying;
})

mp.events.add('WORK::CARTHIEF::CHANGE::LOCK::SERVER', (isLocked) => {
    global.isCarUnlocked = isLocked;
})

mp.events.add('CARTHIEF::TIME::SET::SERVER', (timeLeftSeconds) => {
    global.gui.setData('hud/startWorkTimer', timeLeftSeconds);
    //global.gui.setData('hud/setIsKillStat', true); 
    //global.gui.setData('hud/startKillstatTimer', timeLeftSeconds);
})

//#endregion

mp.events.add('GOTOMARK::SEND', () => {
    try {
        let blipIterator = mp.game.invoke('0x186E5D252FA50E7D');
        let totalBlipsFound = mp.game.invoke('0x9A3FF3DE163034E8');
        let FirstInfoId = mp.game.invoke('0x1BEDE233E6CD2A1F', blipIterator);
        let NextInfoId = mp.game.invoke('0x14F96AA50D6FBEA7', blipIterator);
        let coord = {x:0,y:0,z:0};
        for (let i = FirstInfoId, blipCount = 0; blipCount != totalBlipsFound; blipCount++, i = NextInfoId) {
            if (mp.game.invoke('0x1FC877464A04FC4F', i) == 8) {
                coord = mp.game.ui.getBlipInfoIdCoord(i);
                break;
            }
        }

        let vehicle = mp.players.local.vehicle;

        const position = vehicle.position;
        position.x = coord.x;
        position.y = coord.y;
        position.z = 150;
        vehicle.setCoordsNoOffset(position.x, position.y, position.z, false, false, false);
        vehicle.freezePosition(true);

        setTimeout(() => {
            vehicle.freezePosition(false);
            let position2 = mp.players.local.position;
            position2.z = mp.game.gameplay.getGroundZFor3dCoord(position2.x, position2.y, position2.z, 0.0, false) + 0.5;
            vehicle.setCoordsNoOffset(position2.x, position2.y, position2.z, false, false, false);
            vehicle.setRotation(0, 0, vehicle.getRotation(2).z, 2, true);
            vehicle.setOnGroundProperly();
            //mp.events.callRemote('GOTOMARK::GET', mp.players.local.vehicle.position.x, mp.players.local.vehicle.position.y, mp.players.local.vehicle.position.z, false);
        }, 1000);

        //mp.events.callRemote('GOTOMARK::GET', mp.players.local.vehicle.position.x, mp.players.local.vehicle.position.y, mp.players.local.vehicle.position.z, true);
       
	}catch(e){
        if(global.sendException)mp.serverLog(`Error in carThiefWork.GOTOMARK::SEND: ${e.name }\n${e.message}\n${e.stack}`);
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {global.isTransporteurWorker = false;
global.isFlyToCar = false;
global.createdVehicle = null;

mp.events.add('WORK::TRANSPORTEUR::CHANGE::STATE::SERVER', (stateName, boolValue) => {
    if (stateName == "isTransporteurWorker") {
        isTransporteurWorker = boolValue;
    }
    else if (stateName == "isFlyToCar") {
        isFlyToCar = boolValue;
    }
})

mp.events.add('WORK::TRANSPORTEUR::MAGNET::VEHICLE::SERVER', () => {
    setTimeout(() => {
        if(mp.players.local.vehicle)
            mp.players.local.vehicle.enableCargobobHook(1);
    }, 5000);
})

mp.events.add('WORK::TRANSPORTEUR::CREATE::VEHICLE::SERVER', (x, y, z, modelName, vehNumber) => {
    createdVehicle = mp.vehicles.new(mp.game.joaat(modelName), new mp.Vector3(x, y, z),
    {
        numberPlate: vehNumber,
        color: [[255, 0, 0],[255,0,0]]
    });
})

mp.events.add('WORK::TRANSPORTEUR::DELIVER::VEHICLE::SERVER', () => {
    if (!mp.players.local.vehicle || createdVehicle == null) return;
    if (mp.players.local.vehicle.isAttachedToCargobob(createdVehicle.handle)) {
        mp.events.callRemote("WORK::TRANSPORTEUR::DELIVER::END::CLIENT");
    }
})

mp.events.add('WORK::TRANSPORTEUR::DELETE::VEHICLE::SERVER', () => {
    if (createdVehicle == null) return;
    createdVehicle.destroy();
    createdVehicle = null;
})

mp.events.add('render', () => {
    if (!mp.players.local.vehicle || !global.isTransporteurWorker || !global.isFlyToCar || global.createdVehicle == null) return;
    
    try {
        if (mp.players.local.vehicle.isAttachedToCargobob(createdVehicle.handle)) {
            isFlyToCar = false;
            mp.events.callRemote("WORK::TRANSPORTEUR::DELIVER::START::CLIENT");
        }
    } catch (e) {
        //mp.gui.chat.push("CATCH WORKED");
        //mp.gui.chat.push(e.message);
    }
    
})

mp.events.add('WORK::TRANSPORTEUR::TIMER::SET::SERVER', (timeLeftSeconds) => {
    global.gui.setData('hud/startWorkTimer', timeLeftSeconds);
})

mp.events.add('WORK::TRANSPORTEUR::TIMER::STOP::SERVER', () => {
    global.gui.setData('hud/stopWorkTimer');
})
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(74)
__webpack_require__(75)
__webpack_require__(76)
__webpack_require__(77)
__webpack_require__(78)
__webpack_require__(79)
__webpack_require__(80)
__webpack_require__(81);


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {global.tattoos = JSON.parse(`{"torso":[{"Slots":[2],"Dictionary":"mpbusiness_overlays","MaleHash":"MP_Buis_M_Stomach_000","FemaleHash":"","Price":45000,"Name":"Refined Hustler"},{"Slots":[1],"Dictionary":"mpbusiness_overlays","MaleHash":"MP_Buis_M_Chest_000","FemaleHash":"","Price":24750,"Name":"Rich"},{"Slots":[0],"Dictionary":"mpbusiness_overlays","MaleHash":"MP_Buis_M_Chest_001","FemaleHash":"","Price":24750,"Name":"$$$"},{"Slots":[3,4],"Dictionary":"mpbusiness_overlays","MaleHash":"MP_Buis_M_Back_000","FemaleHash":"","Price":30000,"Name":"Makin' Paper"},{"Slots":[0,1],"Dictionary":"mpbusiness_overlays","MaleHash":"","FemaleHash":"MP_Buis_F_Chest_000","Price":24750,"Name":"High Roller"},{"Slots":[0,1],"Dictionary":"mpbusiness_overlays","MaleHash":"","FemaleHash":"MP_Buis_F_Chest_001","Price":36500,"Name":"Makin' Money"},{"Slots":[1],"Dictionary":"mpbusiness_overlays","MaleHash":"","FemaleHash":"MP_Buis_F_Chest_002","Price":24750,"Name":"Love Money"},{"Slots":[2],"Dictionary":"mpbusiness_overlays","MaleHash":"","FemaleHash":"MP_Buis_F_Stom_000","Price":45000,"Name":"Diamond Back"},{"Slots":[8],"Dictionary":"mpbusiness_overlays","MaleHash":"","FemaleHash":"MP_Buis_F_Stom_001","Price":30000,"Name":"Santo Capra Logo"},{"Slots":[8],"Dictionary":"mpbusiness_overlays","MaleHash":"","FemaleHash":"MP_Buis_F_Stom_002","Price":30000,"Name":"Money Bag"},{"Slots":[3,4],"Dictionary":"mpbusiness_overlays","MaleHash":"","FemaleHash":"MP_Buis_F_Back_000","Price":30000,"Name":"Respect"},{"Slots":[3,4],"Dictionary":"mpbusiness_overlays","MaleHash":"","FemaleHash":"MP_Buis_F_Back_001","Price":12500,"Name":"Gold Digger"},{"Slots":[3,4,5,6],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_005","FemaleHash":"MP_Xmas2_F_Tat_005","Price":93250,"Name":"Carp Outline"},{"Slots":[3,4,5,6],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_006","FemaleHash":"MP_Xmas2_F_Tat_006","Price":93250,"Name":"Carp Shaded"},{"Slots":[1],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_009","FemaleHash":"MP_Xmas2_F_Tat_009","Price":18250,"Name":"Time To Die"},{"Slots":[5,6],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_011","FemaleHash":"MP_Xmas2_F_Tat_011","Price":33250,"Name":"Roaring Tiger"},{"Slots":[7],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_013","FemaleHash":"MP_Xmas2_F_Tat_013","Price":30000,"Name":"Lizard"},{"Slots":[5,6],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_015","FemaleHash":"MP_Xmas2_F_Tat_015","Price":36500,"Name":"Japanese Warrior"},{"Slots":[0],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_016","FemaleHash":"MP_Xmas2_F_Tat_016","Price":24750,"Name":"Loose Lips Outline"},{"Slots":[0],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_017","FemaleHash":"MP_Xmas2_F_Tat_017","Price":24750,"Name":"Loose Lips Color"},{"Slots":[0,1],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_018","FemaleHash":"MP_Xmas2_F_Tat_018","Price":36500,"Name":"Royal Dagger Outline"},{"Slots":[0,1],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_019","FemaleHash":"MP_Xmas2_F_Tat_019","Price":36500,"Name":"Royal Dagger Color"},{"Slots":[2,8],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_028","FemaleHash":"MP_Xmas2_F_Tat_028","Price":30000,"Name":"Executioner"},{"Slots":[5,6],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_000_M","FemaleHash":"MP_Gunrunning_Tattoo_000_F","Price":30000,"Name":"Bullet Proof"},{"Slots":[3,4],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_001_M","FemaleHash":"MP_Gunrunning_Tattoo_001_F","Price":30000,"Name":"Crossed Weapons"},{"Slots":[5,6],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_009_M","FemaleHash":"MP_Gunrunning_Tattoo_009_F","Price":33250,"Name":"Butterfly Knife"},{"Slots":[2],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_010_M","FemaleHash":"MP_Gunrunning_Tattoo_010_F","Price":45000,"Name":"Cash Money"},{"Slots":[1],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_012_M","FemaleHash":"MP_Gunrunning_Tattoo_012_F","Price":24750,"Name":"Dollar Daggers"},{"Slots":[5,6],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_013_M","FemaleHash":"MP_Gunrunning_Tattoo_013_F","Price":33250,"Name":"Wolf Insignia"},{"Slots":[5,6],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_014_M","FemaleHash":"MP_Gunrunning_Tattoo_014_F","Price":33250,"Name":"Backstabber"},{"Slots":[0,1],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_017_M","FemaleHash":"MP_Gunrunning_Tattoo_017_F","Price":36500,"Name":"Dog Tags"},{"Slots":[3,4],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_018_M","FemaleHash":"MP_Gunrunning_Tattoo_018_F","Price":33250,"Name":"Dual Wield Skull"},{"Slots":[5,6],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_019_M","FemaleHash":"MP_Gunrunning_Tattoo_019_F","Price":33250,"Name":"Pistol Wings"},{"Slots":[0,1],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_020_M","FemaleHash":"MP_Gunrunning_Tattoo_020_F","Price":36500,"Name":"Crowned Weapons"},{"Slots":[5],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_022_M","FemaleHash":"MP_Gunrunning_Tattoo_022_F","Price":24750,"Name":"Explosive Heart"},{"Slots":[0,1],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_028_M","FemaleHash":"MP_Gunrunning_Tattoo_028_F","Price":36500,"Name":"Micro SMG Chain"},{"Slots":[2],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_029_M","FemaleHash":"MP_Gunrunning_Tattoo_029_F","Price":45000,"Name":"Win Some Lose Some"},{"Slots":[5,6],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_000","FemaleHash":"FM_Hip_F_Tat_000","Price":33250,"Name":"Crossed Arrows"},{"Slots":[1],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_002","FemaleHash":"FM_Hip_F_Tat_002","Price":24750,"Name":"Chemistry"},{"Slots":[7],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_006","FemaleHash":"FM_Hip_F_Tat_006","Price":3000,"Name":"Feather Birds"},{"Slots":[5,6],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_011","FemaleHash":"FM_Hip_F_Tat_011","Price":33250,"Name":"Infinity"},{"Slots":[5,6],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_012","FemaleHash":"FM_Hip_F_Tat_012","Price":33250,"Name":"Antlers"},{"Slots":[0,1],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_013","FemaleHash":"FM_Hip_F_Tat_013","Price":36500,"Name":"Boombox"},{"Slots":[6],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_024","FemaleHash":"FM_Hip_F_Tat_024","Price":24750,"Name":"Pyramid"},{"Slots":[5],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_025","FemaleHash":"FM_Hip_F_Tat_025","Price":24750,"Name":"Watch Your Step"},{"Slots":[2,8],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_029","FemaleHash":"FM_Hip_F_Tat_029","Price":54750,"Name":"Sad"},{"Slots":[3,4],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_030","FemaleHash":"FM_Hip_F_Tat_030","Price":33250,"Name":"Shark Fin"},{"Slots":[5,6],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_031","FemaleHash":"FM_Hip_F_Tat_031","Price":33250,"Name":"Skateboard"},{"Slots":[6],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_032","FemaleHash":"FM_Hip_F_Tat_032","Price":24750,"Name":"Paper Plane"},{"Slots":[0,1],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_033","FemaleHash":"FM_Hip_F_Tat_033","Price":36500,"Name":"Stag"},{"Slots":[2,8],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_035","FemaleHash":"FM_Hip_F_Tat_035","Price":54750,"Name":"Sewn Heart"},{"Slots":[3],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_041","FemaleHash":"FM_Hip_F_Tat_041","Price":30000,"Name":"Tooth"},{"Slots":[5,6],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_046","FemaleHash":"FM_Hip_F_Tat_046","Price":33250,"Name":"Triangles"},{"Slots":[1],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_047","FemaleHash":"FM_Hip_F_Tat_047","Price":24750,"Name":"Cassette"},{"Slots":[5,6],"Dictionary":"mpimportexport_overlays","MaleHash":"MP_MP_ImportExport_Tat_000_M","FemaleHash":"MP_MP_ImportExport_Tat_000_F","Price":33250,"Name":"Block Back"},{"Slots":[5,6],"Dictionary":"mpimportexport_overlays","MaleHash":"MP_MP_ImportExport_Tat_001_M","FemaleHash":"MP_MP_ImportExport_Tat_001_F","Price":33250,"Name":"Power Plant"},{"Slots":[5,6],"Dictionary":"mpimportexport_overlays","MaleHash":"MP_MP_ImportExport_Tat_002_M","FemaleHash":"MP_MP_ImportExport_Tat_002_F","Price":33250,"Name":"Tuned to Death"},{"Slots":[5,6],"Dictionary":"mpimportexport_overlays","MaleHash":"MP_MP_ImportExport_Tat_009_M","FemaleHash":"MP_MP_ImportExport_Tat_009_F","Price":11250,"Name":"Serpents of Destruction"},{"Slots":[5,6],"Dictionary":"mpimportexport_overlays","MaleHash":"MP_MP_ImportExport_Tat_010_M","FemaleHash":"MP_MP_ImportExport_Tat_010_F","Price":33250,"Name":"Take the Wheel"},{"Slots":[5,6],"Dictionary":"mpimportexport_overlays","MaleHash":"MP_MP_ImportExport_Tat_011_M","FemaleHash":"MP_MP_ImportExport_Tat_011_F","Price":33250,"Name":"Talk Shit Get Hit"},{"Slots":[0],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_001_M","FemaleHash":"MP_LR_Tat_001_F","Price":24750,"Name":"King Fight"},{"Slots":[0,1],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_002_M","FemaleHash":"MP_LR_Tat_002_F","Price":36500,"Name":"Holy Mary"},{"Slots":[7],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_004_M","FemaleHash":"MP_LR_Tat_004_F","Price":30000,"Name":"Gun Mic"},{"Slots":[6],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_009_M","FemaleHash":"MP_LR_Tat_009_F","Price":8750,"Name":"Amazon"},{"Slots":[3,4,5,6],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_010_M","FemaleHash":"MP_LR_Tat_010_F","Price":18000,"Name":"Bad Angel"},{"Slots":[1],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_013_M","FemaleHash":"MP_LR_Tat_013_F","Price":24750,"Name":"Love Gamble"},{"Slots":[3,4,5,6],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_014_M","FemaleHash":"MP_LR_Tat_014_F","Price":18250,"Name":"Love is Blind"},{"Slots":[3,4,5,6],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_021_M","FemaleHash":"MP_LR_Tat_021_F","Price":15500,"Name":"Sad Angel"},{"Slots":[1],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_026_M","FemaleHash":"MP_LR_Tat_026_F","Price":24750,"Name":"Royal Takeover"},{"Slots":[1],"Dictionary":"mpairraces_overlays","MaleHash":"MP_Airraces_Tattoo_000_M","FemaleHash":"MP_Airraces_Tattoo_000_F","Price":24750,"Name":"Turbulence"},{"Slots":[5,6],"Dictionary":"mpairraces_overlays","MaleHash":"MP_Airraces_Tattoo_001_M","FemaleHash":"MP_Airraces_Tattoo_001_F","Price":33250,"Name":"Pilot Skull"},{"Slots":[5,6],"Dictionary":"mpairraces_overlays","MaleHash":"MP_Airraces_Tattoo_002_M","FemaleHash":"MP_Airraces_Tattoo_002_F","Price":33250,"Name":"Winged Bombshell"},{"Slots":[3,4,5,6],"Dictionary":"mpairraces_overlays","MaleHash":"MP_Airraces_Tattoo_004_M","FemaleHash":"MP_Airraces_Tattoo_004_F","Price":15000,"Name":"Balloon Pioneer"},{"Slots":[5,6],"Dictionary":"mpairraces_overlays","MaleHash":"MP_Airraces_Tattoo_005_M","FemaleHash":"MP_Airraces_Tattoo_005_F","Price":33250,"Name":"Parachute Belle"},{"Slots":[2],"Dictionary":"mpairraces_overlays","MaleHash":"MP_Airraces_Tattoo_006_M","FemaleHash":"MP_Airraces_Tattoo_006_F","Price":45000,"Name":"Bombs Away"},{"Slots":[5,6],"Dictionary":"mpairraces_overlays","MaleHash":"MP_Airraces_Tattoo_007_M","FemaleHash":"MP_Airraces_Tattoo_007_F","Price":33250,"Name":"Eagle Eyes"},{"Slots":[0],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_000_M","FemaleHash":"MP_MP_Biker_Tat_000_F","Price":24750,"Name":"Demon Rider"},{"Slots":[0,1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_001_M","FemaleHash":"MP_MP_Biker_Tat_001_F","Price":36500,"Name":"Both Barrels"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_003_M","FemaleHash":"MP_MP_Biker_Tat_003_F","Price":45000,"Name":"Web Rider"},{"Slots":[0,1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_005_M","FemaleHash":"MP_MP_Biker_Tat_005_F","Price":36500,"Name":"Made In America"},{"Slots":[3,4],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_006_M","FemaleHash":"MP_MP_Biker_Tat_006_F","Price":30000,"Name":"Chopper Freedom"},{"Slots":[5,6],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_008_M","FemaleHash":"MP_MP_Biker_Tat_008_F","Price":33250,"Name":"Freedom Wheels"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_010_M","FemaleHash":"MP_MP_Biker_Tat_010_F","Price":9250,"Name":"Skull Of Taurus"},{"Slots":[5,6],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_011_M","FemaleHash":"MP_MP_Biker_Tat_011_F","Price":33250,"Name":"R.I.P. My Brothers"},{"Slots":[0,1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_013_M","FemaleHash":"MP_MP_Biker_Tat_013_F","Price":45000,"Name":"Demon Crossbones"},{"Slots":[5,6],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_017_M","FemaleHash":"MP_MP_Biker_Tat_017_F","Price":33250,"Name":"Clawed Beast"},{"Slots":[1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_018_M","FemaleHash":"MP_MP_Biker_Tat_018_F","Price":27000,"Name":"Skeletal Chopper"},{"Slots":[0,1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_019_M","FemaleHash":"MP_MP_Biker_Tat_019_F","Price":39750,"Name":"Gruesome Talons"},{"Slots":[5,6],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_021_M","FemaleHash":"MP_MP_Biker_Tat_021_F","Price":33250,"Name":"Flaming Reaper"},{"Slots":[0,1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_023_M","FemaleHash":"MP_MP_Biker_Tat_023_F","Price":39750,"Name":"Western MC"},{"Slots":[0,1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_026_M","FemaleHash":"MP_MP_Biker_Tat_026_F","Price":39250,"Name":"American Dream"},{"Slots":[0],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_029_M","FemaleHash":"MP_MP_Biker_Tat_029_F","Price":27250,"Name":"Bone Wrench"},{"Slots":[5,6],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_030_M","FemaleHash":"MP_MP_Biker_Tat_030_F","Price":33500,"Name":"Brothers For Life"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_031_M","FemaleHash":"MP_MP_Biker_Tat_031_F","Price":45000,"Name":"Gear Head"},{"Slots":[0],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_032_M","FemaleHash":"MP_MP_Biker_Tat_032_F","Price":27000,"Name":"Western Eagle"},{"Slots":[1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_034_M","FemaleHash":"MP_MP_Biker_Tat_034_F","Price":27250,"Name":"Brotherhood of Bikes"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_039_M","FemaleHash":"MP_MP_Biker_Tat_039_F","Price":42250,"Name":"Gas Guzzler"},{"Slots":[0,1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_041_M","FemaleHash":"MP_MP_Biker_Tat_041_F","Price":36500,"Name":"No Regrets"},{"Slots":[3,4],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_043_M","FemaleHash":"MP_MP_Biker_Tat_043_F","Price":30500,"Name":"Ride Forever"},{"Slots":[0,1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_050_M","FemaleHash":"MP_MP_Biker_Tat_050_F","Price":45000,"Name":"Unforgiven"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_052_M","FemaleHash":"MP_MP_Biker_Tat_052_F","Price":36500,"Name":"Biker Mount"},{"Slots":[1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_058_M","FemaleHash":"MP_MP_Biker_Tat_058_F","Price":24750,"Name":"Reaper Vulture"},{"Slots":[1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_059_M","FemaleHash":"MP_MP_Biker_Tat_059_F","Price":24750,"Name":"Faggio"},{"Slots":[0],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_060_M","FemaleHash":"MP_MP_Biker_Tat_060_F","Price":27250,"Name":"We Are The Mods!"},{"Slots":[3,4,5,6],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_000_M","FemaleHash":"MP_LR_Tat_000_F","Price":15500,"Name":"SA Assault"},{"Slots":[3,4,5,6],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_008_M","FemaleHash":"MP_LR_Tat_008_F","Price":15250,"Name":"Love the Game"},{"Slots":[7],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_011_M","FemaleHash":"MP_LR_Tat_011_F","Price":30500,"Name":"Lady Liberty"},{"Slots":[0],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_012_M","FemaleHash":"MP_LR_Tat_012_F","Price":24750,"Name":"Royal Kiss"},{"Slots":[2],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_016_M","FemaleHash":"MP_LR_Tat_016_F","Price":9100,"Name":"Two Face"},{"Slots":[1],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_019_M","FemaleHash":"MP_LR_Tat_019_F","Price":24750,"Name":"Death Behind"},{"Slots":[3,4,5,6],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_031_M","FemaleHash":"MP_LR_Tat_031_F","Price":15250,"Name":"Dead Pretty"},{"Slots":[3,4,5,6],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_032_M","FemaleHash":"MP_LR_Tat_032_F","Price":15600,"Name":"Reign Over"},{"Slots":[2],"Dictionary":"mpluxe_overlays","MaleHash":"MP_LUXE_TAT_003_M","FemaleHash":"MP_LUXE_TAT_003_F","Price":39750,"Name":"Abstract Skull"},{"Slots":[1],"Dictionary":"mpluxe_overlays","MaleHash":"MP_LUXE_TAT_007_M","FemaleHash":"MP_LUXE_TAT_007_F","Price":27250,"Name":"Eye of the Griffin"},{"Slots":[1],"Dictionary":"mpluxe_overlays","MaleHash":"MP_LUXE_TAT_008_M","FemaleHash":"MP_LUXE_TAT_008_F","Price":27000,"Name":"Flying Eye"},{"Slots":[0,1],"Dictionary":"mpluxe_overlays","MaleHash":"MP_LUXE_TAT_014_M","FemaleHash":"MP_LUXE_TAT_014_F","Price":6600,"Name":"Ancient Queen"},{"Slots":[0],"Dictionary":"mpluxe_overlays","MaleHash":"MP_LUXE_TAT_015_M","FemaleHash":"MP_LUXE_TAT_015_F","Price":24750,"Name":"Smoking Sisters"},{"Slots":[3,4,5,6],"Dictionary":"mpluxe_overlays","MaleHash":"MP_LUXE_TAT_024_M","FemaleHash":"MP_LUXE_TAT_024_F","Price":93250,"Name":"Feather Mural"},{"Slots":[0],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_002_M","FemaleHash":"MP_LUXE_TAT_002_F","Price":24750,"Name":"The Howler"},{"Slots":[0,1,2,8],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_012_M","FemaleHash":"MP_LUXE_TAT_012_F","Price":21000,"Name":"Geometric Galaxy"},{"Slots":[3,4,5,6],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_022_M","FemaleHash":"MP_LUXE_TAT_022_F","Price":18000,"Name":"Cloaked Angel"},{"Slots":[0],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_025_M","FemaleHash":"MP_LUXE_TAT_025_F","Price":24750,"Name":"Reaper Sway"},{"Slots":[1],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_027_M","FemaleHash":"MP_LUXE_TAT_027_F","Price":27000,"Name":"Cobra Dawn"},{"Slots":[3,4,5,6],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_029_M","FemaleHash":"MP_LUXE_TAT_029_F","Price":15500,"Name":"Geometric Design T"},{"Slots":[1],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_000_M","FemaleHash":"MP_Smuggler_Tattoo_000_F","Price":3000,"Name":"Bless The Dead"},{"Slots":[2],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_002_M","FemaleHash":"MP_Smuggler_Tattoo_002_F","Price":45000,"Name":"Dead Lies"},{"Slots":[5,6],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_003_M","FemaleHash":"MP_Smuggler_Tattoo_003_F","Price":30000,"Name":"Give Nothing Back"},{"Slots":[5,6],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_006_M","FemaleHash":"MP_Smuggler_Tattoo_006_F","Price":30500,"Name":"Never Surrender"},{"Slots":[0,1],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_007_M","FemaleHash":"MP_Smuggler_Tattoo_007_F","Price":36500,"Name":"No Honor"},{"Slots":[5,6],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_009_M","FemaleHash":"MP_Smuggler_Tattoo_009_F","Price":30000,"Name":"Tall Ship Conflict"},{"Slots":[2],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_010_M","FemaleHash":"MP_Smuggler_Tattoo_010_F","Price":45000,"Name":"See You In Hell"},{"Slots":[5,6],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_013_M","FemaleHash":"MP_Smuggler_Tattoo_013_F","Price":30500,"Name":"Torn Wings"},{"Slots":[2],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_015_M","FemaleHash":"MP_Smuggler_Tattoo_015_F","Price":35000,"Name":"Jolly Roger"},{"Slots":[5,6],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_016_M","FemaleHash":"MP_Smuggler_Tattoo_016_F","Price":30000,"Name":"Skull Compass"},{"Slots":[3,4,5,6],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_017_M","FemaleHash":"MP_Smuggler_Tattoo_017_F","Price":15500,"Name":"Framed Tall Ship"},{"Slots":[3,4,5,6],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_018_M","FemaleHash":"MP_Smuggler_Tattoo_018_F","Price":18000,"Name":"Finders Keepers"},{"Slots":[0],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_019_M","FemaleHash":"MP_Smuggler_Tattoo_019_F","Price":24750,"Name":"Lost At Sea"},{"Slots":[0,1],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_021_M","FemaleHash":"MP_Smuggler_Tattoo_021_F","Price":30000,"Name":"Dead Tales"},{"Slots":[5],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_022_M","FemaleHash":"MP_Smuggler_Tattoo_022_F","Price":24750,"Name":"X Marks The Spot"},{"Slots":[3,4,5,6],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_024_M","FemaleHash":"MP_Smuggler_Tattoo_024_F","Price":15500,"Name":"Pirate Captain"},{"Slots":[3,4,5,6],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_025_M","FemaleHash":"MP_Smuggler_Tattoo_025_F","Price":15500,"Name":"Claimed By The Beast"},{"Slots":[0,1],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_011_M","FemaleHash":"MP_MP_Stunt_Tat_011_F","Price":30000,"Name":"Wheels of Death"},{"Slots":[7],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_012_M","FemaleHash":"MP_MP_Stunt_Tat_012_F","Price":30000,"Name":"Punk Biker"},{"Slots":[2],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_014_M","FemaleHash":"MP_MP_Stunt_Tat_014_F","Price":9100,"Name":"Bat Cat of Spades"},{"Slots":[0],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_018_M","FemaleHash":"MP_MP_Stunt_Tat_018_F","Price":24750,"Name":"Vintage Bully"},{"Slots":[1],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_019_M","FemaleHash":"MP_MP_Stunt_Tat_019_F","Price":24750,"Name":"Engine Heart"},{"Slots":[3,4,5,6],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_024_M","FemaleHash":"MP_MP_Stunt_Tat_024_F","Price":15000,"Name":"Road Kill"},{"Slots":[5,6],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_026_M","FemaleHash":"MP_MP_Stunt_Tat_026_F","Price":30000,"Name":"Winged Wheel"},{"Slots":[0],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_027_M","FemaleHash":"MP_MP_Stunt_Tat_027_F","Price":24750,"Name":"Punk Road Hog"},{"Slots":[3,4],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_029_M","FemaleHash":"MP_MP_Stunt_Tat_029_F","Price":30000,"Name":"Majestic Finish"},{"Slots":[6],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_030_M","FemaleHash":"MP_MP_Stunt_Tat_030_F","Price":30500,"Name":"Man's Ruin"},{"Slots":[1],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_033_M","FemaleHash":"MP_MP_Stunt_Tat_033_F","Price":24750,"Name":"Sugar Skull Trucker"},{"Slots":[3,4,5,6],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_034_M","FemaleHash":"MP_MP_Stunt_Tat_034_F","Price":18250,"Name":"Feather Road Kill"},{"Slots":[5],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_037_M","FemaleHash":"MP_MP_Stunt_Tat_037_F","Price":24750,"Name":"Big Grills"},{"Slots":[5,6],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_040_M","FemaleHash":"MP_MP_Stunt_Tat_040_F","Price":30000,"Name":"Monkey Chopper"},{"Slots":[5,6],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_041_M","FemaleHash":"MP_MP_Stunt_Tat_041_F","Price":30000,"Name":"Brapp"},{"Slots":[0,1],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_044_M","FemaleHash":"MP_MP_Stunt_Tat_044_F","Price":30000,"Name":"Ram Skull"},{"Slots":[5,6],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_046_M","FemaleHash":"MP_MP_Stunt_Tat_046_F","Price":30500,"Name":"Full Throttle"},{"Slots":[5,6],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_048_M","FemaleHash":"MP_MP_Stunt_Tat_048_F","Price":30500,"Name":"Racing Doll"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_003","FemaleHash":"FM_Tat_Award_F_003","Price":27000,"Name":"Blackjack"},{"Slots":[2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_004","FemaleHash":"FM_Tat_Award_F_004","Price":9250,"Name":"Hustler"},{"Slots":[5,6],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_005","FemaleHash":"FM_Tat_Award_F_005","Price":30500,"Name":"Angel"},{"Slots":[3,4],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_008","FemaleHash":"FM_Tat_Award_F_008","Price":24400,"Name":"Los Santos Customs"},{"Slots":[1],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_011","FemaleHash":"FM_Tat_Award_F_011","Price":27000,"Name":"Blank Scroll"},{"Slots":[1],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_012","FemaleHash":"FM_Tat_Award_F_012","Price":27000,"Name":"Embellished Scroll"},{"Slots":[1],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_013","FemaleHash":"FM_Tat_Award_F_013","Price":27000,"Name":"Seven Deadly Sins"},{"Slots":[3,4],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_014","FemaleHash":"FM_Tat_Award_F_014","Price":40500,"Name":"Trust No One"},{"Slots":[5,6],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_016","FemaleHash":"FM_Tat_Award_F_016","Price":30000,"Name":"Clown"},{"Slots":[5,6],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_017","FemaleHash":"FM_Tat_Award_F_017","Price":30500,"Name":"Clown and Gun"},{"Slots":[5,6],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_018","FemaleHash":"FM_Tat_Award_F_018","Price":30000,"Name":"Clown Dual Wield"},{"Slots":[6,6],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_019","FemaleHash":"FM_Tat_Award_F_019","Price":30500,"Name":"Clown Dual Wield Dollars"},{"Slots":[2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_004","FemaleHash":"FM_Tat_F_004","Price":9100,"Name":"Faith T"},{"Slots":[3,4,5,6],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_009","FemaleHash":"FM_Tat_F_009","Price":18000,"Name":"Skull on the Cross"},{"Slots":[1],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_010","FemaleHash":"FM_Tat_F_010","Price":27000,"Name":"LS Flames"},{"Slots":[5],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_011","FemaleHash":"FM_Tat_F_011","Price":30500,"Name":"LS Script"},{"Slots":[2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_012","FemaleHash":"FM_Tat_F_012","Price":45000,"Name":"Los Santos Bills"},{"Slots":[6],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_013","FemaleHash":"FM_Tat_F_013","Price":30500,"Name":"Eagle and Serpent"},{"Slots":[3,4,5,6],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_016","FemaleHash":"FM_Tat_F_016","Price":15750,"Name":"Evil Clown"},{"Slots":[3,4,5,6],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_019","FemaleHash":"FM_Tat_F_019","Price":15500,"Name":"The Wages of Sin"},{"Slots":[3,4,5,6],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_020","FemaleHash":"FM_Tat_F_020","Price":15000,"Name":"Dragon T"},{"Slots":[0,1,2,8],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_024","FemaleHash":"FM_Tat_F_024","Price":24750,"Name":"Flaming Cross"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_025","FemaleHash":"FM_Tat_F_025","Price":27000,"Name":"LS Bold"},{"Slots":[2,8],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_029","FemaleHash":"FM_Tat_F_029","Price":12100,"Name":"Trinity Knot"},{"Slots":[5,6],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_030","FemaleHash":"FM_Tat_F_030","Price":30500,"Name":"Lucky Celtic Dogs"},{"Slots":[1],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_034","FemaleHash":"FM_Tat_F_034","Price":3700,"Name":"Flaming Shamrock"},{"Slots":[2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_036","FemaleHash":"FM_Tat_F_036","Price":45000,"Name":"Way of the Gun"},{"Slots":[0,1],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_044","FemaleHash":"FM_Tat_F_044","Price":40500,"Name":"Stone Cross"},{"Slots":[3,4,5,6],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_045","FemaleHash":"FM_Tat_F_045","Price":15500,"Name":"Skulls and Rose"}],"head":[{"Slots":[0],"Dictionary":"mpbusiness_overlays","MaleHash":"MP_Buis_M_Neck_000","FemaleHash":"","Price":24750,"Name":"Cash is King"},{"Slots":[1],"Dictionary":"mpbusiness_overlays","MaleHash":"MP_Buis_M_Neck_001","FemaleHash":"","Price":24750,"Name":"Bold Dollar Sign"},{"Slots":[2],"Dictionary":"mpbusiness_overlays","MaleHash":"MP_Buis_M_Neck_002","FemaleHash":"","Price":24750,"Name":"Script Dollar Sign"},{"Slots":[3],"Dictionary":"mpbusiness_overlays","MaleHash":"MP_Buis_M_Neck_003","FemaleHash":"","Price":24750,"Name":"$100"},{"Slots":[1],"Dictionary":"mpbusiness_overlays","MaleHash":"","FemaleHash":"MP_Buis_F_Neck_000","Price":24750,"Name":"Val-de-Grace Logo"},{"Slots":[2],"Dictionary":"mpbusiness_overlays","MaleHash":"","FemaleHash":"MP_Buis_F_Neck_001","Price":24750,"Name":"Money Rose"},{"Slots":[2],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_007","FemaleHash":"MP_Xmas2_F_Tat_007","Price":24750,"Name":"Los Muertos"},{"Slots":[1],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_025","FemaleHash":"MP_Xmas2_F_Tat_025","Price":24750,"Name":"Snake Head Color"},{"Slots":[2],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_029","FemaleHash":"MP_Xmas2_F_Tat_029","Price":24750,"Name":"Beautiful Death"},{"Slots":[1],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_003_M","FemaleHash":"MP_Gunrunning_Tattoo_003_F","Price":24750,"Name":"Lock & Load"},{"Slots":[2],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_005","FemaleHash":"FM_Hip_F_Tat_005","Price":24750,"Name":"Beautiful Eye"},{"Slots":[1],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_021","FemaleHash":"FM_Hip_F_Tat_021","Price":24750,"Name":"Geo Fox"},{"Slots":[5],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_009_M","FemaleHash":"MP_MP_Biker_Tat_009_F","Price":24750,"Name":"Morbid Arachnid"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_038_M","FemaleHash":"MP_MP_Biker_Tat_038_F","Price":24750,"Name":"FTW"},{"Slots":[1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_051_M","FemaleHash":"MP_MP_Biker_Tat_051_F","Price":24750,"Name":"Western Stylized"},{"Slots":[1],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_011_M","FemaleHash":"MP_Smuggler_Tattoo_011_F","Price":24750,"Name":"Sinner"},{"Slots":[2],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_012_M","FemaleHash":"MP_Smuggler_Tattoo_012_F","Price":24750,"Name":"Thief"},{"Slots":[1],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_000_M","FemaleHash":"MP_MP_Stunt_Tat_000_F","Price":24750,"Name":"Stunt Skull"},{"Slots":[5],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_004_M","FemaleHash":"MP_MP_Stunt_Tat_004_F","Price":3000,"Name":"Scorpion"},{"Slots":[2],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_006_M","FemaleHash":"MP_MP_Stunt_Tat_006_F","Price":3000,"Name":"Toxic Spider"},{"Slots":[2],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_017_M","FemaleHash":"MP_MP_Stunt_Tat_017_F","Price":3000,"Name":"Bat Wheel"},{"Slots":[2],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_042_M","FemaleHash":"MP_MP_Stunt_Tat_042_F","Price":24750,"Name":"Flaming Quad"}],"leftarm":[{"Slots":[1],"Dictionary":"mpbusiness_overlays","MaleHash":"MP_Buis_M_LeftArm_000","FemaleHash":"","Price":27250,"Name":"$100 Bill"},{"Slots":[1,2],"Dictionary":"mpbusiness_overlays","MaleHash":"MP_Buis_M_LeftArm_001","FemaleHash":"","Price":9900,"Name":"All-Seeing Eye"},{"Slots":[1],"Dictionary":"mpbusiness_overlays","MaleHash":"","FemaleHash":"MP_Buis_F_LArm_000","Price":27000,"Name":"Greed is Good"},{"Slots":[1],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_000","FemaleHash":"MP_Xmas2_F_Tat_000","Price":27250,"Name":"Skull Rider"},{"Slots":[1],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_010","FemaleHash":"MP_Xmas2_F_Tat_010","Price":27000,"Name":"Electric Snake"},{"Slots":[2],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_012","FemaleHash":"MP_Xmas2_F_Tat_012","Price":27500,"Name":"8 Ball Skull"},{"Slots":[0],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_020","FemaleHash":"MP_Xmas2_F_Tat_020","Price":18500,"Name":"Time's Up Outline"},{"Slots":[0],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_021","FemaleHash":"MP_Xmas2_F_Tat_021","Price":18500,"Name":"Time's Up Color"},{"Slots":[0],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_004_M","FemaleHash":"MP_Gunrunning_Tattoo_004_F","Price":3350,"Name":"Sidearm"},{"Slots":[2],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_008_M","FemaleHash":"MP_Gunrunning_Tattoo_008_F","Price":24900,"Name":"Bandolier"},{"Slots":[1,2],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_015_M","FemaleHash":"MP_Gunrunning_Tattoo_015_F","Price":9800,"Name":"Spiked Skull"},{"Slots":[2],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_016_M","FemaleHash":"MP_Gunrunning_Tattoo_016_F","Price":27000,"Name":"Blood Money"},{"Slots":[1],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_025_M","FemaleHash":"MP_Gunrunning_Tattoo_025_F","Price":27000,"Name":"Praying Skull"},{"Slots":[2],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_027_M","FemaleHash":"MP_Gunrunning_Tattoo_027_F","Price":27250,"Name":"Serpent Revolver"},{"Slots":[1],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_003","FemaleHash":"FM_Hip_F_Tat_003","Price":27000,"Name":"Diamond Sparkle"},{"Slots":[0],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_007","FemaleHash":"FM_Hip_F_Tat_007","Price":18500,"Name":"Bricks"},{"Slots":[2],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_015","FemaleHash":"FM_Hip_F_Tat_015","Price":27000,"Name":"Mustache"},{"Slots":[1],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_016","FemaleHash":"FM_Hip_F_Tat_016","Price":27000,"Name":"Lightning Bolt"},{"Slots":[2],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_026","FemaleHash":"FM_Hip_F_Tat_026","Price":27000,"Name":"Pizza"},{"Slots":[1],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_027","FemaleHash":"FM_Hip_F_Tat_027","Price":30000,"Name":"Padlock"},{"Slots":[1],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_028","FemaleHash":"FM_Hip_F_Tat_028","Price":30000,"Name":"Thorny Rose"},{"Slots":[0],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_034","FemaleHash":"FM_Hip_F_Tat_034","Price":18250,"Name":"Stop"},{"Slots":[2],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_037","FemaleHash":"FM_Hip_F_Tat_037","Price":27250,"Name":"Sunrise"},{"Slots":[1,2],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_039","FemaleHash":"FM_Hip_F_Tat_039","Price":12500,"Name":"Sleeve"},{"Slots":[2],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_043","FemaleHash":"FM_Hip_F_Tat_043","Price":27250,"Name":"Triangle White"},{"Slots":[0],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_048","FemaleHash":"FM_Hip_F_Tat_048","Price":18500,"Name":"Peace"},{"Slots":[1,2],"Dictionary":"mpimportexport_overlays","MaleHash":"MP_MP_ImportExport_Tat_004_M","FemaleHash":"MP_MP_ImportExport_Tat_004_F","Price":9800,"Name":"Piston Sleeve"},{"Slots":[1,2],"Dictionary":"mpimportexport_overlays","MaleHash":"MP_MP_ImportExport_Tat_008_M","FemaleHash":"MP_MP_ImportExport_Tat_008_F","Price":54750,"Name":"Scarlett"},{"Slots":[1],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_005_M","FemaleHash":"MP_LR_Tat_005_F","Price":24900,"Name":"No Evil"},{"Slots":[2],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_027_M","FemaleHash":"MP_LR_Tat_027_F","Price":27000,"Name":"Los Santos Life"},{"Slots":[1,2],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_033_M","FemaleHash":"MP_LR_Tat_033_F","Price":9800,"Name":"City Sorrow"},{"Slots":[1,2],"Dictionary":"mpairraces_overlays","MaleHash":"MP_Airraces_Tattoo_003_M","FemaleHash":"MP_Airraces_Tattoo_003_F","Price":45700,"Name":"Toxic Trails"},{"Slots":[1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_012_M","FemaleHash":"MP_MP_Biker_Tat_012_F","Price":27250,"Name":"Urban Stunter"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_016_M","FemaleHash":"MP_MP_Biker_Tat_016_F","Price":30000,"Name":"Macabre Tree"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_020_M","FemaleHash":"MP_MP_Biker_Tat_020_F","Price":27000,"Name":"Cranial Rose"},{"Slots":[1,2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_024_M","FemaleHash":"MP_MP_Biker_Tat_024_F","Price":9800,"Name":"Live to Ride"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_025_M","FemaleHash":"MP_MP_Biker_Tat_025_F","Price":15500,"Name":"Good Luck"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_035_M","FemaleHash":"MP_MP_Biker_Tat_035_F","Price":3600,"Name":"Chain Fist"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_045_M","FemaleHash":"MP_MP_Biker_Tat_045_F","Price":27000,"Name":"Ride Hard Die Fast"},{"Slots":[1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_053_M","FemaleHash":"MP_MP_Biker_Tat_053_F","Price":27250,"Name":"Muffler Helmet"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_055_M","FemaleHash":"MP_MP_Biker_Tat_055_F","Price":27000,"Name":"Poison Scorpion"},{"Slots":[2],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_006_M","FemaleHash":"MP_LR_Tat_006_F","Price":27000,"Name":"Love Hustle"},{"Slots":[1,2],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_018_M","FemaleHash":"MP_LR_Tat_018_F","Price":27700,"Name":"Skeleton Party"},{"Slots":[1],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_022_M","FemaleHash":"MP_LR_Tat_022_F","Price":27250,"Name":"My Crazy Life"},{"Slots":[2],"Dictionary":"mpluxe_overlays","MaleHash":"MP_LUXE_TAT_020_M","FemaleHash":"MP_LUXE_TAT_020_F","Price":27000,"Name":"Archangel & Mary"},{"Slots":[1],"Dictionary":"mpluxe_overlays","MaleHash":"MP_LUXE_TAT_021_M","FemaleHash":"MP_LUXE_TAT_021_F","Price":27000,"Name":"Gabriel"},{"Slots":[1],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_005_M","FemaleHash":"MP_LUXE_TAT_005_F","Price":27000,"Name":"Fatal Dagger"},{"Slots":[1],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_016_M","FemaleHash":"MP_LUXE_TAT_016_F","Price":24900,"Name":"Egyptian Mural"},{"Slots":[2],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_018_M","FemaleHash":"MP_LUXE_TAT_018_F","Price":24900,"Name":"Divine Goddess"},{"Slots":[1],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_028_M","FemaleHash":"MP_LUXE_TAT_028_F","Price":9250,"Name":"Python Skull"},{"Slots":[1,2],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_031_M","FemaleHash":"MP_LUXE_TAT_031_F","Price":9800,"Name":"Geometric Design LA"},{"Slots":[1],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_004_M","FemaleHash":"MP_Smuggler_Tattoo_004_F","Price":27000,"Name":"Honor"},{"Slots":[1],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_008_M","FemaleHash":"MP_Smuggler_Tattoo_008_F","Price":27250,"Name":"Horrors Of The Deep"},{"Slots":[1,2],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_014_M","FemaleHash":"MP_Smuggler_Tattoo_014_F","Price":9800,"Name":"Mermaid's Curse"},{"Slots":[2],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_001_M","FemaleHash":"MP_MP_Stunt_Tat_001_F","Price":24750,"Name":"8 Eyed Skull"},{"Slots":[0],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_002_M","FemaleHash":"MP_MP_Stunt_Tat_002_F","Price":18250,"Name":"Big Cat"},{"Slots":[2],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_008_M","FemaleHash":"MP_MP_Stunt_Tat_008_F","Price":27000,"Name":"Moonlight Ride"},{"Slots":[1],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_022_M","FemaleHash":"MP_MP_Stunt_Tat_022_F","Price":27000,"Name":"Piston Head"},{"Slots":[1,2],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_023_M","FemaleHash":"MP_MP_Stunt_Tat_023_F","Price":54750,"Name":"Tanked"},{"Slots":[1],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_035_M","FemaleHash":"MP_MP_Stunt_Tat_035_F","Price":27000,"Name":"Stuntman's End"},{"Slots":[2],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_039_M","FemaleHash":"MP_MP_Stunt_Tat_039_F","Price":27250,"Name":"Kaboom"},{"Slots":[2],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_043_M","FemaleHash":"MP_MP_Stunt_Tat_043_F","Price":27000,"Name":"Engine Arm"},{"Slots":[1],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_001","FemaleHash":"FM_Tat_Award_F_001","Price":27250,"Name":"Burning Heart"},{"Slots":[2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_007","FemaleHash":"FM_Tat_Award_F_007","Price":27250,"Name":"Racing Blonde"},{"Slots":[2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_015","FemaleHash":"FM_Tat_Award_F_015","Price":27250,"Name":"Racing Brunette"},{"Slots":[1,2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_005","FemaleHash":"FM_Tat_F_005","Price":24900,"Name":"Serpents"},{"Slots":[1,2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_006","FemaleHash":"FM_Tat_F_006","Price":9800,"Name":"Oriental Mural"},{"Slots":[2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_015","FemaleHash":"FM_Tat_F_015","Price":27000,"Name":"Zodiac Skull"},{"Slots":[2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_031","FemaleHash":"FM_Tat_F_031","Price":27250,"Name":"Lady M"},{"Slots":[2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_041","FemaleHash":"FM_Tat_F_041","Price":27000,"Name":"Dope Skull"}],"rightarm":[{"Slots":[2],"Dictionary":"mpbusiness_overlays","MaleHash":"MP_Buis_M_RightArm_000","FemaleHash":"","Price":24900,"Name":"Dollar Skull"},{"Slots":[1],"Dictionary":"mpbusiness_overlays","MaleHash":"MP_Buis_M_RightArm_001","FemaleHash":"","Price":24900,"Name":"Green"},{"Slots":[1],"Dictionary":"mpbusiness_overlays","MaleHash":"","FemaleHash":"MP_Buis_F_RArm_000","Price":27000,"Name":"Dollar Sign"},{"Slots":[2],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_003","FemaleHash":"MP_Xmas2_F_Tat_003","Price":24900,"Name":"Snake Outline"},{"Slots":[2],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_004","FemaleHash":"MP_Xmas2_F_Tat_004","Price":27250,"Name":"Snake Shaded"},{"Slots":[1],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_008","FemaleHash":"MP_Xmas2_F_Tat_008","Price":27000,"Name":"Death Before Dishonor"},{"Slots":[1],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_022","FemaleHash":"MP_Xmas2_F_Tat_022","Price":3000,"Name":"You're Next Outline"},{"Slots":[1],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_023","FemaleHash":"MP_Xmas2_F_Tat_023","Price":27000,"Name":"You're Next Color"},{"Slots":[0],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_026","FemaleHash":"MP_Xmas2_F_Tat_026","Price":18250,"Name":"Fuck Luck Outline"},{"Slots":[0],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_027","FemaleHash":"MP_Xmas2_F_Tat_027","Price":18250,"Name":"Fuck Luck Color"},{"Slots":[0],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_002_M","FemaleHash":"MP_Gunrunning_Tattoo_002_F","Price":18250,"Name":"Grenade"},{"Slots":[2],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_021_M","FemaleHash":"MP_Gunrunning_Tattoo_021_F","Price":24900,"Name":"Have a Nice Day"},{"Slots":[1],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_024_M","FemaleHash":"MP_Gunrunning_Tattoo_024_F","Price":27250,"Name":"Combat Reaper"},{"Slots":[2],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_001","FemaleHash":"FM_Hip_F_Tat_001","Price":27000,"Name":"Single Arrow"},{"Slots":[1],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_004","FemaleHash":"FM_Hip_F_Tat_004","Price":27000,"Name":"Bone"},{"Slots":[2],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_008","FemaleHash":"FM_Hip_F_Tat_008","Price":27000,"Name":"Cube"},{"Slots":[0],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_010","FemaleHash":"FM_Hip_F_Tat_010","Price":18250,"Name":"Horseshoe"},{"Slots":[1],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_014","FemaleHash":"FM_Hip_F_Tat_014","Price":18000,"Name":"Spray Can"},{"Slots":[1],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_017","FemaleHash":"FM_Hip_F_Tat_017","Price":18250,"Name":"Eye Triangle"},{"Slots":[1],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_018","FemaleHash":"FM_Hip_F_Tat_018","Price":27000,"Name":"Origami"},{"Slots":[1,2],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_020","FemaleHash":"FM_Hip_F_Tat_020","Price":9800,"Name":"Geo Pattern"},{"Slots":[1],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_022","FemaleHash":"FM_Hip_F_Tat_022","Price":27000,"Name":"Pencil"},{"Slots":[0],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_023","FemaleHash":"FM_Hip_F_Tat_023","Price":18500,"Name":"Smiley"},{"Slots":[2],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_036","FemaleHash":"FM_Hip_F_Tat_036","Price":27000,"Name":"Shapes"},{"Slots":[2],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_044","FemaleHash":"FM_Hip_F_Tat_044","Price":27000,"Name":"Triangle Black"},{"Slots":[1],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_045","FemaleHash":"FM_Hip_F_Tat_045","Price":27250,"Name":"Mesh Band"},{"Slots":[1,2],"Dictionary":"mpimportexport_overlays","MaleHash":"MP_MP_ImportExport_Tat_003_M","FemaleHash":"MP_MP_ImportExport_Tat_003_F","Price":9800,"Name":"Mechanical Sleeve"},{"Slots":[1,2],"Dictionary":"mpimportexport_overlays","MaleHash":"MP_MP_ImportExport_Tat_005_M","FemaleHash":"MP_MP_ImportExport_Tat_005_F","Price":9850,"Name":"Dialed In"},{"Slots":[1,2],"Dictionary":"mpimportexport_overlays","MaleHash":"MP_MP_ImportExport_Tat_006_M","FemaleHash":"MP_MP_ImportExport_Tat_006_F","Price":9800,"Name":"Engulfed Block"},{"Slots":[1,2],"Dictionary":"mpimportexport_overlays","MaleHash":"MP_MP_ImportExport_Tat_007_M","FemaleHash":"MP_MP_ImportExport_Tat_007_F","Price":9800,"Name":"Drive Forever"},{"Slots":[1],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_015_M","FemaleHash":"MP_LR_Tat_015_F","Price":3980,"Name":"Seductress"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_007_M","FemaleHash":"MP_MP_Biker_Tat_007_F","Price":27000,"Name":"Swooping Eagle"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_014_M","FemaleHash":"MP_MP_Biker_Tat_014_F","Price":27250,"Name":"Lady Mortality"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_033_M","FemaleHash":"MP_MP_Biker_Tat_033_F","Price":3980,"Name":"Eagle Emblem"},{"Slots":[1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_042_M","FemaleHash":"MP_MP_Biker_Tat_042_F","Price":27250,"Name":"Grim Rider"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_046_M","FemaleHash":"MP_MP_Biker_Tat_046_F","Price":27000,"Name":"Skull Chain"},{"Slots":[1,2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_047_M","FemaleHash":"MP_MP_Biker_Tat_047_F","Price":9800,"Name":"Snake Bike"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_049_M","FemaleHash":"MP_MP_Biker_Tat_049_F","Price":27000,"Name":"These Colors Don't Run"},{"Slots":[2],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_054_M","FemaleHash":"MP_MP_Biker_Tat_054_F","Price":27250,"Name":"Mum"},{"Slots":[1],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_003_M","FemaleHash":"MP_LR_Tat_003_F","Price":24900,"Name":"Lady Vamp"},{"Slots":[2],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_028_M","FemaleHash":"MP_LR_Tat_028_F","Price":27250,"Name":"Loving Los Muertos"},{"Slots":[1],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_035_M","FemaleHash":"MP_LR_Tat_035_F","Price":27250,"Name":"Black Tears"},{"Slots":[1],"Dictionary":"mpluxe_overlays","MaleHash":"MP_LUXE_TAT_004_M","FemaleHash":"MP_LUXE_TAT_004_F","Price":27000,"Name":"Floral Raven"},{"Slots":[1,2],"Dictionary":"mpluxe_overlays","MaleHash":"MP_LUXE_TAT_013_M","FemaleHash":"MP_LUXE_TAT_013_F","Price":9800,"Name":"Mermaid Harpist"},{"Slots":[2],"Dictionary":"mpluxe_overlays","MaleHash":"MP_LUXE_TAT_019_M","FemaleHash":"MP_LUXE_TAT_019_F","Price":24900,"Name":"Geisha Bloom"},{"Slots":[1],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_010_M","FemaleHash":"MP_LUXE_TAT_010_F","Price":24900,"Name":"Intrometric"},{"Slots":[2],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_017_M","FemaleHash":"MP_LUXE_TAT_017_F","Price":24750,"Name":"Heavenly Deity"},{"Slots":[2],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_026_M","FemaleHash":"MP_LUXE_TAT_026_F","Price":27000,"Name":"Floral Print"},{"Slots":[1,2],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_030_M","FemaleHash":"MP_LUXE_TAT_030_F","Price":9800,"Name":"Geometric Design RA"},{"Slots":[1],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_001_M","FemaleHash":"MP_Smuggler_Tattoo_001_F","Price":27000,"Name":"Crackshot"},{"Slots":[2],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_005_M","FemaleHash":"MP_Smuggler_Tattoo_005_F","Price":3980,"Name":"Mutiny"},{"Slots":[1,2],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_023_M","FemaleHash":"MP_Smuggler_Tattoo_023_F","Price":9800,"Name":"Stylized Kraken"},{"Slots":[1],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_003_M","FemaleHash":"MP_MP_Stunt_Tat_003_F","Price":24750,"Name":"Poison Wrench"},{"Slots":[2],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_009_M","FemaleHash":"MP_MP_Stunt_Tat_009_F","Price":27250,"Name":"Arachnid of Death"},{"Slots":[2],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_010_M","FemaleHash":"MP_MP_Stunt_Tat_010_F","Price":24900,"Name":"Grave Vulture"},{"Slots":[1,2],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_016_M","FemaleHash":"MP_MP_Stunt_Tat_016_F","Price":9800,"Name":"Coffin Racer"},{"Slots":[0],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_036_M","FemaleHash":"MP_MP_Stunt_Tat_036_F","Price":18250,"Name":"Biker Stallion"},{"Slots":[1],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_038_M","FemaleHash":"MP_MP_Stunt_Tat_038_F","Price":27250,"Name":"One Down Five Up"},{"Slots":[1,2],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_049_M","FemaleHash":"MP_MP_Stunt_Tat_049_F","Price":9800,"Name":"Seductive Mechanic"},{"Slots":[2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_002","FemaleHash":"FM_Tat_Award_F_002","Price":27250,"Name":"Grim Reaper Smoking Gun"},{"Slots":[1],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_010","FemaleHash":"FM_Tat_Award_F_010","Price":27000,"Name":"Ride or Die RA"},{"Slots":[1,2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_000","FemaleHash":"FM_Tat_F_000","Price":9800,"Name":"Brotherhood"},{"Slots":[1,2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_001","FemaleHash":"FM_Tat_F_001","Price":9800,"Name":"Dragons"},{"Slots":[2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_003","FemaleHash":"FM_Tat_F_003","Price":27250,"Name":"Dragons and Skull"},{"Slots":[1,2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_014","FemaleHash":"FM_Tat_F_014","Price":9800,"Name":"Flower Mural"},{"Slots":[1,2,0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_018","FemaleHash":"FM_Tat_F_018","Price":12500,"Name":"Serpent Skull RA"},{"Slots":[2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_027","FemaleHash":"FM_Tat_F_027","Price":27250,"Name":"Virgin Mary"},{"Slots":[1],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_028","FemaleHash":"FM_Tat_F_028","Price":27250,"Name":"Mermaid"},{"Slots":[1],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_038","FemaleHash":"FM_Tat_F_038","Price":27000,"Name":"Dagger"},{"Slots":[2],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_047","FemaleHash":"FM_Tat_F_047","Price":27000,"Name":"Lion"}],"leftleg":[{"Slots":[0],"Dictionary":"mpbusiness_overlays","MaleHash":"","FemaleHash":"MP_Buis_F_LLeg_000","Price":27250,"Name":"Single"},{"Slots":[0],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_001","FemaleHash":"MP_Xmas2_F_Tat_001","Price":27250,"Name":"Spider Outline"},{"Slots":[0],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_002","FemaleHash":"MP_Xmas2_F_Tat_002","Price":27250,"Name":"Spider Color"},{"Slots":[0],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_005_M","FemaleHash":"MP_Gunrunning_Tattoo_005_F","Price":27250,"Name":"Patriot Skull"},{"Slots":[1],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_007_M","FemaleHash":"MP_Gunrunning_Tattoo_007_F","Price":27000,"Name":"Stylized Tiger"},{"Slots":[0,1],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_011_M","FemaleHash":"MP_Gunrunning_Tattoo_011_F","Price":9500,"Name":"Death Skull"},{"Slots":[1],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_023_M","FemaleHash":"MP_Gunrunning_Tattoo_023_F","Price":27250,"Name":"Rose Revolver"},{"Slots":[0],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_009","FemaleHash":"FM_Hip_F_Tat_009","Price":27000,"Name":"Squares"},{"Slots":[0],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_019","FemaleHash":"FM_Hip_F_Tat_019","Price":27250,"Name":"Charm"},{"Slots":[0],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_040","FemaleHash":"FM_Hip_F_Tat_040","Price":27000,"Name":"Black Anchor"},{"Slots":[0],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_007_M","FemaleHash":"MP_LR_Tat_007_F","Price":27250,"Name":"LS Serpent"},{"Slots":[0],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_020_M","FemaleHash":"MP_LR_Tat_020_F","Price":27000,"Name":"Presidents"},{"Slots":[0],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_002_M","FemaleHash":"MP_MP_Biker_Tat_002_F","Price":27250,"Name":"Rose Tribute"},{"Slots":[0],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_015_M","FemaleHash":"MP_MP_Biker_Tat_015_F","Price":27000,"Name":"Ride or Die LL"},{"Slots":[0],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_027_M","FemaleHash":"MP_MP_Biker_Tat_027_F","Price":27250,"Name":"Bad Luck"},{"Slots":[0],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_036_M","FemaleHash":"MP_MP_Biker_Tat_036_F","Price":27250,"Name":"Engulfed Skull"},{"Slots":[1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_037_M","FemaleHash":"MP_MP_Biker_Tat_037_F","Price":27250,"Name":"Scorched Soul"},{"Slots":[1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_044_M","FemaleHash":"MP_MP_Biker_Tat_044_F","Price":27250,"Name":"Ride Free"},{"Slots":[1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_056_M","FemaleHash":"MP_MP_Biker_Tat_056_F","Price":27250,"Name":"Bone Cruiser"},{"Slots":[0,1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_057_M","FemaleHash":"MP_MP_Biker_Tat_057_F","Price":9500,"Name":"Laughing Skull"},{"Slots":[0],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_029_M","FemaleHash":"MP_LR_Tat_029_F","Price":27250,"Name":"Death Us Do Part"},{"Slots":[0],"Dictionary":"mpluxe_overlays","MaleHash":"MP_LUXE_TAT_000_M","FemaleHash":"MP_LUXE_TAT_000_F","Price":27250,"Name":"Serpent of Death"},{"Slots":[0],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_011_M","FemaleHash":"MP_LUXE_TAT_011_F","Price":27250,"Name":"Cross of Roses"},{"Slots":[0],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_007_M","FemaleHash":"MP_MP_Stunt_Tat_007_F","Price":24900,"Name":"Dagger Devil"},{"Slots":[1],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_013_M","FemaleHash":"MP_MP_Stunt_Tat_013_F","Price":27000,"Name":"Dirt Track Hero"},{"Slots":[0,1],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_021_M","FemaleHash":"MP_MP_Stunt_Tat_021_F","Price":9500,"Name":"Golden Cobra"},{"Slots":[0],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_028_M","FemaleHash":"MP_MP_Stunt_Tat_028_F","Price":27000,"Name":"Quad Goblin"},{"Slots":[0],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_031_M","FemaleHash":"MP_MP_Stunt_Tat_031_F","Price":27250,"Name":"Stunt Jesus"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_009","FemaleHash":"FM_Tat_Award_F_009","Price":27250,"Name":"Dragon and Dagger"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_002","FemaleHash":"FM_Tat_F_002","Price":27250,"Name":"Melting Skull"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_008","FemaleHash":"FM_Tat_F_008","Price":27250,"Name":"Dragon Mural"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_021","FemaleHash":"FM_Tat_F_021","Price":27250,"Name":"Serpent Skull LL"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_023","FemaleHash":"FM_Tat_F_023","Price":27250,"Name":"Hottie"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_026","FemaleHash":"FM_Tat_F_026","Price":27250,"Name":"Smoking Dagger"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_032","FemaleHash":"FM_Tat_F_032","Price":27250,"Name":"Faith LL"},{"Slots":[0,1],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_033","FemaleHash":"FM_Tat_F_033","Price":9500,"Name":"Chinese Dragon"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_035","FemaleHash":"FM_Tat_F_035","Price":27000,"Name":"Dragon LL"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_037","FemaleHash":"FM_Tat_F_037","Price":27250,"Name":"Grim Reaper"}],"rightleg":[{"Slots":[0],"Dictionary":"mpbusiness_overlays","MaleHash":"","FemaleHash":"MP_Buis_F_RLeg_000","Price":27000,"Name":"Diamond Crown"},{"Slots":[0],"Dictionary":"mpchristmas2_overlays","MaleHash":"MP_Xmas2_M_Tat_014","FemaleHash":"MP_Xmas2_F_Tat_014","Price":24750,"Name":"Floral Dagger"},{"Slots":[0],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_006_M","FemaleHash":"MP_Gunrunning_Tattoo_006_F","Price":27000,"Name":"Combat Skull"},{"Slots":[0],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_026_M","FemaleHash":"MP_Gunrunning_Tattoo_026_F","Price":27250,"Name":"Restless Skull"},{"Slots":[1],"Dictionary":"mpgunrunning_overlays","MaleHash":"MP_Gunrunning_Tattoo_030_M","FemaleHash":"MP_Gunrunning_Tattoo_030_F","Price":52850,"Name":"Pistol Ace"},{"Slots":[0],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_038","FemaleHash":"FM_Hip_F_Tat_038","Price":27000,"Name":"Grub"},{"Slots":[0],"Dictionary":"mphipster_overlays","MaleHash":"FM_Hip_M_Tat_042","FemaleHash":"FM_Hip_F_Tat_042","Price":27000,"Name":"Sparkplug"},{"Slots":[0],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_017_M","FemaleHash":"MP_LR_Tat_017_F","Price":27000,"Name":"Ink Me"},{"Slots":[0],"Dictionary":"mplowrider_overlays","MaleHash":"MP_LR_Tat_023_M","FemaleHash":"MP_LR_Tat_023_F","Price":27250,"Name":"Dance of Hearts"},{"Slots":[0,1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_004_M","FemaleHash":"MP_MP_Biker_Tat_004_F","Price":9500,"Name":"Dragon's Fury"},{"Slots":[0],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_022_M","FemaleHash":"MP_MP_Biker_Tat_022_F","Price":27000,"Name":"Western Insignia"},{"Slots":[1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_028_M","FemaleHash":"MP_MP_Biker_Tat_028_F","Price":27000,"Name":"Dusk Rider"},{"Slots":[1],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_040_M","FemaleHash":"MP_MP_Biker_Tat_040_F","Price":27250,"Name":"American Made"},{"Slots":[0],"Dictionary":"mpbiker_overlays","MaleHash":"MP_MP_Biker_Tat_048_M","FemaleHash":"MP_MP_Biker_Tat_048_F","Price":27000,"Name":"STFU"},{"Slots":[0],"Dictionary":"mplowrider2_overlays","MaleHash":"MP_LR_Tat_030_M","FemaleHash":"MP_LR_Tat_030_F","Price":27250,"Name":"San Andreas Prayer"},{"Slots":[0],"Dictionary":"mpluxe_overlays","MaleHash":"MP_LUXE_TAT_001_M","FemaleHash":"MP_LUXE_TAT_001_F","Price":27250,"Name":"Elaborate Los Muertos"},{"Slots":[0],"Dictionary":"mpluxe2_overlays","MaleHash":"MP_LUXE_TAT_023_M","FemaleHash":"MP_LUXE_TAT_023_F","Price":24750,"Name":"Starmetric"},{"Slots":[0,1],"Dictionary":"mpsmuggler_overlays","MaleHash":"MP_Smuggler_Tattoo_020_M","FemaleHash":"MP_Smuggler_Tattoo_020_F","Price":9500,"Name":"Homeward Bound"},{"Slots":[0],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_005_M","FemaleHash":"MP_MP_Stunt_Tat_005_F","Price":27250,"Name":"Demon Spark Plug"},{"Slots":[1],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_015_M","FemaleHash":"MP_MP_Stunt_Tat_015_F","Price":27250,"Name":"Praying Gloves"},{"Slots":[0],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_020_M","FemaleHash":"MP_MP_Stunt_Tat_020_F","Price":27250,"Name":"Piston Angel"},{"Slots":[1],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_025_M","FemaleHash":"MP_MP_Stunt_Tat_025_F","Price":27000,"Name":"Speed Freak"},{"Slots":[0],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_032_M","FemaleHash":"MP_MP_Stunt_Tat_032_F","Price":24750,"Name":"Wheelie Mouse"},{"Slots":[0,1],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_045_M","FemaleHash":"MP_MP_Stunt_Tat_045_F","Price":9500,"Name":"Severed Hand"},{"Slots":[0],"Dictionary":"mpstunt_overlays","MaleHash":"MP_MP_Stunt_Tat_047_M","FemaleHash":"MP_MP_Stunt_Tat_047_F","Price":24750,"Name":"Brake Knife"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_Award_M_006","FemaleHash":"FM_Tat_Award_F_006","Price":27250,"Name":"Skull and Sword"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_007","FemaleHash":"FM_Tat_F_007","Price":27250,"Name":"The Warrior"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_017","FemaleHash":"FM_Tat_F_017","Price":27000,"Name":"Tribal"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_022","FemaleHash":"FM_Tat_F_022","Price":27250,"Name":"Fiery Dragon"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_039","FemaleHash":"FM_Tat_F_039","Price":27250,"Name":"Broken Skull"},{"Slots":[0,1],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_040","FemaleHash":"FM_Tat_F_040","Price":9400,"Name":"Flaming Skull"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_042","FemaleHash":"FM_Tat_F_042","Price":27250,"Name":"Flaming Scorpion"},{"Slots":[0],"Dictionary":"multiplayer_overlays","MaleHash":"FM_Tat_M_043","FemaleHash":"FM_Tat_F_043","Price":27250,"Name":"Indian Ram"}]}`);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {﻿
global.getNative = (name) => {
    return global.NATIVES[name];
};

global.NATIVES = {
    GIVE_WEAPON_COMPONENT_TO_PED: "0xD966D51AA5B28BB9",
    REMOVE_WEAPON_COMPONENT_FROM_PED: "0x1E8BE90C74FB4C09",
    HAS_PED_GOT_WEAPON_COMPONENT: "0xC593212475FAE340",
    SET_CURRENT_PED_WEAPON: "0xADF692B254977C0C",
    ATTACH_ENTITY_TO_ENTITY: "0x6B9BBD38AB0796DF",
    SET_ENTITY_ROTATION: "0x8524A8B0171D5E07",
    MAKE_PED_RELOAD: "0x20AE33F3AC9C0033", //(Ped ped);
    SET_PED_AMMO: "0x14E56BC5B5DB6A19", //(Ped ped, Hash weaponHash, int ammo);
    ADD_AMMO_TO_PED: "0x78F0424C34306220", //(Ped ped, Hash weaponHash, int ammo);
    SET_AMMO_IN_CLIP: "0xDCD2A934D65CB497", //(Ped ped, Hash weaponHash, int ammo);
    SET_PED_INFINITE_AMMO_CLIP: "0x183DADC6AA953186", //(Ped ped, BOOL toggle)
    GET_WEAPON_OBJECT_FROM_PED: "0xCAE1DC9A0E22A16D",
    GET_MAX_AMMO_IN_CLIP: "0xA38DCFFCEA8962FA", //(Ped ped, Hash weaponHash, BOOL p2);    
    GET_SELECTED_PED_WEAPON: "0x0A6DB4965674D243",
    SET_BLIP_SPRITE: '0xDF735600A4696DAF',
    SET_BLIP_ALPHA: '0x45FF974EEE1C8734',
    SET_BLIP_COLOUR: '0x03D7FB09E75D6B7E',
    SET_BLIP_FLASH_TIMER: '0xD3CD6FD297AE87CC',
    SET_BLIP_FLASHES: '0xB14552383D39CE3E',
    SET_BLIP_ROTATION: '0xF87683CDF73C3F6E',
    REQUEST_ADDITIONAL_COLLISION_AT_COORD: '0xC9156DC11411A9EA',
    GET_FOLLOW_PED_CAM_VIEW_MODE: "0x8D4D46230B2C353A",
    SET_FOLLOW_PED_CAM_VIEW_MODE: '0x5A4F9EDF1673F704',
    GIVE_WEAPON_TO_PED: '0xBF0FD6E56C964FCB',
    REMOVE_WEAPON_FROM_PED: '0x4899CB088EDF59B8',
    IS_CUTSCENE_ACTIVE: '0x991251AFC3981F84',
    STOP_CUTSCENE_IMMEDIATELY: '0xD220BDD222AC4A1E',
    GET_RANDOM_EVENT_FLAG: '0xD2D57F1D764117B1',
    SET_RANDOM_EVENT_FLAG: '0x971927086CFD2158',
    GET_MISSION_FLAG: '0xA33CDCCDA663159E',
    SET_MISSION_FLAG: '0xC4301E5121A0ED73',
    REMOVE_ALL_PED_WEAPONS: '0xF25DF915FA38C5F3',
    GET_AMMO_IN_PED_WEAPON: '0x015A522136D7F951',
    SET_PED_ENABLE_WEAPON_BLOCKING: '0x97A790315D3831FD',
    SET_PED_CAN_SWITCH_WEAPON: '0xED7F7EFE9FABF340',
    _SET_VEHICLE_ENGINE_POWER_MULTIPLIER: '0x93A3996368C94158',
    _SET_VEHICLE_ENGINE_TORQUE_MULTIPLIER: '0xB59E4BD37AE292DB',
    GET_PLAYER_RADIO_STATION_INDEX: '0xE8AF77C4C06ADC93',
    SET_FRONTEND_RADIO_ACTIVE: '0xF7F26C6E9CC9EBB8',
    SET_RADIO_TO_STATION_INDEX: '0xA619B168B8A8570F',
    _SET_VEHICLE_HEADLIGHTS_COLOUR:'0xE41033B25D003A07',
    RESET_FOCUS_AREA: "0x31B73D1EA9F01DA2",
    SET_GAME_PAUSED: "0x577D1284D6873711",
    SET_GAME_PAUSES_FOR_STREAMING: "0x717CD6E6FAEBBEDC",
    GIVE_PED_TO_PAUSE_MENU: "0xAC0BFBDC3BE00E14",
    SET_PAUSE_MENU_PED_LIGHTING: "0x3CA6050692BC61B0",
    SET_PAUSE_MENU_PED_SLEEP_STATE: "0xECF128344E9FF9F1",
    ACTIVATE_FRONTEND_MENU: "0xEF01D36B9C9D0C7B",
    GET_ENTITY_MODEL: "0x9F47B058362C84B5",
    GET_ENTITY_COORDS: "0x3FEF770D40960D5A",
    GET_ENTITY_ROTATION: "0xAFBD61CC738D9EB9",
    GET_OBJECT_INDEX_FROM_ENTITY_INDEX: "0xD7E3B9735C0F89D6",
    NETWORK_GET_NETWORK_ID_FROM_ENTITY: "0xA11700682F3AD45C",
    SET_PED_CURRENT_WEAPON_VISIBLE: "0x0725A4CCFDED9A70",
    REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION: "0xD01015C7316AE176",
    IS_TASK_MOVE_NETWORK_ACTIVE: "0x921CE12C489C4C41",
    SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT: "0xD5BB4025AE449A4E",
    SET_TASK_MOVE_NETWORK_SIGNAL_BOOL: "0xB0A6CFD2C69C1088",
    GivePedToPauseMenu: "0xAC0BFBDC3BE00E14",
    SetMouseCursorVisibleInMenus: "0x98215325A695E78A",
    SetScriptGfxAlign: "0xB8A850F20A067EB6",
    SetPauseMenuPedLighting: "0x3CA6050692BC61B0",
    SetPauseMenuPedSleepState: "0xECF128344E9FF9F1",
    SET_ENTITY_COORDS: "0x06843DA7060A026B",
    FREEZE_ENTITY_POSITION: "0x428CA6DBD1094446",
    SET_ENTITY_VISIBLE: "0xEA1C610A04DB6BBB",
    DELETE_ENTITY: "0xAE3CBE5BF394C9C9",
    RESET_SCRIPT_GFX_ALIGN: "0xE3A3DB414A373DAB",
    SetScriptGfxAlignParams: "0xF5A2C681787E579D"
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {﻿global.barberPrices = JSON.parse(`{"hair":[400,350,350,450,450,600,450,1100,450,600,600,400,350,2000,750,1500,450,600,600,400,350,2000,750,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500],"beard":[120,120,120,120,120,160,160,160,120,120,240,240,120,120,240,200,120,160,380,360,360,180,180,260,120,120,240,200,120,160,380,360,360,180,180,260,120,180,180],"eyebrows":[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100],"chesthair":[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100],"lenses":[200,400,400,200,200,400,200,400,1000,1000],"lipstick":[200,400,400,200,200,400,200,400,1000,300],"blush":[200,400,400,200,200,400,200],"makeup":[120,120,120,120,120,160,160,160,120,120,240,240,120,120,240,200,120,160,380,360,360,180,180,260,120,120,240,200,120,160,380,360,360,180,180,260,120,180,180]}`);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {global.tuningPartsPrice = JSON.parse(`{"Spoilers":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":2.0},"FrontBumper":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":2.0},"RearBumper":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":2.0},"SideSkirt":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":2.0},"Exhaust":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":2.0},"Frame":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":2.0},"Grille":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":2.0},"Hood":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":2.0},"Fender":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":2.0},"RightFender":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":2.0},"Roof":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":2.0},"Engine":{"Stock":50,"Modifire":300,"Step":200,"KoefCar":2.0},"Brakes":{"Stock":50,"Modifire":70,"Step":20,"KoefCar":2.0},"Transmission":{"Stock":50,"Modifire":80,"Step":20,"KoefCar":2.0},"Horns":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":1.0},"Suspension":{"Stock":50,"Modifire":100,"Step":10,"KoefCar":2.0},"Armor":{"Stock":50,"Modifire":1000,"Step":1000,"KoefCar":2.0},"Turbo":{"Stock":50,"Modifire":1200,"Step":400,"KoefCar":2.0},"Xenon":{"Stock":50,"Modifire":500,"Step":0,"KoefCar":1.0},"FrontWheels":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.1},"BackWheels":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.0},"Plateholders":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.5},"VanityPlates":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.5},"TrimDesign":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.5},"Ornaments":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.1},"Cabin":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.7},"DialDesign":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.6},"DoorDesign":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.5},"Seats":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.5},"SteeringWheel":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.4},"ShiftLever":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.4},"Plaques":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.3},"Speakers":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.3},"Trunk":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.5},"Hydraulics":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.5},"EngineBlock":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.2},"AirFilter":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.2},"Struts":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.2},"ArchCover":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.5},"Aerials":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.1},"Trim":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.1},"WindowsTypes":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.2},"Livery":{"Stock":50,"Modifire":500,"Step":0,"KoefCar":0.8},"WheelsColor":{"Stock":50,"Modifire":200,"Step":0,"KoefCar":0.5},"NumberType":{"Stock":50,"Modifire":100,"Step":0,"KoefCar":0.5},"WindowToning":{"Stock":50,"Modifire":200,"Step":0,"KoefCar":0.3}}`);
global.tuningWheels = JSON.parse(`{"0":{"-1":30,"0":276,"1":390,"2":420,"3":396,"4":1100,"5":420,"6":414,"7":360,"8":363,"9":390,"10":459,"11":369,"12":327,"13":390,"14":336,"15":396,"16":282,"17":45,"18":297,"19":45,"20":396,"21":420,"22":498,"23":360,"24":390,"25":390,"26":390,"27":390,"28":390,"29":390,"30":390,"31":390,"32":390,"33":390,"34":390,"35":390,"36":390,"37":390,"38":390,"39":390,"40":390,"41":390,"42":390,"43":390,"44":390,"45":390,"46":390,"47":390,"48":390,"49":390,"50":390,"51":390,"52":390,"53":390,"54":390,"55":390,"56":390,"57":390,"58":390,"59":390,"60":390,"61":390,"62":390,"63":390,"64":390,"65":390,"66":390,"67":390,"68":390,"69":390,"70":390,"71":390,"72":390,"73":390,"74":390,"75":390,"76":390,"77":390,"78":390,"79":390,"80":390,"81":390,"82":390,"83":390,"84":390,"85":390,"86":390,"87":390,"88":390,"89":390,"90":390,"91":390,"92":390,"93":390,"94":390,"95":390,"96":390,"97":390,"98":390,"99":390,"100":390,"101":390,"102":390,"103":390,"104":390,"105":390,"106":390,"107":390,"108":390,"109":390,"110":390,"111":390,"112":390,"113":390,"114":390,"115":390,"116":390,"117":390,"118":390,"119":390,"120":390,"121":390,"122":390,"123":390,"124":390,"125":390,"126":390,"127":390,"128":390,"129":390,"130":390,"131":390,"132":390,"133":390,"134":390,"135":390,"136":390,"137":390,"138":390,"139":390,"140":390,"141":390,"142":390,"143":390,"144":390,"145":390,"146":390,"147":390,"148":390,"149":390,"150":390,"151":390},"1":{"-1":30,"0":30,"1":150,"2":49,"3":180,"4":195,"5":168,"6":177,"7":210,"8":180,"9":210,"10":180,"11":49,"12":150,"13":180,"14":150,"15":180,"16":240,"17":210,"18":30,"19":150,"20":49,"21":180,"22":195,"23":168,"24":177,"25":210,"26":180,"27":210,"28":180,"29":49,"30":150,"31":180,"32":150,"33":180,"34":240,"35":210},"2":{"-1":30,"0":183,"1":195,"2":183,"3":207,"4":210,"5":40,"6":225,"7":240,"8":255,"9":255,"10":45,"11":180,"12":183,"13":210,"14":240,"15":183,"16":195,"17":183,"18":207,"19":210,"20":21,"21":225,"22":240,"23":255,"24":255,"25":45,"26":180,"27":180,"28":210,"29":240},"3":{"-1":30,"0":180,"1":240,"2":270,"3":303,"4":171,"5":201,"6":261,"7":40,"8":264,"9":300,"10":300,"11":300,"12":300,"13":300,"14":300,"15":300,"16":300,"17":300,"18":300,"19":300,"20":300,"21":300,"22":300,"23":300,"24":300,"25":300,"26":300,"27":300,"28":300,"29":300,"30":300,"31":300,"32":300,"33":300,"34":300,"35":300,"36":300,"37":300,"38":500,"39":500,"40":500,"41":500},"4":{"-1":30,"0":180,"1":225,"2":189,"3":237,"4":240,"5":276,"6":189,"7":156,"8":267,"9":222,"10":180,"11":190,"12":240,"13":210,"14":240,"15":180,"16":1100,"17":1100,"18":1100,"19":1100},"5":{"-1":30,"0":40,"1":240,"2":246,"3":306,"4":273,"5":261,"6":276,"7":243,"8":276,"9":225,"10":309,"11":243,"12":276,"13":300,"14":297,"15":246,"16":273,"17":285,"18":246,"19":279,"20":288,"21":291,"22":246,"23":219,"24":40,"25":240,"26":246,"27":306,"28":273,"29":261,"30":276,"31":243,"32":276,"33":225,"34":309,"35":243,"36":276,"37":300,"38":297,"39":246,"40":273,"41":285,"42":246,"43":279,"44":288,"45":291,"46":246,"47":219},"6":{"-1":30,"0":100,"1":100,"2":100,"3":100,"4":100,"5":100,"6":100,"7":100,"8":100,"9":100,"10":100,"11":100,"12":100,"13":100,"14":100,"15":100,"16":100,"17":100,"18":100,"19":100,"20":100,"21":100,"22":100,"23":100,"24":100,"25":100,"26":100,"27":100,"28":100,"29":100,"30":100,"31":100,"32":100,"33":100,"34":100,"35":100,"36":100,"37":100,"38":100,"39":100,"40":100,"41":100,"42":100,"43":100,"44":100,"45":100,"46":100,"47":100,"48":100,"49":100,"50":100,"51":100,"52":100,"53":100,"54":100,"55":100,"56":100,"57":100,"58":100,"59":100,"60":100,"61":100,"62":100,"63":100,"64":100,"65":100,"66":100,"67":100,"68":100,"69":100,"70":100,"71":100},"7":{"-1":30,"0":360,"1":210,"2":246,"3":216,"4":240,"5":264,"6":360,"7":270,"8":306,"9":300,"10":210,"11":303,"12":363,"13":303,"14":393,"15":360,"16":363,"17":303,"18":310,"19":303,"20":360,"21":210,"22":246,"23":216,"24":240,"25":264,"26":360,"27":270,"28":306,"29":300,"30":310,"31":303,"32":363,"33":303,"34":393,"35":360,"36":363,"37":303,"38":310,"39":303},"8":{"-1":30,"0":390,"1":390,"2":390,"3":390,"4":390,"5":390,"6":390,"7":390,"8":390,"9":390,"10":390,"11":390,"12":390,"13":390,"14":390,"15":390,"16":390,"17":390,"18":390,"19":390,"20":390,"21":390,"22":390,"23":360,"24":390,"25":390,"26":390,"27":390,"28":390,"29":390,"30":390,"31":390,"32":390,"33":390,"34":390,"35":390,"36":390,"37":390,"38":390,"39":390,"40":390,"41":390,"42":390,"43":390,"44":390,"45":390,"46":390,"47":390,"48":390,"49":390,"50":390,"51":390,"52":390,"53":390,"54":390,"55":390,"56":390,"57":390,"58":390,"59":390,"60":390,"61":390,"62":390,"63":390,"64":390,"65":390,"66":390,"67":390,"68":390,"69":390,"70":390,"71":390,"72":390,"73":390,"74":390,"75":390,"76":390,"77":390,"78":390,"79":390,"80":390,"81":390,"82":390,"83":390,"84":390,"85":390,"86":390,"87":390,"88":390,"89":390,"90":390,"91":390,"92":390,"93":390,"94":390,"95":390,"96":390,"97":390,"98":390,"99":390,"100":390,"101":390,"102":390,"103":390,"104":390,"105":390,"106":390,"107":390,"108":390,"109":390,"110":390,"111":390,"112":390,"113":390,"114":390,"115":390,"116":390,"117":390,"118":390,"119":390,"120":390,"121":390,"122":390,"123":390,"124":390,"125":390,"126":390,"127":390,"128":390,"129":390,"130":390,"131":390,"132":390,"133":390,"134":390,"135":390,"136":390,"137":390,"138":390,"139":390,"140":390,"141":390,"142":390,"143":390,"144":390,"145":390,"146":390,"147":390,"148":390,"149":390,"150":390,"151":390,"152":390,"153":390,"154":390,"155":390,"156":390,"157":390,"158":390,"159":390,"160":390,"161":390,"162":390,"163":390,"164":390,"165":390,"166":390,"167":390,"168":390,"169":390,"170":390,"171":390,"172":390,"173":390,"174":390,"175":390,"176":390,"177":390,"178":390,"179":390,"180":390,"181":390,"182":390,"183":390,"184":390,"185":390,"186":390,"187":390,"188":390,"189":390,"190":390,"191":390,"192":390,"193":390,"194":390,"195":390,"196":390,"197":390,"198":390,"199":390,"200":390,"201":390,"202":390,"203":390,"204":390,"205":390,"206":390,"207":390,"208":390,"209":390,"210":390,"211":390,"212":390,"213":390,"214":390,"215":390,"216":390},"9":{"-1":30,"0":390,"1":390,"2":390,"3":390,"4":390,"5":390,"6":390,"7":390,"8":390,"9":390,"10":390,"11":390,"12":390,"13":390,"14":390,"15":390,"16":390,"17":390,"18":390,"19":390,"20":390,"21":390,"22":390,"23":390,"24":390,"25":390,"26":390,"27":390,"28":390,"29":390,"30":390,"31":390,"32":390,"33":390,"34":390,"35":390,"36":390,"37":390,"38":390,"39":390,"40":390,"41":390,"42":390,"43":390,"44":390,"45":390,"46":390,"47":390,"48":390,"49":390,"50":390,"51":390,"52":390,"53":390,"54":390,"55":390,"56":390,"57":390,"58":390,"59":390,"60":390,"61":390,"62":390,"63":390,"64":390,"65":390,"66":390,"67":390,"68":390,"69":390,"70":390,"71":390,"72":390,"73":390,"74":390,"75":390,"76":390,"77":390,"78":390,"79":390,"80":390,"81":390,"82":390,"83":390,"84":390,"85":390,"86":390,"87":390,"88":390,"89":390,"90":390,"91":390,"92":390,"93":390,"94":390,"95":390,"96":390,"97":390,"98":390,"99":390,"100":390,"101":390,"102":390,"103":390,"104":390,"105":390,"106":390,"107":390,"108":390,"109":390,"110":390,"111":390,"112":390,"113":390,"114":390,"115":390,"116":390,"117":390,"118":390,"119":390,"120":390,"121":390,"122":390,"123":390,"124":390,"125":390,"126":390,"127":390,"128":390,"129":390,"130":390,"131":390,"132":390,"133":390,"134":390,"135":390,"136":390,"137":390,"138":390,"139":390,"140":390,"141":390,"142":390,"143":390,"144":390,"145":390,"146":390,"147":390,"148":390,"149":390,"150":390,"151":390,"152":390,"153":390,"154":390,"155":390,"156":390,"157":390,"158":390,"159":390,"160":390,"161":390,"162":390,"163":390,"164":390,"165":390,"166":390,"167":390,"168":390,"169":390,"170":390,"171":390,"172":390,"173":390,"174":390,"175":390,"176":390,"177":390,"178":390,"179":390,"180":390,"181":390,"182":390,"183":390,"184":390,"185":390,"186":390,"187":390,"188":390,"189":390,"190":390,"191":390,"192":390,"193":390,"194":390,"195":390,"196":390,"197":390,"198":390,"199":390,"200":390,"201":390,"202":390,"203":390,"204":390,"205":390,"206":390,"207":390,"208":390,"209":390,"210":390,"211":390,"212":390,"213":390,"214":390,"215":390,"216":390},"10":{"-1":30,"0":390,"1":390,"2":390,"3":390,"4":390,"5":390,"6":390,"7":390,"8":390,"9":390,"10":390,"11":390,"12":390,"13":390,"14":390,"15":390,"16":390,"17":390,"18":390,"19":390,"20":390,"21":390,"22":390,"23":390,"24":390,"25":390,"26":390,"27":390,"28":390,"29":390,"30":390,"31":390,"32":390,"33":390,"34":390,"35":390,"36":390,"37":390,"38":390,"39":390,"40":390,"41":390,"42":390,"43":390,"44":390,"45":390,"46":390,"47":390,"48":390,"49":390,"50":390,"51":390,"52":390,"53":390,"54":390,"55":390,"56":390,"57":390,"58":390,"59":390,"60":390,"61":390,"62":390,"63":390,"64":390,"65":390,"66":390,"67":390,"68":390,"69":390,"70":390,"71":390,"72":390,"73":390,"74":390,"75":390,"76":390,"77":390,"78":390,"79":390,"80":390,"81":390,"82":390,"83":390,"84":390,"85":390,"86":390,"87":390,"88":390,"89":390,"90":390,"91":390,"92":390,"93":390,"94":390,"95":390,"96":390,"97":390,"98":390,"99":390,"100":390,"101":390,"102":390,"103":390,"104":390,"105":390,"106":390,"107":390,"108":390,"109":390,"110":390,"111":390,"112":390,"113":390,"114":390,"115":390,"116":390,"117":390,"118":390,"119":390,"120":390,"121":390,"122":390,"123":390,"124":390,"125":390,"126":390,"127":390,"128":390,"129":390,"130":390,"131":390,"132":390,"133":390,"134":390,"135":390,"136":390,"137":390,"138":390,"139":390}}`);
global.tuningColorPrice = JSON.parse(`{"0":{"Stock":100,"Modifire":100,"Step":0,"KoefCar":0.4},"1":{"Stock":100,"Modifire":100,"Step":0,"KoefCar":0.4},"2":{"Stock":50,"Modifire":10000,"Step":0,"KoefCar":0.0},"3":{"Stock":1000,"Modifire":1000,"Step":0,"KoefCar":0.4},"4":{"Stock":1000,"Modifire":1000,"Step":0,"KoefCar":0.4},"5":{"Stock":2000,"Modifire":2000,"Step":0,"KoefCar":0.4},"6":{"Stock":50,"Modifire":1000,"Step":0,"KoefCar":0.4},"7":{"Stock":50,"Modifire":1000,"Step":0,"KoefCar":0.0},"8":{"Stock":50,"Modifire":3000,"Step":0,"KoefCar":0.4}}`);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {global.RageColorsList = JSON.parse(`[{"Number":141,"Red":10,"Green":12,"Blue":23},{"Number":142,"Red":12,"Green":13,"Blue":24},{"Number":143,"Red":14,"Green":13,"Blue":20},{"Number":0,"Red":13,"Green":17,"Blue":22},{"Number":146,"Red":11,"Green":20,"Blue":33},{"Number":147,"Red":17,"Green":20,"Blue":26},{"Number":12,"Red":19,"Green":24,"Blue":31},{"Number":15,"Red":21,"Green":25,"Blue":33},{"Number":96,"Red":34,"Green":27,"Blue":25},{"Number":1,"Red":28,"Green":29,"Blue":33},{"Number":149,"Red":30,"Green":29,"Blue":34},{"Number":34,"Red":73,"Green":17,"Blue":29},{"Number":49,"Red":19,"Green":36,"Blue":40},{"Number":11,"Red":29,"Green":33,"Blue":41},{"Number":76,"Red":27,"Green":32,"Blue":62},{"Number":21,"Red":30,"Green":35,"Blue":47},{"Number":16,"Red":30,"Green":36,"Blue":41},{"Number":48,"Red":55,"Green":28,"Blue":37},{"Number":75,"Red":17,"Green":37,"Blue":82},{"Number":50,"Red":18,"Green":46,"Blue":43},{"Number":13,"Red":38,"Green":40,"Blue":42},{"Number":115,"Red":42,"Green":40,"Blue":43},{"Number":82,"Red":31,"Green":40,"Blue":82},{"Number":103,"Red":70,"Green":35,"Blue":26},{"Number":145,"Red":98,"Green":18,"Blue":118},{"Number":61,"Red":34,"Green":46,"Blue":70},{"Number":108,"Red":58,"Green":42,"Blue":27},{"Number":33,"Red":111,"Green":24,"Blue":24},{"Number":72,"Red":40,"Green":44,"Blue":77},{"Number":51,"Red":18,"Green":56,"Blue":60},{"Number":71,"Red":47,"Green":45,"Blue":82},{"Number":62,"Red":35,"Green":49,"Blue":85},{"Number":84,"Red":28,"Green":53,"Blue":81},{"Number":31,"Red":123,"Green":26,"Blue":34},{"Number":101,"Red":64,"Green":46,"Blue":43},{"Number":43,"Red":156,"Green":16,"Blue":22},{"Number":151,"Red":45,"Green":54,"Blue":42},{"Number":56,"Red":34,"Green":56,"Blue":62},{"Number":40,"Red":115,"Green":32,"Blue":33},{"Number":2,"Red":50,"Green":56,"Blue":61},{"Number":32,"Red":142,"Green":27,"Blue":31},{"Number":94,"Red":80,"Green":50,"Blue":24},{"Number":148,"Red":107,"Green":31,"Blue":123},{"Number":17,"Red":51,"Green":58,"Blue":60},{"Number":35,"Red":182,"Green":15,"Blue":37},{"Number":45,"Red":143,"Green":30,"Blue":23},{"Number":22,"Red":54,"Green":58,"Blue":63},{"Number":29,"Red":182,"Green":17,"Blue":27},{"Number":27,"Red":192,"Green":14,"Blue":26},{"Number":114,"Red":69,"Green":56,"Blue":49},{"Number":104,"Red":117,"Green":43,"Blue":25},{"Number":83,"Red":37,"Green":58,"Blue":167},{"Number":58,"Red":45,"Green":66,"Blue":63},{"Number":52,"Red":49,"Green":66,"Blue":63},{"Number":9,"Red":60,"Green":63,"Blue":71},{"Number":30,"Red":165,"Green":30,"Blue":35},{"Number":95,"Red":71,"Green":63,"Blue":43},{"Number":118,"Red":53,"Green":65,"Blue":88},{"Number":150,"Red":188,"Green":25,"Blue":23},{"Number":19,"Red":57,"Green":67,"Blue":77},{"Number":44,"Red":222,"Green":15,"Blue":24},{"Number":79,"Red":36,"Green":70,"Blue":168},{"Number":81,"Red":59,"Green":57,"Blue":224},{"Number":66,"Red":57,"Green":71,"Blue":98},{"Number":97,"Red":101,"Green":63,"Blue":35},{"Number":28,"Red":218,"Green":25,"Blue":24},{"Number":53,"Red":21,"Green":92,"Blue":45},{"Number":63,"Red":48,"Green":76,"Blue":126},{"Number":57,"Red":29,"Green":90,"Blue":63},{"Number":39,"Red":207,"Green":31,"Blue":33},{"Number":3,"Red":69,"Green":75,"Blue":79},{"Number":77,"Red":39,"Green":81,"Blue":144},{"Number":10,"Red":68,"Green":78,"Blue":84},{"Number":73,"Red":35,"Green":84,"Blue":161},{"Number":59,"Red":69,"Green":89,"Blue":75},{"Number":14,"Red":81,"Green":85,"Blue":84},{"Number":69,"Red":52,"Green":94,"Blue":114},{"Number":54,"Red":27,"Green":103,"Blue":112},{"Number":64,"Red":71,"Green":87,"Blue":143},{"Number":135,"Red":242,"Green":31,"Blue":153},{"Number":128,"Red":78,"Green":100,"Blue":67},{"Number":85,"Red":76,"Green":95,"Blue":129},{"Number":46,"Red":169,"Green":71,"Blue":68},{"Number":20,"Red":80,"Green":98,"Blue":114},{"Number":155,"Red":90,"Green":99,"Blue":82},{"Number":98,"Red":119,"Green":92,"Blue":62},{"Number":8,"Red":99,"Green":98,"Blue":92},{"Number":109,"Red":120,"Green":95,"Blue":51},{"Number":152,"Red":105,"Green":103,"Blue":72},{"Number":86,"Red":88,"Green":104,"Blue":142},{"Number":158,"Red":122,"Green":100,"Blue":64},{"Number":36,"Red":212,"Green":74,"Blue":23},{"Number":100,"Red":108,"Green":107,"Blue":75},{"Number":116,"Red":114,"Green":108,"Blue":87},{"Number":90,"Red":145,"Green":101,"Blue":50},{"Number":159,"Red":127,"Green":106,"Blue":72},{"Number":80,"Red":66,"Green":113,"Blue":225},{"Number":120,"Red":88,"Green":112,"Blue":161},{"Number":153,"Red":122,"Green":108,"Blue":85},{"Number":7,"Red":99,"Green":115,"Blue":128},{"Number":117,"Red":106,"Green":116,"Blue":124},{"Number":65,"Red":99,"Green":123,"Blue":167},{"Number":47,"Red":177,"Green":108,"Blue":81},{"Number":137,"Red":223,"Green":88,"Blue":145},{"Number":78,"Red":96,"Green":133,"Blue":146},{"Number":60,"Red":101,"Green":134,"Blue":127},{"Number":70,"Red":11,"Green":156,"Blue":241},{"Number":133,"Red":129,"Green":132,"Blue":76},{"Number":156,"Red":129,"Green":130,"Blue":127},{"Number":26,"Red":119,"Green":135,"Blue":148},{"Number":93,"Red":155,"Green":140,"Blue":120},{"Number":18,"Red":140,"Green":144,"Blue":149},{"Number":41,"Red":242,"Green":125,"Blue":32},{"Number":102,"Red":164,"Green":150,"Blue":95},{"Number":74,"Red":110,"Green":163,"Blue":198},{"Number":6,"Red":151,"Green":154,"Blue":151},{"Number":38,"Red":247,"Green":134,"Blue":22},{"Number":55,"Red":102,"Green":184,"Blue":31},{"Number":37,"Red":194,"Green":148,"Blue":79},{"Number":99,"Red":172,"Green":153,"Blue":117},{"Number":4,"Red":153,"Green":157,"Blue":160},{"Number":144,"Red":159,"Green":158,"Blue":138},{"Number":119,"Red":155,"Green":160,"Blue":168},{"Number":23,"Red":160,"Green":161,"Blue":153},{"Number":68,"Red":118,"Green":175,"Blue":190},{"Number":110,"Red":181,"Green":160,"Blue":121},{"Number":87,"Red":116,"Green":181,"Blue":216},{"Number":127,"Red":76,"Green":195,"Blue":218},{"Number":113,"Red":176,"Green":171,"Blue":148},{"Number":129,"Red":188,"Green":172,"Blue":143},{"Number":105,"Red":191,"Green":174,"Blue":123},{"Number":125,"Red":131,"Green":197,"Blue":102},{"Number":124,"Red":249,"Green":164,"Blue":88},{"Number":140,"Red":8,"Green":233,"Blue":250},{"Number":123,"Red":242,"Green":173,"Blue":46},{"Number":154,"Red":195,"Green":180,"Blue":146},{"Number":138,"Red":246,"Green":174,"Blue":32},{"Number":92,"Red":152,"Green":210,"Blue":35},{"Number":25,"Red":183,"Green":191,"Blue":202},{"Number":130,"Red":248,"Green":182,"Blue":88},{"Number":5,"Red":194,"Green":196,"Blue":198},{"Number":42,"Red":255,"Green":201,"Blue":31},{"Number":126,"Red":241,"Green":204,"Blue":64},{"Number":157,"Red":175,"Green":214,"Blue":228},{"Number":88,"Red":255,"Green":207,"Blue":32},{"Number":24,"Red":211,"Green":211,"Blue":211},{"Number":106,"Red":223,"Green":213,"Blue":178},{"Number":91,"Red":224,"Green":225,"Blue":61},{"Number":139,"Red":176,"Green":238,"Blue":110},{"Number":89,"Red":251,"Green":226,"Blue":18},{"Number":122,"Red":223,"Green":221,"Blue":208},{"Number":136,"Red":253,"Green":214,"Blue":205},{"Number":67,"Red":214,"Green":231,"Blue":241},{"Number":121,"Red":234,"Green":230,"Blue":222},{"Number":112,"Red":234,"Green":234,"Blue":234},{"Number":107,"Red":247,"Green":237,"Blue":213},{"Number":131,"Red":252,"Green":249,"Blue":241},{"Number":111,"Red":255,"Green":255,"Blue":246},{"Number":132,"Red":255,"Green":255,"Blue":251},{"Number":134,"Red":255,"Green":255,"Blue":255}]`);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {global.donateproducts = JSON.parse(`{"0":{"Price":1000,"Discount":0,"ProductType":"Car","Name":"Toyota Camry 40","Image":"camry40.png","Model":"camry40"},"1":{"Price":2500,"Discount":0,"ProductType":"Car","Name":"Subaru Impreza WRX STI","Image":"wrxsti.png","Model":"wrxsti"},"2":{"Price":6000,"Discount":0,"ProductType":"Car","Name":"BMW X6M","Image":"x6mgo.png","Model":"x6mgo"},"3":{"Price":7000,"Discount":0,"ProductType":"Car","Name":"Lexus LFA","Image":"lfago.png","Model":"lfago"},"4":{"Price":5000,"Discount":0,"ProductType":"Car","Name":"AUDI RS7","Image":"rs7go.png","Model":"rs7go"},"5":{"Price":6000,"Discount":0,"ProductType":"Car","Name":"Mercedes-Benz E 63 S","Image":"e63sgo.png","Model":"e63sgo"},"6":{"Price":10000,"Discount":0,"ProductType":"Car","Name":"Mercedes-Maybach W222","Image":"maybach222.png","Model":"maybach222"},"7":{"Price":12000,"Discount":0,"ProductType":"Car","Name":"Bentley 2020","Image":"bentley2020.png","Model":"bentley2020"},"8":{"Price":700,"Discount":0,"ProductType":"Car","Name":"BMW X5","Image":"bmwx5.png","Model":"bmwx5"},"9":{"Price":3000,"Discount":0,"ProductType":"Car","Name":"SRT 8","Image":"jeep15.png","Model":"jeep15"},"10":{"Price":8000,"Discount":0,"ProductType":"Car","Name":"Rolls-Royce Phantom","Image":"rrphantomgo.png","Model":"rrphantomgo"},"11":{"Price":5000,"Discount":0,"ProductType":"Car","Name":"Lamborghini Gallardo","Image":"gallardo.png","Model":"gallardo"},"12":{"Price":200,"Discount":0,"ProductType":"Car","Name":"Brioso","Image":"brioso.png","Model":"brioso"},"13":{"Price":250,"Discount":0,"ProductType":"Car","Name":"Issi2","Image":"issi2.png","Model":"issi2"},"14":{"Price":300,"Discount":0,"ProductType":"Car","Name":"Issi3","Image":"issi3.png","Model":"issi3"},"15":{"Price":200,"Discount":0,"ProductType":"Car","Name":"Rebel2","Image":"rebel2.png","Model":"rebel2"},"16":{"Price":480,"Discount":0,"ProductType":"Car","Name":"Gauntlet4","Image":"gauntlet4.png","Model":"gauntlet4"},"17":{"Price":500,"Discount":0,"ProductType":"Car","Name":"BMW 3 Series E36","Image":"e36go.png","Model":"e36go"},"18":{"Price":500,"Discount":0,"ProductType":"Car","Name":"Mersedes W124 E500","Image":"w124go.png","Model":"w124go"},"19":{"Price":7000,"Discount":0,"ProductType":"Car","Name":"Ferrari FF","Image":"ffgo.png","Model":"ffgo"},"21":{"Price":100,"Discount":0,"ProductType":"Car","Name":"LADA Priora","Image":"priora.png","Model":"priora"},"20":{"Price":100,"Discount":0,"ProductType":"Car","Name":"LADA Vesta","Image":"vesta.png","Model":"vesta"},"22":{"Price":300,"Discount":0,"ProductType":"Car","Name":"Sultan","Image":"sultan.png","Model":"sultan"},"23":{"Price":3000,"Discount":0,"ProductType":"Car","Name":"BMW M3 (E92)","Image":"e92.png","Model":"e92"},"24":{"Price":15000,"Discount":0,"ProductType":"Car","Name":"BMW M8","Image":"m8.png","Model":"m8"},"25":{"Price":15000,"Discount":0,"ProductType":"Car","Name":"AUDI R8","Image":"r820.png","Model":"r820"},"26":{"Price":10000,"Discount":0,"ProductType":"Car","Name":"Mercedes-Benz G 63 AMG 6x6","Image":"merc6x6.png","Model":"merc6x6"},"27":{"Price":20000,"Discount":0,"ProductType":"Car","Name":"Mercedes-Benz AMG Vision Gran Turismo","Image":"mvisiongt.png","Model":"mvisiongt"},"28":{"Price":10000,"Discount":0,"ProductType":"Car","Name":"Ducati Panigale V4","Image":"panigale.png","Model":"panigale"},"29":{"Price":10000,"Discount":0,"ProductType":"Car","Name":"Yamaha YZF-R1M","Image":"r1m.png","Model":"r1m"},"30":{"Price":10000,"Discount":0,"ProductType":"Car","Name":"Yamaha YZF-R1","Image":"r111.png","Model":"r111"},"31":{"Price":10000,"Discount":0,"ProductType":"Car","Name":"Honda RC213V","Image":"rcv213.png","Model":"rcv213"},"32":{"Price":10000,"Discount":0,"ProductType":"Car","Name":"Kawasaki Ninja ZX-10RR","Image":"zx10rr.png","Model":"zx10rr"},"33":{"Price":10000,"Discount":0,"ProductType":"Car","Name":"Kawasaki Ninja H2R","Image":"h2r.png","Model":"h2r"},"34":{"Price":7000,"Discount":0,"ProductType":"Car","Name":"Tesla Model S","Image":"models.png","Model":"models"},"35":{"Price":12000,"Discount":0,"ProductType":"Car","Name":"Ferrari F12berlinetta","Image":"f12b.png","Model":"f12b"},"36":{"Price":8000,"Discount":0,"ProductType":"Car","Name":"Audi RS6","Image":"rs6.png","Model":"rs6"},"37":{"Price":3000,"Discount":0,"ProductType":"Car","Name":"Sultan RS V8","Image":"sultanrsv8.png","Model":"sultanrsv8"},"38":{"Price":7000,"Discount":0,"ProductType":"Car","Name":"Mercedes-AMG C 63 S Coupe","Image":"c63scoupe.png","Model":"c63scoupe"},"39":{"Price":5000,"Discount":0,"ProductType":"Cloth","Name":"Beard Long Gray","Image":"mask504v0.png","TypeItem":"Mask","Gender":false},"40":{"Price":5000,"Discount":0,"ProductType":"Cloth","Name":"Beard Long Brown","Image":"mask504v1.png","TypeItem":"Mask","Gender":false},"41":{"Price":5000,"Discount":0,"ProductType":"Cloth","Name":"Beard Long White","Image":"mask504v2.png","TypeItem":"Mask","Gender":false},"42":{"Price":5000,"Discount":0,"ProductType":"Cloth","Name":"Beard Silky Brown","Image":"mask505v0.png","TypeItem":"Mask","Gender":false},"43":{"Price":5000,"Discount":0,"ProductType":"Cloth","Name":"Beard Silky Black","Image":"mask505v1.png","TypeItem":"Mask","Gender":false},"44":{"Price":5000,"Discount":0,"ProductType":"Cloth","Name":"Beard Silky White","Image":"mask505v2.png","TypeItem":"Mask","Gender":false},"45":{"Price":5000,"Discount":0,"ProductType":"Cloth","Name":"Beard Beautiful Gray","Image":"mask506v0.png","TypeItem":"Mask","Gender":false},"46":{"Price":5000,"Discount":0,"ProductType":"Cloth","Name":"Beard Beautiful Brown","Image":"mask506v1.png","TypeItem":"Mask","Gender":false},"47":{"Price":5000,"Discount":0,"ProductType":"Cloth","Name":"Beard Beautiful White","Image":"mask506v2.png","TypeItem":"Mask","Gender":false},"48":{"Price":200,"Discount":0,"ProductType":"Weapon","Name":"Armor x10","Image":"armor.png","TypeItem":"BodyArmor","Gender":false},"49":{"Price":200,"Discount":0,"ProductType":"Weapon","Name":"Revolver x10","Image":"revolver.png","TypeItem":"Revolver","Gender":false},"50":{"Price":200,"Discount":0,"ProductType":"Weapon","Name":"Carabine x10","Image":"rifle.png","TypeItem":"CarbineRifle","Gender":false},"51":{"Price":500,"Discount":0,"ProductType":"Weapon","Name":"Combat MG","Image":"combatmg.png","TypeItem":"CombatMG","Gender":false},"52":{"Price":200,"Discount":0,"ProductType":"Weapon","Name":"Heavy Shot Gun","Image":"heavyshotgun.png","TypeItem":"HeavyShotgun","Gender":false},"53":{"Price":1000,"Discount":0,"ProductType":"Weapon","Name":"Sniper Rifle","Image":"sniperrifle.png","TypeItem":"SniperRifle","Gender":false},"54":{"Price":100,"Discount":0,"ProductType":"Weapon","Name":"AP Pistol","Image":"appistol.png","TypeItem":"APPistol","Gender":false},"55":{"Price":100,"Discount":0,"ProductType":"Weapon","Name":"Assault SMG","Image":"assaultsmg.png","TypeItem":"AssaultSMG","Gender":false},"56":{"Price":700,"Discount":0,"ProductType":"Weapon","Name":"Marksman Rifle","Image":"marksmanrifle.png","TypeItem":"MarksmanRifle","Gender":false},"57":{"Price":200,"Discount":0,"ProductType":"Weapon","Name":"Sweeper Shotgun","Image":"sweepershotgun.png","TypeItem":"SweeperShotgun","Gender":false},"58":{"Price":500,"Discount":0,"ProductType":"Weapon","Name":"Musket","Image":"musket.png","TypeItem":"Musket","Gender":false},"59":{"Price":300,"Discount":0,"ProductType":"Weapon","Name":"Special Carbine","Image":"specialcarbine.png","TypeItem":"SpecialCarbine","Gender":false},"60":{"Price":200,"Discount":0,"ProductType":"Weapon","Name":"Bullpup Rifle","Image":"bullpuprifle.png","TypeItem":"BullpupRifle","Gender":false},"61":{"Price":5000,"Discount":0,"ProductType":"Weapon","Name":"Flare Gun","Image":"flaregun.png","TypeItem":"FlareGun","Gender":false},"62":{"Price":500,"Discount":0,"ProductType":"Weapon","Name":"Golf Club","Image":"golfclub.png","TypeItem":"GolfClub","Gender":false},"63":{"Price":500,"Discount":0,"ProductType":"Weapon","Name":"PoolCue","Image":"poolcue.png","TypeItem":"PoolCue","Gender":false},"64":{"Price":500,"Discount":0,"ProductType":"Weapon","Name":"Knife","Image":"knife.png","TypeItem":"Knife","Gender":false},"65":{"Price":500,"Discount":0,"ProductType":"Weapon","Name":"Machete","Image":"machete.png","TypeItem":"Machete","Gender":false},"66":{"Price":500,"Discount":0,"ProductType":"Weapon","Name":"Bat","Image":"bat.png","TypeItem":"Bat","Gender":false},"67":{"Price":500,"Discount":0,"ProductType":"Weapon","Name":"Bottle","Image":"bottle.png","TypeItem":"Bottle","Gender":false},"68":{"Price":500,"Discount":0,"ProductType":"Weapon","Name":"Knuckle Duster","Image":"knuckleduster.png","TypeItem":"KnuckleDuster","Gender":false},"69":{"Price":500,"Discount":0,"ProductType":"Weapon","Name":"Hatchet","Image":"hatchet.png","TypeItem":"Hatchet","Gender":false},"70":{"Price":500,"Discount":0,"ProductType":"Weapon","Name":"Dagger","Image":"dagger.png","TypeItem":"Dagger","Gender":false},"71":{"Price":500,"Discount":0,"ProductType":"Weapon","Name":"SwitchBlade","Image":"switchblade.png","TypeItem":"SwitchBlade","Gender":false},"73":{"Price":5000,"Discount":0,"ProductType":"Animal","Name":"Poodle","Image":"poodle.png","TypeItem":"Pet","Gender":false},"74":{"Price":5000,"Discount":0,"ProductType":"Animal","Name":"Westy","Image":"westy.png","TypeItem":"Pet","Gender":false},"75":{"Price":10000,"Discount":0,"ProductType":"Animal","Name":"Shepherd","Image":"shepherd.png","TypeItem":"Pet","Gender":false},"76":{"Price":5000,"Discount":0,"ProductType":"Animal","Name":"Pug","Image":"pug.png","TypeItem":"Pet","Gender":false},"77":{"Price":10000,"Discount":0,"ProductType":"Animal","Name":"Husky","Image":"husky.png","TypeItem":"Pet","Gender":false},"78":{"Price":10000,"Discount":0,"ProductType":"Animal","Name":"Chop","Image":"chop.png","TypeItem":"Pet","Gender":false},"79":{"Price":1000,"Discount":0,"ProductType":"NumberForCar","Name":"Silver number","Image":"silver.png","Format":"A101A"},"80":{"Price":2000,"Discount":0,"ProductType":"NumberForCar","Name":"Gold number","Image":"gold.png","Format":"A111B"},"81":{"Price":5000,"Discount":0,"ProductType":"NumberForCar","Name":"Platinum number","Image":"platinum.png","Format":"A111A"},"82":{"Price":10000,"Discount":0,"ProductType":"NumberForCar","Name":"Premium number","Image":"premium.png","Format":"PREMIUM"},"83":{"Price":2000,"Discount":0,"ProductType":"Boost","Name":"Boost 30%","Image":"boost30p.png","BoostValue":30.0},"84":{"Price":5000,"Discount":0,"ProductType":"Boost","Name":"Boost 50%","Image":"boost50p.png","BoostValue":50.0},"85":{"Price":10000,"Discount":0,"ProductType":"Boost","Name":"Boost 70%","Image":"boost70p.png","BoostValue":70.0},"86":{"Price":500,"Discount":0,"ProductType":"NumberForPhone","Name":"Silver number","Image":"silver.png","Format":"112233"},"87":{"Price":1500,"Discount":0,"ProductType":"NumberForPhone","Name":"Platinum number","Image":"platinum.png","Format":"111333"},"88":{"Price":15000,"Discount":0,"ProductType":"NumberForPhone","Name":"Premium number","Image":"premium.png","Format":"111111"},"89":{"Price":1500,"Discount":0,"ProductType":"Other","Name":"client_143","Image":"lic.png"},"90":{"Price":1000,"Discount":0,"ProductType":"Other","Name":"client_144","Image":"military.png"},"91":{"Price":100,"Discount":0,"ProductType":"Other","Name":"client_145","Image":"exp.png"},"92":{"Price":100,"Discount":0,"ProductType":"Other","Name":"client_160","Image":"udem.png"}}`);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {﻿global.schoolQuestion = {
    [1]: [
        {
            key: 0,
            quest: 'Какое из следующих утверждений о подушках безопасности ВЕРНО?',
            answers: [
                { key: 0, title: 'Их можно установить вместо ремня безопасности' },
                { key: 1, title: 'Они должны быть установлены во всех автомобилях' },
                { key: 2, title: 'Они установлены для обеспечения дополнительной безопасности помимо ремней безопасности' },
            ],
            image: '',
            correctAnswer: 2
        },
        {
            key: 1,
            quest: 'Вы должны использовать фары дальнего света во всех следующих ситуациях, кроме:',
            answers: [
                { key: 0, title: 'В строительных областях' },
                { key: 1, title: 'В тумане, снегу или сильном дожде' },
                { key: 2, title: 'На незнакомых дорогах' },
            ],
            image: '',
            correctAnswer: 1
        },
        {
            key: 2,
            quest: 'Небезопасно обгонять машину, когда:',
            answers: [
                { key: 0, title: 'Впереди идущий автомобиль движется медленнее, чем максимальное разрешённая скорость' },
                { key: 1, title: 'Вы двигаетесь через перекресток' },
                { key: 2, title: 'Разметка тротуара - прерывистые желтые линии' },
            ],
            image: '',
            correctAnswer: 1
        },
        {
            key: 3,
            quest: 'Какое первое правило безопасного и законного поворота?',
            answers: [
                { key: 0, title: 'Снизить скорость' },
                { key: 1, title: 'Увеличить скорость' },
                { key: 2, title: 'Перестроиться на правильную полосу движения задолго до поворота' },
            ],
            image: '',
            correctAnswer: 2
        },
        {
            key: 4,
            quest: 'Если шина внезапно спустится во время движения, вам следует:',
            answers: [
                { key: 0, title: 'Крепко держите руль и держите автомобиль прямо' },
                { key: 1, title: 'school_19' },
                { key: 2, title: 'school_20' },
            ],
            image: '',
            correctAnswer: 0
        },
        {
            key: 5,
            quest: 'school_21',
            answers: [
                { key: 0, title: 'school_22' },
                { key: 1, title: 'school_23' },
                { key: 2, title: 'В обеих вышеупомянутых ситуациях' },
            ],
            image: '',
            correctAnswer: 2
        },
        {
            key: 6,
            quest: 'school_25',
            answers: [
                { key: 0, title: 'Крайняя правая полоса' },
                { key: 1, title: 'Любая свободная полоса' },
                { key: 2, title: 'Крайняя левая полоса' },
            ],
            image: '',
            correctAnswer: 1
        },
        {
            key: 7,
            quest: 'school_29',
            answers: [
                { key: 0, title: 'Назад' },
                { key: 1, title: 'school_31' },
                { key: 2, title: 'school_32' },
            ],
            image: '',
            correctAnswer: 0
        },
        {
            key: 8,
            quest: 'school_33',
            answers: [
                { key: 0, title: 'Дальний свет используется при движении позади других транспортных средств' },
                { key: 1, title: 'school_35' },
                { key: 2, title: 'school_36' },
            ],
            image: '',
            correctAnswer: 0
        },
        {
            key: 9,
            quest: 'school_37',
            answers: [
                { key: 0, title: 'school_38' },
                { key: 1, title: 'school_39' },
                { key: 2, title: 'Снизьте скорость и дайте встречной машине пройти вперед, чтобы оставить дополнительное место для велосипеда' },
            ],
            image: '',
            correctAnswer: 2
        },
        {
            key: 10,
            quest: 'school_41',
            answers: [
                { key: 0, title: 'Выйдите с правой стороны вашего автомобиля и пройдите в безопасное место' },
                { key: 1, title: 'school_43' },
                { key: 2, title: 'school_44' },
            ],
            image: '',
            correctAnswer: 0
        },
        {
            key: 11,
            quest: 'school_45',
            answers: [
                { key: 0, title: 'school_46' },
                { key: 1, title: 'school_47' },
                { key: 2, title: 'Перекрестки' },
            ],
            image: '',
            correctAnswer: 2
        },
        {
            key: 12,
            quest: 'school_49',
            answers: [
                { key: 0, title: 'Остановиться перед сплошной белой ограничительной линии' },
                { key: 1, title: 'school_51' },
                { key: 2, title: 'school_52' },
            ],
            image: '',
            correctAnswer: 0
        },
        {
            key: 13,
            quest: 'school_53',
            answers: [
                { key: 0, title: 'Проезд не разрешен' },
                { key: 1, title: 'school_55' },
                { key: 2, title: 'school_56' },
            ],
            image: '',
            correctAnswer: 0
        },
        {
            key: 14,
            quest: 'school_57',
            answers: [
                { key: 0, title: 'school_58' },
                { key: 1, title: 'school_59' },
                { key: 2, title: 'Полосу, ближайшую к правому краю дороги' },
            ],
            image: '',
            correctAnswer: 2
        },
        {
            key: 15,
            quest: 'school_61',
            answers: [
                { key: 0, title: 'school_62' },
                { key: 1, title: 'school_63' },
                { key: 2, title: 'Вы не должны начинать, возобновлять или продолжать движение, осуществлять какой-либо маневр, если это может вынудить других участников движения, имеющих по отношению к Вам преимущество, изменить направление движения или скорость' },
            ],
            image: '',
            correctAnswer: 2
        },
        {
            key: 16,
            quest: 'school_65',
            answers: [
                { key: 0, title: 'school_66' },
                { key: 1, title: 'school_67' },
                { key: 2, title: 'school_68' },
                { key: 3, title: 'Запрещается' },
            ],
            image: '',
            correctAnswer: 3
        },
        {
            key: 17,
            quest: 'school_70',
            answers: [
                { key: 0, title: 'school_71' },
                { key: 1, title: 'На дорогах с односторонним движением' },
                { key: 2, title: 'school_73' },
                { key: 3, title: 'school_74' },
            ],
            image: '',
            correctAnswer: 1
        },
        {
            key: 18,
            quest: 'school_75',
            answers: [
                { key: 0, title: 'school_76' },
                { key: 1, title: 'Нет' },
                { key: 2, title: 'school_78' },
            ],
            image: '',
            correctAnswer: 1
        },
        {
            key: 19,
            quest: 'school_79',
            answers: [
                { key: 0, title: 'Являются' },
                { key: 1, title: 'school_81' },
                { key: 2, title: 'school_82' },
                { key: 3, title: 'school_83' },
            ],
            image: '',
            correctAnswer: 0
        },
        {
            key: 20,
            quest: 'school_84',
            answers: [
                { key: 0, title: 'school_85' },
                { key: 1, title: 'school_86' },
                { key: 2, title: 'Оба варианта верны' },
            ],
            image: '',
            correctAnswer: 2
        },
        {
            key: 21,
            quest: 'school_88',
            answers: [
                { key: 0, title: 'Правосторонее' },
                { key: 1, title: 'school_90' },
                { key: 2, title: 'school_91' },
                { key: 3, title: 'school_92' },
            ],
            image: '',
            correctAnswer: 0
        },
        {
            key: 22,
            quest: 'school_93',
            answers: [
                { key: 0, title: 'school_94' },
                { key: 1, title: '80 км/ч' },
                { key: 2, title: 'school_96' },
                { key: 3, title: 'school_97' },
            ],
            image: '',
            correctAnswer: 1
        },
        {
            key: 23,
            quest: 'school_98',
            answers: [
                { key: 0, title: 'Разрешено, если я не создаю помех другим участникам движения' },
                { key: 1, title: 'school_100' },
                { key: 2, title: 'school_101' },
            ],
            image: '',
            correctAnswer: 0
        },
        {
            key: 24,
            quest: 'school_102',
            answers: [
                { key: 0, title: 'Да' },
                { key: 1, title: 'school_104' },
            ],
            image: 'quest1_24',
            correctAnswer: 0
        },
        {
            key: 25,
            quest: 'school_105',
            answers: [
                { key: 0, title: 'school_106' },
                { key: 1, title: 'school_107' },
                { key: 2, title: 'school_108' },
                { key: 3, title: 'Запрещается' },
            ],
            image: '',
            correctAnswer: 3
        },
        {
            key: 26,
            quest: 'school_110',
            answers: [
                { key: 0, title: 'school_111' },
                { key: 1, title: 'Запрещено' },
                { key: 2, title: 'school_113' },
            ],
            image: 'quest1_26',
            correctAnswer: 1
        },
        {
            key: 27,
            quest: 'school_114',
            answers: [
                { key: 0, title: 'school_115' },
                { key: 1, title: 'school_116' },
                { key: 2, title: 'В обоих случаях должен уступить' },
                { key: 3, title: 'school_118' },
            ],
            image: 'quest1_27',
            correctAnswer: 2
        },
        {
            key: 28,
            quest: 'school_119',
            answers: [
                { key: 0, title: 'school_120' },
                { key: 1, title: 'Запрещен' },
                { key: 2, title: 'school_122' },
            ],
            image: '',
            correctAnswer: 1
        },
    ],
    [2]: [
        {
            key: 0,
            quest: 'school_123',
            answers: [
                { key: 0, title: 'school_124' },
                { key: 1, title: 'school_125' },
                { key: 2, title: 'school_126' },
            ],
            image: '',
            correctAnswer: 2
        },
        {
            key: 1,
            quest: 'school_127',
            answers: [
                { key: 0, title: 'school_128' },
                { key: 1, title: 'school_129' },
                { key: 2, title: 'school_130' },
            ],
            image: '',
            correctAnswer: 1
        },
        {
            key: 2,
            quest: 'school_131',
            answers: [
                { key: 0, title: 'school_132' },
                { key: 1, title: 'school_133' },
                { key: 2, title: 'school_134' },
                { key: 3, title: 'school_135' },
            ],
            image: '',
            correctAnswer: 0
        },
        {
            key: 3,
            quest: 'school_136',
            answers: [
                { key: 0, title: 'school_137' },
                { key: 1, title: 'school_138' },
                { key: 2, title: 'school_139' },
            ],
            image: '',
            correctAnswer: 2
        },
        {
            key: 4,
            quest: 'school_140',
            answers: [
                { key: 0, title: 'school_141' },
                { key: 1, title: 'school_142' },
                { key: 2, title: 'school_143' },
            ],
            image: '',
            correctAnswer: 1
        },
        {
            key: 5,
            quest: 'school_144',
            answers: [
                { key: 0, title: 'school_145' },
                { key: 1, title: 'school_146' },
            ],
            image: '',
            correctAnswer: 0
        },
        {
            key: 6,
            quest: 'school_147',
            answers: [
                { key: 0, title: 'school_148' },
                { key: 1, title: 'school_149' },
            ],
            image: '',
            correctAnswer: 0
        },
    ],
    [3]: [
        {
            key: 0,
            quest: 'school_150',
            answers: [
                { key: 0, title: 'school_151' },
                { key: 1, title: 'school_152' },
                { key: 2, title: 'school_153' },
            ],
            image: '',
            correctAnswer: 2
        },
        {
            key: 1,
            quest: 'school_154',
            answers: [
                { key: 0, title: 'school_155' },
                { key: 1, title: 'school_156' },
                { key: 2, title: 'Безопасны, если у пилота большой стаж' },
            ],
            image: '',
            correctAnswer: 1
        },
        {
            key: 2,
            quest: 'school_158',
            answers: [
                { key: 0, title: 'school_159' },
                { key: 1, title: 'school_160' },
                { key: 2, title: 'school_161' },
            ],
            image: '',
            correctAnswer: 2
        },
        {
            key: 3,
            quest: 'school_162',
            answers: [
                { key: 0, title: 'school_163' },
                { key: 1, title: 'school_164' },
                { key: 2, title: 'school_165' },
            ],
            image: '',
            correctAnswer: 2
        },
        {
            key: 4,
            quest: 'school_166',
            answers: [
                { key: 0, title: 'school_167' },
                { key: 1, title: 'school_168' },
                { key: 2, title: 'school_169' },
            ],
            image: '',
            correctAnswer: 0
        },
        {
            key: 5,
            quest: 'school_170',
            answers: [
                { key: 0, title: 'school_171' },
                { key: 1, title: 'school_172' },
                { key: 2, title: 'school_173' },
            ],
            image: '',
            correctAnswer: 0
        },
        {
            key: 6,
            quest: 'school_174',
            answers: [
                { key: 0, title: 'school_175' },
                { key: 1, title: 'school_176' },
                { key: 2, title: 'school_177' },
            ],
            image: '',
            correctAnswer: 1
        },
        {
            key: 7,
            quest: 'school_178',
            answers: [
                { key: 0, title: 'school_179' },
                { key: 1, title: 'school_180' },
                { key: 2, title: 'school_181' },
            ],
            image: '',
            correctAnswer: 2
        },
        {
            key: 8,
            quest: 'school_182',
            answers: [
                { key: 0, title: 'school_183' },
                { key: 1, title: 'school_184' },
                { key: 2, title: 'school_185' },
            ],
            image: '',
            correctAnswer: 0
        },
        {
            key: 9,
            quest: 'school_186',
            answers: [
                { key: 0, title: 'school_187' },
                { key: 1, title: 'school_188' },
                { key: 2, title: 'school_189' },
            ],
            image: '',
            correctAnswer: 0
        },
    ],
    [4]: [
        {
            key: 0,
            quest: 'Самолеты',
            answers: [
                { key: 0, title: '' },
                { key: 1, title: '' },
                { key: 2, title: '' },
            ],
            image: '',
            correctAnswer: 0
        },
    ],

}


global.schoolCheckpoints = {
    [0]: {
        Model: 42,
        Rotation: new mp.Vector3(0, 0, 0),
        UnfreezeIndex: [4, 10, 20],
        Radius: 2,
        MarkerColor: [232, 228, 33, 255],
        TrafficStatus: {
            [0]: true,
            [4]: false,
            [48]: true,
            [49]: false,
        },
        Positions: [
            new mp.Vector3(418.3563, 297.0039, 102.1371),
            new mp.Vector3(248.5459, -1850.761, 25.90033),
            new mp.Vector3(-564.7281, -294.6939, 34.26958),
            new mp.Vector3(-1121.633, -929.6902, 1.776469),
            new mp.Vector3(-1584.932, -865.3957, 9.467985),
            new mp.Vector3(-1605.855, -871.6761, 9.14452),
            new mp.Vector3(-1617.177, -867.6982, 9.091087),
            new mp.Vector3(-1620.901, -858.2654, 9.24542),
            new mp.Vector3(-1631.013, -855.7385, 9.105788),
            new mp.Vector3(-1635.22, -845.9827, 9.229954),
            new mp.Vector3(-1645.414, -843.6833, 9.008126),
            new mp.Vector3(-1655.836, -831.3908, 9.164846),
            new mp.Vector3(-1651.831, -831.3036, 9.256888),
            new mp.Vector3(-1652.056, -861.4676, 10.88425),
            new mp.Vector3(-1640.32, -871.5147, 8.51898),
            new mp.Vector3(-1627.379, -882.6333, 10.87947),
            new mp.Vector3(-1607.961, -898.0497, 8.550056),
            new mp.Vector3(-1623.542, -911.7434, 8.171993),
            new mp.Vector3(-1650.675, -903.6989, 7.963261),
            new mp.Vector3(-1669.385, -898.61, 7.814882),
            new mp.Vector3(-1680.456, -867.6337, 8.102227),
            new mp.Vector3(-1711.708, -889.4888, 7.343117),
            new mp.Vector3(-1643.731, -945.2289, 7.421176),
            new mp.Vector3(-1577.517, -872.244, 9.468807),
            new mp.Vector3(-1081.693, -775.7036, 18.43632),
            new mp.Vector3(-980.9483, -2060.0168, 9.580816),
        ]
    },
    [1]: {
        Model: 42,
        Rotation: new mp.Vector3(0, 0, 0),
        UnfreezeIndex: [4, 10, 20],
        Radius: 2,
        MarkerColor: [232, 228, 33, 255],
        TrafficStatus: {
            [0]: true,
            [4]: false,
            [41]: true,
            [42]: false,
        },
        Positions: [
            new mp.Vector3(248.5459, -1850.761, 25.90033),
            new mp.Vector3(418.3563, 297.0039, 102.1371),
            new mp.Vector3(-564.7281, -294.6939, 34.26958),
            new mp.Vector3(-1121.633, -929.6902, 1.776469),
            new mp.Vector3(-1585.371, -865.4012, 9.822474),
            new mp.Vector3(-1605.924, -871.2897, 9.527199),
            new mp.Vector3(-1621.34, -858.4055, 9.601771),
            new mp.Vector3(-1636.006, -846.4445, 9.55978),
            new mp.Vector3(-1656.652, -830.8329, 9.528526),
            new mp.Vector3(-1648.841, -830.2089, 9.712454),
            new mp.Vector3(-1651.734, -861.6842, 11.25146),
            new mp.Vector3(-1639.81, -872.2514, 8.886156),
            new mp.Vector3(-1627.039, -883.135, 11.24643),
            new mp.Vector3(-1610.822, -895.1197, 8.931087),
            new mp.Vector3(-1626.16, -908.5624, 8.549431),
            new mp.Vector3(-1665.985, -900.5516, 8.196226),
            new mp.Vector3(-1680.306, -867.7342, 8.468744),
            new mp.Vector3(-1696.822, -869.0764, 8.257377),
            new mp.Vector3(-1709.368, -889.5038, 7.754416),
            new mp.Vector3(-1644.306, -945.0043, 7.782533),
            new mp.Vector3(-1611.329, -913.7024, 8.648982),
            new mp.Vector3(-1577.26, -872.2491, 9.822),
            new mp.Vector3(-1081.693, -775.7036, 18.43632),
            new mp.Vector3(-980.9483, -2060.0168, 9.580816),
        ]
    },
    [2]: {
        Model: 27,
        Rotation: new mp.Vector3(0, 0, 0),
        UnfreezeIndex: [4, 7, 11],
        Radius: 3,
        MarkerColor: [232, 228, 33, 255],
        TrafficStatus: {
            [0]: true,
            [4]: false,
            [19]: true,
            [20]: false,
        },
        Positions: [
            new mp.Vector3(-564.7281, -294.6939, 34.26958),
            new mp.Vector3(248.5459, -1850.761, 25.90033),
            new mp.Vector3(418.3563, 297.0039, 102.1371),
            new mp.Vector3(-1121.633, -929.6902, 1.776469),
            new mp.Vector3(-1584.705, -864.5699, 10.13643),
            new mp.Vector3(-1619.574, -862.7178, 9.854468),
            new mp.Vector3(-1663.077, -849.9363, 9.278708),
            new mp.Vector3(-1693.053, -883.047, 8.08758),
            new mp.Vector3(-1705.839, -917.1735, 7.719574),
            new mp.Vector3(-1666.779, -894.9128, 8.587889),
            new mp.Vector3(-1638.918, -897.8976, 8.866714),
            new mp.Vector3(-1607.641, -907.998, 9.08977),
            new mp.Vector3(-1576.905, -871.9366, 10.13779),
            new mp.Vector3(-1081.693, -775.7036, 18.23632),
            new mp.Vector3(-980.9483, -2060.0168, 9.580816),
        ]
    },
    [3]: {
        Model: 23,
        Rotation: new mp.Vector3(90, 90, 90),
        UnfreezeIndex: [],
        Radius: 10,
        MarkerColor: [232, 228, 33, 255],
        TrafficStatus: {
            [0]: false,
        },
        Positions: [
            new mp.Vector3(-860.4728, -1550.829, -0.05470417),
            new mp.Vector3(-920.2676, -1611.084, 0.06760433),
            new mp.Vector3(-964.0623, -1658.229, -0.0394104),
            new mp.Vector3(-1015.61, -1714.576, 0.3109621),
            new mp.Vector3(-1070.706, -1768.246, 0.2182161),
            new mp.Vector3(-1103.427, -1809.612, 0.5734844),
            new mp.Vector3(-1167.742, -1867.767, 0.7542484),
            new mp.Vector3(-1233.57, -1932.965, 0.4269836),
            new mp.Vector3(-1299.541, -1982.956, 0.7139086),
            new mp.Vector3(-1367.161, -1998.948, 0.9182017),
            new mp.Vector3(-1463.385, -2032.083, 0.3506175),
            new mp.Vector3(-1529.683, -2066.583, 1.663872),
            new mp.Vector3(-1607.123, -2113.987, 1.535882),
            new mp.Vector3(-1674.766, -2181.322, 2.059731),
            new mp.Vector3(-1719.645, -2245.863, 1.245714),
            new mp.Vector3(-1774.271, -2323.531, 0.02241266),
            new mp.Vector3(-1822.435, -2385.454, 1.009096),
            new mp.Vector3(-1860.868, -2448.583, 0.8326035),
            new mp.Vector3(-1896.703, -2513.704, 0.8430295),
            new mp.Vector3(-1938.418, -2592.403, 0.9114803),
            new mp.Vector3(-1996.468, -2691.11, 0.6961479),
            new mp.Vector3(-2052.364, -2723.7, 1.257204),
            new mp.Vector3(-2083.093, -2784.639, 1.302351),
            new mp.Vector3(-2103.896, -2860.777, 1.078457),
            new mp.Vector3(-2112.216, -2934.309, 0.5225751),
            new mp.Vector3(-2101.371, -3026.148, 0.8664877),
            new mp.Vector3(-2080.677, -3129.615, 0.5566161),
            new mp.Vector3(-2042.87, -3211.714, 0.6178592),
            new mp.Vector3(-1974.376, -3287.473, 0.8065245),
            new mp.Vector3(-1872.472, -3356.59, 0.6518717),
            new mp.Vector3(-1816.322, -3392.166, 0.5775434),
            new mp.Vector3(-1744.17, -3438.601, 0.372147),
            new mp.Vector3(-1618.73, -3527.177, 0.3492884),
            new mp.Vector3(-1445.395, -3572.317, 1.046132),
            new mp.Vector3(-1327.681, -3613.04, 0.6319534),
            new mp.Vector3(-1214.699, -3663.297, 1.237013),
            new mp.Vector3(-1129.788, -3696.882, 1.353009),
            new mp.Vector3(-1031.785, -3714.884, 2.025164),
            new mp.Vector3(-921.4465, -3709.397, 1.023242),
            new mp.Vector3(-833.4053, -3625.206, 0.8362695),
            new mp.Vector3(-762.8191, -3535.284, 1.713778),
            new mp.Vector3(-728.4916, -3466.189, 1.714462),
            new mp.Vector3(-691.5962, -3394.553, 0.2098579),
            new mp.Vector3(-637.3403, -3300.876, 1.729327),
            new mp.Vector3(-624.1696, -3230.219, 0.769836),
            new mp.Vector3(-623.1436, -3167.109, 0.6608764),
            new mp.Vector3(-623.3199, -3083.823, 1.012225),
            new mp.Vector3(-626.4299, -3029.247, 0.6015165),
            new mp.Vector3(-629.2319, -2974.76, 2.843196),
            new mp.Vector3(-632.6351, -2900.686, 0.4777488),
            new mp.Vector3(-631.2957, -2810.524, 0.3608217),
            new mp.Vector3(-632.3746, -2726.473, 1.139417),
            new mp.Vector3(-592.6507, -2619.219, 0.8047898),
            new mp.Vector3(-554.4576, -2541.704, 0.03663785),
            new mp.Vector3(-512.9515, -2461.126, 0.2650149),
            new mp.Vector3(-459.9951, -2380.473, -0.5152381),
            new mp.Vector3(-404.0287, -2346.421, 0.8023169),
            new mp.Vector3(-342.2774, -2339.347, -0.01492378),
            new mp.Vector3(-254.3487, -2325.404, 0.8326305),
            new mp.Vector3(-154.6429, -2310.022, 1.074268),
            new mp.Vector3(-37.17372, -2329.06, 0.3046279),
            new mp.Vector3(94.93999, -2334.843, -0.05751015),
            new mp.Vector3(216.8034, -2323.1, -0.1149132),
            new mp.Vector3(284.1271, -2317.021, 0.05317535),
            new mp.Vector3(356.4665, -2314.53, -0.3349759),
            new mp.Vector3(448.2351, -2365.776, -0.06224092),
            new mp.Vector3(485.9681, -2412.288, 0.03391297),
            new mp.Vector3(547.8647, -2477.393, 0.1499554),
            new mp.Vector3(603.0454, -2552.948, 0.1729411),
            new mp.Vector3(677.747, -2568.959, 0.52407),
            new mp.Vector3(734.7111, -2608.881, -0.05039395),
            new mp.Vector3(792.5853, -2625.833, 0.04868013),
            new mp.Vector3(842.7098, -2665.107, 0.6961327),
            new mp.Vector3(903.1743, -2704.16, 0.7304097),
            new mp.Vector3(977.4052, -2741.001, -0.390442),
            new mp.Vector3(1040.402, -2767.535, 0.2345268),
            new mp.Vector3(1139.274, -2807.563, 0.1076622),
            new mp.Vector3(1189.92, -2829.476, 1.087081),
            new mp.Vector3(1248.095, -2856.961, 0.2372817),
            new mp.Vector3(1294.524, -2889.421, 1.383096),
            new mp.Vector3(1312, -2963.985, -0.1619734),
            new mp.Vector3(1324.234, -3025.954, 0.2182712),
            new mp.Vector3(1336.764, -3086.126, 0.4602267),
            new mp.Vector3(1342.665, -3156.341, 0.5613379),
            new mp.Vector3(1336.066, -3260.487, 0.6708487),
            new mp.Vector3(1333.755, -3359.354, 1.023384),
            new mp.Vector3(1302.592, -3391.354, 1.178693),
            new mp.Vector3(1229.607, -3400.745, 1.782603),
            new mp.Vector3(1148.009, -3402.986, 1.032553),
            new mp.Vector3(1049.274, -3412.241, 0.08670793),
            new mp.Vector3(956.8514, -3404.85, 0.8508291),
            new mp.Vector3(842.0488, -3407.195, 0.5267543),
            new mp.Vector3(764.3204, -3416.418, 1.558118),
            new mp.Vector3(653.228, -3429.701, 0.6550282),
            new mp.Vector3(575.6982, -3434.036, 0.2359914),
            new mp.Vector3(449.7105, -3437.031, 0.9930139),
            new mp.Vector3(357.0941, -3414.303, 0.4633732),
            new mp.Vector3(252.4305, -3388.223, 1.41036),
            new mp.Vector3(166.7983, -3387.113, 1.347306),
            new mp.Vector3(-10.47992, -3394.067, 0.4803151),
            new mp.Vector3(-111.3487, -3403.155, 0.6839606),
            new mp.Vector3(-214.199, -3437.641, 1.73327),
            new mp.Vector3(-307.5225, -3483.559, 0.5358241),
            new mp.Vector3(-405.7527, -3517.696, 0.4750764),
            new mp.Vector3(-502.7502, -3553.25, 2.20524),
            new mp.Vector3(-589.0394, -3588.035, 1.584135),
            new mp.Vector3(-676.4742, -3617.152, 0.4470158),
            new mp.Vector3(-837.7141, -3674.745, 1.064859),
            new mp.Vector3(-921.4465, -3709.397, 1.023242),
            new mp.Vector3(-1031.785, -3714.884, 2.025164),
            new mp.Vector3(-1129.788, -3696.882, 1.353009),
            new mp.Vector3(-1214.699, -3663.297, 1.237013),
            new mp.Vector3(-1327.681, -3613.04, 0.6319534),
            new mp.Vector3(-1445.395, -3572.317, 1.046132),
            new mp.Vector3(-1618.73, -3527.177, 0.3492884),
            new mp.Vector3(-1744.17, -3438.601, 0.372147),
            new mp.Vector3(-1816.322, -3392.166, 0.5775434),
            new mp.Vector3(-1872.472, -3356.59, 0.6518717),
            new mp.Vector3(-1974.376, -3287.473, 0.8065245),
            new mp.Vector3(-2042.87, -3211.714, 0.6178592),
            new mp.Vector3(-2080.677, -3129.615, 0.5566161),
            new mp.Vector3(-2101.371, -3026.148, 0.8664877),
            new mp.Vector3(-2112.216, -2934.309, 0.5225751),
            new mp.Vector3(-2103.896, -2860.777, 1.078457),
            new mp.Vector3(-2083.093, -2784.639, 1.302351),
            new mp.Vector3(-2052.364, -2723.7, 1.257204),
            new mp.Vector3(-1996.468, -2691.11, 0.6961479),
            new mp.Vector3(-1938.418, -2592.403, 0.9114803),
            new mp.Vector3(-1896.703, -2513.704, 0.8430295),
            new mp.Vector3(-1860.868, -2448.583, 0.8326035),
            new mp.Vector3(-1822.435, -2385.454, 1.009096),
            new mp.Vector3(-1774.271, -2323.531, 0.02241266),
            new mp.Vector3(-1719.645, -2245.863, 1.245714),
            new mp.Vector3(-1674.766, -2181.322, 2.059731),
            new mp.Vector3(-1607.123, -2113.987, 1.535882),
            new mp.Vector3(-1529.683, -2066.583, 1.663872),
            new mp.Vector3(-1463.385, -2032.083, 0.3506175),
            new mp.Vector3(-1367.161, -1998.948, 0.9182017),
            new mp.Vector3(-1299.541, -1982.956, 0.7139086),
            new mp.Vector3(-1233.57, -1932.965, 0.4269836),
            new mp.Vector3(-1167.742, -1867.767, 0.7542484),
            new mp.Vector3(-1103.427, -1809.612, 0.5734844),
            new mp.Vector3(-1070.706, -1768.246, 0.2182161),
            new mp.Vector3(-1015.61, -1714.576, 0.3109621),
            new mp.Vector3(-964.0623, -1658.229, -0.0394104),
            new mp.Vector3(-920.2676, -1611.084, 0.06760433),
            new mp.Vector3(-860.4728, -1550.829, -0.05470417),
            new mp.Vector3(-721.6487, -1328.283, 1.884334),
        ]
    },
    [4]: {
        Model: 23,
        Rotation: new mp.Vector3(90, 90, 90),
        UnfreezeIndex: [],
        Radius: 10,
        MarkerColor: [232, 228, 33, 255],
        TrafficStatus: {
            [0]: true,
            [49]: false,
        },
        Positions: [
            new mp.Vector3(-669.1459, -1397.318, 52.75159),
            new mp.Vector3(-493.1201, -1250.507, 87.4351),
            new mp.Vector3(-334.9885, -1093.353, 132.3429),
            new mp.Vector3(-252.4364, -1010.069, 137.8296),
            new mp.Vector3(-185.3174, -930.2009, 140.669),
            new mp.Vector3(-118.0049, -883.2631, 158.6175),
            new mp.Vector3(17.68365, -829.957, 169.0094),
            new mp.Vector3(57.24094, -762.5376, 155.166),
            new mp.Vector3(93.91844, -713.5376, 151.7585),
            new mp.Vector3(116.5137, -696.3156, 151.3769),
            new mp.Vector3(197.9175, -645.032, 140.5971),
            new mp.Vector3(299.495, -589.0629, 123.893),
            new mp.Vector3(453.3033, -523.8898, 123.1705),
            new mp.Vector3(482.7217, -512.8511, 130.1725),
            new mp.Vector3(723.4575, -434.4526, 166.5991),
            new mp.Vector3(885.4899, -527.0104, 201.6526),
            new mp.Vector3(1055.984, -754.0936, 192.0286),
            new mp.Vector3(1116.867, -1095.59, 207.5896),
            new mp.Vector3(1116.304, -1336.308, 174.6555),
            new mp.Vector3(1034.974, -1701.935, 120.2975),
            new mp.Vector3(933.4195, -1919.846, 109.1391),
            new mp.Vector3(832.9042, -2334.891, 83.50694),
            new mp.Vector3(806.6752, -2477.06, 66.49703),
            new mp.Vector3(817.8761, -2560.895, 47.04429),
            new mp.Vector3(825.7741, -2600.368, 27.53954),
            new mp.Vector3(840.83, -2695.49, 26.08994),
            new mp.Vector3(839.7482, -2855.607, 57.26554),
            new mp.Vector3(790.3793, -3098.035, 55.22459),
            new mp.Vector3(616.075, -3309.19, 51.60472),
            new mp.Vector3(478.5322, -3370.693, 6.654096),
            new mp.Vector3(251.418, -3325.478, 103.0809),
            new mp.Vector3(-179.9873, -3124.316, 116.3662),
            new mp.Vector3(-788.0828, -3203.932, 139.346),
            new mp.Vector3(-1342.332, -2842.768, 109.7038),
            new mp.Vector3(-1416.08, -2621.706, 97.03089),
            new mp.Vector3(-1600.182, -1893.739, 39.1608),
            new mp.Vector3(-1626.846, -1797.01, 34.06154),
            new mp.Vector3(-1663.88, -1640.804, 35.84977),
            new mp.Vector3(-1736.491, -1215.17, 53.39738),
            new mp.Vector3(-1776.5, -964.8166, 56.57076),
            new mp.Vector3(-1866.289, -727.2842, 61.23143),
            new mp.Vector3(-1972.94, -565.1227, 59.67974),
            new mp.Vector3(-2052.543, -437.093, 64.36891),
            new mp.Vector3(-2063.177, -246.6243, 105.5455),
            new mp.Vector3(-1982.893, -228.4978, 135.4895),
            new mp.Vector3(-1738.829, -378.4932, 123.0029),
            new mp.Vector3(-1564.293, -515.3336, 109.8109),
            new mp.Vector3(-1363.268, -693.0659, 85.91394),
            new mp.Vector3(-1015.752, -993.4233, 68.92171),
            new mp.Vector3(-915.6028, -1177.223, 98.14619),
            new mp.Vector3(-783.9523, -1333.446, 67.83813),
            new mp.Vector3(-724.8, -1444.273, 5.00052),
        ]
    },
    [5]: {
        Model: 23,
        Rotation: new mp.Vector3(90, 90, 90),
        UnfreezeIndex: [],
        Radius: 10,
        MarkerColor: [232, 228, 33, 255],
        TrafficStatus: {
            [0]: true,
            [86]: false,
        },
        Positions: [
            new mp.Vector3(1306.385, 3146.534, 54.58601),
            new mp.Vector3(1209.523, 3116.939, 69.15478),
            new mp.Vector3(1053.941, 3072.978, 93.32942),
            new mp.Vector3(925.4136, 3015.081, 110.7835),
            new mp.Vector3(843.1927, 2886.745, 125.0545),
            new mp.Vector3(863.548, 2715.164, 136.1349),
            new mp.Vector3(910.2629, 2581.703, 101.8437),
            new mp.Vector3(927.1288, 2534.301, 96.65683),
            new mp.Vector3(998.7095, 2347.338, 76.77055),
            new mp.Vector3(1028.634, 2251.909, 69.59611),
            new mp.Vector3(1058.757, 2116.752, 89.34293),
            new mp.Vector3(1147.593, 1876.817, 137.277),
            new mp.Vector3(1283.549, 1565.879, 177.1839),
            new mp.Vector3(1353.323, 1353.943, 235.9112),
            new mp.Vector3(1400.588, 1173.738, 254.6165),
            new mp.Vector3(1387.974, 965.2379, 245.7185),
            new mp.Vector3(1296.271, 714.3382, 200.8173),
            new mp.Vector3(1169.367, 525.1842, 160.1561),
            new mp.Vector3(1012.495, 329.2554, 143.6469),
            new mp.Vector3(906.1968, 193.9827, 123.3599),
            new mp.Vector3(781.3627, -4.162809, 69.74654),
            new mp.Vector3(730.4702, -95.22778, 73.75446),
            new mp.Vector3(687.4348, -179.3608, 128.7718),
            new mp.Vector3(595.3582, -354.9793, 185.406),
            new mp.Vector3(467.9446, -494.0946, 158.7416),
            new mp.Vector3(245.8004, -609.1146, 178.281),
            new mp.Vector3(143.3062, -689.5161, 166.7105),
            new mp.Vector3(-26.68916, -748.1041, 169.9156),
            new mp.Vector3(-224.45, -811.4536, 171.2441),
            new mp.Vector3(-450.0154, -871.0427, 161.0234),
            new mp.Vector3(-708.118, -840.9361, 156.7612),
            new mp.Vector3(-1027.391, -752.7766, 168.6049),
            new mp.Vector3(-1362.824, -627.5676, 182.7104),
            new mp.Vector3(-1721.049, -493.0623, 192.4778),
            new mp.Vector3(-2016.508, -380.2805, 166.2957),
            new mp.Vector3(-2211.883, -298.0057, 154.1207),
            new mp.Vector3(-2464.285, -161.9829, 145.8653),
            new mp.Vector3(-2806.105, 60.79022, 154.3417),
            new mp.Vector3(-2924.389, 312.7873, 162.0074),
            new mp.Vector3(-3054.622, 684.0488, 145.171),
            new mp.Vector3(-3136.568, 1038.253, 127.2891),
            new mp.Vector3(-3019.67, 1570.793, 139.089),
            new mp.Vector3(-2935.673, 2047.343, 135.0084),
            new mp.Vector3(-2677.712, 2349.446, 107.6584),
            new mp.Vector3(-2440.791, 2442.146, 96.61278),
            new mp.Vector3(-1935.841, 2546.063, 62.54602),
            new mp.Vector3(-1652.148, 2613.601, 33.04435),
            new mp.Vector3(-1443.729, 2658.783, 9.329959),
            new mp.Vector3(-1215.714, 2748.996, 53.85482),
            new mp.Vector3(-1014.411, 2838.341, 90.40697),
            new mp.Vector3(-731.0534, 2990.715, 116.9705),
            new mp.Vector3(-500.0697, 3004.991, 97.26997),
            new mp.Vector3(-239.9276, 3049.072, 80.95503),
            new mp.Vector3(19.44786, 3168.986, 76.54678),
            new mp.Vector3(246.2051, 3401.414, 93.59167),
            new mp.Vector3(574.3661, 3759.073, 102.2266),
            new mp.Vector3(792.6903, 3859.197, 132.8106),
            new mp.Vector3(1128.742, 3954.718, 151.6207),
            new mp.Vector3(1364.291, 4078.026, 211.1782),
            new mp.Vector3(1611.382, 4487.889, 202.1349),
            new mp.Vector3(1751.325, 4837.006, 227.7569),
            new mp.Vector3(1903.624, 4953.317, 121.6842),
            new mp.Vector3(2009.624, 5023.588, 74.69333),
            new mp.Vector3(2163.365, 5109.663, 70.46711),
            new mp.Vector3(2330.332, 5190.927, 103.7355),
            new mp.Vector3(2472.718, 5378.226, 120.6732),
            new mp.Vector3(2468.835, 5586.021, 105.2496),
            new mp.Vector3(2414.309, 5756.092, 118.885),
            new mp.Vector3(2323.239, 5902.849, 134.752),
            new mp.Vector3(2034.736, 6200.139, 114.4084),
            new mp.Vector3(1677.819, 6404.228, 97.79352),
            new mp.Vector3(1269.832, 6467.859, 102.6725),
            new mp.Vector3(941.7333, 6496.785, 124.398),
            new mp.Vector3(454.95, 6504.75, 119.0364),
            new mp.Vector3(42.15949, 6347.042, 107.6805),
            new mp.Vector3(-104.9733, 6204.209, 115.8746),
            new mp.Vector3(-367.2477, 5863.986, 137.359),
            new mp.Vector3(-444.0391, 5701.549, 134.9059),
            new mp.Vector3(-495.1879, 5351.142, 165.2418),
            new mp.Vector3(-547.8777, 5098.871, 228.5028),
            new mp.Vector3(-545.7932, 4865.092, 265.6498),
            new mp.Vector3(-412.6012, 4529.979, 284.8928),
            new mp.Vector3(-202.4118, 4204.798, 287.5317),
            new mp.Vector3(-146.3154, 4001.795, 248.699),
            new mp.Vector3(-95.2504, 3670.635, 200.5694),
            new mp.Vector3(409.359, 3250.163, 104.2805),
            new mp.Vector3(723.1146, 3058.125, 65.77197),
            new mp.Vector3(964.0567, 3051.771, 55.35189),
            new mp.Vector3(1696.145, 3253.448, 41.35717),
        ]
    },
};

global.schoolCones = {
    [0]: [
        {
            Model: "csx_saltconcclustr_b_",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1663.499, -902.923, 6.681),
            ],
            Rotations: [
                new mp.Vector3(4, -1, -13),
            ]
        },
        {
            Model: "prop_barier_conc_01a",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1650.818, -831.607, 8.792),
                new mp.Vector3(-1651.057, -830.142, 8.8),
                new mp.Vector3(-1651.461, -832.394, 8.797),
                new mp.Vector3(-1652.516, -830.18, 8.795),
                new mp.Vector3(-1653.204, -831.001, 8.798),
                new mp.Vector3(-1654.692, -831.043, 8.8),
                new mp.Vector3(-1655.626, -830.28, 8.799),
                new mp.Vector3(-1655.963, -832.511, 8.793),
                new mp.Vector3(-1656.875, -831.772, 8.79),
                new mp.Vector3(-1657.104, -830.329, 8.795),

            ],
            Rotations: [
                new mp.Vector3(0, 0, 50.7),
                new mp.Vector3(0, 0, -40),
                new mp.Vector3(0, 0, 50.9),
                new mp.Vector3(0, 0, 50.1),
                new mp.Vector3(0, 0, 50.16),
                new mp.Vector3(0, 0, -39.3),
                new mp.Vector3(0, 0, -39.4),
                new mp.Vector3(0, 0, -38.96),
                new mp.Vector3(0, 0, -39.2),
                new mp.Vector3(0, 0, 50.2),

            ]
        },
        {
            Model: "prop_barrel_pile_03",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1651.301, -902.672, 7.5),
            ],
            Rotations: [
                new mp.Vector3(0, 0, -9),
            ]
        },
        {
            Model: "prop_bleachers_01",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1639.676, -902.267, 7.639),
            ],
            Rotations: [
                new mp.Vector3(0, 0, 87.5),
            ]
        },
        {
            Model: "prop_mp_barrier_01b",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1603.574, -900.107, 8.258),
                new mp.Vector3(-1603.947, -896.036, 8.26),
                new mp.Vector3(-1639.24, -949.26, 7.016),
                new mp.Vector3(-1643.288, -949.569, 6.918),
                new mp.Vector3(-1667.831, -852.317, 8.052),
                new mp.Vector3(-1668.109, -848.225, 8.113),
                new mp.Vector3(-1687.941, -859.51, 7.648),
                new mp.Vector3(-1715.959, -890.713, 6.793),
                new mp.Vector3(-1716.269, -886.683, 6.898),
            ],
            Rotations: [
                new mp.Vector3(0, 0, 50.3),
                new mp.Vector3(0, 0, -40),
                new mp.Vector3(0, -2, 51),
                new mp.Vector3(0, 0, -39.9),
                new mp.Vector3(0, 0, -41.7),
                new mp.Vector3(0, -1.5, 48.5),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, -40),
                new mp.Vector3(0, -2, 50),
            ]
        },
        {
            Model: "prop_mp_cone_01",
            FreezeProp: false,
            Positions: [
                new mp.Vector3(-1603.504, -870.79, 8.848),
                new mp.Vector3(-1604.689, -869.789, 8.865),
                new mp.Vector3(-1605.844, -868.808, 8.899),
                new mp.Vector3(-1606.149, -873.941, 8.769),
                new mp.Vector3(-1607.132, -867.755, 8.925),
                new mp.Vector3(-1607.164, -903.775, 8.095),
                new mp.Vector3(-1608.234, -866.845, 8.936),
                new mp.Vector3(-1608.494, -892.498, 8.302),
                new mp.Vector3(-1608.564, -871.979, 8.746),
                new mp.Vector3(-1608.747, -876.991, 8.673),
                new mp.Vector3(-1609.421, -865.874, 8.919),
                new mp.Vector3(-1609.757, -876.109, 8.671),
                new mp.Vector3(-1609.836, -873.492, 8.704),
                new mp.Vector3(-1609.986, -907.082, 8.017),
                new mp.Vector3(-1610.641, -864.862, 8.932),
                new mp.Vector3(-1611.051, -874.967, 8.674),
                new mp.Vector3(-1611.762, -863.933, 8.931),
                new mp.Vector3(-1612.114, -909.812, 7.956),
                new mp.Vector3(-1612.139, -890.342, 8.273),
                new mp.Vector3(-1612.162, -874.004, 8.668),
                new mp.Vector3(-1612.938, -862.941, 8.934),
                new mp.Vector3(-1613.407, -872.942, 8.681),
                new mp.Vector3(-1613.681, -863.802, 8.886),
                new mp.Vector3(-1614.201, -861.906, 8.924),
                new mp.Vector3(-1614.393, -889.276, 8.253),
                new mp.Vector3(-1614.531, -871.966, 8.667),
                new mp.Vector3(-1614.684, -864.958, 8.837),
                new mp.Vector3(-1614.753, -898.526, 8.078),
                new mp.Vector3(-1614.801, -902.517, 8.022),
                new mp.Vector3(-1615.312, -860.957, 8.94),
                new mp.Vector3(-1615.511, -913.832, 7.862),
                new mp.Vector3(-1615.666, -866.121, 8.807),
                new mp.Vector3(-1615.723, -870.941, 8.673),
                new mp.Vector3(-1616.562, -859.906, 8.921),
                new mp.Vector3(-1616.695, -896.03, 7.989),
                new mp.Vector3(-1616.732, -888.313, 8.129),
                new mp.Vector3(-1616.908, -869.934, 8.673),
                new mp.Vector3(-1617.098, -905.662, 7.954),
                new mp.Vector3(-1617.681, -858.962, 8.943),
                new mp.Vector3(-1618.067, -868.954, 8.672),
                new mp.Vector3(-1618.241, -916.887, 7.794),
                new mp.Vector3(-1618.882, -857.942, 8.921),
                new mp.Vector3(-1619.027, -893.422, 8.096),
                new mp.Vector3(-1619.203, -908.81, 7.887),
                new mp.Vector3(-1619.281, -867.949, 8.676),
                new mp.Vector3(-1620.014, -856.982, 8.955),
                new mp.Vector3(-1620.433, -866.987, 8.696),
                new mp.Vector3(-1620.499, -891.768, 8.101),
                new mp.Vector3(-1621.332, -855.875, 8.94),
                new mp.Vector3(-1621.694, -865.897, 8.675),
                new mp.Vector3(-1621.805, -859.099, 8.843),
                new mp.Vector3(-1621.993, -915.907, 7.764),
                new mp.Vector3(-1622.369, -854.984, 8.952),
                new mp.Vector3(-1622.767, -864.953, 8.685),
                new mp.Vector3(-1622.803, -860.274, 8.794),
                new mp.Vector3(-1623.92, -861.557, 8.736),
                new mp.Vector3(-1623.642, -853.905, 8.935),
                new mp.Vector3(-1623.797, -883.045, 10.515),
                new mp.Vector3(-1623.881, -864.007, 8.674),
                new mp.Vector3(-1624.718, -852.97, 8.973),
                new mp.Vector3(-1625.105, -862.947, 8.684),
                new mp.Vector3(-1625.927, -851.934, 8.948),
                new mp.Vector3(-1626.287, -861.943, 8.681),
                new mp.Vector3(-1626.388, -886.167, 10.515),
                new mp.Vector3(-1627.05, -850.971, 8.947),
                new mp.Vector3(-1627.94, -851.995, 8.887),
                new mp.Vector3(-1627.444, -860.964, 8.691),
                new mp.Vector3(-1627.491, -879.93, 10.515),
                new mp.Vector3(-1628.354, -849.876, 8.931),
                new mp.Vector3(-1628.547, -860.025, 8.679),
                new mp.Vector3(-1628.957, -853.192, 8.841),
                new mp.Vector3(-1629.398, -848.988, 8.957),
                new mp.Vector3(-1629.817, -858.962, 8.697),
                new mp.Vector3(-1629.965, -854.4, 8.793),
                new mp.Vector3(-1629.965, -854.4, 8.793),
                new mp.Vector3(-1630.127, -882.905, 10.515),
                new mp.Vector3(-1630.647, -847.922, 8.939),
                new mp.Vector3(-1631.068, -857.882, 8.705),
                new mp.Vector3(-1631.736, -846.998, 8.957),
                new mp.Vector3(-1632.134, -856.978, 8.686),
                new mp.Vector3(-1633.009, -845.917, 8.918),
                new mp.Vector3(-1633.31, -855.969, 8.689),
                new mp.Vector3(-1634.101, -844.987, 8.945),
                new mp.Vector3(-1634.471, -854.981, 8.688),
                new mp.Vector3(-1635.394, -843.881, 8.895),
                new mp.Vector3(-1635.591, -854.035, 8.667),
                new mp.Vector3(-1636.101, -847.377, 8.806),
                new mp.Vector3(-1636.188, -872.557, 8.235),
                new mp.Vector3(-1636.423, -842.999, 8.911),
                new mp.Vector3(-1636.787, -853.031, 8.678),
                new mp.Vector3(-1637.087, -848.573, 8.745),
                new mp.Vector3(-1637.101, -848.581, 8.626),
                new mp.Vector3(-1637.674, -841.932, 8.879),
                new mp.Vector3(-1638.083, -849.735, 8.693),
                new mp.Vector3(-1638.1, -851.911, 8.668),
                new mp.Vector3(-1638.543, -870.625, 8.232),
                new mp.Vector3(-1638.691, -875.809, 8.106),
                new mp.Vector3(-1638.754, -841.011, 8.903),
                new mp.Vector3(-1639.181, -851.009, 8.646),
                new mp.Vector3(-1639.964, -839.976, 8.886),
                new mp.Vector3(-1640.417, -849.959, 8.623),
                new mp.Vector3(-1640.903, -868.66, 8.224),
                new mp.Vector3(-1641.027, -873.847, 8.106),
                new mp.Vector3(-1641.55, -849.008, 8.619),
                new mp.Vector3(-1641.111, -839.006, 8.921),
                new mp.Vector3(-1642.149, -840.194, 8.829),
                new mp.Vector3(-1642.418, -837.897, 8.912),
                new mp.Vector3(-1642.734, -848.008, 8.591),
                new mp.Vector3(-1643.3, -841.515, 8.754),
                new mp.Vector3(-1643.453, -837.016, 8.929),
                new mp.Vector3(-1643.518, -871.755, 8.095),
                new mp.Vector3(-1643.851, -847.082, 8.575),
                new mp.Vector3(-1644.297, -842.662, 8.711),
                new mp.Vector3(-1644.297, -842.662, 8.711),
                new mp.Vector3(-1644.714, -835.943, 8.914),
                new mp.Vector3(-1645.016, -846.115, 8.573),
                new mp.Vector3(-1645.801, -835.017, 8.948),
                new mp.Vector3(-1646.333, -845.007, 8.588),
                new mp.Vector3(-1646.928, -834.065, 8.947),
                new mp.Vector3(-1647.465, -844.034, 8.573),
                new mp.Vector3(-1648.656, -843.008, 8.596),
                new mp.Vector3(-1649.081, -861.778, 10.52),
                new mp.Vector3(-1649.851, -842.02, 8.615),
                new mp.Vector3(-1651.022, -841.038, 8.63),
                new mp.Vector3(-1651.241, -836.966, 8.759),
                new mp.Vector3(-1651.678, -864.772, 10.52),
                new mp.Vector3(-1652.104, -840.127, 8.668),
                new mp.Vector3(-1652.146, -838.114, 8.714),
                new mp.Vector3(-1652.285, -858.983, 10.52),
                new mp.Vector3(-1653.08, -839.289, 8.659),
                new mp.Vector3(-1654.931, -861.968, 10.51),
                new mp.Vector3(-1655.185, -841.922, 8.558),
                new mp.Vector3(-1657.275, -835.736, 8.64),
                new mp.Vector3(-1657.356, -844.655, 8.337),
                new mp.Vector3(-1659.438, -838.274, 8.55),
                new mp.Vector3(-1659.511, -847.358, 8.331),
                new mp.Vector3(-1659.513, -852.264, 8.21),
                new mp.Vector3(-1661.747, -840.946, 8.448),
                new mp.Vector3(-1661.776, -850.182, 8.24),
                new mp.Vector3(-1664.017, -843.55, 8.37),
                new mp.Vector3(-1681.304, -862.094, 7.793),
                new mp.Vector3(-1683.062, -860.631, 7.795),
                new mp.Vector3(-1685.872, -865.74, 7.695),
                new mp.Vector3(-1688.713, -865.619, 7.663),
                new mp.Vector3(-1628.574, -909.78, 7.733),
                new mp.Vector3(-1626.552, -907.341, 7.731),
                new mp.Vector3(-1635.222, -905.016, 7.654),
            ],
            Rotations: [
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
            ]
        },
        {
            Model: "prop_mp_ramp_03_tu",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1657.857, -856.743, 8.891),
                new mp.Vector3(-1646.347, -866.701, 8.881),
                new mp.Vector3(-1632.643, -878.133, 8.879),
                new mp.Vector3(-1621.043, -887.983, 8.857),
            ],
            Rotations: [
                new mp.Vector3(0, 0, -131),
                new mp.Vector3(0, 0, 49),
                new mp.Vector3(0, 0, -130.3),
                new mp.Vector3(0, 0, 50),
            ]
        },
        {
            Model: "prop_sign_road_05e",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1663.556, -855.997, 8.018),
            ],
            Rotations: [
                new mp.Vector3(0, 0, 140),
            ]
        },
        {
            Model: "prop_temp_block_blocker",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1652.073, -861.681, 3.54),
                new mp.Vector3(-1626.844, -883.088, 3.535),
            ],
            Rotations: [
                new mp.Vector3(0, 0, 49),
                new mp.Vector3(0, 0, 49.9),
            ]
        },
        {
            Model: "prop_tyre_wall_01",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1632.944, -902.385, 7.725),
                new mp.Vector3(-1635.999, -901.21, 7.729),
                new mp.Vector3(-1638.483, -904.543, 7.616),
                new mp.Vector3(-1639.323, -900.649, 7.679),
                new mp.Vector3(-1642.597, -900.534, 7.637),
                new mp.Vector3(-1661.378, -904.863, 7.33),
                new mp.Vector3(-1664.586, -903.861, 7.308),
                new mp.Vector3(-1664.798, -899.88, 7.381),
                new mp.Vector3(-1667.521, -902.33, 7.318),
                new mp.Vector3(-1667.545, -898.09, 7.35),
                new mp.Vector3(-1669.855, -895.777, 7.38),
                new mp.Vector3(-1670.008, -900.118, 7.319),
                new mp.Vector3(-1672.334, -897.716, 7.322),
                new mp.Vector3(-1677.348, -867.773, 7.664),
                new mp.Vector3(-1679.448, -865.314, 7.667),
                new mp.Vector3(-1680.617, -870.183, 7.591),
                new mp.Vector3(-1682.391, -867.811, 7.597),
            ],
            Rotations: [
                new mp.Vector3(0, 0, -30.7),
                new mp.Vector3(0, 0, -15),
                new mp.Vector3(0, 0, -3),
                new mp.Vector3(0, 0, -3.6),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, -15),
                new mp.Vector3(0, 0, -25),
                new mp.Vector3(0, 0, -23),
                new mp.Vector3(0, 0, -35),
                new mp.Vector3(0, 0, -40),
                new mp.Vector3(0, 0, -50),
                new mp.Vector3(0, 0, -44),
                new mp.Vector3(0, 0, -51.1),
                new mp.Vector3(0, 0, -58),
                new mp.Vector3(0, 0, -40),
                new mp.Vector3(0, 0, -54.8),
                new mp.Vector3(0, 0, -47),
            ]
        },
        {
            Model: "prop_tyre_wall_02",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1643.441, -904.642, 7.545),
                new mp.Vector3(-1647.524, -900.91, 7.583),
                new mp.Vector3(-1653.996, -901.462, 7.447),
                new mp.Vector3(-1660.33, -901.161, 7.389),
                new mp.Vector3(-1672.032, -891.486, 7.4),
                new mp.Vector3(-1673.578, -885.226, 7.475),
                new mp.Vector3(-1674.164, -878.717, 7.552),
                new mp.Vector3(-1674.911, -893.496, 7.347),
                new mp.Vector3(-1675.417, -872.307, 7.622),
                new mp.Vector3(-1678.934, -874.55, 7.554),
            ],
            Rotations: [
                new mp.Vector3(0, 0, 3.9),
                new mp.Vector3(0, 0, 6.9),
                new mp.Vector3(0, 0, 4),
                new mp.Vector3(0, 0, -10),
                new mp.Vector3(0, 0, -69),
                new mp.Vector3(0, 0, -82.6),
                new mp.Vector3(0, 0, -87),
                new mp.Vector3(0, 0, -64.7),
                new mp.Vector3(0, 0, -71.9),
                new mp.Vector3(0, 0, -72),
            ]
        },
        {
            Model: "prop_tyre_wall_03",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1653.208, -905.094, 7.455),
                new mp.Vector3(-1677.116, -884.145, 7.408),
            ],
            Rotations: [
                new mp.Vector3(0, 0, 2.1),
                new mp.Vector3(0, 0, -83.1),
            ]
        },
    ],
    [1]: [
        {
            Model: "prop_mp_barrier_01b",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1603.574, -900.107, 8.258),
                new mp.Vector3(-1603.947, -896.036, 8.26),
                new mp.Vector3(-1639.24, -949.26, 7.016),
                new mp.Vector3(-1643.288, -949.569, 6.918),
                new mp.Vector3(-1646.643, -831.804, 8.951),
                new mp.Vector3(-1647.066, -827.666, 9.065),
                new mp.Vector3(-1651.106, -827.945, 8.943),
                new mp.Vector3(-1655.116, -828.239, 8.834),
                new mp.Vector3(-1658.855, -832.514, 8.654),
                new mp.Vector3(-1659.149, -828.53, 8.747),
                new mp.Vector3(-1667.831, -852.317, 8.052),
                new mp.Vector3(-1668.109, -848.225, 8.113),
                new mp.Vector3(-1687.941, -859.51, 7.648),
                new mp.Vector3(-1715.959, -890.713, 6.793),
                new mp.Vector3(-1716.269, -886.683, 6.898),
            ],
            Rotations: [
                new mp.Vector3(0, 0, 50.3),
                new mp.Vector3(0, 0, -40),
                new mp.Vector3(0, -2, 51),
                new mp.Vector3(0, 0, -39.9),
                new mp.Vector3(0, -1.99, 50),
                new mp.Vector3(0, 0, -40.8),
                new mp.Vector3(0, -2.38, 50),
                new mp.Vector3(0, 0, -40.68),
                new mp.Vector3(0, 0, -40.6),
                new mp.Vector3(0, -1.8, 49.5),
                new mp.Vector3(0, 0, -41.7),
                new mp.Vector3(0, -1.5, 48.5),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, -40),
                new mp.Vector3(0, -2, 50),
            ]
        },
        {
            Model: "prop_mp_cone_01",
            FreezeProp: false,
            Positions: [
                new mp.Vector3(-1603.504, -870.79, 8.848),
                new mp.Vector3(-1604.689, -869.789, 8.865),
                new mp.Vector3(-1605.844, -868.808, 8.899),
                new mp.Vector3(-1606.149, -873.941, 8.769),
                new mp.Vector3(-1607.132, -867.755, 8.925),
                new mp.Vector3(-1607.164, -903.775, 8.095),
                new mp.Vector3(-1608.234, -866.845, 8.936),
                new mp.Vector3(-1608.494, -892.498, 8.302),
                new mp.Vector3(-1608.564, -871.979, 8.746),
                new mp.Vector3(-1608.747, -876.991, 8.673),
                new mp.Vector3(-1609.421, -865.874, 8.919),
                new mp.Vector3(-1609.757, -876.109, 8.671),
                new mp.Vector3(-1609.836, -873.492, 8.704),
                new mp.Vector3(-1609.986, -907.082, 8.017),
                new mp.Vector3(-1610.641, -864.862, 8.932),
                new mp.Vector3(-1611.051, -874.967, 8.674),
                new mp.Vector3(-1611.762, -863.933, 8.931),
                new mp.Vector3(-1612.114, -909.812, 7.956),
                new mp.Vector3(-1612.139, -890.342, 8.273),
                new mp.Vector3(-1612.162, -874.004, 8.668),
                new mp.Vector3(-1612.938, -862.941, 8.934),
                new mp.Vector3(-1613.407, -872.942, 8.681),
                new mp.Vector3(-1613.681, -863.802, 8.886),
                new mp.Vector3(-1614.201, -861.906, 8.924),
                new mp.Vector3(-1614.393, -889.276, 8.253),
                new mp.Vector3(-1614.531, -871.966, 8.667),
                new mp.Vector3(-1614.684, -864.958, 8.837),
                new mp.Vector3(-1614.753, -898.526, 8.078),
                new mp.Vector3(-1614.801, -902.517, 8.022),
                new mp.Vector3(-1615.312, -860.957, 8.94),
                new mp.Vector3(-1615.511, -913.832, 7.862),
                new mp.Vector3(-1615.666, -866.121, 8.807),
                new mp.Vector3(-1615.723, -870.941, 8.673),
                new mp.Vector3(-1616.562, -859.906, 8.921),
                new mp.Vector3(-1616.695, -896.03, 7.989),
                new mp.Vector3(-1616.732, -888.313, 8.129),
                new mp.Vector3(-1616.908, -869.934, 8.673),
                new mp.Vector3(-1617.098, -905.662, 7.954),
                new mp.Vector3(-1617.681, -858.962, 8.943),
                new mp.Vector3(-1618.067, -868.954, 8.672),
                new mp.Vector3(-1618.241, -916.887, 7.794),
                new mp.Vector3(-1618.882, -857.942, 8.921),
                new mp.Vector3(-1619.027, -893.422, 8.096),
                new mp.Vector3(-1619.203, -908.81, 7.887),
                new mp.Vector3(-1619.281, -867.949, 8.676),
                new mp.Vector3(-1620.014, -856.982, 8.955),
                new mp.Vector3(-1620.433, -866.987, 8.696),
                new mp.Vector3(-1620.499, -891.768, 8.101),
                new mp.Vector3(-1621.332, -855.875, 8.94),
                new mp.Vector3(-1621.694, -865.897, 8.675),
                new mp.Vector3(-1621.805, -859.099, 8.843),
                new mp.Vector3(-1621.993, -915.907, 7.764),
                new mp.Vector3(-1622.369, -854.984, 8.952),
                new mp.Vector3(-1622.767, -864.953, 8.685),
                new mp.Vector3(-1622.803, -860.274, 8.794),
                new mp.Vector3(-1623.92, -861.557, 8.736),
                new mp.Vector3(-1623.92, -861.557, 8.736),
                new mp.Vector3(-1623.642, -853.905, 8.935),
                new mp.Vector3(-1623.797, -883.045, 10.515),
                new mp.Vector3(-1623.881, -864.007, 8.674),
                new mp.Vector3(-1624.718, -852.97, 8.973),
                new mp.Vector3(-1625.105, -862.947, 8.684),
                new mp.Vector3(-1625.927, -851.934, 8.948),
                new mp.Vector3(-1626.287, -861.943, 8.681),
                new mp.Vector3(-1626.388, -886.167, 10.515),
                new mp.Vector3(-1627.05, -850.971, 8.947),
                new mp.Vector3(-1627.94, -851.995, 8.887),
                new mp.Vector3(-1627.444, -860.964, 8.691),
                new mp.Vector3(-1627.491, -879.93, 10.515),
                new mp.Vector3(-1628.354, -849.876, 8.931),
                new mp.Vector3(-1628.547, -860.025, 8.679),
                new mp.Vector3(-1628.957, -853.192, 8.841),
                new mp.Vector3(-1629.398, -848.988, 8.957),
                new mp.Vector3(-1629.817, -858.962, 8.697),
                new mp.Vector3(-1629.965, -854.4, 8.793),
                new mp.Vector3(-1630.127, -882.905, 10.515),
                new mp.Vector3(-1630.647, -847.922, 8.939),
                new mp.Vector3(-1631.068, -857.882, 8.705),
                new mp.Vector3(-1631.736, -846.998, 8.957),
                new mp.Vector3(-1632.134, -856.978, 8.686),
                new mp.Vector3(-1633.009, -845.917, 8.918),
                new mp.Vector3(-1633.31, -855.969, 8.689),
                new mp.Vector3(-1634.101, -844.987, 8.945),
                new mp.Vector3(-1634.471, -854.981, 8.688),
                new mp.Vector3(-1635.394, -843.881, 8.895),
                new mp.Vector3(-1635.591, -854.035, 8.667),
                new mp.Vector3(-1636.101, -847.377, 8.806),
                new mp.Vector3(-1636.188, -872.557, 8.235),
                new mp.Vector3(-1636.423, -842.999, 8.911),
                new mp.Vector3(-1636.787, -853.031, 8.678),
                new mp.Vector3(-1637.101, -848.581, 8.626),
                new mp.Vector3(-1637.674, -841.932, 8.879),
                new mp.Vector3(-1638.083, -849.735, 8.693),
                new mp.Vector3(-1638.083, -849.735, 8.693),
                new mp.Vector3(-1638.1, -851.911, 8.668),
                new mp.Vector3(-1638.543, -870.625, 8.232),
                new mp.Vector3(-1638.691, -875.809, 8.106),
                new mp.Vector3(-1638.754, -841.011, 8.903),
                new mp.Vector3(-1639.181, -851.009, 8.646),
                new mp.Vector3(-1639.964, -839.976, 8.886),
                new mp.Vector3(-1640.417, -849.959, 8.623),
                new mp.Vector3(-1640.903, -868.66, 8.224),
                new mp.Vector3(-1641.027, -873.847, 8.106),
                new mp.Vector3(-1641.55, -849.008, 8.619),
                new mp.Vector3(-1641.111, -839.006, 8.921),
                new mp.Vector3(-1642.149, -840.194, 8.829),
                new mp.Vector3(-1642.418, -837.897, 8.912),
                new mp.Vector3(-1642.734, -848.008, 8.591),
                new mp.Vector3(-1643.3, -841.515, 8.754),
                new mp.Vector3(-1643.453, -837.016, 8.929),
                new mp.Vector3(-1643.518, -871.755, 8.095),
                new mp.Vector3(-1643.851, -847.082, 8.575),
                new mp.Vector3(-1644.297, -842.662, 8.711),
                new mp.Vector3(-1644.714, -835.943, 8.914),
                new mp.Vector3(-1645.016, -846.115, 8.573),
                new mp.Vector3(-1645.801, -835.017, 8.948),
                new mp.Vector3(-1646.333, -845.007, 8.588),
                new mp.Vector3(-1646.928, -834.065, 8.947),
                new mp.Vector3(-1647.465, -844.034, 8.573),
                new mp.Vector3(-1648.656, -843.008, 8.596),
                new mp.Vector3(-1649.081, -861.778, 10.52),
                new mp.Vector3(-1649.851, -842.02, 8.615),
                new mp.Vector3(-1651.022, -841.038, 8.63),
                new mp.Vector3(-1651.241, -836.966, 8.759),
                new mp.Vector3(-1651.678, -864.772, 10.52),
                new mp.Vector3(-1652.104, -840.127, 8.668),
                new mp.Vector3(-1652.146, -838.114, 8.714),
                new mp.Vector3(-1652.285, -858.983, 10.52),
                new mp.Vector3(-1653.08, -839.289, 8.659),
                new mp.Vector3(-1654.931, -861.968, 10.51),
                new mp.Vector3(-1655.185, -841.922, 8.558),
                new mp.Vector3(-1657.275, -835.736, 8.64),
                new mp.Vector3(-1657.356, -844.655, 8.337),
                new mp.Vector3(-1659.438, -838.274, 8.55),
                new mp.Vector3(-1659.511, -847.358, 8.331),
                new mp.Vector3(-1659.513, -852.264, 8.21),
                new mp.Vector3(-1661.747, -840.946, 8.448),
                new mp.Vector3(-1661.776, -850.182, 8.24),
                new mp.Vector3(-1664.017, -843.55, 8.37),
                new mp.Vector3(-1681.304, -862.094, 7.793),
                new mp.Vector3(-1683.062, -860.631, 7.795),
                new mp.Vector3(-1685.872, -865.74, 7.695),
                new mp.Vector3(-1688.713, -865.619, 7.663),
                new mp.Vector3(-1628.574, -909.78, 7.733),
                new mp.Vector3(-1625.568, -906.295, 7.732),
                new mp.Vector3(-1635.222, -905.016, 7.654),
            ],
            Rotations: [
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
            ]
        },
        {
            Model: "prop_temp_block_blocker",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1652.073, -861.68, 3.54),
                new mp.Vector3(-1626.844, -883.088, 3.535),
            ],
            Rotations: [
                new mp.Vector3(0, 0, 49),
                new mp.Vector3(0, 0, 49.9),
            ]
        },
        {
            Model: "prop_mp_ramp_03_tu",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1646.347, -866.701, 8.88),
                new mp.Vector3(-1632.643, -878.133, 8.879),
                new mp.Vector3(-1621.043, -887.983, 8.857),
                new mp.Vector3(-1657.857, -856.743, 8.891),
            ],
            Rotations: [
                new mp.Vector3(0, 0, 49),
                new mp.Vector3(0, 0, -130.3),
                new mp.Vector3(0, 0, 50),
                new mp.Vector3(0, 0, -131),
            ]
        },
        {
            Model: "prop_sign_road_05e",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1663.556, -855.997, 8.018),
            ],
            Rotations: [
                new mp.Vector3(0, 0, 140),
            ]
        },
        {
            Model: "prop_tyre_wall_01",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1632.207, -901.572, 7.723),
                new mp.Vector3(-1635.446, -900.66, 7.702),
                new mp.Vector3(-1638.483, -904.543, 7.616),
                new mp.Vector3(-1638.797, -900.247, 7.677),
                new mp.Vector3(-1661.378, -904.863, 7.33),
                new mp.Vector3(-1661.878, -900.298, 7.422),
                new mp.Vector3(-1664.586, -903.861, 7.308),
                new mp.Vector3(-1664.871, -898.726, 7.402),
                new mp.Vector3(-1667.331, -896.525, 7.398),
                new mp.Vector3(-1667.521, -902.33, 7.318),
                new mp.Vector3(-1669.451, -894.036, 7.419),
                new mp.Vector3(-1670.008, -900.118, 7.319),
                new mp.Vector3(-1672.334, -897.716, 7.322),
                new mp.Vector3(-1674.097, -878.111, 7.572),
                new mp.Vector3(-1674.982, -874.81, 7.61),
                new mp.Vector3(-1676.047, -871.555, 7.635),
                new mp.Vector3(-1677.598, -868.629, 7.653),
                new mp.Vector3(-1679.656, -865.912, 7.669),
                new mp.Vector3(-1680.617, -870.183, 7.591),
                new mp.Vector3(-1682.391, -867.811, 7.597),
            ],
            Rotations: [
                new mp.Vector3(0, 0, -20),
                new mp.Vector3(0, 0, -10),
                new mp.Vector3(0, 0, -3),
                new mp.Vector3(0, 0, -2),
                new mp.Vector3(0, 0, -15),
                new mp.Vector3(0, 0, -20),
                new mp.Vector3(0, 0, -25),
                new mp.Vector3(0, 0, -35),
                new mp.Vector3(0, 0, -47.9),
                new mp.Vector3(0, 0, -35),
                new mp.Vector3(0, 0, -55),
                new mp.Vector3(0, 0, -44),
                new mp.Vector3(0, 0, -51.1),
                new mp.Vector3(0, 0, -75),
                new mp.Vector3(0, 0, -75),
                new mp.Vector3(0, 0, -65),
                new mp.Vector3(0, 0, -55),
                new mp.Vector3(0, 0, -50),
                new mp.Vector3(0, 0, -54.8),
                new mp.Vector3(0, 0, -47),
            ]
        },
        {
            Model: "prop_tyre_wall_02",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1643.441, -904.642, 7.545),
                new mp.Vector3(-1656.949, -900.859, 7.458),
                new mp.Vector3(-1671.612, -889.514, 7.449),
                new mp.Vector3(-1673.29, -883.094, 7.509),
                new mp.Vector3(-1674.911, -893.496, 7.347),
                new mp.Vector3(-1678.934, -874.55, 7.554),
            ],
            Rotations: [
                new mp.Vector3(0, 0, 3.9),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, -70),
                new mp.Vector3(0, 0, -81),
                new mp.Vector3(0, 0, -64.7),
                new mp.Vector3(0, 0, -72),
            ]
        },
        {
            Model: "prop_tyre_wall_03",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1647.052, -900.506, 7.6),
                new mp.Vector3(-1653.208, -905.094, 7.455),
                new mp.Vector3(-1677.116, -884.145, 7.408),
            ],
            Rotations: [
                new mp.Vector3(0, 0, 3),
                new mp.Vector3(0, 0, 2.1),
                new mp.Vector3(0, 0, -83.1),
            ]
        },
    ],
    [2]: [
        {
            Model: "prop_mp_barrier_01b",
            FreezeProp: true,
            Positions: [
                new mp.Vector3(-1596.876, -887.381, 8.642),
                new mp.Vector3(-1601.307, -883.666, 8.643),
                new mp.Vector3(-1658.906, -838.232, 8.449),
                new mp.Vector3(-1662.639, -842.689, 8.443),
                new mp.Vector3(-1646.352, -849.457, 8.215),
                new mp.Vector3(-1651.775, -851.437, 8.211),
                new mp.Vector3(-1671.876, -853.507, 7.915),
                new mp.Vector3(-1675.638, -857.831, 7.912),
                new mp.Vector3(-1667.142, -857.555, 7.957),
                new mp.Vector3(-1670.866, -861.991, 7.951),
                new mp.Vector3(-1717.298, -912.236, 6.556),
                new mp.Vector3(-1712.875, -915.96, 6.556),
                new mp.Vector3(-1708.454, -919.727, 6.556),
                new mp.Vector3(-1704.057, -923.164, 6.561),
                new mp.Vector3(-1698.953, -925.827, 6.564),
                new mp.Vector3(-1693.371, -926.82, 6.571),
                new mp.Vector3(-1687.932, -925.477, 6.59),
                new mp.Vector3(-1683.517, -921.983, 6.591),
                new mp.Vector3(-1654.087, -879.868, 7.759),
                new mp.Vector3(-1658.162, -880.171, 7.721),
                new mp.Vector3(-1614.247, -920.458, 7.669),
                new mp.Vector3(-1618.307, -920.755, 7.672),

            ],
            Rotations: [
                new mp.Vector3(0, 0, -40),
                new mp.Vector3(0, 0, -40),
                new mp.Vector3(0, 0, 50),
                new mp.Vector3(0, 0, 50),
                new mp.Vector3(0.01, 0, 20),
                new mp.Vector3(0, 0, 20),
                new mp.Vector3(0, 0, 48.9),
                new mp.Vector3(0, 0, 49),
                new mp.Vector3(0, 0, 50),
                new mp.Vector3(0, 0, 50),
                new mp.Vector3(0, 0, -40),
                new mp.Vector3(0, 0, -40),
                new mp.Vector3(0, 0, -41),
                new mp.Vector3(0, 0, -35),
                new mp.Vector3(0, 0, -20),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 28),
                new mp.Vector3(0, 0, 49),
                new mp.Vector3(0, 0, -40),
                new mp.Vector3(0, 0, 50),
                new mp.Vector3(0, 0, 50),
                new mp.Vector3(0, 0, -40),

            ]
        },
        {
            Model: "prop_mp_cone_01",
            FreezeProp: false,
            Positions: [
                new mp.Vector3(-1606.835, -879.472, 8.634),
                new mp.Vector3(-1604.52, -881.495, 8.595),
                new mp.Vector3(-1609.15, -877.468, 8.668),
                new mp.Vector3(-1611.538, -875.465, 8.672),
                new mp.Vector3(-1613.876, -873.487, 8.67),
                new mp.Vector3(-1616.211, -871.487, 8.668),
                new mp.Vector3(-1618.557, -869.493, 8.666),
                new mp.Vector3(-1620.912, -867.518, 8.667),
                new mp.Vector3(-1623.263, -865.515, 8.67),
                new mp.Vector3(-1625.607, -863.528, 8.671),
                new mp.Vector3(-1627.945, -861.525, 8.674),
                new mp.Vector3(-1630.294, -859.543, 8.68),
                new mp.Vector3(-1605.959, -868.93, 8.902),
                new mp.Vector3(-1608.306, -866.922, 8.934),
                new mp.Vector3(-1610.65, -864.947, 8.936),
                new mp.Vector3(-1612.987, -862.937, 8.939),
                new mp.Vector3(-1615.341, -860.957, 8.94),
                new mp.Vector3(-1617.687, -858.967, 8.934),
                new mp.Vector3(-1620.021, -856.967, 8.936),
                new mp.Vector3(-1622.369, -854.971, 8.954),
                new mp.Vector3(-1624.701, -852.951, 8.954),
                new mp.Vector3(-1627.047, -850.978, 8.944),
                new mp.Vector3(-1629.395, -848.981, 8.945),
                new mp.Vector3(-1631.731, -846.986, 8.95),
                new mp.Vector3(-1634.082, -845, 8.927),
                new mp.Vector3(-1636.413, -842.988, 8.905),
                new mp.Vector3(-1638.749, -840.998, 8.902),
                new mp.Vector3(-1641.83, -839.894, 8.84),
                new mp.Vector3(-1645.015, -838.803, 8.73),
                new mp.Vector3(-1648.25, -837.741, 8.791),
                new mp.Vector3(-1650.86, -837.043, 8.771),
                new mp.Vector3(-1653.668, -836.477, 8.716),
                new mp.Vector3(-1632.702, -857.499, 8.68),
                new mp.Vector3(-1634.927, -855.62, 8.653),
                new mp.Vector3(-1637.285, -853.601, 8.643),
                new mp.Vector3(-1639.675, -851.534, 8.635),
                new mp.Vector3(-1642.175, -849.495, 8.583),
                new mp.Vector3(-1657.529, -853.237, 8.231),
                new mp.Vector3(-1661.817, -854.41, 8.131),
                new mp.Vector3(-1666.09, -846.765, 8.288),
                new mp.Vector3(-1668.17, -849.2, 8.14),
                new mp.Vector3(-1684.963, -868.808, 7.683),
                new mp.Vector3(-1680.324, -872.919, 7.68),
                new mp.Vector3(-1676.505, -868.541, 7.774),
                new mp.Vector3(-1681.024, -864.181, 7.787),
                new mp.Vector3(-1690.839, -876.536, 8.029),
                new mp.Vector3(-1686.895, -879.83, 8.029),
                new mp.Vector3(-1691.691, -885.49, 8.039),
                new mp.Vector3(-1695.646, -882.171, 8.029),
                new mp.Vector3(-1700.8, -888.388, 8.027),
                new mp.Vector3(-1696.89, -891.621, 8.027),
                new mp.Vector3(-1664.498, -887.671, 7.66),
                new mp.Vector3(-1668.505, -892.4, 7.547),
                new mp.Vector3(-1677.88, -903.426, 7.285),
                new mp.Vector3(-1659.439, -892.392, 7.649),
                new mp.Vector3(-1663.307, -896.919, 7.55),
                new mp.Vector3(-1672.63, -907.929, 7.297),
                new mp.Vector3(-1668.467, -903.012, 7.407),
                new mp.Vector3(-1673.828, -898.641, 7.394),
                new mp.Vector3(-1647.269, -884.237, 7.913),
                new mp.Vector3(-1642.608, -888.219, 7.905),
                new mp.Vector3(-1638.239, -892.622, 7.897),
                new mp.Vector3(-1633.813, -896.872, 7.895),
                new mp.Vector3(-1629.153, -900.902, 7.9),
                new mp.Vector3(-1624.45, -904.851, 7.9),
                new mp.Vector3(-1654.084, -892.186, 7.723),
                new mp.Vector3(-1648.908, -895.616, 7.733),
                new mp.Vector3(-1643.968, -899.285, 7.736),
                new mp.Vector3(-1639.266, -903.326, 7.741),
                new mp.Vector3(-1634.61, -907.321, 7.744),
                new mp.Vector3(-1629.938, -911.357, 7.754),
                new mp.Vector3(-1625.167, -915.262, 7.749),
            ],
            Rotations: [
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(-0.01, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0.01, 0, 0),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0.04),
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
            ]
        },
    ]
};





/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {global.costumeConfigs = JSON.parse(`{"1":{"Gender":true,"TypeArmor":-1,"ClothesDto":{},"PropsDto":{}},"2":{"Gender":false,"TypeArmor":-1,"ClothesDto":{},"PropsDto":{}},"3":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":375,"Texture":0},"4":{"Drawable":102,"Texture":14},"6":{"Drawable":77,"Texture":1},"3":{"Drawable":1,"Texture":0}},"PropsDto":{}},"4":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":523,"Texture":2},"11":{"Drawable":128,"Texture":0},"6":{"Drawable":511,"Texture":2},"9":{"Drawable":28,"Texture":0},"3":{"Drawable":8,"Texture":0}},"PropsDto":{}},"5":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":306,"Texture":10},"4":{"Drawable":117,"Texture":9},"6":{"Drawable":93,"Texture":8},"3":{"Drawable":13,"Texture":3}},"PropsDto":{}},"6":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":523,"Texture":0},"11":{"Drawable":334,"Texture":0},"6":{"Drawable":501,"Texture":8},"9":{"Drawable":28,"Texture":2},"3":{"Drawable":0,"Texture":0}},"PropsDto":{}},"7":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":14,"Texture":1},"4":{"Drawable":1,"Texture":9},"6":{"Drawable":7,"Texture":7},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":1}},"PropsDto":{}},"8":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":524,"Texture":0},"11":{"Drawable":14,"Texture":1},"6":{"Drawable":512,"Texture":1},"9":{"Drawable":28,"Texture":1},"3":{"Drawable":4,"Texture":0}},"PropsDto":{}},"10":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":525,"Texture":0},"11":{"Drawable":96,"Texture":0},"6":{"Drawable":515,"Texture":1},"9":{"Drawable":28,"Texture":8},"3":{"Drawable":4,"Texture":0}},"PropsDto":{}},"11":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":79,"Texture":0},"4":{"Drawable":117,"Texture":0},"6":{"Drawable":77,"Texture":7},"3":{"Drawable":4,"Texture":0}},"PropsDto":{}},"12":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":523,"Texture":1},"11":{"Drawable":281,"Texture":0},"6":{"Drawable":503,"Texture":0},"9":{"Drawable":28,"Texture":4},"3":{"Drawable":1,"Texture":0}},"PropsDto":{}},"13":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":11,"Texture":1},"4":{"Drawable":35,"Texture":0},"7":{"Drawable":22,"Texture":3},"9":{"Drawable":6,"Texture":1},"3":{"Drawable":1,"Texture":0},"6":{"Drawable":21,"Texture":0},"8":{"Drawable":158,"Texture":0}},"PropsDto":{}},"22":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":533,"Texture":2},"4":{"Drawable":508,"Texture":2},"6":{"Drawable":501,"Texture":18},"3":{"Drawable":18,"Texture":0},"9":{"Drawable":28,"Texture":6}},"PropsDto":{}},"23":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":349,"Texture":1},"4":{"Drawable":35,"Texture":0},"9":{"Drawable":6,"Texture":1},"3":{"Drawable":17,"Texture":0},"6":{"Drawable":21,"Texture":0},"8":{"Drawable":153,"Texture":0},"7":{"Drawable":22,"Texture":3}},"PropsDto":{"1":{"Drawable":2,"Texture":0},"0":{"Drawable":9,"Texture":0}}},"25":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":504,"Texture":0},"4":{"Drawable":10,"Texture":0},"6":{"Drawable":10,"Texture":0},"3":{"Drawable":75,"Texture":0},"8":{"Drawable":153,"Texture":0},"9":{"Drawable":500,"Texture":1}},"PropsDto":{}},"26":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":504,"Texture":1},"4":{"Drawable":10,"Texture":0},"8":{"Drawable":153,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":75,"Texture":0},"6":{"Drawable":10,"Texture":0}},"PropsDto":{}},"27":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":504,"Texture":2},"4":{"Drawable":10,"Texture":0},"8":{"Drawable":153,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":75,"Texture":0},"6":{"Drawable":10,"Texture":0}},"PropsDto":{}},"28":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":504,"Texture":3},"4":{"Drawable":10,"Texture":0},"8":{"Drawable":153,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":75,"Texture":0},"6":{"Drawable":10,"Texture":0}},"PropsDto":{}},"29":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":504,"Texture":4},"4":{"Drawable":10,"Texture":0},"8":{"Drawable":129,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":75,"Texture":0},"6":{"Drawable":10,"Texture":0}},"PropsDto":{}},"30":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":504,"Texture":5},"4":{"Drawable":10,"Texture":0},"8":{"Drawable":129,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":75,"Texture":0},"6":{"Drawable":10,"Texture":0}},"PropsDto":{}},"31":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":504,"Texture":6},"4":{"Drawable":10,"Texture":0},"8":{"Drawable":129,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":75,"Texture":0},"6":{"Drawable":6,"Texture":0}},"PropsDto":{}},"32":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":505,"Texture":0},"4":{"Drawable":96,"Texture":0},"8":{"Drawable":130,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":74,"Texture":0},"6":{"Drawable":10,"Texture":0}},"PropsDto":{}},"33":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":505,"Texture":1},"4":{"Drawable":96,"Texture":0},"8":{"Drawable":130,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":74,"Texture":0},"6":{"Drawable":10,"Texture":0}},"PropsDto":{}},"34":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":505,"Texture":2},"4":{"Drawable":96,"Texture":0},"8":{"Drawable":130,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":74,"Texture":0},"6":{"Drawable":10,"Texture":0}},"PropsDto":{}},"35":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":505,"Texture":3},"4":{"Drawable":96,"Texture":0},"8":{"Drawable":130,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":74,"Texture":0},"6":{"Drawable":10,"Texture":0}},"PropsDto":{}},"36":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":505,"Texture":4},"4":{"Drawable":96,"Texture":0},"8":{"Drawable":130,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":74,"Texture":0},"6":{"Drawable":10,"Texture":0}},"PropsDto":{}},"37":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":505,"Texture":5},"4":{"Drawable":60,"Texture":3},"5":{"Drawable":505,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":74,"Texture":0},"6":{"Drawable":21,"Texture":0}},"PropsDto":{}},"39":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":111,"Texture":3},"4":{"Drawable":130,"Texture":1},"5":{"Drawable":514,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":31,"Texture":0},"6":{"Drawable":25,"Texture":0},"8":{"Drawable":153,"Texture":0}},"PropsDto":{"0":{"Drawable":39,"Texture":0}}},"41":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":29,"Texture":0},"4":{"Drawable":35,"Texture":0},"9":{"Drawable":10,"Texture":1},"3":{"Drawable":31,"Texture":0},"6":{"Drawable":21,"Texture":0},"8":{"Drawable":75,"Texture":0}},"PropsDto":{}},"42":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":220,"Texture":20},"4":{"Drawable":121,"Texture":0},"5":{"Drawable":58,"Texture":6},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":172,"Texture":0},"6":{"Drawable":25,"Texture":0}},"PropsDto":{"0":{"Drawable":19,"Texture":0},"1":{"Drawable":8,"Texture":0}}},"43":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":61,"Texture":1},"4":{"Drawable":130,"Texture":3},"6":{"Drawable":25,"Texture":0},"9":{"Drawable":16,"Texture":2},"3":{"Drawable":179,"Texture":0}},"PropsDto":{"0":{"Drawable":150,"Texture":0}}},"44":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":542,"Texture":0},"4":{"Drawable":96,"Texture":1},"7":{"Drawable":126,"Texture":0},"3":{"Drawable":86,"Texture":0},"6":{"Drawable":7,"Texture":0},"10":{"Drawable":57,"Texture":0},"8":{"Drawable":16,"Texture":1}},"PropsDto":{}},"45":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":542,"Texture":0},"4":{"Drawable":96,"Texture":0},"7":{"Drawable":126,"Texture":0},"3":{"Drawable":86,"Texture":0},"6":{"Drawable":7,"Texture":0},"10":{"Drawable":57,"Texture":0},"8":{"Drawable":16,"Texture":1}},"PropsDto":{}},"55":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":249,"Texture":0},"4":{"Drawable":96,"Texture":0},"3":{"Drawable":86,"Texture":0},"6":{"Drawable":7,"Texture":0},"10":{"Drawable":57,"Texture":0}},"PropsDto":{"0":{"Drawable":122,"Texture":0}}},"56":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":249,"Texture":1},"4":{"Drawable":96,"Texture":1},"3":{"Drawable":86,"Texture":0},"6":{"Drawable":7,"Texture":0},"10":{"Drawable":57,"Texture":0}},"PropsDto":{"0":{"Drawable":122,"Texture":1}}},"58":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":348,"Texture":5},"4":{"Drawable":96,"Texture":0},"3":{"Drawable":77,"Texture":0},"6":{"Drawable":7,"Texture":0},"7":{"Drawable":127,"Texture":0}},"PropsDto":{}},"59":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":319,"Texture":0},"4":{"Drawable":33,"Texture":0},"3":{"Drawable":26,"Texture":0},"6":{"Drawable":25,"Texture":0},"7":{"Drawable":147,"Texture":0},"9":{"Drawable":500,"Texture":2},"5":{"Drawable":514,"Texture":0},"8":{"Drawable":129,"Texture":0}},"PropsDto":{"0":{"Drawable":117,"Texture":0}}},"63":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":53,"Texture":0},"4":{"Drawable":33,"Texture":0},"6":{"Drawable":25,"Texture":0},"3":{"Drawable":172,"Texture":0},"5":{"Drawable":514,"Texture":0},"9":{"Drawable":16,"Texture":2}},"PropsDto":{"0":{"Drawable":141,"Texture":0}}},"64":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":53,"Texture":0},"4":{"Drawable":33,"Texture":0},"6":{"Drawable":25,"Texture":0},"3":{"Drawable":172,"Texture":0},"5":{"Drawable":514,"Texture":0},"9":{"Drawable":16,"Texture":2}},"PropsDto":{"0":{"Drawable":143,"Texture":0},"1":{"Drawable":5,"Texture":0}}},"65":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":244,"Texture":5},"4":{"Drawable":31,"Texture":0},"6":{"Drawable":25,"Texture":0},"3":{"Drawable":172,"Texture":0},"5":{"Drawable":514,"Texture":0},"9":{"Drawable":16,"Texture":2},"8":{"Drawable":0,"Texture":2}},"PropsDto":{"0":{"Drawable":115,"Texture":0}}},"66":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":321,"Texture":0},"4":{"Drawable":116,"Texture":8},"6":{"Drawable":1,"Texture":2},"3":{"Drawable":4,"Texture":0}},"PropsDto":{}},"67":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":192,"Texture":10},"8":{"Drawable":11,"Texture":120},"6":{"Drawable":45,"Texture":2},"4":{"Drawable":22,"Texture":1}},"PropsDto":{}},"68":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":10,"Texture":1},"4":{"Drawable":24,"Texture":0},"6":{"Drawable":77,"Texture":16}},"PropsDto":{}},"69":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":311,"Texture":6},"8":{"Drawable":0,"Texture":12},"6":{"Drawable":77,"Texture":8},"4":{"Drawable":24,"Texture":0},"3":{"Drawable":5,"Texture":0}},"PropsDto":{"1":{"Drawable":5,"Texture":5}}},"70":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":275,"Texture":0},"4":{"Drawable":107,"Texture":0},"6":{"Drawable":84,"Texture":0},"3":{"Drawable":7,"Texture":0}},"PropsDto":{}},"71":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":275,"Texture":1},"4":{"Drawable":107,"Texture":0},"6":{"Drawable":84,"Texture":0},"3":{"Drawable":7,"Texture":0}},"PropsDto":{}},"72":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":208,"Texture":3},"4":{"Drawable":88,"Texture":3},"6":{"Drawable":62,"Texture":6}},"PropsDto":{}},"73":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":220,"Texture":3},"4":{"Drawable":86,"Texture":3},"6":{"Drawable":63,"Texture":6}},"PropsDto":{}},"74":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":220,"Texture":3},"4":{"Drawable":87,"Texture":3},"6":{"Drawable":62,"Texture":6}},"PropsDto":{}},"75":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":222,"Texture":3},"4":{"Drawable":86,"Texture":3},"6":{"Drawable":63,"Texture":6}},"PropsDto":{}},"76":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":222,"Texture":3},"4":{"Drawable":87,"Texture":3},"6":{"Drawable":62,"Texture":6}},"PropsDto":{}},"77":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":221,"Texture":3},"4":{"Drawable":86,"Texture":3},"6":{"Drawable":63,"Texture":6}},"PropsDto":{}},"78":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":221,"Texture":3},"4":{"Drawable":87,"Texture":3},"6":{"Drawable":62,"Texture":6}},"PropsDto":{}},"79":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":219,"Texture":3},"4":{"Drawable":87,"Texture":3},"6":{"Drawable":62,"Texture":6}},"PropsDto":{}},"80":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":222,"Texture":3},"4":{"Drawable":86,"Texture":3},"6":{"Drawable":63,"Texture":6}},"PropsDto":{}},"81":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":232,"Texture":7},"8":{"Drawable":14,"Texture":121},"4":{"Drawable":87,"Texture":14},"6":{"Drawable":62,"Texture":0}},"PropsDto":{}},"82":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":228,"Texture":15},"4":{"Drawable":87,"Texture":9},"6":{"Drawable":62,"Texture":6}},"PropsDto":{}},"83":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":222,"Texture":14},"4":{"Drawable":86,"Texture":14},"6":{"Drawable":63,"Texture":0}},"PropsDto":{}},"84":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":221,"Texture":5},"4":{"Drawable":87,"Texture":5},"6":{"Drawable":62,"Texture":0}},"PropsDto":{}},"85":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":220,"Texture":4},"4":{"Drawable":87,"Texture":4},"6":{"Drawable":62,"Texture":0}},"PropsDto":{}},"86":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":222,"Texture":3},"4":{"Drawable":87,"Texture":3},"6":{"Drawable":62,"Texture":6},"3":{"Drawable":11,"Texture":0}},"PropsDto":{}},"92":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":221,"Texture":5},"4":{"Drawable":87,"Texture":5},"6":{"Drawable":62,"Texture":0},"3":{"Drawable":141,"Texture":5}},"PropsDto":{}},"93":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":222,"Texture":10},"4":{"Drawable":87,"Texture":10},"6":{"Drawable":62,"Texture":2},"3":{"Drawable":158,"Texture":0}},"PropsDto":{}},"94":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":222,"Texture":15},"4":{"Drawable":87,"Texture":15},"6":{"Drawable":24,"Texture":0},"3":{"Drawable":158,"Texture":15},"5":{"Drawable":103,"Texture":2},"9":{"Drawable":10,"Texture":4}},"PropsDto":{}},"95":{"Gender":true,"TypeArmor":12,"ClothesDto":{"4":{"Drawable":87,"Texture":12},"11":{"Drawable":222,"Texture":12},"6":{"Drawable":24,"Texture":0},"9":{"Drawable":10,"Texture":1},"3":{"Drawable":158,"Texture":12},"5":{"Drawable":103,"Texture":2}},"PropsDto":{}},"98":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":533,"Texture":0},"4":{"Drawable":508,"Texture":0},"6":{"Drawable":501,"Texture":14},"3":{"Drawable":53,"Texture":1}},"PropsDto":{}},"100":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":20,"Texture":0},"8":{"Drawable":0,"Texture":0},"4":{"Drawable":24,"Texture":5},"6":{"Drawable":23,"Texture":14},"3":{"Drawable":4,"Texture":0}},"PropsDto":{}},"101":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":533,"Texture":3},"4":{"Drawable":508,"Texture":3},"6":{"Drawable":501,"Texture":17},"3":{"Drawable":53,"Texture":1}},"PropsDto":{}},"102":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":518,"Texture":1},"4":{"Drawable":74,"Texture":0},"6":{"Drawable":24,"Texture":0},"3":{"Drawable":29,"Texture":0},"8":{"Drawable":129,"Texture":0},"9":{"Drawable":3,"Texture":1}},"PropsDto":{}},"103":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":10,"Texture":0},"8":{"Drawable":2,"Texture":0},"4":{"Drawable":28,"Texture":0},"6":{"Drawable":3,"Texture":0}},"PropsDto":{}},"104":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":349,"Texture":3},"4":{"Drawable":24,"Texture":0},"6":{"Drawable":21,"Texture":0},"3":{"Drawable":4,"Texture":0},"9":{"Drawable":23,"Texture":9},"8":{"Drawable":154,"Texture":0}},"PropsDto":{}},"105":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":349,"Texture":2},"4":{"Drawable":35,"Texture":0},"6":{"Drawable":10,"Texture":0},"3":{"Drawable":4,"Texture":0},"9":{"Drawable":23,"Texture":9}},"PropsDto":{}},"106":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":349,"Texture":6},"4":{"Drawable":24,"Texture":3},"6":{"Drawable":21,"Texture":0},"3":{"Drawable":4,"Texture":0},"9":{"Drawable":23,"Texture":9}},"PropsDto":{}},"107":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":31,"Texture":0},"4":{"Drawable":24,"Texture":0},"6":{"Drawable":21,"Texture":0},"3":{"Drawable":4,"Texture":0},"9":{"Drawable":10,"Texture":1},"8":{"Drawable":33,"Texture":0}},"PropsDto":{}},"108":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":26,"Texture":0},"4":{"Drawable":35,"Texture":0},"6":{"Drawable":10,"Texture":0},"7":{"Drawable":0,"Texture":0}},"PropsDto":{}},"109":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":250,"Texture":0},"4":{"Drawable":35,"Texture":0},"6":{"Drawable":10,"Texture":0},"7":{"Drawable":0,"Texture":0}},"PropsDto":{}},"110":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":250,"Texture":0},"4":{"Drawable":35,"Texture":0},"6":{"Drawable":10,"Texture":0},"7":{"Drawable":128,"Texture":0}},"PropsDto":{}},"111":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":13,"Texture":0},"4":{"Drawable":25,"Texture":0},"6":{"Drawable":21,"Texture":0},"7":{"Drawable":10,"Texture":2}},"PropsDto":{}},"112":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":20,"Texture":0},"4":{"Drawable":20,"Texture":0},"6":{"Drawable":21,"Texture":9},"7":{"Drawable":26,"Texture":1},"8":{"Drawable":2,"Texture":12}},"PropsDto":{}},"113":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":13,"Texture":3},"4":{"Drawable":25,"Texture":2},"6":{"Drawable":21,"Texture":0},"7":{"Drawable":37,"Texture":0}},"PropsDto":{}},"114":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":28,"Texture":2},"4":{"Drawable":25,"Texture":2},"6":{"Drawable":21,"Texture":0},"7":{"Drawable":26,"Texture":1},"8":{"Drawable":0,"Texture":12}},"PropsDto":{}},"115":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":102,"Texture":1},"4":{"Drawable":25,"Texture":2},"6":{"Drawable":21,"Texture":0},"7":{"Drawable":26,"Texture":3},"8":{"Drawable":0,"Texture":12}},"PropsDto":{}},"116":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":4,"Texture":0},"4":{"Drawable":25,"Texture":0},"6":{"Drawable":21,"Texture":0},"8":{"Drawable":0,"Texture":12},"7":{"Drawable":27,"Texture":2}},"PropsDto":{}},"117":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":35,"Texture":0},"8":{"Drawable":0,"Texture":12},"4":{"Drawable":25,"Texture":0},"6":{"Drawable":21,"Texture":0},"7":{"Drawable":27,"Texture":4}},"PropsDto":{}},"118":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":27,"Texture":0},"4":{"Drawable":25,"Texture":0},"6":{"Drawable":21,"Texture":0},"8":{"Drawable":5,"Texture":12},"7":{"Drawable":27,"Texture":1}},"PropsDto":{}},"119":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":28,"Texture":0},"4":{"Drawable":25,"Texture":0},"6":{"Drawable":21,"Texture":0},"8":{"Drawable":0,"Texture":12},"7":{"Drawable":26,"Texture":9}},"PropsDto":{}},"120":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":112,"Texture":0},"4":{"Drawable":25,"Texture":0},"6":{"Drawable":21,"Texture":0},"8":{"Drawable":0,"Texture":12},"7":{"Drawable":26,"Texture":5}},"PropsDto":{}},"121":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":533,"Texture":2},"4":{"Drawable":508,"Texture":2},"6":{"Drawable":501,"Texture":18},"3":{"Drawable":53,"Texture":1}},"PropsDto":{}},"122":{"Gender":true,"TypeArmor":10,"ClothesDto":{"11":{"Drawable":120,"Texture":11},"4":{"Drawable":60,"Texture":11},"9":{"Drawable":10,"Texture":1},"3":{"Drawable":22,"Texture":0},"6":{"Drawable":21,"Texture":0},"8":{"Drawable":158,"Texture":0}},"PropsDto":{}},"123":{"Gender":true,"TypeArmor":10,"ClothesDto":{"11":{"Drawable":120,"Texture":10},"4":{"Drawable":60,"Texture":10},"9":{"Drawable":10,"Texture":1},"3":{"Drawable":22,"Texture":0},"6":{"Drawable":21,"Texture":0},"8":{"Drawable":158,"Texture":0}},"PropsDto":{}},"124":{"Gender":true,"TypeArmor":10,"ClothesDto":{"11":{"Drawable":120,"Texture":3},"4":{"Drawable":60,"Texture":3},"9":{"Drawable":10,"Texture":1},"3":{"Drawable":22,"Texture":0},"6":{"Drawable":21,"Texture":0},"8":{"Drawable":158,"Texture":0}},"PropsDto":{}},"125":{"Gender":true,"TypeArmor":10,"ClothesDto":{"11":{"Drawable":120,"Texture":3},"4":{"Drawable":60,"Texture":3},"3":{"Drawable":26,"Texture":0},"6":{"Drawable":21,"Texture":0},"8":{"Drawable":144,"Texture":0},"7":{"Drawable":20,"Texture":3}},"PropsDto":{"2":{"Drawable":2,"Texture":0},"6":{"Drawable":22,"Texture":0}}},"136":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":35,"Texture":6},"8":{"Drawable":30,"Texture":0},"4":{"Drawable":61,"Texture":0},"6":{"Drawable":33,"Texture":6},"3":{"Drawable":5,"Texture":0}},"PropsDto":{}},"137":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":526,"Texture":1},"11":{"Drawable":559,"Texture":1},"6":{"Drawable":503,"Texture":4},"9":{"Drawable":30,"Texture":0},"3":{"Drawable":4,"Texture":0}},"PropsDto":{}},"138":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":317,"Texture":10},"4":{"Drawable":102,"Texture":20},"6":{"Drawable":79,"Texture":10},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"139":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":526,"Texture":0},"11":{"Drawable":559,"Texture":0},"6":{"Drawable":503,"Texture":8},"9":{"Drawable":30,"Texture":2},"3":{"Drawable":4,"Texture":0}},"PropsDto":{}},"140":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":75,"Texture":3},"4":{"Drawable":102,"Texture":5},"6":{"Drawable":33,"Texture":0},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":1}},"PropsDto":{}},"141":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":526,"Texture":3},"11":{"Drawable":560,"Texture":1},"6":{"Drawable":504,"Texture":2},"9":{"Drawable":30,"Texture":1},"3":{"Drawable":4,"Texture":0}},"PropsDto":{}},"143":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":526,"Texture":4},"11":{"Drawable":561,"Texture":0},"6":{"Drawable":519,"Texture":1},"9":{"Drawable":30,"Texture":8},"3":{"Drawable":15,"Texture":0}},"PropsDto":{}},"144":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":149,"Texture":10},"4":{"Drawable":87,"Texture":9},"6":{"Drawable":33,"Texture":4},"3":{"Drawable":4,"Texture":0}},"PropsDto":{}},"145":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":526,"Texture":2},"11":{"Drawable":560,"Texture":0},"6":{"Drawable":506,"Texture":3},"9":{"Drawable":30,"Texture":4},"3":{"Drawable":15,"Texture":0}},"PropsDto":{}},"146":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":333,"Texture":1},"4":{"Drawable":7,"Texture":0},"7":{"Drawable":23,"Texture":0},"9":{"Drawable":6,"Texture":1},"3":{"Drawable":3,"Texture":0},"6":{"Drawable":27,"Texture":0},"8":{"Drawable":189,"Texture":0}},"PropsDto":{}},"156":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":367,"Texture":1},"4":{"Drawable":37,"Texture":0},"9":{"Drawable":6,"Texture":1},"3":{"Drawable":18,"Texture":0},"6":{"Drawable":27,"Texture":0},"8":{"Drawable":189,"Texture":0},"7":{"Drawable":23,"Texture":3}},"PropsDto":{"1":{"Drawable":25,"Texture":0}}},"158":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":500,"Texture":0},"4":{"Drawable":37,"Texture":0},"6":{"Drawable":27,"Texture":0},"3":{"Drawable":88,"Texture":0},"8":{"Drawable":189,"Texture":0},"9":{"Drawable":500,"Texture":1}},"PropsDto":{}},"159":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":500,"Texture":1},"4":{"Drawable":37,"Texture":0},"8":{"Drawable":189,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":88,"Texture":0},"6":{"Drawable":27,"Texture":0}},"PropsDto":{}},"160":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":500,"Texture":2},"4":{"Drawable":37,"Texture":0},"8":{"Drawable":189,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":88,"Texture":0},"6":{"Drawable":27,"Texture":0}},"PropsDto":{}},"161":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":500,"Texture":3},"4":{"Drawable":37,"Texture":0},"8":{"Drawable":189,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":88,"Texture":0},"6":{"Drawable":27,"Texture":0}},"PropsDto":{}},"162":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":500,"Texture":4},"4":{"Drawable":7,"Texture":0},"8":{"Drawable":159,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":88,"Texture":0},"6":{"Drawable":27,"Texture":0}},"PropsDto":{}},"163":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":500,"Texture":5},"4":{"Drawable":7,"Texture":0},"8":{"Drawable":159,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":88,"Texture":0},"6":{"Drawable":27,"Texture":0}},"PropsDto":{}},"164":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":501,"Texture":0},"4":{"Drawable":7,"Texture":0},"5":{"Drawable":505,"Texture":1},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":85,"Texture":0},"6":{"Drawable":6,"Texture":0}},"PropsDto":{}},"165":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":501,"Texture":1},"4":{"Drawable":7,"Texture":0},"5":{"Drawable":505,"Texture":1},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":85,"Texture":0},"6":{"Drawable":6,"Texture":0}},"PropsDto":{}},"166":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":501,"Texture":2},"4":{"Drawable":7,"Texture":0},"5":{"Drawable":505,"Texture":1},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":85,"Texture":0},"6":{"Drawable":6,"Texture":0}},"PropsDto":{}},"167":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":501,"Texture":3},"4":{"Drawable":7,"Texture":0},"5":{"Drawable":505,"Texture":1},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":85,"Texture":0},"6":{"Drawable":6,"Texture":0}},"PropsDto":{}},"168":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":501,"Texture":4},"4":{"Drawable":7,"Texture":0},"5":{"Drawable":505,"Texture":1},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":85,"Texture":0},"6":{"Drawable":6,"Texture":0}},"PropsDto":{}},"169":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":501,"Texture":5},"4":{"Drawable":7,"Texture":0},"5":{"Drawable":505,"Texture":1},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":85,"Texture":0},"6":{"Drawable":6,"Texture":0}},"PropsDto":{}},"170":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":501,"Texture":5},"4":{"Drawable":7,"Texture":0},"5":{"Drawable":505,"Texture":1},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":85,"Texture":0},"6":{"Drawable":0,"Texture":0}},"PropsDto":{}},"172":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":103,"Texture":3},"4":{"Drawable":32,"Texture":0},"5":{"Drawable":509,"Texture":0},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":36,"Texture":0},"6":{"Drawable":25,"Texture":0},"8":{"Drawable":189,"Texture":0}},"PropsDto":{"0":{"Drawable":38,"Texture":0}}},"173":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":510,"Texture":4},"4":{"Drawable":504,"Texture":4},"6":{"Drawable":503,"Texture":13},"3":{"Drawable":117,"Texture":2}},"PropsDto":{}},"174":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":7,"Texture":0},"4":{"Drawable":7,"Texture":0},"9":{"Drawable":11,"Texture":1},"3":{"Drawable":36,"Texture":0},"6":{"Drawable":0,"Texture":0},"8":{"Drawable":67,"Texture":0}},"PropsDto":{}},"175":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":239,"Texture":3},"4":{"Drawable":127,"Texture":0},"5":{"Drawable":58,"Texture":6},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":36,"Texture":0},"6":{"Drawable":25,"Texture":0}},"PropsDto":{"0":{"Drawable":19,"Texture":0},"1":{"Drawable":11,"Texture":0}}},"176":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":54,"Texture":1},"4":{"Drawable":136,"Texture":3},"6":{"Drawable":25,"Texture":0},"3":{"Drawable":49,"Texture":0},"5":{"Drawable":509,"Texture":0},"9":{"Drawable":18,"Texture":2}},"PropsDto":{"0":{"Drawable":149,"Texture":0}}},"177":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":57,"Texture":1},"4":{"Drawable":8,"Texture":1},"8":{"Drawable":57,"Texture":0},"6":{"Drawable":0,"Texture":0},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"178":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":305,"Texture":1},"4":{"Drawable":27,"Texture":0},"8":{"Drawable":57,"Texture":0},"6":{"Drawable":0,"Texture":0},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"179":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":7,"Texture":1},"4":{"Drawable":8,"Texture":1},"8":{"Drawable":57,"Texture":1},"6":{"Drawable":27,"Texture":0},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"180":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":25,"Texture":7},"4":{"Drawable":27,"Texture":0},"8":{"Drawable":57,"Texture":1},"6":{"Drawable":27,"Texture":0},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"181":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":25,"Texture":2},"4":{"Drawable":27,"Texture":1},"8":{"Drawable":57,"Texture":0},"6":{"Drawable":0,"Texture":2},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"182":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":549,"Texture":0},"4":{"Drawable":99,"Texture":0},"7":{"Drawable":96,"Texture":0},"3":{"Drawable":101,"Texture":0},"6":{"Drawable":10,"Texture":1},"10":{"Drawable":66,"Texture":0},"8":{"Drawable":69,"Texture":0}},"PropsDto":{}},"183":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":549,"Texture":0},"4":{"Drawable":99,"Texture":1},"7":{"Drawable":96,"Texture":0},"3":{"Drawable":101,"Texture":0},"6":{"Drawable":10,"Texture":1},"10":{"Drawable":66,"Texture":0},"8":{"Drawable":69,"Texture":0}},"PropsDto":{}},"193":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":257,"Texture":0},"4":{"Drawable":99,"Texture":0},"3":{"Drawable":101,"Texture":0},"6":{"Drawable":10,"Texture":1},"10":{"Drawable":65,"Texture":0}},"PropsDto":{}},"194":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":257,"Texture":1},"4":{"Drawable":99,"Texture":1},"3":{"Drawable":101,"Texture":0},"6":{"Drawable":10,"Texture":1},"10":{"Drawable":65,"Texture":0}},"PropsDto":{}},"196":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":367,"Texture":0},"4":{"Drawable":99,"Texture":0},"3":{"Drawable":88,"Texture":0},"6":{"Drawable":10,"Texture":1},"7":{"Drawable":97,"Texture":0},"9":{"Drawable":18,"Texture":2}},"PropsDto":{}},"197":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":48,"Texture":0},"4":{"Drawable":32,"Texture":0},"3":{"Drawable":31,"Texture":0},"6":{"Drawable":25,"Texture":0},"7":{"Drawable":116,"Texture":0},"9":{"Drawable":500,"Texture":0},"5":{"Drawable":509,"Texture":0}},"PropsDto":{"0":{"Drawable":149,"Texture":0}}},"201":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":252,"Texture":0},"4":{"Drawable":30,"Texture":0},"6":{"Drawable":25,"Texture":0},"3":{"Drawable":218,"Texture":0},"5":{"Drawable":509,"Texture":0},"9":{"Drawable":18,"Texture":2},"8":{"Drawable":0,"Texture":2}},"PropsDto":{"0":{"Drawable":114,"Texture":0}}},"202":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":8,"Texture":0},"8":{"Drawable":0,"Texture":26},"4":{"Drawable":11,"Texture":3},"6":{"Drawable":33,"Texture":2},"3":{"Drawable":4,"Texture":0}},"PropsDto":{}},"203":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":194,"Texture":6},"8":{"Drawable":11,"Texture":141},"4":{"Drawable":45,"Texture":0},"6":{"Drawable":46,"Texture":2}},"PropsDto":{}},"204":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":315,"Texture":5},"4":{"Drawable":37,"Texture":1},"6":{"Drawable":18,"Texture":0},"3":{"Drawable":4,"Texture":0}},"PropsDto":{}},"205":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":315,"Texture":5},"4":{"Drawable":11,"Texture":1},"6":{"Drawable":7,"Texture":0},"3":{"Drawable":4,"Texture":0}},"PropsDto":{}},"206":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":288,"Texture":1},"4":{"Drawable":114,"Texture":0},"6":{"Drawable":88,"Texture":0},"3":{"Drawable":6,"Texture":0}},"PropsDto":{}},"207":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":288,"Texture":1},"4":{"Drawable":114,"Texture":0},"6":{"Drawable":88,"Texture":0},"3":{"Drawable":6,"Texture":0}},"PropsDto":{}},"208":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":212,"Texture":3},"4":{"Drawable":91,"Texture":3},"6":{"Drawable":65,"Texture":6},"3":{"Drawable":14,"Texture":0}},"PropsDto":{}},"209":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":230,"Texture":3},"4":{"Drawable":89,"Texture":3},"6":{"Drawable":66,"Texture":6},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"210":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":230,"Texture":3},"4":{"Drawable":90,"Texture":3},"6":{"Drawable":65,"Texture":6},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"211":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":232,"Texture":3},"4":{"Drawable":89,"Texture":3},"6":{"Drawable":66,"Texture":6},"3":{"Drawable":14,"Texture":0}},"PropsDto":{}},"212":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":232,"Texture":3},"4":{"Drawable":90,"Texture":3},"6":{"Drawable":65,"Texture":6},"3":{"Drawable":14,"Texture":0}},"PropsDto":{}},"213":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":231,"Texture":3},"4":{"Drawable":89,"Texture":3},"6":{"Drawable":66,"Texture":6},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"214":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":231,"Texture":0},"4":{"Drawable":90,"Texture":3},"6":{"Drawable":65,"Texture":6},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"215":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":226,"Texture":3},"4":{"Drawable":90,"Texture":3},"6":{"Drawable":65,"Texture":6},"3":{"Drawable":11,"Texture":0}},"PropsDto":{}},"216":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":232,"Texture":3},"4":{"Drawable":89,"Texture":3},"6":{"Drawable":66,"Texture":6},"3":{"Drawable":14,"Texture":0}},"PropsDto":{}},"217":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":243,"Texture":7},"8":{"Drawable":141,"Texture":14},"4":{"Drawable":90,"Texture":14},"6":{"Drawable":65,"Texture":0},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"218":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":238,"Texture":15},"4":{"Drawable":90,"Texture":9},"6":{"Drawable":65,"Texture":6},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"219":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":232,"Texture":14},"4":{"Drawable":89,"Texture":14},"6":{"Drawable":66,"Texture":0},"3":{"Drawable":14,"Texture":0}},"PropsDto":{}},"220":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":231,"Texture":5},"4":{"Drawable":90,"Texture":5},"6":{"Drawable":65,"Texture":0},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"221":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":230,"Texture":4},"4":{"Drawable":90,"Texture":4},"6":{"Drawable":65,"Texture":0},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"222":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":232,"Texture":3},"4":{"Drawable":90,"Texture":3},"6":{"Drawable":65,"Texture":6},"3":{"Drawable":14,"Texture":0}},"PropsDto":{}},"228":{"Gender":false,"TypeArmor":13,"ClothesDto":{"4":{"Drawable":90,"Texture":5},"11":{"Drawable":224,"Texture":5},"6":{"Drawable":65,"Texture":0},"3":{"Drawable":14,"Texture":0}},"PropsDto":{}},"229":{"Gender":false,"TypeArmor":13,"ClothesDto":{"4":{"Drawable":90,"Texture":10},"11":{"Drawable":224,"Texture":10},"6":{"Drawable":65,"Texture":2},"3":{"Drawable":14,"Texture":0}},"PropsDto":{}},"230":{"Gender":false,"TypeArmor":13,"ClothesDto":{"11":{"Drawable":224,"Texture":15},"4":{"Drawable":90,"Texture":15},"6":{"Drawable":24,"Texture":0},"3":{"Drawable":171,"Texture":15},"5":{"Drawable":98,"Texture":2},"9":{"Drawable":7,"Texture":4}},"PropsDto":{}},"231":{"Gender":false,"TypeArmor":13,"ClothesDto":{"4":{"Drawable":90,"Texture":12},"11":{"Drawable":224,"Texture":12},"6":{"Drawable":24,"Texture":0},"9":{"Drawable":7,"Texture":1},"3":{"Drawable":171,"Texture":12},"5":{"Drawable":98,"Texture":2}},"PropsDto":{}},"234":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":510,"Texture":0},"4":{"Drawable":504,"Texture":0},"6":{"Drawable":503,"Texture":18},"3":{"Drawable":62,"Texture":1}},"PropsDto":{}},"236":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":24,"Texture":0},"8":{"Drawable":0,"Texture":20},"4":{"Drawable":36,"Texture":2},"6":{"Drawable":14,"Texture":0},"3":{"Drawable":5,"Texture":0}},"PropsDto":{}},"237":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":510,"Texture":3},"4":{"Drawable":504,"Texture":3},"6":{"Drawable":503,"Texture":17},"3":{"Drawable":12,"Texture":8}},"PropsDto":{}},"238":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":262,"Texture":0},"4":{"Drawable":102,"Texture":0},"6":{"Drawable":9,"Texture":0},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":1}},"PropsDto":{}},"239":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":7,"Texture":0},"8":{"Drawable":1,"Texture":51},"4":{"Drawable":8,"Texture":0},"6":{"Drawable":13,"Texture":0}},"PropsDto":{}},"240":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":367,"Texture":3},"4":{"Drawable":6,"Texture":0},"6":{"Drawable":29,"Texture":0},"3":{"Drawable":3,"Texture":0},"9":{"Drawable":24,"Texture":9},"8":{"Drawable":190,"Texture":0}},"PropsDto":{}},"241":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":367,"Texture":2},"4":{"Drawable":6,"Texture":2},"6":{"Drawable":6,"Texture":0},"3":{"Drawable":3,"Texture":0},"9":{"Drawable":24,"Texture":9}},"PropsDto":{}},"242":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":367,"Texture":2},"4":{"Drawable":6,"Texture":2},"6":{"Drawable":6,"Texture":0},"3":{"Drawable":3,"Texture":0},"9":{"Drawable":24,"Texture":9},"7":{"Drawable":23,"Texture":0}},"PropsDto":{}},"243":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":367,"Texture":3},"4":{"Drawable":6,"Texture":0},"6":{"Drawable":6,"Texture":0},"3":{"Drawable":3,"Texture":0},"9":{"Drawable":24,"Texture":9},"7":{"Drawable":23,"Texture":0}},"PropsDto":{}},"244":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":86,"Texture":0},"4":{"Drawable":37,"Texture":1},"6":{"Drawable":64,"Texture":0}},"PropsDto":{}},"245":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":86,"Texture":0},"4":{"Drawable":37,"Texture":1},"6":{"Drawable":64,"Texture":0}},"PropsDto":{}},"246":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":86,"Texture":0},"4":{"Drawable":37,"Texture":1},"6":{"Drawable":64,"Texture":0}},"PropsDto":{}},"247":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":91,"Texture":0},"4":{"Drawable":23,"Texture":0},"6":{"Drawable":42,"Texture":0},"8":{"Drawable":0,"Texture":26}},"PropsDto":{}},"248":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":90,"Texture":0},"4":{"Drawable":23,"Texture":0},"6":{"Drawable":42,"Texture":0},"8":{"Drawable":0,"Texture":26}},"PropsDto":{}},"249":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":91,"Texture":1},"4":{"Drawable":52,"Texture":1},"6":{"Drawable":42,"Texture":2},"8":{"Drawable":0,"Texture":26}},"PropsDto":{}},"250":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":92,"Texture":1},"4":{"Drawable":52,"Texture":1},"6":{"Drawable":42,"Texture":2},"8":{"Drawable":0,"Texture":26}},"PropsDto":{}},"251":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":24,"Texture":7},"4":{"Drawable":52,"Texture":1},"6":{"Drawable":42,"Texture":2},"8":{"Drawable":0,"Texture":26}},"PropsDto":{}},"252":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":7,"Texture":0},"4":{"Drawable":34,"Texture":0},"6":{"Drawable":6,"Texture":0},"8":{"Drawable":0,"Texture":26}},"PropsDto":{}},"253":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":24,"Texture":3},"4":{"Drawable":34,"Texture":0},"6":{"Drawable":6,"Texture":0},"8":{"Drawable":0,"Texture":26}},"PropsDto":{}},"254":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":58,"Texture":0},"4":{"Drawable":34,"Texture":0},"6":{"Drawable":6,"Texture":0},"8":{"Drawable":0,"Texture":28}},"PropsDto":{}},"255":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":57,"Texture":0},"4":{"Drawable":34,"Texture":0},"6":{"Drawable":6,"Texture":0},"8":{"Drawable":0,"Texture":13}},"PropsDto":{}},"256":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":25,"Texture":2},"4":{"Drawable":34,"Texture":0},"6":{"Drawable":6,"Texture":0},"8":{"Drawable":0,"Texture":13}},"PropsDto":{}},"257":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":510,"Texture":2},"4":{"Drawable":504,"Texture":2},"6":{"Drawable":503,"Texture":18}},"PropsDto":{}},"258":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":28,"Texture":0},"4":{"Drawable":7,"Texture":1},"9":{"Drawable":500,"Texture":1},"3":{"Drawable":0,"Texture":0},"6":{"Drawable":0,"Texture":1},"8":{"Drawable":24,"Texture":0}},"PropsDto":{}},"259":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":28,"Texture":14},"4":{"Drawable":7,"Texture":2},"9":{"Drawable":6,"Texture":1},"3":{"Drawable":0,"Texture":0},"6":{"Drawable":0,"Texture":3},"8":{"Drawable":24,"Texture":3}},"PropsDto":{}},"260":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":28,"Texture":7},"4":{"Drawable":36,"Texture":1},"9":{"Drawable":6,"Texture":1},"3":{"Drawable":0,"Texture":0},"6":{"Drawable":0,"Texture":2},"8":{"Drawable":24,"Texture":2}},"PropsDto":{}},"261":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":8,"Texture":2},"4":{"Drawable":7,"Texture":0},"9":{"Drawable":6,"Texture":1},"3":{"Drawable":25,"Texture":0},"6":{"Drawable":0,"Texture":0},"8":{"Drawable":71,"Texture":0}},"PropsDto":{"2":{"Drawable":2,"Texture":0}}},"272":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":527,"Texture":0},"4":{"Drawable":509,"Texture":1},"6":{"Drawable":502,"Texture":3},"3":{"Drawable":19,"Texture":0},"9":{"Drawable":507,"Texture":0}},"PropsDto":{}},"273":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":49,"Texture":0},"4":{"Drawable":34,"Texture":0},"6":{"Drawable":24,"Texture":0},"3":{"Drawable":4,"Texture":0},"9":{"Drawable":507,"Texture":0}},"PropsDto":{}},"274":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":509,"Texture":11},"4":{"Drawable":514,"Texture":7},"6":{"Drawable":501,"Texture":17},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":26,"Texture":9}},"PropsDto":{}},"275":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":509,"Texture":10},"4":{"Drawable":514,"Texture":8},"6":{"Drawable":511,"Texture":5},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":26,"Texture":8}},"PropsDto":{}},"276":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":509,"Texture":7},"4":{"Drawable":514,"Texture":14},"6":{"Drawable":501,"Texture":1},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":26,"Texture":8}},"PropsDto":{}},"277":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":509,"Texture":8},"4":{"Drawable":514,"Texture":12},"6":{"Drawable":501,"Texture":1},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":26,"Texture":4}},"PropsDto":{}},"278":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":509,"Texture":6},"4":{"Drawable":514,"Texture":13},"6":{"Drawable":501,"Texture":18},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":1}},"PropsDto":{}},"279":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":512,"Texture":7},"4":{"Drawable":514,"Texture":15},"6":{"Drawable":506,"Texture":6},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":26,"Texture":5}},"PropsDto":{}},"280":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":553,"Texture":0},"4":{"Drawable":512,"Texture":17},"3":{"Drawable":1,"Texture":0},"6":{"Drawable":75,"Texture":5}},"PropsDto":{}},"281":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":554,"Texture":0},"4":{"Drawable":512,"Texture":18},"3":{"Drawable":1,"Texture":0},"6":{"Drawable":75,"Texture":6}},"PropsDto":{}},"282":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":509,"Texture":1},"4":{"Drawable":512,"Texture":12},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":15,"Texture":2},"6":{"Drawable":75,"Texture":0}},"PropsDto":{}},"283":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":511,"Texture":11},"4":{"Drawable":514,"Texture":6},"6":{"Drawable":503,"Texture":0},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":26,"Texture":4}},"PropsDto":{}},"284":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":509,"Texture":12},"4":{"Drawable":511,"Texture":0},"6":{"Drawable":8,"Texture":0},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":26,"Texture":9}},"PropsDto":{}},"285":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":544,"Texture":9},"4":{"Drawable":512,"Texture":16},"3":{"Drawable":1,"Texture":0},"6":{"Drawable":501,"Texture":18}},"PropsDto":{}},"286":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":553,"Texture":1},"4":{"Drawable":512,"Texture":11},"3":{"Drawable":1,"Texture":0},"6":{"Drawable":501,"Texture":18},"9":{"Drawable":28,"Texture":9}},"PropsDto":{}},"287":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":511,"Texture":13},"4":{"Drawable":516,"Texture":0},"6":{"Drawable":501,"Texture":2},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":26,"Texture":4}},"PropsDto":{}},"288":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":511,"Texture":12},"4":{"Drawable":514,"Texture":18},"6":{"Drawable":502,"Texture":3},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":4}},"PropsDto":{}},"289":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":509,"Texture":13},"4":{"Drawable":514,"Texture":7},"6":{"Drawable":501,"Texture":17},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":1}},"PropsDto":{}},"290":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":543,"Texture":0},"4":{"Drawable":518,"Texture":0},"6":{"Drawable":503,"Texture":2},"3":{"Drawable":6,"Texture":0},"9":{"Drawable":6,"Texture":1}},"PropsDto":{}},"291":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":543,"Texture":1},"4":{"Drawable":518,"Texture":1},"6":{"Drawable":503,"Texture":1},"3":{"Drawable":6,"Texture":0},"9":{"Drawable":6,"Texture":2}},"PropsDto":{}},"292":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":543,"Texture":3},"4":{"Drawable":518,"Texture":3},"6":{"Drawable":502,"Texture":4},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":3}},"PropsDto":{}},"293":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":543,"Texture":4},"4":{"Drawable":518,"Texture":4},"6":{"Drawable":501,"Texture":1},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":1}},"PropsDto":{}},"294":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":543,"Texture":5},"4":{"Drawable":518,"Texture":5},"6":{"Drawable":512,"Texture":5},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":4}},"PropsDto":{}},"295":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":543,"Texture":2},"4":{"Drawable":518,"Texture":2},"6":{"Drawable":511,"Texture":7},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":3}},"PropsDto":{}},"296":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":543,"Texture":6},"4":{"Drawable":518,"Texture":6},"6":{"Drawable":501,"Texture":1},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":1}},"PropsDto":{}},"297":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":543,"Texture":7},"4":{"Drawable":518,"Texture":7},"6":{"Drawable":501,"Texture":1},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":0}},"PropsDto":{}},"305":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":528,"Texture":0},"11":{"Drawable":552,"Texture":0},"6":{"Drawable":503,"Texture":2},"9":{"Drawable":28,"Texture":8},"3":{"Drawable":4,"Texture":0}},"PropsDto":{}},"299":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":533,"Texture":0},"11":{"Drawable":561,"Texture":0},"6":{"Drawable":502,"Texture":3},"9":{"Drawable":28,"Texture":4},"3":{"Drawable":1,"Texture":0}},"PropsDto":{}},"300":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":533,"Texture":0},"11":{"Drawable":563,"Texture":0},"6":{"Drawable":502,"Texture":3},"9":{"Drawable":28,"Texture":4},"3":{"Drawable":0,"Texture":0}},"PropsDto":{}},"301":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":533,"Texture":0},"11":{"Drawable":562,"Texture":0},"6":{"Drawable":502,"Texture":3},"9":{"Drawable":28,"Texture":4},"3":{"Drawable":0,"Texture":0}},"PropsDto":{}},"302":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":532,"Texture":0},"11":{"Drawable":562,"Texture":0},"6":{"Drawable":502,"Texture":3},"9":{"Drawable":28,"Texture":4},"3":{"Drawable":0,"Texture":0}},"PropsDto":{}},"303":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":533,"Texture":0},"11":{"Drawable":563,"Texture":0},"6":{"Drawable":502,"Texture":3},"9":{"Drawable":28,"Texture":4},"3":{"Drawable":0,"Texture":0}},"PropsDto":{}},"304":{"Gender":true,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":532,"Texture":0},"11":{"Drawable":561,"Texture":0},"6":{"Drawable":502,"Texture":3},"9":{"Drawable":28,"Texture":4},"3":{"Drawable":0,"Texture":0}},"PropsDto":{}},"306":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":509,"Texture":8},"4":{"Drawable":507,"Texture":13},"6":{"Drawable":33,"Texture":1},"3":{"Drawable":3,"Texture":0},"9":{"Drawable":30,"Texture":9}},"PropsDto":{}},"307":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":509,"Texture":7},"4":{"Drawable":507,"Texture":12},"6":{"Drawable":33,"Texture":4},"3":{"Drawable":3,"Texture":0},"9":{"Drawable":30,"Texture":8}},"PropsDto":{}},"308":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":509,"Texture":5},"4":{"Drawable":507,"Texture":9},"6":{"Drawable":33,"Texture":0},"3":{"Drawable":3,"Texture":0},"9":{"Drawable":30,"Texture":9}},"PropsDto":{}},"309":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":509,"Texture":4},"4":{"Drawable":507,"Texture":11},"6":{"Drawable":33,"Texture":6},"3":{"Drawable":3,"Texture":0},"9":{"Drawable":30,"Texture":4}},"PropsDto":{}},"310":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":509,"Texture":3},"4":{"Drawable":507,"Texture":10},"6":{"Drawable":33,"Texture":6},"3":{"Drawable":3,"Texture":0},"9":{"Drawable":26,"Texture":9}},"PropsDto":{}},"311":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":528,"Texture":15},"4":{"Drawable":507,"Texture":8},"6":{"Drawable":33,"Texture":5},"3":{"Drawable":157,"Texture":0},"9":{"Drawable":30,"Texture":5}},"PropsDto":{}},"312":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":535,"Texture":0},"4":{"Drawable":504,"Texture":16},"3":{"Drawable":3,"Texture":0},"9":{"Drawable":18,"Texture":2},"6":{"Drawable":79,"Texture":6}},"PropsDto":{}},"313":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":536,"Texture":0},"4":{"Drawable":504,"Texture":15},"3":{"Drawable":3,"Texture":0},"9":{"Drawable":18,"Texture":2},"6":{"Drawable":79,"Texture":0}},"PropsDto":{}},"314":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":542,"Texture":0},"4":{"Drawable":504,"Texture":21},"3":{"Drawable":3,"Texture":0},"9":{"Drawable":18,"Texture":2},"6":{"Drawable":79,"Texture":1}},"PropsDto":{}},"315":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":510,"Texture":0},"4":{"Drawable":507,"Texture":14},"6":{"Drawable":33,"Texture":4},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":30,"Texture":4}},"PropsDto":{}},"316":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":509,"Texture":0},"4":{"Drawable":514,"Texture":0},"6":{"Drawable":33,"Texture":1},"3":{"Drawable":3,"Texture":0},"9":{"Drawable":30,"Texture":9}},"PropsDto":{}},"317":{"Gender":false,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":527,"Texture":16},"4":{"Drawable":506,"Texture":5},"3":{"Drawable":153,"Texture":0},"6":{"Drawable":2,"Texture":2}},"PropsDto":{}},"318":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":535,"Texture":1},"4":{"Drawable":504,"Texture":8},"3":{"Drawable":3,"Texture":0},"6":{"Drawable":503,"Texture":18},"9":{"Drawable":18,"Texture":2}},"PropsDto":{}},"319":{"Gender":false,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":510,"Texture":2},"4":{"Drawable":506,"Texture":0},"6":{"Drawable":33,"Texture":4},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":24,"Texture":4}},"PropsDto":{}},"320":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":510,"Texture":1},"4":{"Drawable":507,"Texture":15},"6":{"Drawable":33,"Texture":0},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":30,"Texture":4}},"PropsDto":{}},"321":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":509,"Texture":1},"4":{"Drawable":507,"Texture":13},"6":{"Drawable":33,"Texture":1},"3":{"Drawable":3,"Texture":0},"9":{"Drawable":13,"Texture":1}},"PropsDto":{}},"322":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":550,"Texture":0},"4":{"Drawable":523,"Texture":0},"6":{"Drawable":506,"Texture":5},"3":{"Drawable":50,"Texture":0},"9":{"Drawable":6,"Texture":1}},"PropsDto":{}},"323":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":550,"Texture":1},"4":{"Drawable":523,"Texture":1},"6":{"Drawable":506,"Texture":1},"3":{"Drawable":50,"Texture":0},"9":{"Drawable":6,"Texture":2}},"PropsDto":{}},"324":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":553,"Texture":1},"4":{"Drawable":524,"Texture":1},"6":{"Drawable":506,"Texture":2},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":3}},"PropsDto":{}},"325":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":553,"Texture":2},"4":{"Drawable":524,"Texture":2},"6":{"Drawable":506,"Texture":5},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":1}},"PropsDto":{}},"326":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":553,"Texture":3},"4":{"Drawable":524,"Texture":3},"6":{"Drawable":506,"Texture":2},"3":{"Drawable":47,"Texture":0},"9":{"Drawable":6,"Texture":4}},"PropsDto":{}},"327":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":553,"Texture":0},"4":{"Drawable":524,"Texture":0},"6":{"Drawable":503,"Texture":10},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":3}},"PropsDto":{}},"328":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":553,"Texture":4},"4":{"Drawable":524,"Texture":4},"6":{"Drawable":506,"Texture":5},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":6,"Texture":1}},"PropsDto":{}},"329":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"11":{"Drawable":553,"Texture":5},"4":{"Drawable":524,"Texture":5},"6":{"Drawable":501,"Texture":1},"3":{"Drawable":1,"Texture":0},"9":{"Drawable":12,"Texture":0}},"PropsDto":{}},"330":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":535,"Texture":0},"11":{"Drawable":572,"Texture":0},"6":{"Drawable":502,"Texture":3},"9":{"Drawable":30,"Texture":4},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"331":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":534,"Texture":0},"11":{"Drawable":563,"Texture":0},"6":{"Drawable":502,"Texture":3},"9":{"Drawable":30,"Texture":4},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"332":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":535,"Texture":0},"11":{"Drawable":563,"Texture":0},"6":{"Drawable":502,"Texture":3},"9":{"Drawable":30,"Texture":4},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"333":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":535,"Texture":0},"11":{"Drawable":573,"Texture":0},"6":{"Drawable":502,"Texture":3},"9":{"Drawable":30,"Texture":4},"3":{"Drawable":14,"Texture":0}},"PropsDto":{}},"334":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":534,"Texture":0},"11":{"Drawable":573,"Texture":0},"6":{"Drawable":502,"Texture":3},"9":{"Drawable":30,"Texture":4},"3":{"Drawable":14,"Texture":0}},"PropsDto":{}},"335":{"Gender":false,"TypeArmor":-1,"ClothesDto":{"4":{"Drawable":534,"Texture":0},"11":{"Drawable":572,"Texture":0},"6":{"Drawable":502,"Texture":3},"9":{"Drawable":30,"Texture":4},"3":{"Drawable":3,"Texture":0}},"PropsDto":{}},"336":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":57,"Texture":0},"4":{"Drawable":3,"Texture":0},"3":{"Drawable":1,"Texture":0},"6":{"Drawable":48,"Texture":0}},"PropsDto":{}},"337":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":154,"Texture":0},"4":{"Drawable":47,"Texture":0},"3":{"Drawable":1,"Texture":0},"6":{"Drawable":66,"Texture":0}},"PropsDto":{}},"338":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":168,"Texture":0},"4":{"Drawable":4,"Texture":0},"3":{"Drawable":1,"Texture":0},"6":{"Drawable":1,"Texture":0}},"PropsDto":{}},"339":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":193,"Texture":0},"4":{"Drawable":1,"Texture":0},"3":{"Drawable":19,"Texture":0},"6":{"Drawable":7,"Texture":0}},"PropsDto":{}},"340":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":251,"Texture":0},"4":{"Drawable":98,"Texture":0},"3":{"Drawable":1,"Texture":0},"6":{"Drawable":71,"Texture":0}},"PropsDto":{}},"341":{"Gender":false,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":49,"Texture":0},"4":{"Drawable":0,"Texture":0},"3":{"Drawable":0,"Texture":0},"6":{"Drawable":2,"Texture":0}},"PropsDto":{}},"342":{"Gender":false,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":192,"Texture":0},"4":{"Drawable":32,"Texture":0},"3":{"Drawable":1,"Texture":0},"6":{"Drawable":25,"Texture":0}},"PropsDto":{}},"343":{"Gender":false,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":329,"Texture":0},"4":{"Drawable":61,"Texture":0},"3":{"Drawable":1,"Texture":0},"6":{"Drawable":33,"Texture":0}},"PropsDto":{}},"344":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":8,"Texture":0},"4":{"Drawable":17,"Texture":0},"3":{"Drawable":8,"Texture":0},"6":{"Drawable":1,"Texture":0},"5":{"Drawable":44,"Texture":0}},"PropsDto":{"0":{"Drawable":76,"Texture":10}}},"345":{"Gender":true,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":314,"Texture":0},"4":{"Drawable":120,"Texture":0},"3":{"Drawable":1,"Texture":0},"6":{"Drawable":25,"Texture":0}},"PropsDto":{"0":{"Drawable":138,"Texture":0}}},"346":{"Gender":false,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":75,"Texture":0},"4":{"Drawable":75,"Texture":0},"3":{"Drawable":1,"Texture":0},"6":{"Drawable":1,"Texture":1},"5":{"Drawable":44,"Texture":0}},"PropsDto":{"0":{"Drawable":75,"Texture":10}}},"347":{"Gender":false,"TypeArmor":12,"ClothesDto":{"11":{"Drawable":325,"Texture":0},"4":{"Drawable":126,"Texture":0},"3":{"Drawable":3,"Texture":0},"6":{"Drawable":25,"Texture":0}},"PropsDto":{"0":{"Drawable":137,"Texture":0}}}}`);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {global.defaultCLothes =
{
    [true]:
    {
        [3]: 15,
        [4]: 61,
        [5]: 0,
        [6]: 34,
        [7]: 0,
        [8]: 15,
        [9]: 0,
        [10]: 0,
        [11]: 15,
    },
    [false]:
    {
        [3]: 15,
        [4]: 56,
        [5]: 0,
        [6]: 35,
        [7]: 0,
        [8]: 6,
        [9]: 0,
        [10]: 0,
        [11]: 101,
    },
}


const components = {
    "0": {
        "0": 1,
        "1": 196,
        "2": 80,
        "3": 241,
        "4": 145,
        "5": 100,
        "6": 106,
        "7": 121,
        "8": 233,
        "9": 56,
        "10": 128,
        "11": 400
    },
    "1": {
        "0": 1,
        "1": 195,
        "2": 76,
        "3": 196,
        "4": 138,
        "5": 100,
        "6": 102,
        "7": 152,
        "8": 187,
        "9": 56,
        "10": 120,
        "11": 382
    }
}

global.setClothing = (entity, id, drawable, color1, color2) => {
    const component = components[(entity.getVariable("GENDER")) ? "1" : "0"][id];
    let drawable_fixed = drawable > 499 ? drawable - 500 + component : drawable;
    entity.setComponentVariation(id, drawable_fixed, color1, color2);
}

global.setPedClothing = (entity, gender, id, drawable, color1, color2) => {
    const component = components[(gender) ? "1" : "0"][id];
    let drawable_fixed = drawable > 499 ? drawable - 500 + component : drawable;
    entity.setComponentVariation(id, drawable_fixed, color1, color2);
}

mp.events.addDataHandler("GENDER", (entity, gender) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        global.updateClientClothes(entity);
    }
});

mp.events.add('entityStreamIn', (entity) => {
    global.updateClientClothes(entity);
});

mp.events.add('playerSpawn', (entity) => {
    global.updateClientClothes(entity);
});

global.updateClientClothes = (player) => {
    try {
        if (player.type === 'player') {
            let clothes = player.getVariable('clothes::compon1');
            if (clothes != undefined) {
                global.setClothing(player, 1, clothes[0], clothes[1], 0);
            }
            clothes = player.getVariable('clothes::compon2');
            if (clothes != undefined) {
                global.setClothing(player, 2, clothes[0], clothes[1], 0);
            }
            clothes = player.getVariable('clothes::compon9');
            if (clothes != undefined) {
                global.setClothing(player, 9, clothes[0], clothes[1], 0);
            }
            let color = player.getVariable("makeup");
            if (color !== undefined) {
                player.setHeadOverlayColor(4, 2, +color, +color);
            }

            let costume = global.getVariable(player, "clothes::costume", -1);
            if (costume < 3) {
                setVariableClothes(player);
                global.updateClientProps(player);
            }
            else {
                setCostumes(player, costume);
            }
        }
    } catch (e) {
        if (global.sendException) mp.serverLog(`updateClientClothes: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

mp.events.addDataHandler("clothes::costume", (entity, costume) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (!costume || costume < 3) {
            setVariableClothes(entity);
            global.updateClientProps(entity);
        }
        else {
            setCostumes(entity, costume);
        }
    }
});

function setCostumes(player, variant) {
    try {
        if (player.type !== 'player') return;
        const config = global.costumeConfigs[variant];
        if (!config) {
            setVariableClothes(player);
            global.updateClientProps(player);
        }
        else {
            for (let i = 3; i <= 11; i++) {
                if (i == 9) continue;
                if (config.ClothesDto[i] === undefined) {
                    global.setClothing(player, i, global.defaultCLothes[config.Gender][i], 0, 0);
                }
                else {
                    global.setClothing(player, i, config.ClothesDto[i].Drawable, config.ClothesDto[i].Texture, 0);
                }
            }
            for (let i = 0; i <= 12; i++) {
                if (config.PropsDto[i] === undefined)
                    global.setProp(player, i, -1, -1);
                else
                    global.setProp(player, i, config.PropsDto[i].Drawable, config.PropsDto[i].Texture);
            }
        }
    } catch (e) {
        if (global.sendException) mp.serverLog(`setCostumes: ${e.name}\n${e.message}\n${e.stack}`);
    }

}
function setVariableClothes(player) {
    try {
        if (player.type !== 'player') return;

        clothes = player.getVariable('clothes::compon3');
        if (clothes != undefined) {
            global.setClothing(player, 3, clothes[0], clothes[1], 0);
        }
        clothes = player.getVariable('clothes::compon4');
        if (clothes != undefined) {
            global.setClothing(player, 4, clothes[0], clothes[1], 0);
        }
        clothes = player.getVariable('clothes::compon5');
        if (clothes != undefined) {
            global.setClothing(player, 5, clothes[0], clothes[1], 0);
        }
        clothes = player.getVariable('clothes::compon6');
        if (clothes != undefined) {
            global.setClothing(player, 6, clothes[0], clothes[1], 0);
        }
        clothes = player.getVariable('clothes::compon7');
        if (clothes != undefined) {
            global.setClothing(player, 7, clothes[0], clothes[1], 0);
        }
        clothes = player.getVariable('clothes::compon8');
        if (clothes != undefined) {
            global.setClothing(player, 8, clothes[0], clothes[1], 0);
        }
        clothes = player.getVariable('clothes::compon9');
        if (clothes != undefined) {
            global.setClothing(player, 9, clothes[0], clothes[1], 0);
        }
        clothes = player.getVariable('clothes::compon10');
        if (clothes != undefined) {
            global.setClothing(player, 10, clothes[0], clothes[1], 0);
        }
        clothes = player.getVariable('clothes::compon11');
        if (clothes != undefined) {
            global.setClothing(player, 11, clothes[0], clothes[1], 0);
        }
    } catch (e) {
        if (global.sendException) mp.serverLog(`setVariableClothes: ${e.name}\n${e.message}\n${e.stack}`);
    }

}



mp.events.addDataHandler("clothes::compon1", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        global.setClothing(entity, 1, clothes[0], clothes[1], 0);
    }
});

mp.events.addDataHandler("clothes::compon2", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        global.setClothing(entity, 2, clothes[0], clothes[1], 0);
    }
});

mp.events.addDataHandler("clothes::compon3", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
            global.setClothing(entity, 3, clothes[0], clothes[1], 0);
    }
});

mp.events.addDataHandler("clothes::compon4", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
            global.setClothing(entity, 4, clothes[0], clothes[1], 0);
    }
});

mp.events.addDataHandler("clothes::compon5", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
            global.setClothing(entity, 5, clothes[0], clothes[1], 0);
    }
});

mp.events.addDataHandler("clothes::compon6", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
            global.setClothing(entity, 6, clothes[0], clothes[1], 0);
    }
});

mp.events.addDataHandler("clothes::compon7", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
            global.setClothing(entity, 7, clothes[0], clothes[1], 0);
    }
});

mp.events.addDataHandler("clothes::compon8", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
            global.setClothing(entity, 8, clothes[0], clothes[1], 0);
    }
});

mp.events.addDataHandler("clothes::compon9", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        global.setClothing(entity, 9, clothes[0], clothes[1], 0);
    }
});

mp.events.addDataHandler("clothes::compon10", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
            global.setClothing(entity, 10, clothes[0], clothes[1], 0);
    }
});

mp.events.addDataHandler("clothes::compon11", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
            global.setClothing(entity, 11, clothes[0], clothes[1], 0);
    }
});

mp.events.addDataHandler("makeup", (entity, color) => {
    if (entity.type === 'player' && mp.players.exists(entity))
        entity.setHeadOverlayColor(4, 2, +color, +color);
});

/*
let currClothes = 1;
let drawable = 0;
let texture = 0;
let step = 1;
let settable = true;

mp.events.add('render', () => {
    mp.game.graphics.drawText('currClothes:' + currClothes, [0.5, 0.005], {
        font: 7,
        color: [255, 255, 255, 185],
        scale: [0.4, 0.4],
        outline: true
    });
    mp.game.graphics.drawText('drawable:' + drawable, [0.5, 0.030], {
        font: 7,
        color: [255, 255, 255, 185],
        scale: [0.4, 0.4],
        outline: true
    });
    mp.game.graphics.drawText('texture:' + texture, [0.5, 0.055], {
        font: 7,
        color: [255, 255, 255, 185],
        scale: [0.4, 0.4],
        outline: true
    });
    mp.game.graphics.drawText('step:' + step, [0.5, 0.080], {
        font: 7,
        color: [255, 255, 255, 185],
        scale: [0.4, 0.4],
        outline: true
    });
    mp.game.graphics.drawText('settable:' + settable, [0.5, 0.105], {
        font: 7,
        color: [255, 255, 255, 185],
        scale: [0.4, 0.4],
        outline: true
    });
});


mp.keys.bind(global.Keys.Key_NUMPAD8, false, function () {
    if (texture >= 26)
        texture = 0;
    else
        texture++;
    if (settable)
        global.setClothing(global.localplayer, currClothes, drawable, texture, 0);
});

mp.keys.bind(global.Keys.Key_NUMPAD2, false, function () {
    if (texture <= 0)
        texture = 26;
    else
        texture--;
    if (settable)
        global.setClothing(global.localplayer, currClothes, drawable, texture, 0);
});

mp.keys.bind(global.Keys.Key_NUMPAD4, false, function () {
    drawable -= step;
    if (drawable < 0)
        drawable = 600;
    if (settable)
        global.setClothing(global.localplayer, currClothes, drawable, texture, 0);
});

mp.keys.bind(global.Keys.Key_NUMPAD6, false, function () {
    drawable += step;
    if (drawable > 600)
        drawable = 0;
    if (settable)
        global.setClothing(global.localplayer, currClothes, drawable, texture, 0);
});

mp.keys.bind(global.Keys.Key_NUMPAD9, false, function () {
    if (currClothes >= 11)
        currClothes = 0;
    else
        currClothes++;
    if (settable)
        global.setClothing(global.localplayer, currClothes, drawable, texture, 0);
});

mp.keys.bind(global.Keys.Key_NUMPAD7, false, function () {
    if (currClothes <= 0)
        currClothes = 11;
    else
        currClothes--;
    if (settable)
        global.setClothing(global.localplayer, currClothes, drawable, texture, 0);
});

mp.keys.bind(global.Keys.Key_NUMPAD0, false, function () {
    drawable = 0;
    texture = 0;
    if (settable)
        global.setClothing(global.localplayer, currClothes, drawable, texture, 0);
});

mp.keys.bind(global.Keys.Key_NUMPAD3, false, function () {
    step *= 10;
    if (step >= 1000)
        step = 100;
});

mp.keys.bind(global.Keys.Key_NUMPAD1, false, function () {
    step /= 10;
    if (step < 1)
        step = 1;
});

mp.keys.bind(global.Keys.Key_NUMPAD5, false, function () {
    settable = !settable;
});
//*/
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const components = {
    "0": 156,
    "1": 34,
    "2": 43,
    "3": 0,
    "4": 0,
    "5": 0,
    "6": 42,
    "7": 9,
    "8": 0,
    "9": 0,
    "10": 0,
    "11": 0,
    "12": 0
}

global.setProp = (entity, id, drawable, color1) => {
    const component = components[id];
    let drawable_fixed = drawable > 499 ? drawable - 500 + component : drawable;
    if (drawable_fixed > -1)
        entity.setPropIndex(id, drawable_fixed, color1, true);
    else
        entity.clearProp(id);
}

// mp.events.add('entityStreamIn', (entity) => {
//     global.updateClientProps(entity);
// });

// mp.events.add('playerSpawn', (entity) => {
//     global.updateClientProps(entity);
// });

global.updateClientProps = (player) => {
    try {
        if (player.type === 'player') {
            let clothes = player.getVariable('clothes::prop0');
            if (clothes != undefined) {
                    global.setProp(player, 0, clothes[0], clothes[1]);
            }
            clothes = player.getVariable('clothes::prop1');
            if (clothes != undefined) {
                    global.setProp(player, 1, clothes[0], clothes[1]);
            }
            clothes = player.getVariable('clothes::prop2');
            if (clothes != undefined) {
                    global.setProp(player, 2, clothes[0], clothes[1]);
            }
            clothes = player.getVariable('clothes::prop3');
            if (clothes != undefined) {
                    global.setProp(player, 3, clothes[0], clothes[1]);
            }
            clothes = player.getVariable('clothes::prop4');
            if (clothes != undefined) {
                    global.setProp(player, 4, clothes[0], clothes[1]);
            }
            clothes = player.getVariable('clothes::prop5');
            if (clothes != undefined) {
                    global.setProp(player, 5, clothes[0], clothes[1]);
            }
            clothes = player.getVariable('clothes::prop6');
            if (clothes != undefined) {
                    global.setProp(player, 6, clothes[0], clothes[1]);
            }
            clothes = player.getVariable('clothes::prop7');
            if (clothes != undefined) {
                    global.setProp(player, 7, clothes[0], clothes[1]);
            }
            clothes = player.getVariable('clothes::prop8');
            if (clothes != undefined) {
                    global.setProp(player, 8, clothes[0], clothes[1]);
            }
            clothes = player.getVariable('clothes::prop9');
            if (clothes != undefined) {
                    global.setProp(player, 9, clothes[0], clothes[1]);
            }
            clothes = player.getVariable('clothes::prop10');
            if (clothes != undefined) {
                    global.setProp(player, 10, clothes[0], clothes[1]);
            }
            clothes = player.getVariable('clothes::prop11');
            if (clothes != undefined) {
                    global.setProp(player, 11, clothes[0], clothes[1]);
            }
            clothes = player.getVariable('clothes::prop12');
            if (clothes != undefined) {
                    global.setProp(player, 12, clothes[0], clothes[1]);
            }
        }
    } catch (e) {
        if (global.sendException) mp.serverLog(`updateClientProps: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

mp.events.addDataHandler("clothes::prop0", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
        global.setProp(entity, 0, clothes[0], clothes[1]);
    }
});

mp.events.addDataHandler("clothes::prop1", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
        global.setProp(entity, 1, clothes[0], clothes[1]);
    }
});
mp.events.addDataHandler("clothes::prop2", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
        global.setProp(entity, 2, clothes[0], clothes[1]);
    }
});
mp.events.addDataHandler("clothes::prop3", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
        global.setProp(entity, 3, clothes[0], clothes[1]);
    }
});

mp.events.addDataHandler("clothes::prop4", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
        global.setProp(entity, 4, clothes[0], clothes[1]);
    }
});

mp.events.addDataHandler("clothes::prop5", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
        global.setProp(entity, 5, clothes[0], clothes[1]);
    }
});

mp.events.addDataHandler("clothes::prop6", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
        global.setProp(entity, 6, clothes[0], clothes[1]);
    }
});

mp.events.addDataHandler("clothes::prop7", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
        global.setProp(entity, 7, clothes[0], clothes[1]);
    }
});

mp.events.addDataHandler("clothes::prop8", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
        global.setProp(entity, 8, clothes[0], clothes[1]);
    }
});

mp.events.addDataHandler("clothes::prop9", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
        global.setProp(entity, 9, clothes[0], clothes[1]);
    }
});

mp.events.addDataHandler("clothes::prop10", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
        global.setProp(entity, 10, clothes[0], clothes[1]);
    }
});

mp.events.addDataHandler("clothes::prop11", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
        global.setProp(entity, 11, clothes[0], clothes[1]);
    }
});

mp.events.addDataHandler("clothes::prop12", (entity, clothes) => {
    if (entity.type === 'player' && mp.players.exists(entity)) {
        if (global.getVariable(entity, "clothes::costume", -1) < 3)
        global.setProp(entity, 12, clothes[0], clothes[1]);
    }
});

/*
let currClothes = 1;
let drawable = 0;
let texture = 0;

mp.events.add('render', () => {
    mp.game.graphics.drawText('currClothes:' + currClothes, [0.5, 0.005], {
      font: 7,
      color: [255, 255, 255, 185],
      scale: [0.5, 0.5],
      outline: true
    });
    mp.game.graphics.drawText('drawable:' + drawable, [0.5, 0.030], {
      font: 7,
      color: [255, 255, 255, 185],
      scale: [0.5, 0.5],
      outline: true
    });
    mp.game.graphics.drawText('texture:' + texture, [0.5, 0.045], {
      font: 7,
      color: [255, 255, 255, 185],
      scale: [0.5, 0.5],
      outline: true
    });
});


mp.keys.bind(global.Keys.Key_NUMPAD8, false, function () {
    if (texture > 26)
        texture = 0;
    else
        texture++;
    global.localplayer.setProp(currClothes, drawable, texture, 0);
});

mp.keys.bind(global.Keys.Key_NUMPAD2, false, function () {
    if (texture <= 0)
        texture = 26;
    else
        texture--;
    global.localplayer.setProp(currClothes, drawable, texture, 0);
});

mp.keys.bind(global.Keys.Key_NUMPAD4, false, function () {
    if (drawable <= 0)
        drawable = 360;
    else
        drawable--;
    global.localplayer.setProp(currClothes, drawable, texture, 0);
});

mp.keys.bind(global.Keys.Key_NUMPAD6, false, function () {
    if (drawable >= 360)
        drawable = 0;
    else
        drawable++;
    global.localplayer.setProp(currClothes, drawable, texture, 0);
});

mp.keys.bind(global.Keys.Key_NUMPAD9, false, function () {
    if (currClothes >= 11)
        currClothes = 0;
    else
        currClothes++;
    global.localplayer.setProp(currClothes, drawable, texture, 0);
});

mp.keys.bind(global.Keys.Key_NUMPAD7, false, function () {
    if (currClothes <= 0)
        currClothes = 11;
    else
        currClothes--;
    global.localplayer.setProp(currClothes, drawable, texture, 0);
});

mp.keys.bind(global.Keys.Key_NUMPAD0, false, function () {
    drawable = 0;
    texture = 0;
    global.localplayer.setProp(currClothes, drawable, texture, 0);
});*/
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(85);
__webpack_require__(86);
__webpack_require__(87);

/***/ }),
/* 85 */
/***/ (function(module, exports) {

let businessesMarkers = [];

mp.events.add({
    "businesses:setMarker": setMarker,
    "businesses:setMarkers": (data) => {
        const markersInfo = JSON.parse(data);

        markersInfo.forEach(markerInfo => {
            setMarker(markerInfo.BizId, markerInfo.Position, markerInfo.Range);
        });
    },
    "businesses:clearMarkers": clearMarkers
});

function clearMarkers() {
    businessesMarkers.forEach(marker => {
        marker.destroy();
    })

    businessesMarkers = [];
}

function setMarker(bizId, position, range) {
    if (businessesMarkers[bizId]) {
        businessesMarkers[bizId].destroy();
    }

    const marker = mp.markers.new(1, position, range, {
        color: [255, 255, 255, 200],
        dimension: 0
    });

    businessesMarkers[bizId] = marker;
};

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let peds = [];

mp.events.add({
    "businesses:setPeds": (data) => {
        if(peds.length > 0) return;
            const lPeds = JSON.parse(data);

            lPeds.forEach(ped => {
                setPed(ped);
            })
            global.bizPedLoaded = true;
    },

    "businesses:setPed": (data) => {
        const ped = JSON.parse(data);
        setPed(ped);
    },

    "businesses:clearPeds": () => {
        peds.forEach(ped => {
            ped.ped.destroy();
            ped.label.destroy();
        });

        peds = [];
    },
})

function setPed(pedInfo) {
    const ped = mp.peds.newValid(pedInfo.Model, pedInfo.Position, pedInfo.Rotation.z, pedInfo.Dimension);
    if(ped == null) return;

    const labelPositon = new mp.Vector3(pedInfo.Position.x, pedInfo.Position.y, pedInfo.Position.z + 1);
    const label = mp.labels.new(pedInfo.Name, labelPositon, {
        los: true,
        drawDistance: 5,
        font: 4,
        color: [255, 255, 255, 235],
        scale: [0.5, 0.5],
        dimension: pedInfo.Dimension
    });
    peds.push({ ped: ped, label: label });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let onBizColshape = false;
let isInfoPanelOpen = false;

mp.events.add({
    // Server events //
    "businesses:openInfoPanel": (data, userinfo) => {

        // mp.serverLog(data);
        global.gui.setData("businessPurchase/setBusinessData", data);
		global.gui.setData("businessPurchase/setUserBalance", userinfo);
        data = JSON.parse(data);
        const pos = global.localplayer.position;
        global.customCamera.setPos(new mp.Vector3(data.CamPositionX, data.CamPositionY, data.CamPositionZ));
        global.customCamera.setPoint(new mp.Vector3(pos.x, pos.y, pos.z + .6));
        
        global.customCamera.switchOn(500);


        isInfoPanelOpen = global.gui.openPage("BusinessPurchase");
    },

    // CEF events //
    "businesses::infoPanel_closeClick": () => {
        global.customCamera.switchOff(500);
        global.gui.close();
        global.showCursor(false);

        isInfoPanelOpen = false; 
    },

    "businesses::infoPanel_buyClick": (type) => {
        mp.events.callRemote('businesses::buyBusiness', type);
    }
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function() {
    if (!isInfoPanelOpen) return;
    
    mp.events.call('businesses::infoPanel_closeClick');
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(89);
__webpack_require__(97);
__webpack_require__(98);
__webpack_require__(99);


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(90);


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const Animal = __webpack_require__(91);

//#region Global fucntions
global.hunting = { };
global.hunting.getCurrentHuntingGround = () => {
    return currentHuntingGround; 
};
global.hunting.getNearestAnimalCoords = (coordToTest) => {
    if (!isPlayerOnHuntingGround) {
        return null;
    }

    let nearestAnimal;

    animals.forEach((animal) => {
        let animalCoords = animal.getCoords();
        const distance = mp.game.system.vdist(animalCoords.x, animalCoords.y, animalCoords.z, coordToTest.x, coordToTest.y, coordToTest.z);
        
        if (nearestAnimal == null) {
            nearestAnimal = { coords: animalCoords, dist: distance };
        }
        else if (distance < nearestAnimal.dist) {
            nearestAnimal = { coords: animalCoords, dist: distance };
        }
    });
    
    if (nearestAnimal)
    {
        return nearestAnimal;
    }
    else {
        return null;
    }
};
//#endregion Global functions

//#region Admin command
let adminHuntingVision = false;
mp.events.add({
    "hunting:toggleAdminVision": () => {
        adminHuntingVision = !adminHuntingVision;
    },

    "render": () => {
        if (!isPlayerOnHuntingGround || !adminHuntingVision) {
            return;
        }

        const posPl = mp.players.local.position;

        animals.forEach((animal) => {
            if (animal.ped) {
                const pos = animal.ped.getCoords(true);
                mp.game.graphics.drawLine(pos.x, pos.y, pos.z, posPl.x, posPl.y, posPl.z, 255, 0, 0, 255);
            }
        });
    }
});
//#endregion Admin command

const animals = [];
const currentHuntingGround = {
    CenterPosition: new mp.Vector3(0, 0, 0),
    Range: 200
};
let isPlayerOnHuntingGround = false;

mp.events.add({
    // SERVER EVENTS
    "hunting:loadAnimal": (data) => {
        data = JSON.parse(data);
        const animal = new Animal(data.ID, data.Model, data.Position, data.State, data.IsController);
        animals.push(animal);
    },

    "hunting:unloadAnimal": (animalId) => {
        const animal = animals.find(a => a.id === animalId);
        
        if (!animal) {
            return;
        }
        
        const idx = animals.findIndex(a => a == animal);
        animals.splice(idx, 1);

        animal.destroy();
    },

    "hunting:setState": (animalId, newState) => {
        const animal = animals.find(a => a.id === animalId);
        if (animal) {
            animal.setState(newState);
        }
    },

    "hunting:updateAnimal": (animalId, newCoords) => {
        const animal = animals.find(a => a.id === animalId);
        if (animal) {
            animal.updatePosition(newCoords);
        }        
    },

    "hunting:setAnimalPosition": (animalId, newCoords) => {
        const animal = animals.find(a => a.id === animalId);
        if (animal) {
            animal.setPosition(newCoords);
        }        
    },

    "hunting:setController": (animalId) => {
        const animal = animals.find(a => a.id === animalId);
        if (animal) {
            animal.isControlled = true;
        }
    },

    "hunting:handleShoot": (animalId, fromPosition) => {
        const animal = animals.find(a => a.id === animalId);
        if (animal) {
            animal.handleShoot(fromPosition);
        }
    },

    "hunting:handleAnimalDeath": (animalId) => {
        const animal = animals.find(a => a.id === animalId);
        if (animal) {
            animal.setState(2);
            animal.setPosition(animal.getCoords());
        }
    },

    "hunting:setOnHuntingGround": (isOnGround, centerPosition, range) => {
        isPlayerOnHuntingGround = isOnGround;

        if (isPlayerOnHuntingGround) {
            currentHuntingGround.CenterPosition = centerPosition;
            currentHuntingGround.Range = range;
        }
    },

    // RAGE EVENTS
    "playerWeaponShot": (targetPosition, targetEntity) => {
        if (!isPlayerOnHuntingGround) {
            return;
        }

        const sniperRifles = [-1466123874,2828843422];
        if (sniperRifles.indexOf(global.getCurrentPlayerWeapon()) == -1) {
            return;
        }
        
        const animal = getAnimalOnPosition(targetPosition);
        if (animal) {
            animal.handleShoot(mp.players.local.position);
        }
    }
});

const sizeByPedModel = {
    [-832573324]: 1.2,
    [1682622302]: 0.7,
    [-664053099]: 1.5
};
const defaultPedModelSize = 1;
function getAnimalOnPosition(pos) {
    if (!pos) {
        return null;
    }

    const animal = animals.find((a) => {
        const aPos = a.getCoords();
        if (aPos == null) {
            return false;
        }

        const modelSize = (sizeByPedModel[a.model]) ? sizeByPedModel[a.model] : defaultPedModelSize;
        
        const dist = mp.game.system.vdist(pos.x, pos.z, pos.y, aPos.x, aPos.z, aPos.y);
        return dist <= modelSize;
    });

    return animal;
}

let animalIdInShortRange = -1;
setInterval(() => {
    if (!isPlayerOnHuntingGround) {
        return;
    }
    
    animalIdInShortRange = -1;
    animals.forEach((animal) => {
        if (animal.state && animal.isControlled) {
            animal.state.calculateBehavior();
        }

        if (animal.stateNum === 2) {
            const playerPos = mp.players.local.position;
            const animalPos = animal.getCoords();
            const dist = mp.game.system.vdist(playerPos.x, playerPos.z, playerPos.y, animalPos.x, animalPos.z, animalPos.y);

            if (dist < 2) {
                animalIdInShortRange = animal.id;
            }
        }
    });

    if (animalIdInShortRange !== -1) {
        global.gui.setData('hud/setPromptData', JSON.stringify({ show: true, items: [{ key: 'E', text: 'interact_30'}] }));
    }
    else {
        global.gui.setData('hud/setPromptData', JSON.stringify({ show: false, items: [] }));
    }
}, 1000);

let antiFloodCheck = 0;
mp.keys.bind(global.Keys.Key_E, false, () => {
    if (!isPlayerOnHuntingGround || global.checkIsAnyActivity() || Date.now() < antiFloodCheck || global.inAction || global.cuffed) return;
    antiFloodCheck = Date.now() + 1000;
    
    if (animalIdInShortRange === -1) {
        return;
    }

    mp.events.callRemote('hunting:hautAnimal', animalIdInShortRange);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

const { getState } = __webpack_require__(92);

class Animal {
    constructor(id, model, position, state, isController) {
        this.id = id;
        this.model = model;
        this.position = position;
        this.isControlled = isController;

        this.lastDamageReceived = 0;
        const ped = mp.peds.newValid(model, position, 0, 0);
        if(ped == null) return;
        this.ped = ped;
        
        this.ped.freezePosition(false);
        this.ped.setInvincible(false);
        this.setState(state, false);

    }

    setState(newStateNum, updateServer = true) {
        this.stateNum = newStateNum;
        this.state = getState(newStateNum, this);
        this.state.handleEntryState();

        if (this.isControlled && updateServer) {
            mp.events.callRemote('hunting:updateAnimalState', this.id, newStateNum);
        }
    }

    destroy() {
        this.ped.destroy();
    }

    updatePosition(newCoords) {
        if(this.ped === undefined || !this.ped.doesExist()) return;
        this.position = newCoords;
        this.ped.taskGoStraightToCoord(newCoords.x, newCoords.y, newCoords.z, 3.0, -1, this.ped.getHeading(), 0);
        
        if (this.isControlled) {
            mp.events.callRemote('hunting:updateAnimal', this.id, newCoords.x, newCoords.y, newCoords.z);
        }
    }
    
    setPosition(newCoords) {
        if(this.ped === undefined || !this.ped.doesExist()) return;
        this.position = newCoords;
        this.ped.setCoordsNoOffset(newCoords.x, newCoords.y, newCoords.z, false, false, false);

        if (this.isControlled) {
            mp.events.callRemote('hunting:setAnimalPosition', this.id, newCoords.x, newCoords.y, newCoords.z);
        }
    }

    getCoords() {
        if (this.ped) {
            return this.ped.getCoords(true);
        }
        else {
            return this.position;
        }
    }
    
    handleShoot(fromPosition) {
        // dead state
        if (this.stateNum === 2) {
            return;
        }
        
        if (this.isControlled) {
            const maxDamageDist = 100;
            const maxHp = 100;
            
            if (this.lastDamageReceived > Date.now()) {
                return;
            }
            this.lastDamageReceived = Date.now() + 3000;
            
            const pedPos = this.getCoords();
            const dist = mp.game.system.vdist(pedPos.x, pedPos.y, pedPos.z, fromPosition.x, fromPosition.y, fromPosition.z);

            if (dist < maxDamageDist) {
                const hp = (1 - (dist / maxDamageDist)) * maxHp;
                mp.events.callRemote('hunting:decreaseHp', this.id, hp);
            }

            const coordsToRun = getCoordsToRun(pedPos, fromPosition);
            this.updatePosition(coordsToRun);
        }
        else {
            mp.events.callRemote('hunting:shootAnimal', this.id, fromPosition.x, fromPosition.y, fromPosition.z);
        }
    }
}

const AFTER_SHOOT_DIST = 50;

function getCoordsToRun(pedPos, fromPosition) {
    const pos = new mp.Vector3(pedPos.x, pedPos.y, pedPos.z);
    const directionToRun = pos.subtract(new mp.Vector3(fromPosition.x, fromPosition.y, fromPosition.z)).unit();
    directionToRun.z = 0;

    const coords = pos.add(directionToRun.multiply(AFTER_SHOOT_DIST));    
    coords.z = mp.game.gameplay.getGroundZFor3dCoord(coords.x, coords.y, 1000, 0.0, false);
    return coords;
}

module.exports = Animal;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

const StandState = __webpack_require__(93);
const WalkState = __webpack_require__(94);
const DeadState = __webpack_require__(95);
const SpawnState = __webpack_require__(96);

function getState(state, animal) {
    switch (state) {
        case -1:
            return new SpawnState(animal);
        case 0:
            return new StandState(animal);
        case 1:
            return new WalkState(animal);
        case 2:
            return new DeadState(animal);
    }
};

module.exports.getState = getState;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

const BaseState = __webpack_require__(2);

/**
 * Минимальное расстояние до игроков, на котором животное будет оставаться на месте.
 */
const CALM_RANGE = 35;
/**
 * Минимальное расстояние до игроков в Stealth Mode, на котором животное будет оставаться на месте
 */
const CALM_RANGE_STEAL = 20;

class StandState extends BaseState {
    calculateBehavior() {
        if (!mp.peds.exists(this.animal.ped)) {
            return;
        }
        
        const ped = mp.peds.atHandle(this.animal.ped.handle);
        if(!ped) return;
        const pos1 = ped.getCoords(true);
        
        mp.players.forEachInStreamRange((player) => {
            const pos2 = player.position;

            const dist = mp.game.system.vdist(pos1.x, pos1.y, pos1.z, pos2.x, pos2.y, pos2.z);
            const minDist = player.getStealthMovement() ? CALM_RANGE_STEAL : CALM_RANGE;
            
            if (dist < minDist) {
                this.animal.setState(1); // set state to 'WALK'
                return;
            }
        });
    }
}

module.exports = StandState;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const BaseState = __webpack_require__(2);

const CALM_RANGE = 40;
const ONE_ITERATION_MOVE_DIST = 50;

class WalkState extends BaseState {
    calculateBehavior() {
        if (!mp.peds.exists(this.animal.ped)) {
            return;
        }
        const ped = mp.peds.atHandle(this.animal.ped.handle);
        const badPedPos = ped.getCoords(true);
        const pedPos = new mp.Vector3(badPedPos.x, badPedPos.y, badPedPos.z);
        
        const directionsFromPlayers = getDirectonsFromPlayers(pedPos);

        if (directionsFromPlayers.length == 0) {
            this.animal.setState(0);
            return;
        }
        
        const finalCoords = getFinalCoords(directionsFromPlayers, pedPos);

        // чтобы животное не выходило за пределы охотничьих угодий,
        // ибо всё сломается к хуям
        // (TODO: изменять направление движение туши по окружности)
        const currentHuntingGround = global.hunting.getCurrentHuntingGround();
        if (currentHuntingGround) {
            const centerPos = currentHuntingGround.CenterPosition;
            const isFinalCoordsOnGround = (Math.pow((finalCoords.x - centerPos.x), 2) + Math.pow((finalCoords.y - centerPos.y), 2) <= Math.pow(currentHuntingGround.Range, 2));
            if (!isFinalCoordsOnGround) {
                return;
            }
        }
        
        this.animal.updatePosition(finalCoords);
    }
}

function getDirectonsFromPlayers(pedPos) {
    const directionsFromPlayers = [];
    
    mp.players.forEachInStreamRange((player) => {
        const plPos = new mp.Vector3(player.position.x, player.position.y, player.position.z);

        const dist = mp.game.system.vdist(pedPos.x, pedPos.y, pedPos.z, plPos.x, plPos.y, plPos.z);
        if (dist < CALM_RANGE) {
            const vec = pedPos.subtract(plPos);
            directionsFromPlayers.push(vec);
        }
    });

    return directionsFromPlayers;
}

function getFinalCoords(directionsFromPlayers, pedPos) {
    // TODO: Сделать невозможным выход за зону охотничьих угодий
    
    const finalDirection = getCorrectDirection(directionsFromPlayers); 
    
    const finalCoords = pedPos.add(finalDirection.multiply(ONE_ITERATION_MOVE_DIST));
    const testGroundZ = 1000;
    finalCoords.z = mp.game.gameplay.getGroundZFor3dCoord(finalCoords.x, finalCoords.y, testGroundZ, 0.0, false);

    return finalCoords;
}

function getCorrectDirection(directionsFromPlayers) {
    let finalDirection = new mp.Vector3(0, 0, 0);
    directionsFromPlayers.forEach((vec) => {
        finalDirection = finalDirection.add(vec);
    });

    finalDirection.z = 0;
    finalDirection = finalDirection.unit();

    return finalDirection;
}

module.exports = WalkState;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

const BaseState = __webpack_require__(2);

class DeadState extends BaseState {
    handleEntryState() {
        if(this.animal && this.animal.ped)
            this.animal.ped.applyDamageTo(1000, true);
    }
}

module.exports = DeadState;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

const BaseState = __webpack_require__(2);

class SpawnState extends BaseState {
    handleEntryState() {
        if (this.animal.isControlled) {
            this.loadAnimal();
        }
    }

    loadAnimal() {
        try {
            const pos = this.animal.position;
            pos.z = 0;            
            for (let index = 0;pos.z === 0 && index < 250; index++) {
                mp.game.wait(0);
                pos.z = mp.game.gameplay.getGroundZFor3dCoord(pos.x, pos.y, 1000, 0.0, false);
            };
            mp.game.wait(0);
            
            this.animal.setPosition(pos);
            this.animal.setState(0);
        }
        catch (e) { mp.gui.chat.push(`ERROR: loadAnimal = ${e}`) }
    }
}

module.exports = SpawnState;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let isHuntingShopOpened = false;

mp.events.add({
    "huntingStore:open": (data) => {
        global.gui.setData('huntingShop/setData', data);
        isHuntingShopOpened = global.gui.openPage('HuntingShop');
    },

    "huntingStore::close": () => {
        global.gui.close();
        isHuntingShopOpened = false;
    },

    "huntingStore::select": (key) => {
        mp.events.callRemote('huntingStore:select', key);
    },
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function() {
    if (!isHuntingShopOpened) return;
    
    mp.events.call('huntingStore::close');
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let currentColshape
let currentMarker
let vehMarker
let opened = false

mp.events.add('truckers:setCheckPointRoutePath', (position) => {
    position = JSON.parse(position);
    resetCurrentRoutePath();

    currentColshape = mp.colshapes.newCircle(position.x, position.y, 2);
    currentColshape.isTrucker = true;

    currentMarker = mp.markers.new(20, new mp.Vector3(position.x, position.y, position.z + 0.5), 2, {
        rotation: new mp.Vector3(0, 180, 0),
        color: [182, 211, 0, 200],
    });
    createWorkBlip(position);
});


mp.events.add("trailerAttached", (vehicle, trailer) => {
    mp.events.callRemote('srv_consoleLog', `attach ${JSON.stringify(vehicle)} on ${JSON.stringify(trailer)}`);
});


mp.events.add('truckers:resetCurrentRoutePath', () => {
    resetCurrentRoutePath();
    if (vehMarker != null){            
        vehMarker.destroy();
        vehMarker = null;
    }
});

function resetCurrentRoutePath(){
    if (currentColshape != null){
        currentColshape.destroy();
        currentColshape = null;
    }
    if (currentMarker != null){
        currentMarker.destroy();
        currentMarker = null;
    }
    if (workBlip != null){
        workBlip.destroy();
        workBlip = null;
    }
}

mp.events.add("playerEnterColshape", (shape) => {
    if (shape.isTrucker) {
        mp.events.callRemote("truckers:playerEnteredCheckpoint");
    }
});

mp.events.add('truckers:vehicleLoaded', (position) => {
    position = JSON.parse(position);
    if (vehMarker != null){
        vehMarker.destroy();
        vehMarker = null;
    }
    vehMarker = mp.markers.new(20, new mp.Vector3(position.x, position.y, position.z + 4), 2, {
        rotation: new mp.Vector3(0, 180, 0),
        color: [182, 211, 0, 200]
    });
});

mp.events.add("truckers:destroyMarker", () => {
    if (vehMarker != null) {
        vehMarker.destroy();
        vehMarker = null;
    }
});

mp.events.add('truckers:openRentPage', (truckersData) => {
    global.gui.setData('truckersMenu/setData', truckersData);
    opened = global.gui.openPage("TruckersMenu");
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened) {
        global.gui.close();
        opened = false;
    }
});

mp.events.add('truckers:startWorkTimer', (timeLeftSeconds) => {
    global.gui.setData('hud/startWorkTimer', timeLeftSeconds);
});

mp.events.add('truckers:stopWorkTimer', () => {
    global.gui.setData('hud/stopWorkTimer');
});

mp.events.add('truckersMenu:setTruck', (id) => {
    global.gui.close();
    opened = false;
    mp.events.callRemote("truckers:setTruck", id);
});

let workBlip = null;
function createWorkBlip(position){
    if (workBlip != null)
        workBlip.destroy();
    workBlip = mp.blips.new(615, position,
        {
            name: "Маршрут дальнобойщика",
            scale: 1.3,
            color: 69,
            alpha: 255,
            drawDistance: 100,
            shortRange: false,
            rotation: 0,
            dimension: 0,
        });
    mp.game.invoke('0x4F7D8A9BFB0B43E9', workBlip.handle, true);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 99 */
/***/ (function(module, exports) {

let vehMarker
let currentCheckpoint;
let currentBlip;

mp.events.add({
    'bus:vehicleLoaded': (position) => {
        position = JSON.parse(position);
        if (vehMarker != null){
            vehMarker.destroy();
            vehMarker = null;
        }
        vehMarker = mp.markers.new(20, new mp.Vector3(position.x, position.y, position.z + 4), 2, {
            rotation: new mp.Vector3(0, 180, 0),
            color: [182, 211, 0, 200]
        });
    },
    'bus:destroyMarker':() => {
        if (vehMarker != null) {
            vehMarker.destroy();
            vehMarker = null;
        }
    },
    'bus:createCheckpoint': (position, r, g, b) => {
        if (currentBlip != null && mp.blips.exists(currentBlip)){
            currentBlip.destroy();
        }
        if (currentCheckpoint != null && mp.checkpoints.exists(currentCheckpoint)){
            currentCheckpoint.destroy();
        }
        position = JSON.parse(position);
        currentBlip = mp.blips.new(1, position,
            {
                name: "Автобусный маршрут",
                scale: 1.3,
                color: 24,
                alpha: 255,
                shortRange: false,
                rotation: 0,
                dimension: 0,
            });
        currentCheckpoint = mp.checkpoints.new(4, position, 4, 
            {
                color: [r, g, b, 200],
                visible: true,
            });
        mp.game.invoke('0x4F7D8A9BFB0B43E9', currentBlip.handle, true);
    },
    'bus:clear': () => {
        if (currentBlip != null && mp.blips.exists(currentBlip)){
            currentBlip.destroy();
        }
        if (currentCheckpoint != null && mp.checkpoints.exists(currentCheckpoint)){
            currentCheckpoint.destroy();
        }
    },
});

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const instructions = __webpack_require__(101);
const interactionDistance = 15.0;
const renderDistance = 7.0;

let lastPetCheck = Date.now();

let petData = 
{
	entity: null,
	blip: null,
	name: null,
	scriptModel: 0,
	model: 0,
	dead: false,
	
	commands: 
	{
		stop: false,
		
		attacking: false,
		attackingType: 0,
		attackingEntity: null,
		
		sitting: false,
		
		sleeping: false,
		
		ball: false,
		ballEntity: null,
		ballPosition: null,
		ballThrown: false,
		
		sniffing: false,
		sniffingEntity: null,
		sniffingTimer: null,
		
		following: false,
		followingEntity: null,
		followingType: 0,
		
		refresh: function()
		{
			this.stop = false;
			this.attacking = false;
			this.attackingType = 0;
			this.attackingEntity = null;
			this.sitting = false;
			this.sleeping = false;
			this.ball = false;
			this.ballEntity = null;
			this.ballPosition = null;
			this.ballThrown = false;
			this.sniffing = false;
			this.sniffingEntity = null;
			this.sniffingTimer = null;
			this.following = false;
			this.followingEntity = null;
			this.followingType = 0;
		}
	},
	
	teleportRequired: false,
	buttons: null,
	buttonsShow: false,
	buttonsRequested: false,
	buttonsInitialize: function(model)
	{
		if (global.petConfigs[model] === undefined)
		{
			mp.events.call('notify', 4, 9, `Загрузка конфига для Вашего питомца не удалась. Свяжитесь с администрацией.`, 5000);
			return;
		}
		if (this.buttons != null) return;
		
		this.buttonsShow = false;
		global.buttonsShow = false;
		this.buttonsRequested = false;
		this.buttons = new instructions(-1);
		const config = global.petConfigs[model];
		this.buttons.addButton('Ждать/Следовать', '1');
		if (config.sit) this.buttons.addButton('Сесть/Встать', '2');
		if (config.sleep) this.buttons.addButton('Лечь/Встать', '3');
		if (config.ball) this.buttons.addButton('Принести мячик', '4');
		if (config.sniff) this.buttons.addButton('Обнюхать', '5');
		if (config.attack) 
		{
			this.buttons.addButton('Атаковать человека', '6');
			this.buttons.addButton('Атаковать животное', '7');
		}
	}
}

global.IsMyPet = (handle) => 
{
	if (petData.entity == null || !mp.peds.exists(petData.entity)) return false;
	return petData.entity.handle === handle;
};

const SetPet = (entity) => 
{
	if (!entity || entity.type !== 'ped' || !mp.peds.exists(entity) || entity.handle === 0) return;
	if (!entity.getVariable("pet:isPet")) return;
	
	entity.isPet = true;
}

mp.events.add('client::initPet', (entity, name, model) => 
{
	if (!entity || entity.type !== 'ped' || !mp.peds.exists(entity)) return;
	
	const uintModel = model >>> 0;
	entity.freeze = true;
	petData.commands.refresh();
	petData.entity = entity;
	petData.model = uintModel;
	petData.scriptModel = model;
	petData.name = name;
	petData.blip = mp.blips.new(463, new mp.Vector3(), 
	{ 
		alpha: 255, 
		color: 75, 
		name: `Питомец ${name}` 
	});
	petData.blip.setCoords(entity.position);
	petData.buttonsInitialize(uintModel);
});

mp.events.add('client::unloadPet', () => 
{
	petData.entity = null;
	petData.name = null;
	if (petData.blip != null) petData.blip.destroy();
	petData.blip = null;
	petData.model = 0;
	petData.scriptModel = 0;
	petData.teleportRequired = false;
	petData.buttonsShow = false;
	global.buttonsShow = false;
	petData.buttonsRequested = false;
	if (petData.buttons != null) petData.buttons.destroyHud();
	petData.buttons = null;
	petData.commands.refresh();
});

mp.events.add('client::pet:rename', (name) => 
{
	petData.name = name;
	if (petData.blip == null || petData.entity == null) return;
	
	petData.blip.destroy();
	petData.blip = mp.blips.new(463, new mp.Vector3(), 
	{ 
		alpha: 255, 
		color: 75, 
		name: `Питомец ${name}` 
	});
	petData.blip.setCoords(petData.entity.position);
});

mp.events.add("entityStreamIn", (entity) => 
{
	SetPet (entity);
});

mp.events.add("render", () => 
{
	if (!global.loggedin) return;
	if (petData.entity != null && petData.entity.doesExist() && petData.blip != null) petData.blip.setCoords(petData.entity.getCoords(true));

	const localPos = global.localplayer.position;
	const graphics = mp.game.graphics;

	let petName;
	let pedPosition;
	let dist;
	let getBoneCoords;
	let _getScale;
	let scale;
	mp.peds.forEachInStreamRange((ped) => 
	{
		if (!ped || ped.type !== 'ped') return;
		
		petName = ped.getVariable("pet:name");
		if (!petName || petName.length == 0) return;
		
		pedPosition = ped.getCoords(true);
		dist = mp.game.system.vdist(pedPosition.x, pedPosition.y, pedPosition.z, localPos.x, localPos.y, localPos.z);
		if (dist >= renderDistance) return;
		
		getBoneCoords = ped.getBoneCoords(12844, 0, 0, 0);
		_getScale = GetScale (dist, 25);
		scale = 0.3 * _getScale;
				
		graphics.drawText(petName, [ getBoneCoords.x, getBoneCoords.y, getBoneCoords.z + (1 - _getScale) + (0.35) ],
		{
			font: 0,
			color: [255, 255, 255,255],
			scale: [ scale, scale ],
			outline: true
		});
		
		if (global.localplayer.isInAnyVehicle(true)) return;
		if (petData.entity == null || ped != petData.entity || petData.dead) return;
		
		graphics.drawText("F5", [pedPosition.x, pedPosition.y, pedPosition.z], 
		{
			font: 0,
			color: [255, 255, 255, 150],
			scale: [0.3, 0.3],
			outline: true
		});
	});
});

let updateDimensionAntiFlood = 0;

const UpdateActions = () => 
{
	if (!global.loggedin) return;
	if (petData.entity == null) return;
	
	if (!mp.peds.exists(petData.entity)) 
	{
		if (petData.blip != null) petData.blip.destroy();
		
		petData.commands.refresh();
		petData.entity = null;
		petData.blip = null;
		return;
	}
	if (petData.buttons != null)
	{
		const localPedPosition = global.localplayer.position;
		const pedPosition = petData.entity.getCoords(true);
		const distance = mp.game.gameplay.getDistanceBetweenCoords(pedPosition.x, pedPosition.y, pedPosition.z, localPedPosition.x, localPedPosition.y, localPedPosition.z, true);
		if (!petData.buttonsRequested || distance > interactionDistance) 
		{
			if (petData.buttonsShow)
			{
				petData.buttons.toggleHud(false);
				petData.buttonsShow = false;
				global.buttonsShow = false;
				petData.buttonsRequested = false;
			}
		}
		else if (distance <= interactionDistance)
		{
			if (!petData.buttonsShow && petData.buttonsRequested)
			{
				petData.buttons.toggleHud(true);
				petData.buttonsShow = true;
				global.buttonsShow = true;
			}
		}
	}
	if (petData.dead) return;
	
	const petModel = petData.model;
	if (global.petConfigs[petModel] === undefined) return;
	
	const petConfig = global.petConfigs[petModel];
	const petCommands = petData.commands;
	if (petData.entity.isInMeleeCombat())
	{
		if (petConfig.attack == false || petData.entity.isInCombat(global.localplayer.handle)) ClearActions(true);
		else if (petCommands.attackingEntity == null) ClearActions(true);
		return;
	}
	if (global.localplayer.isInAnyVehicle(true) && petData.entity.isInAnyVehicle(false)) 
	{	
		petData.entity.freeze = false;
		petCommands.followingType = 0;
		return;
	}
	if (petData.teleportRequired && updateDimensionAntiFlood < new Date().getTime()) 
	{
		petData.teleportRequired = false;
		petData.entity.freeze = false;
		petCommands.followingType = 0;
		mp.events.callRemote('server::pet:teleport');
		updateDimensionAntiFlood = new Date().getTime() + 10000;
		return;
	}
	if (petCommands.attackingEntity != null)
	{
		if (petCommands.attackingType == 1 && isAddPlayerToList(petCommands.attackingEntity))
		{
			if (!petCommands.attacking) mp.events.call('notify', 3, 9, `Ваш питомец (${petData.name}) начал атаковать человека.`, 3000);
			petCommands.attacking = true;
			petData.entity.taskCombat(petCommands.attackingEntity.handle, 0, 16);
		}
		else if (petCommands.attackingType == 2 && isAddPedToList(petCommands.attackingEntity))
		{
			if (!petCommands.attacking) mp.events.call('notify', 3, 9, `Ваш питомец (${petData.name}) начал атаковать животное.`, 3000);
			petCommands.attacking = true;
			petData.entity.taskCombat(petCommands.attackingEntity.handle, 0, 16);
		}
		else ClearActions();
		return;
	}
	if (petCommands.ball && petCommands.ballPosition != null && petCommands.ballEntity != null)
	{
		if (mp.game.invoke('0x7239B21A38F536BA', petCommands.ballEntity)) 
		{
			const petPosition = petData.entity.getCoords(true);
			const distance = mp.game.gameplay.getDistanceBetweenCoords(petPosition.x, petPosition.y, petPosition.z, petCommands.ballPosition.x, petCommands.ballPosition.y, petCommands.ballPosition.z, true);
			if (distance <= 1.5)
			{
				petData.entity.freeze = false;
				petCommands.followingType = 0;

				mp.events.callRemote('server::pet:deleteBall', petData.entity, petCommands.ballPosition.x, petCommands.ballPosition.y, petCommands.ballPosition.z);
				petCommands.ballPosition = null;
				petCommands.ballEntity = null;
				petCommands.ballThrown = true;
				petCommands.ball = false;
			}
			else 
			{
				let speed = distance > 5 ? 5 : 1;
				petData.entity.taskGoToCoordAndAimAtHatedEntitiesNearCoord(petCommands.ballPosition.x, petCommands.ballPosition.y, petCommands.ballPosition.z + 0.4, petCommands.ballPosition.x, petCommands.ballPosition.y, petCommands.ballPosition.z + 0.4, speed, false, 0, 0, false, 0, false, petData.scriptModel);
			}
		}
		else ClearActions();
		return;
	}
	if (!petData.entity.freeze)
	{
		if (petCommands.followingEntity != null)
		{
			if (isAddPlayerToList(petCommands.followingEntity))
			{
				petCommands.following = true;
				StartFollow(petCommands.followingEntity, "follow");
			}
			else ClearActions();
			return;
		}
		if (petCommands.sniffingEntity != null)
		{
			if (isAddPlayerToList(petCommands.sniffingEntity))
			{
				petCommands.sniffing = true;
				StartFollow(petCommands.sniffingEntity, "sniff");
			}
			else ClearActions();
			return;
		}
		if (!petCommands.ball && !petCommands.attacking && !petCommands.following && !petCommands.sniffing) StartFollow(global.localplayer, "me");
		return;
	}
	
}

setInterval(UpdateActions, 100 * 5)

const StartFollow = (player, type) => 
{
	if (petData.entity == null || !mp.peds.exists(petData.entity) || !player || !mp.players.exists(player)) return;
	
	const pedCoords = petData.entity.getCoords(false);
	const pedPosition = new mp.Vector3(pedCoords.x, pedCoords.y, pedCoords.z);
	const distance = global.vdist2(pedPosition, player.position);
	const playerDimension = global.localplayer.dimension;
	const pedDimension = petData.entity.dimension;
	const petCommands = petData.commands;
	if (distance <= 2.0 && pedDimension === playerDimension)
	{
		if (petCommands.stop || petData.entity.isInAnyVehicle(false)) return;
	
		petCommands.stop = true;
		petCommands.followingType = 0;
		FreezePet(petData.entity);
	
		if (type == "me" && petCommands.ballThrown) 
		{
			petCommands.ballThrown = false; 
			mp.events.callRemote('server::pet:getBall', petData.entity);
			return;
		}
		if (type == "sniff") 
		{
			petData.entity.freeze = true;
			mp.events.call('notify', 3, 9, `Ваш питомец (${petData.name}) начал обнюхивать человека.`, 3000);
			if (petCommands.sniffingTimer != null) clearTimeout(petData.toSniffTimer);

			petCommands.sniffingTimer = setTimeout (() => 
			{
				petCommands.sniffingTimer = null;
				petData.entity.freeze = false;
				ClearActions ();
				mp.events.callRemote('server::pet:sniffResult', player);
			}, 2500);
		}
		return;
	}
	
	petCommands.stop = false;
	let pedInVehicle = petData.entity.isInAnyVehicle(false);
	if (playerDimension == 0 && distance <= 10 && player.isInAnyVehicle(true) && !pedInVehicle) 
	{
		petData.entity.freeze = true;
		mp.events.call('client::pet:setInVehicle');
		return;
	}
	if (playerDimension == 0 && !player.isInAnyVehicle(true) && pedInVehicle) 
	{
		petData.entity.taskLeaveVehicle(petData.entity.getVehicleIsIn(false), 16);
		petCommands.followingType = 0;
		return;
	}
	if (!petData.ballThrown && distance > 40 && !pedInVehicle && !global.fly.flying) 
	{
		petData.entity.freeze = true;
		petData.entity.clearTasksImmediately();	
		FreezePet(petData.entity);
		petData.teleportRequired = true;
		return;
	}
	MoveToPlayer (player);
}

const MoveToPlayer = (player) => 
{
	if (!petData.entity) return;
	if (petData.entity.isInAnyVehicle(false)) return;
	
	const pedCoords = petData.entity.getCoords(false);
	const pedPosition = new mp.Vector3(pedCoords.x, pedCoords.y, pedCoords.z);
	const distance = global.vdist2(pedPosition, player.position);

	let speed = 1;
	if (distance > 8) speed = 10;
	else if (distance > 6) speed = 5;
	else if (distance > 4) speed = 3;

	petData.entity.taskGoToCoordAndAimAtHatedEntitiesNearCoord(player.position.x, player.position.y, player.position.z, player.position.x, player.position.y, player.position.z, speed, false, parseFloat(0), parseFloat(0), false, 0, false, petData.scriptModel);
	petData.commands.followingType = 1;
}

function FreezePet(pet) 
{
	if (!pet) return;
	
	pet.clearTasks();
}

function SitPet(pet, status, msg = true) 
{
	if (!pet) return;
	
	if (status)
	{
		const petConfig = global.petConfigs[petData.model];
		global.requestAnimDict(petConfig.sitDictionary).then(async () => 
		{
			if (!pet) return;
			
			pet.taskPlayAnim (petConfig.sitDictionary, petConfig.sitAnimation, 1, 1.0, -1, 1, 1.0, false, false, false);
		});
		if (msg) mp.events.call('notify', 2, 9, `Питомец ${petData.name} сел.`, 3000);
		return;
	}
	FreezePet(pet);
	if (msg) mp.events.call('notify', 2, 9, `Питомец ${petData.name} встал.`, 3000);
}

function SleepPet(pet, status, msg = true) 
{
	if (!pet) return;
	
	if (status) 
	{
		const petConfig = global.petConfigs[petData.model];
		global.requestAnimDict(petConfig.sleepDictionary).then(async () => 
		{
			if (!pet) return;
			
			pet.taskPlayAnim (petConfig.sleepDictionary, petConfig.sleepAnimation, 1, 1.0, -1, 1, 1.0, false, false, false);
		});
		if (msg) mp.events.call('notify', 2, 9, `Питомец ${petData.name} лёг.`, 3000);
		return;
	}
	FreezePet(pet);
	if (msg) mp.events.call('notify', 2, 9, `Питомец ${petData.name} встал.`, 3000);
}

function FindBall() 
{
	if (mp.players.local.weapon == mp.game.joaat('weapon_ball')) 
	{
		mp.events.call('notify', 2, 9, `Для начала Вам нужно убрать мячик из рук.`, 3000);
		return;
	}
	
	const petPosition = petData.entity.getCoords(true);
	let ball = mp.game.object.getClosestObjectOfType(petPosition.x, petPosition.y, petPosition.z, 100.0, mp.game.joaat('w_am_baseball'), false, true, true);
	if (ball === undefined) 
	{
		mp.events.call('notify', 2, 9, `Ваш питомец не смог найти мячик, попробуйте кинуть его ещё раз.`, 3000);
		return;
	}
	
	mp.game.invoke('0x428CA6DBD1094446', ball, true);
	petData.commands.ballEntity = ball;
	petData.commands.ballPosition = mp.game.invokeVector3('0x3FEF770D40960D5A', ball, false);
	petData.commands.ball = true;
}

mp.events.add('client::pet:deleteBall', (xPos, yPos, zPos) => 
{
	let ball = mp.game.object.getClosestObjectOfType(xPos, yPos, zPos, 100.0, mp.game.joaat('w_am_baseball'), false, true, true);
	if (ball === undefined) return;
	
	mp.game.invoke('0xAD738C3085FE7E11', ball, true, true);
	mp.game.object.deleteObject(ball);
});

mp.events.add('client::pet:follow', () => 
{
	if (petData.entity == null || !mp.peds.exists(petData.entity)) return;
	
	if (petData.dead)
	{
		mp.events.call('notify', 4, 9, "Ваш питомец мёртв.", 3000);
		return;
	}
	
	const petPosition = petData.entity.getCoords(true);
	const localPedPosition = global.localplayer.position;
	const distance = mp.game.gameplay.getDistanceBetweenCoords(petPosition.x, petPosition.y, petPosition.z, localPedPosition.x, localPedPosition.y, localPedPosition.z, true);
	if (distance >= interactionDistance) 
	{
		mp.events.call('notify', 4, 9, "Подойдите ближе к питомцу, чтобы отдавать ему команды.", 3000);
		return;
	}
	
	ClearActions();
	petData.entity.freeze = !petData.entity.freeze;
	petData.commands.sitting = false;
	petData.commands.sleeping = false;

	if (!petData.entity.freeze) 
	{
		mp.events.call('notify', 2, 9, `Питомец ${petData.name} будет следовать за Вами.`, 3000);
		return;
	}
	
	FreezePet(petData.entity);
	mp.events.call('notify', 2, 9, `Питомец ${petData.name} будет ждать тут.`, 3000);
});

mp.events.add('client::pet:freeze', () => 
{
	if (petData.entity == null || !mp.peds.exists(petData.entity)) return;
	
	ClearActions();
	petData.entity.freeze = true;
	petData.commands.sitting = false;
	petData.commands.sleeping = false;
	
	FreezePet(petData.entity);
	mp.events.call('notify', 2, 9, `Питомец ${petData.name} будет ждать тут.`, 3000);
});

mp.events.add('client::pet:unfreeze', () => 
{
	if (petData.entity == null || !mp.peds.exists(petData.entity)) return;
	
	petData.entity.freeze = false;
});

mp.events.add('client::pet:sit', async () => 
{
	if (petData.entity == null || !mp.peds.exists(petData.entity)) return;
	
	if (petData.dead)
	{
		mp.events.call('notify', 4, 9, "Ваш питомец мёртв.", 3000);
		return;
	}
	
	let petModel = petData.model;
	if (global.petConfigs[petModel] === undefined) return;
	
	if (!global.petConfigs[petModel].sit)
	{
		mp.events.call('notify', 4, 9, "Ваш питомец не понимает данной команды.", 3000);
		return;
	}
	
	const petPosition = petData.entity.getCoords(true);
	const localPedPosition = global.localplayer.position;
	const distance = mp.game.gameplay.getDistanceBetweenCoords(petPosition.x, petPosition.y, petPosition.z, localPedPosition.x, localPedPosition.y, localPedPosition.z, true);
	if (distance >= interactionDistance) 
	{
		mp.events.call('notify', 4, 9, "Подойдите ближе к питомцу, чтобы отдавать ему команды.", 3000);
		return;
	}
	
	ClearActions();
	petData.entity.freeze = true;
	petData.commands.sitting = !petData.commands.sitting;
	petData.commands.sleeping = false;
	SitPet(petData.entity, petData.commands.sitting);
});

mp.events.add('client::pet:getBall', async () => 
{
	if (petData.entity == null|| !mp.peds.exists(petData.entity)) return;
	
	if (petData.dead)
	{
		mp.events.call('notify', 4, 9, "Ваш питомец мёртв.", 3000);
		return;
	}
	
	let petModel = petData.model;
	if (global.petConfigs[petModel] === undefined) return;
	
	if (!global.petConfigs[petModel].ball)
	{
		mp.events.call('notify', 4, 9, "Ваш питомец не понимает данной команды.", 3000);
		return;
	}
	
	const petPosition = petData.entity.getCoords(true);
	const localPedPosition = global.localplayer.position;
	const distance = mp.game.gameplay.getDistanceBetweenCoords(petPosition.x, petPosition.y, petPosition.z, localPedPosition.x, localPedPosition.y, localPedPosition.z, true);
	if (distance >= interactionDistance) 
	{
		mp.events.call('notify', 4, 9, "Подойдите ближе к питомцу, чтобы отдавать ему команды.", 3000);
		return;
	}
	
	ClearActions();
	petData.entity.freeze = false;
	petData.commands.sleeping = false;
	petData.commands.sitting = false;
	petData.commands.followingType = 0;
	FindBall(petData.entity);
});

mp.events.add('client::pet:sleep', async () => 
{
	if (petData.entity == null || !mp.peds.exists(petData.entity)) return;
	
	if (petData.dead)
	{
		mp.events.call('notify', 4, 9, "Ваш питомец мёртв.", 3000);
		return;
	}
	
	let petModel = petData.model;
	if (global.petConfigs[petModel] === undefined) return;
	
	if (!global.petConfigs[petModel].sleep)
	{
		mp.events.call('notify', 4, 9, "Ваш питомец не понимает данной команды.", 3000);
		return;
	}
	
	const petPosition = petData.entity.getCoords(true);
	const localPedPosition = global.localplayer.position;
	const distance = mp.game.gameplay.getDistanceBetweenCoords(petPosition.x, petPosition.y, petPosition.z, localPedPosition.x, localPedPosition.y, localPedPosition.z, true);
	if (distance >= interactionDistance) 
	{
		mp.events.call('notify', 4, 9, "Подойдите ближе к питомцу, чтобы отдавать ему команды.", 3000);
		return;
	}
	
	ClearActions();
	petData.entity.freeze = true;
	petData.commands.sitting = false;
	petData.commands.sleeping = !petData.commands.sleeping;
	petData.commands.followingType = 0;
	SleepPet(petData.entity, petData.commands.sleeping);
});

const ClearActions = (isAttack = false) => 
{
	if (isAttack || petData.commands.attackingEntity != null)
	{
		petData.commands.attackingType = 0;
		petData.commands.attackingEntity = null;
		petData.commands.attacking = false;
		petData.commands.followingType = 0;

		petData.entity.clearTasksImmediately();
		MoveToPlayer(global.localplayer);
	}
	if (petData.commands.followingEntity != null)
	{
		FreezePet(petData.entity);
		petData.commands.following = false;
		petData.commands.followingEntity = null;
		petData.commands.followingType = 0;
	}
	if (petData.commands.sniffingEntity != null)
	{
		if (petData.commands.sniffingTimer != null) clearTimeout(petData.commands.sniffingTimer);

		FreezePet(petData.entity);
		petData.commands.sniffingEntity = null;
		petData.commands.sniffingTimer = null;
		petData.commands.sniffing = false;
		petData.commands.followingType = 0;
		petData.entity.freeze = false;
	}
	if (petData.commands.ball || petData.commands.ballThrown)
	{
		petData.entity.freeze = false;
		petData.commands.followingType = 0;
		petData.commands.ballPosition = null;
		petData.commands.ballEntity = null;
		petData.commands.ball = false;
		petData.commands.ballThrown = false; 
	}
}

mp.events.add('client::pet:attackPlayer', (playerId, errorNotify = true) => 
{
	if (petData.entity == null || !mp.peds.exists(petData.entity)) return;
	if (petData.commands.attackingEntity != null) return;
	
	if (petData.dead)
	{
		if (errorNotify) mp.events.call('notify', 4, 9, "Ваш питомец мёртв.", 3000);
		return;
	}
	
	let petModel = petData.model;
	if (global.petConfigs[petModel] === undefined) return;
	
	if (!global.petConfigs[petModel].attack)
	{
		if (errorNotify) mp.events.call('notify', 4, 9, "Ваш питомец не понимает данной команды.", 3000);
		return;
	}
	if (playerId == global.localplayer.remoteId) return;
	
	const player = mp.players.atRemoteId(playerId);
	if (!player) return;
	if (player.vehicle) return;
		
	const petPosition = petData.entity.getCoords(true);
	const localPedPosition = global.localplayer.position;
	const distance = mp.game.gameplay.getDistanceBetweenCoords(petPosition.x, petPosition.y, petPosition.z, localPedPosition.x, localPedPosition.y, localPedPosition.z, true);
	if (distance >= interactionDistance) 
	{
		if (errorNotify) mp.events.call('notify', 4, 9, "Подойдите ближе к питомцу, чтобы отдавать ему команды.", 3000);
		return;
	}
	
	petData.entity.freeze = false;
	petData.commands.attackingEntity = player;
	petData.commands.attackingType = 1;
	petData.commands.followingType = 0;
});

mp.events.add('client::pet:attackPet', (petId, errorNotify = true) => 
{
	if (petData.entity == null || !mp.peds.exists(petData.entity)) return;
	if (petData.commands.attackingEntity != null) return;
	
	if (petData.dead)
	{
		if (errorNotify) mp.events.call('notify', 4, 9, "Ваш питомец мёртв.", 3000);
		return;
	}
	
	let petModel = petData.model;
	if (global.petConfigs[petModel] === undefined) return;
	
	if (!global.petConfigs[petModel].attack)
	{
		if (errorNotify) mp.events.call('notify', 4, 9, "Ваш питомец не понимает данной команды.", 3000);
		return;
	}
	
	if (petId == petData.entity.remoteId) return;
	
	const pet = mp.peds.atRemoteId(petId);
	if (!pet) return;
	if (pet.vehicle) return;
		
	const petPosition = petData.entity.getCoords(true);
	const localPedPosition = global.localplayer.position;
	const distance = mp.game.gameplay.getDistanceBetweenCoords(petPosition.x, petPosition.y, petPosition.z, localPedPosition.x, localPedPosition.y, localPedPosition.z, true);
	if (distance >= interactionDistance) 
	{
		if (errorNotify) mp.events.call('notify', 4, 9, "Подойдите ближе к питомцу, чтобы отдавать ему команды.", 3000);
		return;
	}
	
	petData.entity.freeze = false;
	petData.commands.attackingEntity = pet;
	petData.commands.attackingType = 2;
	petData.commands.followingType = 0;
});

mp.events.add('client::pet:sniff', (playerId) => 
{
	if (petData.entity == null|| !mp.peds.exists(petData.entity)) return;
	
	if (petData.dead)
	{
		mp.events.call('notify', 4, 9, "Ваш питомец мёртв.", 3000);
		return;
	}
	
	let petModel = petData.model;
	if (global.petConfigs[petModel] === undefined) return;
	
	if (!global.petConfigs[petModel].sniff)
	{
		mp.events.call('notify', 4, 9, "Ваш питомец не понимает данной команды.", 3000);
		return;
	}
	
	const player = mp.players.atRemoteId(playerId);
	if (!player) return;
	if (player.vehicle) return;
	
	const petPosition = petData.entity.getCoords(true);
	const localPedPosition = global.localplayer.position;
	const distance = mp.game.gameplay.getDistanceBetweenCoords(petPosition.x, petPosition.y, petPosition.z, localPedPosition.x, localPedPosition.y, localPedPosition.z, true);
	if (distance >= interactionDistance) 
	{
		mp.events.call('notify', 4, 9, "Подойдите ближе к питомцу, чтобы отдавать ему команды.", 3000);
		return;
	}
	
	petData.entity.freeze = false;
	petData.commands.sniffingEntity = player;
	petData.commands.followingType = 0;
});

mp.events.add('client::pet:followTarget', (playerId) => 
{
	if (petData.entity == null || !mp.peds.exists(petData.entity)) return;
	
	if (petData.dead)
	{
		mp.events.call('notify', 4, 9, "Ваш питомец мёртв.", 3000);
		return;
	}
	
	const player = mp.players.atRemoteId(playerId);
	if (!player) return;
	if (petData.entity.isInCombat(player.handle)) return;
	if (player.vehicle) return;
	
	const petPosition = petData.entity.getCoords(true);
	const localPedPosition = global.localplayer.position;
	const distance = mp.game.gameplay.getDistanceBetweenCoords(petPosition.x, petPosition.y, petPosition.z, localPedPosition.x, localPedPosition.y, localPedPosition.z, true);
	if (distance >= interactionDistance) 
	{
		mp.events.call('notify', 4, 9, "Подойдите ближе к питомцу, чтобы отдавать ему команды.", 3000);
		return;
	}
	
	petData.entity.freeze = false;
	petData.commands.followingEntity = player;
	petData.commands.followingType = 0;
});

mp.events.add('client::pet:clearFollow', () => 
{
	if (petData.entity == null || !mp.peds.exists(petData.entity)) return;

	ClearActions();
});

mp.events.add('client::pet:deathStatus', (status) => 
{
	if (petData.entity == null || !mp.peds.exists(petData.entity)) return;

	petData.dead = status;
	ClearActions(true);
});

mp.events.add('client::pet:setInVehicle', () => 
{
	if (petData.entity == null || !mp.peds.exists(petData.entity)) return;
	
	const vehicle = global.localplayer.vehicle;
	if (!vehicle || !mp.vehicles.exists(vehicle)) 
	{
		petData.entity.freeze = false;
		return;
	}
	
	ClearActions();
	
	let vehMaxNumberOfPassengers = vehicle.getMaxNumberOfPassengers();
	for(var i = 0; i < vehMaxNumberOfPassengers; i++) 
	{
		if (vehicle.isSeatFree(i)) 
		{
			petData.entity.setIntoVehicle(vehicle.handle, i);
			return;
		}
	}
	mp.events.call('notify', 4, 9, `Питомец ${petData.name} не смог найти свободное место в транспорте и теперь ждет новую команду!`, 7000);
	petData.entity.freeze = true;
	FreezePet(petData.entity);
	petData.commands.sitting = true;
	SitPet(petData.entity, true, false);
});

mp.keys.bind(global.Keys.Key_F5, false, function () 
{
    if (petData.entity == null || !mp.peds.exists(petData.entity)) return;
	if (!petData.buttons) return;
	if (petData.dead) return;
	
	petData.buttonsRequested = !petData.buttonsRequested;
	if (!petData.buttonsRequested) return;
	
	const petPosition = petData.entity.getCoords(true);
	const localPedPosition = global.localplayer.position;
	const distance = mp.game.gameplay.getDistanceBetweenCoords(petPosition.x, petPosition.y, petPosition.z, localPedPosition.x, localPedPosition.y, localPedPosition.z, true);
	if (distance > interactionDistance) 
	{
		mp.events.call('notify', 3, 9, `Меню управления питомцем нельзя открыть находясь далеко от своего питомца.`, 5000);
		petData.buttonsRequested = false;
		return;
	}

	mp.events.call('notify', 2, 9, `Меню управления питомцем открывается.`, 2000);
});

function UsePetAction(action)
{
	if(!global.loggedin || mp.players.local.getVariable('InDeath') == true || global.fishingMiniGame || global.isPhoneOpened || global.cuffed || global.chatActive || mp.players.local.isInAnyVehicle(true) || lastPetCheck > Date.now() ||  global.gui.isOpened() ||  mp.gui.cursor.visible ||  global.IsPlayingDM == true) return;
	
	lastPetCheck = Date.now() + 1000;
	if (!petData.buttonsShow) return;
	
	mp.events.call(action);
}

mp.keys.bind(global.Keys.Key_1, false, function () 
{
    UsePetAction('client::pet:follow');
});

mp.keys.bind(global.Keys.Key_2, false, function () 
{
    UsePetAction('client::pet:sit');
});

mp.keys.bind(global.Keys.Key_3, false, function () 
{
    UsePetAction('client::pet:sleep');
});

mp.keys.bind(global.Keys.Key_4, false, function () 
{
    UsePetAction('client::pet:getBall');
});

mp.keys.bind(global.Keys.Key_5, false, function () 
{
	if(!global.loggedin || mp.players.local.getVariable('InDeath') == true || global.fishingMiniGame || global.isPhoneOpened || global.cuffed || global.chatActive || mp.players.local.isInAnyVehicle(true) || lastPetCheck > Date.now() ||  global.gui.isOpened() ||  mp.gui.cursor.visible ||  global.IsPlayingDM == true) return;
	
	lastPetCheck = Date.now() + 1000;
	if (!petData.buttonsShow) return;
	
	let petModel = petData.model;
	if (global.petConfigs[petModel] === undefined) return;
	if (!global.petConfigs[petModel].sniff) return;
	
	global.input.set("Обнюхать человека", "Введите ID", 11, "petSniffPlayer");
    global.input.open();
});

mp.keys.bind(global.Keys.Key_6, false, function () 
{
	if(!global.loggedin || mp.players.local.getVariable('InDeath') == true || global.fishingMiniGame || global.isPhoneOpened || global.cuffed || global.chatActive || mp.players.local.isInAnyVehicle(true) || lastPetCheck > Date.now() ||  global.gui.isOpened() ||  mp.gui.cursor.visible ||  global.IsPlayingDM == true) return;
	
	lastPetCheck = Date.now() + 1000;
	if (!petData.buttonsShow) return;
	
	let petModel = petData.model;
	if (global.petConfigs[petModel] === undefined) return;
	if (!global.petConfigs[petModel].attack) return;
	
	global.input.set("Атаковать человека", "Введите ID", 11, "petAttackPlayer");
    global.input.open();
});

mp.keys.bind(global.Keys.Key_7, false, function () 
{
	if(!global.loggedin || mp.players.local.getVariable('InDeath') == true || global.fishingMiniGame || global.isPhoneOpened || global.cuffed || global.chatActive || mp.players.local.isInAnyVehicle(true) || lastPetCheck > Date.now() ||  global.gui.isOpened() ||  mp.gui.cursor.visible ||  global.IsPlayingDM == true) return;
	
	lastPetCheck = Date.now() + 1000;
	if (!petData.buttonsShow) return;
	
	let petModel = petData.model;
	if (global.petConfigs[petModel] === undefined) return;
	if (!global.petConfigs[petModel].attack) return;
	
	global.input.set("Атаковать животное", "Введите ID", 11, "petAttackPet");
    global.input.open();
});

// Utility
const isAddPlayerToList = (player) => 
{
	if (!player || !mp.players.exists(player)) return false;
	if (!player.handle) return false;
	if (player == global.localplayer) return false;
	if (global.getVariable(player, 'AGM', false)) return false;
	if (global.getVariable(player, 'InDeath', false)) return false;
	if (global.getVariable(player, 'INVISIBLE', false)) return false;
	if (player.getHealth() < 1) return false;
	if (player.isInAnyVehicle(false)) return false;
	return true;
};

const isAddPedToList = (ped) => 
{
	if (!ped || !mp.peds.exists(ped)) return false;
	if (!ped.handle) return false;
	if (ped == petData.entity) return false;
	if (!global.getVariable(ped, 'pet:isPet', false)) return false;
	return true;
}

function GetScale(realDist, maxDist)
{
	return Math.max(0.1, 1 - realDist / maxDist);
};

global.requestAnimDict = (animDictionary) => new Promise(async (resolve, reject) => 
{
	if (animDictionary == null) return resolve(`Bad request dictionary`);
    if (mp.game.streaming.hasAnimDictLoaded(animDictionary)) return resolve(true);
    mp.game.streaming.requestAnimDict(animDictionary);

    let time = 0;
    while (!mp.game.streaming.hasAnimDictLoaded(animDictionary)) 
	{
        if (time > 5000) return resolve(`RequestAnimDictionary error | Dictionary: ${animDictionary}`);
        time++;        
        await global.wait (0);
    }

    return resolve(true);
});

global.vdist2 = (_Pos1, _Pos2, zCheck = true) => 
{
    if (!_Pos1 || !_Pos2) return -1;
	const _rY = _Pos1.y - _Pos2.y, _rX = _Pos1.x - _Pos2.x;
	
	if (zCheck) 
	{
		const _rZ = _Pos1.z - _Pos2.z;
		return Math.sqrt(_rY * _rY + _rX * _rX + _rZ * _rZ);
	}
	return Math.sqrt(_rY * _rY + _rX * _rX);
};

global.wait = time => new Promise(resolve => setTimeout(resolve, time));
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

/*
	Credits:
		- Kemperr
		- Captien
		- Kar
*/

const scaleform = __webpack_require__(102);
const validStyles = [-1, 1];

class instructionalButtons {
	constructor(style, bgColor) { // bgColor accepts HEX and RGBA
		this.state = false;
		this.style = null;
		this.hud = new scaleform('INSTRUCTIONAL_BUTTONS');
		this.render = null;
		this.buttons = [];
		this.backgroundColors = [0, 0, 0, 180];
		if(style) this.changeStyle(style);
		this.setBackgroundColor(bgColor);
		this.resetBar();
	}

	changeStyle(style) {
		if(!validStyles.includes(style)) return mp.gui.chat.push('!{red}[ERROR] !{white}Invalid style. Please use styles (-1 or 1).');
		if(this.style === style) return mp.gui.chat.push('!{red}[ERROR] !{white}You\'re already using that style.');
		this.style = style;
		if(this.isActive()) {
			this.hud.callFunction("DRAW_INSTRUCTIONAL_BUTTONS", this.style);
		}
	}

	setBackgroundColor(bgColor) {
		if(bgColor) {
			if(Array.isArray(bgColor)) {
				this.backgroundColors[0] = [bgColor[0], bgColor[1], bgColor[2], bgColor.length === 4 ? 180 : bgColor[3]];
			} else if(bgColor.match(/[0-9A-Fa-f]{6}/)) { // #
				let color = hexToRGB(bgColor); // bgColor.replace('#', '')
				this.backgroundColors[0] = [color[0], color[1], color[2], 180];
			} else {
				mp.gui.chat.push('!{orange}[WARNING] !{white}Invalid color given. Make sure it suits as specified in resource\'s description');
			}
		}
		this.hud.callFunction("SET_BACKGROUND_COLOUR", this.backgroundColors[0], this.backgroundColors[1], this.backgroundColors[2], this.backgroundColors[3]);
		if(this.isActive()) {
			this.hud.callFunction("DRAW_INSTRUCTIONAL_BUTTONS", this.style);
		}
	}

	addButton(title, control_id) {
		let controlName = getControlName(control_id);
		if(controlName === 't_ERR') {
			controlName = '';
			mp.gui.chat.push('!{orange}[WARNING] !{white}Invalid control_id, make sure its between (0, 356).');
		}
		let slot = this.buttons.push({
			control: controlName ? controlName : "",
			title: title ? title : ""
		}) - 1;
		this.hud.callFunction("SET_DATA_SLOT", slot, controlName, title);
		if(this.isActive()) {
			this.hud.callFunction("DRAW_INSTRUCTIONAL_BUTTONS", this.style);
		}
	}

	hasControl(control) {
		control = getControlName(control);
		return (this.buttons.find(button => button.control === control)) ? true : false;
	}

	addButtons(buttons) {
		if(typeof buttons === 'object') {
			Object.keys(buttons).forEach(btn => {
				let
					title = btn,
					controlName = getControlName(buttons[btn])
				;
				let slot = this.buttons.push({
					title: title ? title : "",
					control: controlName ? controlName : ""
				}) - 1;
				this.hud.callFunction("SET_DATA_SLOT", slot, controlName, title);
			});
			if(this.isActive()) {
				this.hud.callFunction("DRAW_INSTRUCTIONAL_BUTTONS", this.style);
			}
		} else {
			return mp.gui.chat.push('!{red}[ERROR] !{white}Invalid arguement form, please use object form that is instructed on the resource\'s description.');
		}
	}

	changeButtonTitle(control, new_title) {
		control = getControlName(control);
		this.buttons.forEach( (button, slot) => {
			//mp.gui.chat.push(`changeButtonTitle button: ${button}. button control: ${button.control}. control: ${control}.`);
			if(button.control === control) {
				button.title = new_title;
				this.hud.callFunction("SET_DATA_SLOT", slot, button.control, button.title);
			}
		});
		if(this.isActive()) {
			this.hud.callFunction("DRAW_INSTRUCTIONAL_BUTTONS", this.style);
		}
	}

	changeButtonControl(title, new_control) {
		this.buttons.forEach( (button, slot) => {
			//mp.gui.chat.push(`changeButtonControl button: ${button}. button control: ${button.control}. control: ${control}. title: ${title}.`);
			if(button.title === title) {
				button.control = getControlName(new_control);
				this.hud.callFunction("SET_DATA_SLOT", slot, button.control, button.title);
			}
		});
		if(this.isActive()) {
			this.hud.callFunction("DRAW_INSTRUCTIONAL_BUTTONS", this.style);
		}
	}

	removeButton(btn) {
		switch (typeof btn) {
			case 'string': {
				this.buttons = this.buttons.filter( (button, slot) => {
					if(button.title === btn || button.control === getControlName(btn)) {
						this.hud.callFunction("SET_DATA_SLOT", slot, "", "");
					} else {
						return true;
					}
				});
				break;
			}
			case 'number': {
				this.buttons = this.buttons.filter( (button, slot) => {
					if(button.control === getControlName(btn)) {
						this.hud.callFunction("SET_DATA_SLOT", slot, "", "");
					} else {
						return true;
					}
				});
				break;
			}
		}
		if(this.isActive()) {
			this.hud.callFunction("DRAW_INSTRUCTIONAL_BUTTONS", this.style);
		}
	}

	removeButtons() {
		this.buttons = [];
		this.resetBar();
	}

	getButtonCount() {
		return this.buttons.length;
	}

	toggleHud(state) {
		if(state) 
		{
			this.hud.callFunction("CLEAR_ALL");
			this.buttons.forEach( (button, slot) => 
			{
				this.hud.callFunction("SET_DATA_SLOT", slot, button.control, button.title);
			});
			this.hud.callFunction("SET_BACKGROUND_COLOUR", this.backgroundColors[0], this.backgroundColors[1], this.backgroundColors[2], this.backgroundColors[3]);
			this.hud.callFunction("DRAW_INSTRUCTIONAL_BUTTONS", this.style);
			if(this.render === null) 
			{
				this.render = new mp.Event('render', () => 
				{
					if (!this.state) return;
					this.hud.renderFullscreen();
				});
				this.state = true;
			}
			else this.state = true;
		} 
		else 
		{
			this.state = false;
		}
	}

	destroyHud() {
		if(this.render !== null) 
		{
			this.render.destroy();
			this.render = null;
			this.state = false;
		}
	}
	isActive () {
		return this.state;
	}

	resetBar () {
		this.hud.callFunction("CLEAR_ALL");
		this.hud.callFunction("TOGGLE_MOUSE_BUTTONS", 0);
		this.hud.callFunction("CREATE_CONTAINER");
		this.hud.callFunction("SET_CLEAR_SPACE", 100);
	}
}

function getControlName(control) {
	return (typeof control === 'number' && control >= 0 && control <= 356) ? mp.game.controls.getControlActionName(2, control, true) : (typeof control === 'string') ? ('t_' + control) : 't_ERR';
}

function hexToRGB(hex) {
	let bigint = parseInt(hex.replace(/[^0-9A-F]/gi, ''), 16);
	return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];
}

module.exports = instructionalButtons;

/***/ }),
/* 102 */
/***/ (function(module, exports) {

class Scalefrom {
	constructor(scaleformStr) {
		this._handle = mp.game.graphics.requestScaleformMovie(scaleformStr);
		this.queueCallFunction = new Map();
	}
 
	get isLoaded() {
		return !!mp.game.graphics.hasScaleformMovieLoaded(this._handle);
	}
 
	get isValid() {
		return this._handle !== 0;
	}
 
	get handle() {
		return this._handle;
	}

	callFunction(strFunction, ...args) {
		if (this.isLoaded && this.isValid) {
			const graphics = mp.game.graphics;
			graphics.pushScaleformMovieFunction(this._handle, strFunction);
			args.forEach(arg => {
				switch(typeof arg) {
					case 'string': {
						graphics.pushScaleformMovieFunctionParameterString(arg);
						break;
					}
					case 'boolean': {
						graphics.pushScaleformMovieFunctionParameterBool(arg);
						break;
					}
					case 'number': {
						if(Number(arg) === arg && arg % 1 !== 0) {
							graphics.pushScaleformMovieFunctionParameterFloat(arg);
						} else {
							graphics.pushScaleformMovieFunctionParameterInt(arg);
						}
					}
				}
			});
			graphics.popScaleformMovieFunctionVoid();
		} else {
			this.queueCallFunction.set(strFunction, args);
		}
	}
 
	onUpdate() {
		if (this.isLoaded && this.isValid) {
			this.queueCallFunction.forEach((args, strFunction) => {
				this.callFunction(strFunction, ...args);
				this.queueCallFunction.delete(strFunction);
			});
		}
	}

	renderFullscreen() {
		this.onUpdate();
		if (this.isLoaded && this.isValid) {
			mp.game.graphics.drawScaleformMovieFullscreen(this._handle, 255, 255, 255, 255, false);
		}
	}
 
	render2D(x, y, width, height) {
		this.onUpdate();
		if (this.isLoaded && this.isValid) {
			if (typeof x !== 'undefined' && typeof y !== 'undefined' && typeof width !== 'undefined' && typeof height !== 'undefined') {
				const activeResolution = mp.game.graphics.getScreenActiveResolution(0, 0);
 
				mp.game.graphics.drawScaleformMovie(this._handle, x, y, width, height, 255, 255, 255, 255, 0);
			} else {
				mp.game.graphics.drawScaleformMovieFullscreen(this._handle, 255, 255, 255, 255, false);
			}
		}
	}
 
	render3D(position, rotation, scale) {
		this.onUpdate();
		if (this.isLoaded && this.isValid) {
			mp.game.graphics.drawScaleformMovie3dNonAdditive(this._handle, position.x, position.y, position.z, rotation.x, rotation.y, rotation.z, 2, 2, 1, scale.x, scale.y, scale.z, 2);
		}
	}
 
	render3DAdditive(position, rotation, scale) {
		this.onUpdate();
		if (this.isLoaded && this.isValid) {
			mp.game.graphics.drawScaleformMovie3d(this._handle, position.x, position.y, position.z, rotation.x, rotation.y, rotation.z, 2, 2, 1, scale.x, scale.y, scale.z, 2);
		}
	}
}

module.exports = Scalefrom;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {global.farmAction = (index)=>{
    if(global.farmConfig[index] != undefined && global.farmConfig[index].isgrow){
        mp.events.callRemote("farm::action", index);
    }
}

mp.events.add("farm::destroy", (index)=>{
    deleteProduct(index);
});

mp.events.add("farm::load", (data)=>{
    setTimeout(
        ()=>{
            global.farmConfig.forEach((product, index) => {
                product.isgrow = data[index];
                if(product.isgrow){
                    CreateProduct(product, index);
                }
            });
    }, 0);
})

mp.events.add("playerEnterColshape", (shape)=>{
    if(shape.index != undefined) global.localplayer.farmAction = shape.index;
});

mp.events.add("playerExitColshape", (shape)=>{
    if(shape.index != undefined) global.localplayer.farmAction = -1;
});

function CreateProduct(product, index){
    product.obj = mp.objects.new(mp.game.joaat(product.model), product.pos,
    {            
        dimension: 0
    });
    const csh = mp.colshapes.newCircle(product.pos.x,product.pos.y,.5);
    csh.index = index;
}

function deleteProduct(index){
    if(!product.obj) return;
    const product = global.farmConfig[index];
    product.obj.destroy();
    product.isgrow = false;
    mp.colshapes.forEach(csh=>{
        if(csh.index == index){
            csh.destroy();
        }
    })
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 104 */
/***/ (function(module, exports) {

﻿const buswayMarkers = [];

mp.events.add({
    "buswayscreator:pushMarker": pushMarker,
    "buswayscreator:popMarker": popMarker,
    "buswayscreator:clearMarkers": clearMarkers
});

function clearMarkers() {
    buswayMarkers.forEach(marker => {
        if (marker) {
            marker.destroy();
        }
    })
};

function pushMarker(position, isStop) {
    const markerColor = isStop ?  [0, 255, 0, 180] : [255, 255, 255, 180];  
    const marker = mp.markers.new(1, position, 4, {
        color: markerColor
    })
    
    buswayMarkers.push(marker);
};

function popMarker() {
    const marker = buswayMarkers.pop();

    if (marker) {
        marker.destroy();
    }
};

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const ObjectMover = __webpack_require__(106)

const moveSettings = {
    size: {
        x: 40,
        y: 40
    },
    showIcons:[true, false, false, false],
    values:[
        {//LEFT X
            value: 160,
            min: 110,
            max: 250,
            step: 5,
            invert: true,
            enabled: true,
            callback: "camMoveAngleX"
        },
        {//LEFT Y
            value: 0,
            min: -.5,
            max: 1.5,
            step: .05,
            invert: false,
            enabled: true,
            callback: "camMoveCamZ"
        },
        {//RIGHT X
            value: 2,
            min: 1,
            max: 3,
            step: .1,
            invert: false,
            enabled: false,
            callback: ""
        },
        {//RIGHT Y
            value: 0,
            min: -1,
            max: 1,
            step: .05,
            invert: true,
            enabled: false,
            callback: "camMovePointZ"
        },
        { //WHEELE
            value: 1.5,
            min: .5,
            max: 3,
            step: .5,
            invert: false,
            enabled: true,
            callback: "camSetDist"
        }
    ]
}

mp.events.add({
    // Server events //
    "houses:openInfoPanel": (data, userinfo) => {
        global.gui.setData('homePurchase/setHomeData', data);
        global.gui.setData('homePurchase/setUserBalance', userinfo);

        data = JSON.parse(data);
        const pos = global.localplayer.position;
        global.customCamera.setPos(new mp.Vector3(data.CamPositionX, data.CamPositionY, data.CamPositionZ));
        global.customCamera.setPoint(new mp.Vector3(pos.x, pos.y, pos.z + .6));
        
        global.customCamera.switchOn(500);
        infoMenuOpened = global.gui.openPage('HomePurchase');
    },

    // Client events //
    "housepurchase::buy": (type) => {
        //mp.serverLog(`type buy ${type}`);
        mp.events.callRemote('houses:buy', type);
        closeInfoMenu()
    },
    "housepurchase::enter": () => {
        mp.events.callRemote('houses:enter', true);
        closeInfoMenu()
    },
    "housepurchase::enterGarage": () => {
        mp.events.callRemote('houses:enter', false);
        closeInfoMenu()
    },
    "housepurchase::breakTheDoor": () => {
        closeInfoMenu()
        mp.events.callRemote('houses:breakTheDoor');
    },
    "housepurchase::close": () => {
        closeInfoMenu()
    },
    "house::playerEntered": (furnitureData, dimension) => {
        furnitureData = JSON.parse(furnitureData);
        furnitureModels = [];
        furnitureData.forEach(e => {
            furnitureModels.push(mp.objects.new(mp.game.joaat(e.modelName), e.position,
                {
                    rotation: e.rotation,
                    dimension: dimension
                }));
        });
    },
    "house::playerLeaved": () => {
        furnitureModels.forEach(e => {
            if (e.doesExist()) e.destroy();
        });
        furnitureModels = [];
    },
    "house::updateFurniture": (furnitureData, dimension) => {
        if (furnitureModels !== []) {
            furnitureModels.forEach(e => {
                if (e.doesExist()) e.destroy();
            });
        }
        furnitureModels = [];
        furnitureData = JSON.parse(furnitureData)
        furnitureData.forEach(e => {
            furnitureModels.push(mp.objects.new(mp.game.joaat(e.modelName), e.position,
                {
                    rotation: e.rotation,
                    dimension: dimension
                }));
        });
    },
    "house::ownerInteracted": (menuData) => {
        openOwnerMenu(menuData)
    },
    "house::startFurnitureInstallation": (houseId, furnitureData) => {
        furnitureData = JSON.parse(furnitureData)
        global.sendTip('tip_furniture')
        closeOwnerMenu()
        let hash = mp.game.joaat(furnitureData.name);
        let mover = new ObjectMover(hash, global.localplayer.position, furnitureData.dimension)
        mover.enable()
        if (!global.gui.openPage('FurnitureHud')) return;
        global.showCursor(false);
        //global.gui.setOpened(true)
        mover.addCallback((pos, rot) => placeFurniture(houseId, furnitureData.id, pos, rot))
    },
    "homeMenu:rentCostChanged": (houseId, newValue) => {
        if (isNaN(newValue) || newValue < 0)
		{
            mp.gui.notify(mp.gui.notifyType.INFO, "Пожалуйста, введите корректные данные.", 3000);
            return;
        }
        mp.events.callRemote("house:rentCostChanged", houseId, newValue)
    },
    "homeMenu:sellHouse": (houseId) => {
        closeOwnerMenu()
        mp.events.callRemote("house:sellHouse", houseId)
    },
    "homeMenu:buyGarage": (houseId, index) => {
        closeOwnerMenu()
        mp.events.callRemote("homeMenu:buyGarage", houseId, index)
    },
    "homeMenu:installFurniture": (houseId, index) => {
        closeOwnerMenu()
        mp.events.callRemote("homeMenu:installFurniture", houseId, index)
    },
    "homeMenu:uninstallFurniture": (houseId, index) => {
        mp.events.callRemote("homeMenu:uninstallFurniture", houseId, index)
    },
    "homeMenu:uninstallAllFurniture": (houseId) => {
        mp.events.callRemote("homeMenu:uninstallAllFurniture", houseId)
    },
    "homeMenu:toggleHouseLocked": (houseId, toggle) => {
        mp.events.callRemote("homeMenu:lockToggle", houseId, toggle == true)
    },
    "homeMenu:closeHomeMenu": () => {
        closeOwnerMenu()
    },
    "homeMenu:updateGarage": () => {
        closeOwnerMenu()
    },
})

let furnitureModels = [];

// mp.keys.bind(global.Keys.Key_H, true, () => {
//     let mover = new ObjectMover(mp.game.joaat("apa_mp_h_stn_sofacorn_05"), global.localplayer.position)
//     mover.enable()
// })

let ownerMenuOpened = false
function openOwnerMenu(menuData) 
{
    if (ownerMenuOpened) return
    ownerMenuOpened = global.gui.openPage("HomeMenu");

    global.gui.setData("homeMenu/setFullState", menuData)
}

let infoMenuOpened = false
function closeInfoMenu() {
    if (!infoMenuOpened) return
    global.customCamera.switchOff(500);
    infoMenuOpened = false
    global.gui.close()
}

mp.keys.bind(global.Keys.Key_ESCAPE, false, closeOwnerMenu)

function closeOwnerMenu() {
    closeInfoMenu()
    if (!ownerMenuOpened) return
    ownerMenuOpened = false
    global.gui.close()
}

function placeFurniture(houseId, furnitureId, position, rotation) {
    global.gui.close();
    global.showCursor(false);
    mp.events.callRemote("homeMenu:furniturePlaced", houseId, furnitureId, JSON.stringify(position), JSON.stringify(rotation))
}


let interiorsProps = {
    [1]: ['entity_set_style_1', 'entity_set_tints'],
    [2]: ['entity_set_style_2'],
    [3]: ['entity_set_style_3'],
    [4]: ['entity_set_style_4'],
    [5]: ['entity_set_style_5'],
    [6]: ['entity_set_style_6'],
    [7]: ['entity_set_style_7'],
    [8]: ['entity_set_style_8'],
    [9]: ['entity_set_style_9'],
}
let currentIndex = {};

function loadProps(interiorID, disable, enable) {
    if (disable)
        disable.forEach(prop => {
            mp.game.interior.disableInteriorProp(interiorID, prop);
        });
    if (enable)
        enable.forEach(prop => {
            mp.game.interior.enableInteriorProp(interiorID, prop);
        });
    mp.game.interior.refreshInterior(interiorID);
}
mp.events.add('garage:loadInteriors', (pos, index) => {
    let interiorID = mp.game.interior.getInteriorAtCoords(pos.x, pos.y, pos.z);
    let newProps = interiorsProps[index];
    let oldProps = [];
    if (currentIndex[interiorID]) {
        if (currentIndex[interiorID] == index) return;
        oldProps = interiorsProps[currentIndex[interiorID]];
    }
    loadProps(interiorID, oldProps, newProps)
    mp.game.interior.refreshInterior(interiorID);
    currentIndex[interiorID] = index;
});

mp.events.call('garage:loadInteriors', new mp.Vector3(-1350, 156, -99), 1);

loadProps(mp.game.interior.getInteriorAtCoords(-2000.0, 1113.211, -25), [],
    [
        'entity_set_meet_crew',
        'entity_set_meet_lights',
        'entity_set_meet_lights_cheap',
        'entity_set_player',
        'entity_set_test_crew',
        'entity_set_test_lights',
        'entity_set_test_lights_cheap',
        'entity_set_time_trial',
    ]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const speed = 0.015;

class ObjectMover {
    constructor(hash, position, dim) {
        this.enabled = false
        this.obj = mp.objects.new(hash, position, { dimension: dim })
    }

    enable() {
        this.enabled = true
        mp.events.add('render', () => {
            this.onTick(this.obj)
        });
    }

    disable() {
        this.enabled = false
    }

    addCallback(func) {
        this.callback = func
    }
    onTick(obj) {
        if (!this.enabled) return;
        if (mp.game.controls.isDisabledControlJustPressed(0, 241)) {
            obj.setRotation(0, 0, obj.getRotation(0).z - 4.2, 0, false);
        }
        if (mp.game.controls.isDisabledControlJustPressed(0, 242)) {
            obj.setRotation(0, 0, obj.getRotation(0).z + 4.2, 0, false);
        }
        if (mp.keys.isDown(global.Keys.Key_Z)) {
            obj.position = new mp.Vector3(obj.position.x, obj.position.y, obj.position.z + speed);
        }
        if (mp.keys.isDown(global.Keys.Key_X)) {
            obj.position = new mp.Vector3(obj.position.x, obj.position.y, obj.position.z - speed);
        }
        if (mp.keys.isDown(global.Keys.Key_UP)) {
            obj.position = new mp.Vector3(obj.position.x + speed, obj.position.y + speed, obj.position.z);
        }
        if (mp.keys.isDown(global.Keys.Key_RIGHT)) {
            obj.position = new mp.Vector3(obj.position.x + speed, obj.position.y - speed, obj.position.z);
        }
        if (mp.keys.isDown(global.Keys.Key_LEFT)) {
            obj.position = new mp.Vector3(obj.position.x - speed, obj.position.y + speed, obj.position.z);
        }
        if (mp.keys.isDown(global.Keys.Key_DOWN)) {
            obj.position = new mp.Vector3(obj.position.x - speed, obj.position.y - speed, obj.position.z);
        }
        if (mp.keys.isDown(global.Keys.Key_RETURN)) {
            this.disable()
            this.callback(obj.position, obj.getRotation(0))
            this.obj.destroy()
            global.gui.setOpened(false)
        }
    }
}
module.exports = ObjectMover;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(108);
__webpack_require__(109);
__webpack_require__(110);

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const DEFAULT_MARKER_COLOR = [0, 0, 0, 255];
const interactionShapes = [];

let lastInteractionShapeId = -1;

function createInteractionShape(position, range, height, callback, withMarker = true, dimension = 0) {
    const id = lastInteractionShapeId--;

    const colshape = mp.colshapes.newSphere(position.x, position.y, position.z, range, dimension);
    colshape.isInteraction = true;

    colshape.callback = callback;
    colshape.helpKeys = [{ Key: 0x45, Text: "interact_1" }];

    if (withMarker) {
        mp.events.call('interact:loadMarkers', JSON.stringify({
            ID: id,
            Type: 27,
            Position: position,
            Scale: range,
            Color: DEFAULT_MARKER_COLOR,
            Dimension: dimension
        }));
    }

    colshape.interactionId = id;
    interactionShapes[id] = colshape;

    return id;
}

function destroyInteractionShape(interactionShapeId) {
    if (interactionShapes[interactionShapeId]) {
        const interactionShape = interactionShapes[interactionShapeId];
        mp.events.call('interact:destroyMarker', interactionShape.id);
    }
}

mp.events.add({
    "playerEnterColshape": (shape) => {
        if (shape.isInteraction) {

        }
    }
});

global.interaction = { };
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const keys = {
    [0x45]: "E",
    [0x49]: "I"
}
let currentHelp = [];
global.isInInteractShape = false;

Object.keys(keys).forEach((key) => {
    const k = parseInt(key);
    mp.keys.bind(k, false, () => handleKeyPressed(k));
});

mp.events.add({
    'interact:enterInteractShape': (helpKeys) => {
        global.isInInteractShape = true;        
        const dto = { show: true, items: [] };
        currentHelp = JSON.parse(helpKeys);
        currentHelp.forEach((info) => {
            dto.items.push({ key: keys[info.Key], text: info.Text });
        });
        if (global.frontendSoundsEnabled)
            mp.game.audio.playSoundFrontend(-1 , 'MP_RANK_UP', 'HUD_FRONTEND_DEFAULT_SOUNDSET', true);
        global.gui.setData('hud/setPromptData', JSON.stringify(dto));
    },

    'interact:exitInteractShape': () => {
        global.isInInteractShape = false;
        const dto = { show: false, items: [] };
        global.gui.setData('hud/setPromptData', JSON.stringify(dto));
    },
});

let _antiFloodCheck = 0;
function handleKeyPressed(key) {
    
    if (!global.loggedin || global.chatActive || global.editing || global.gui.isOpened() || global.IsPlayingDM || global.cuffed) return;
    if (_antiFloodCheck > Date.now()) return;
    _antiFloodCheck = Date.now() + 1000;

    if (!isInInteractShape || !currentHelp.find((info) => info.Key === key)) return;
    mp.events.callRemote('interact:interactKeyPressed', key);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {mp.events.add({
    'interact:loadMarkers': (markers) => {
        markers = JSON.parse(markers);
        
        markers.forEach((markerInfo) => {    
            //const marker = createMarkerFromInfo(markerInfo, new mp.Vector3(0, 0, 0));
            
            _rotatableMarkers.push({
                // object: marker,
                // currentRotation: new mp.Vector3(0, 0, 0),
                info: markerInfo
            });
        });
    },
    
    'interact:destroyMarker': (markerId) => {
        const markerIdx = _rotatableMarkers.findIndex((m) => m.info.ID === markerId);
        if (markerIdx !== -1 /*&& _rotatableMarkers[markerIdx].object*/) {
            // _rotatableMarkers[markerIdx].object.destroy();
            _rotatableMarkers.splice(markerIdx, 1);
        }
    }
});

const _rotatableMarkers = [];
const GLOBAL_DIMENSION = 4294967295;

function createMarkerFromInfo(info, rotation) {
    const marker = mp.markers.new(info.Type, info.Position, info.Scale, {
        color: [info.Color.Red, info.Color.Green, info.Color.Blue, info.Color.Alpha],
        dimension: info.Dimension,
        rotation: rotation
    });

    return marker;
}

function getRotatedVector3ByZ(rotation) {
    const z = (rotation.z <= -360 || rotation.z >= 360) ? 0 : rotation.z - 2;
    const newRotation = new mp.Vector3(0, 0, z);

    return newRotation;
}

// setInterval(() => {
//     if (!global.loggedin) return;
    
//     try {
//         _rotatableMarkers.forEach((marker) => {
//             if (marker && marker.object &&
//                 (marker.info.Dimension === mp.players.local.dimension || marker.info.Dimension == GLOBAL_DIMENSION)) {
//                 const pos1 = mp.players.local.position;
//                 const pos2 = marker.info.Position;
//                 const distance = mp.game.system.vdist(pos1.x, pos1.y, pos1.z, pos2.x, pos2.y, pos2.z);
    
//                 if (distance < 10) {
//                     const newRotation = getRotatedVector3ByZ(marker.currentRotation);
                    
//                     marker.object.destroy();
//                     marker.object = createMarkerFromInfo(marker.info, newRotation);
//                     marker.currentRotation = newRotation;
//                 }
//             }
//         });
//     }
//     catch (e){ 
//         if(global.sendException) mp.serverLog(`rotatableMarker.setInterval: ${e.name}\n${e.message}\n${e.stack}`);
//     }
// }, 50);

let currRotate = 0;
mp.events.add('render', () => {
    currRotate = currRotate > 360 ? 0 : currRotate + 0.5;
    _rotatableMarkers.forEach((marker) => {
        if (marker.info.Dimension === mp.players.local.dimension || marker.info.Dimension == GLOBAL_DIMENSION) {
            const pos1 = mp.players.local.position;
            const pos2 = marker.info.Position;
            const distance = mp.game.system.vdist(pos1.x, pos1.y, pos1.z, pos2.x, pos2.y, pos2.z);

            if (distance < 50) {
                global.drawRotateMarkerInRender(marker.info.Type, marker.info.Position, marker.info.Scale, marker.info.Color)
            }
        }
    });
})

global.drawRotateMarkerInRender = (type, pos, scale, color) => {
    mp.game.graphics.drawMarker(
        type,
        pos.x, pos.y, pos.z,
        0, 0, 0,
        0, 0, currRotate,
        scale, scale, scale,
        color.Red, color.Green, color.Blue, color.Alpha,
        false, false, 2,
        false, null, null, false
    );
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const currentUI = {
    firstTeamID: 1,
    secondTeamID: 1
};

const fractions = {
    [1]: { key: 'families', name: 'The Families' },
    [2]: { key: 'ballas', name: 'Ballas Gang' },
    [3]: { key: 'vagos', name: 'The Vagos' },
    [4]: { key: 'marabunta', name: 'Marabunta' },
    [5]: { key: 'bloods', name: 'Bloods Street' },
    [10]: { key: 'lcn', name: 'La Cosa Nostra' },
    [11]: { key: 'mexican', name: 'Mexican Mafia' },
    [12]: { key: 'yakuza', name: 'Yakuza' },
    [13]: { key: 'bloods', name: 'Amogebuli Mafia' },
    [100]: { key: 'attackers', name: 'Attackers' },
    [200]: { key: 'defenders', name: 'Defenders' },    
};

let opened = false;
let currTime = 0;
let captureTimer = null;

function getFractionKey(fractionId) {
    return fractions[fractionId] ? fractions[fractionId].key : 'neutral';
}

mp.events.add({
    // CAPTURE UI
    "captureUI:enable": (firstTeam, secondTeam, currentTime, firstTeamPlayers, secondTeamPlayers, isGangCapture) => {
        const teamsDto = [
            { id: 0, key: fractions[firstTeam].key, title: fractions[firstTeam].name, players: firstTeamPlayers },
            { id: 1, key: fractions[secondTeam].key, title: fractions[secondTeam].name, players: secondTeamPlayers },
        ];

        currentUI.firstTeamID = firstTeam;
        currentUI.secondTeamID = secondTeam;

        global.gui.setData('hud/setCaptureTeams', JSON.stringify(teamsDto));
        global.gui.setData('hud/setIsCaptureItems', true);
        currTime = currentTime;
        global.gui.setData('hud/setCaptureCurrentTime', currentTime);
        if (captureTimer === null)
        {
            if (isGangCapture) {
                captureTimer = setInterval(gangCaptureTimer, 1000);
            }
            else {
                captureTimer = setInterval(bizWarTimer, 1000);
            }
        }
    },

    "captureUI:setStats": (firstTeamPlayers, secondTeamPlayers, currentTime) => {
        global.gui.setData('hud/setCaptureTeamPlayers', JSON.stringify({ team: fractions[currentUI.firstTeamID].key, value: firstTeamPlayers }));
        global.gui.setData('hud/setCaptureTeamPlayers', JSON.stringify({ team: fractions[currentUI.secondTeamID].key, value: secondTeamPlayers }));
        currTime = currentTime;
    },

    "captureUI:disable": () => {
        global.gui.setData('hud/setIsCaptureItems', false);
        if (captureTimer !== null)
        {
            clearInterval(captureTimer);
            captureTimer = null;
        }
    },


    // CAPTURE LOG
    "captureUI:log:enable": () => {
        global.gui.setData('hud/setIsCaptureLog', true);
    },

    "captureUI:log:disable": (reset) => {
        global.gui.setData('hud/setIsCaptureLog', false);

        if (reset) {
            global.gui.setData('hud/resetCaptureLogItems');
        }
    },

    "captureUI:log:append": (killerName, killerFraction, victimName, victimFraction, weaponId) => {
        global.gui.setData('hud/appendCaptureLog', JSON.stringify({
            killerName: killerName,
            killerFraction: getFractionKey(killerFraction),
            deceasedFraction: getFractionKey(victimFraction),
            deceasedName: victimName,
            weaponId: weaponId
        }));
    },


    // UNTIL CAPTURE TIMER
    "captureUI:untilCapt:send": (maxTime, currentTime, message) => {
        if (untilCapture.timer != null) {
            clearInterval(untilCapture.timer);
        }

        untilCapture.currentTime = currentTime;
        untilCapture.maxTime = maxTime;
        untilCapture.timer = setInterval(untilCaptureTimer, 1000);
        
        sendUntilCaptureToCef();
        global.gui.setData("hud/setUntilCaptureTimerShow", true);
        global.gui.setData("hud/setUntilCaptureTimerMessage", message);
    },

    "captureUI:untilCapt:disable": () => {
        global.gui.setData("hud/setUntilCaptureTimerShow", false);

        if (untilCapture.timer != null) {
            clearInterval(untilCapture.timer);
            untilCapture.timer = null;
        }
    }
});

const untilCapture = {
    timer: null,
    currentTime: 0,
    maxTime: 500
};

function sendUntilCaptureToCef() {
    global.gui.setData("hud/setUntilCaptureTimer", JSON.stringify({
        maxTime: untilCapture.maxTime,
        currentTime: untilCapture.maxTime - untilCapture.currentTime
    }));
}

function untilCaptureTimer() {
    untilCapture.currentTime++;
    if (untilCapture.maxTime >= untilCapture.currentTime)
        sendUntilCaptureToCef();
    else
    {
        global.gui.setData("hud/setUntilCaptureTimerShow", false);
        if (untilCapture.timer != null) {
            clearInterval(untilCapture.timer);
        }
        untilCapture.timer = null;
    }

}

function gangCaptureTimer()
{
    if (currTime >= 0)
        global.gui.setData('hud/setCaptureCurrentTime', currTime--);
}

function bizWarTimer()
{
    if (currTime >= 0)
        global.gui.setData('hud/setCaptureCurrentTime', currTime++);
}


mp.events.add("capt:openTeamMenu", (members, fracID, enemyFracID, attackStatus) => {
    if(!global.gui.openPage('Captures')) return;
    global.gui.setData('captures/setCapturing', JSON.stringify({
        attackStatus: attackStatus ? 'we' : 'us', // us
        myGangName: fractions[fracID] ? fractions[fracID].name : '',
        enemy: fractions[enemyFracID] ? fractions[enemyFracID].name : ''
    }));

    let memberList = JSON.parse(members);
    let gangList = memberList.filter(item => item.State != 2);
    let teamList = memberList.filter(item => item.State == 2);

    global.gui.setData('captures/setGangList', JSON.stringify(
        gangList.map(item => (
            { nickname: item.Name, rang: item.Rank, status: item.State == 1 }
        ))
    ));

    global.gui.setData('captures/setTeamList', JSON.stringify(
        teamList.map(item => (
            { nickname: item.Name, rang: item.Rank }
        ))
    ));

    opened = true;
    setTimeout(() => {
        global.showCursor(true);
    }, 100);
});

mp.events.add("capt:inviteMember", (name) => {
    mp.events.callRemote('capt:srvInviteMember', name);
});

mp.events.add("capt:kickMember", (name) => {
    mp.events.callRemote('capt:srvKickMember', name);
});

mp.events.add("capt:setMember", (name, rank, state) => {
    if (state != 3)
        global.gui.setData('captures/setPlayerState', JSON.stringify(
            { nickname: name, rang: rank, status: state }
        ));
    else
        global.gui.setData('captures/setDeletePlayer', JSON.stringify(name));
});

mp.events.add("capt:attack", () => {
    mp.events.callRemote('capt:attackToEnemy');
});

mp.events.add("capt:deff", () => {
    mp.events.callRemote('capt:deffendRegion');
});

mp.events.add("capt:closeMenu", () => {
    if (opened)
        closeCaptMenu();
});

function closeCaptMenu() {
    global.gui.close();
    mp.events.callRemote('capt:exitTeamMenu');
    opened = false;
    global.showCursor(false)
}

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        closeCaptMenu();
});



/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(3);
__webpack_require__(113);
__webpack_require__(115);

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const { pointsConfig, plantsConfig, pitsConfig, fertilizersConfig, productConfigs } = __webpack_require__(3);
const Plant = __webpack_require__(114);


let sendingExcept = false;


let currentFarm = -1;
let lastCheck = Date.now();
let nearestPoint = null;
let currentPlants =
{

};

let distanceToNearestPoint = 3;

setInterval(() => {
    UpdatePlants();
}, 15000);

mp.events.add({
    "farm:loadPoints": (farmId, pointData) => {
        currentFarm = farmId;
        if (!currentPlants[currentFarm])
            currentPlants[currentFarm] = [];
        LoadPlants(JSON.parse(pointData), farmId)
        UpdatePlants();
    },

    "farm:unloadPoints": (farm) => {
        if (currentFarm == farm) {
            currentFarm = -1;
            global.gui.setData('hud/setHoleInformation', JSON.stringify({ show: false, itemInfo: null, stateInfo: null }));
        }
    },

    // "farm:plantSeed": (seedId) => {
    //     if (nearestPoint != null)
    //         mp.events.callRemote("farm:plantSeedOnPoint", seedId, currentFarm, nearestPoint.ID);
    //     else
    //         mp.events.callRemote("farm:plantSeedOnPoint", seedId, currentFarm, -1);
    // },

    "farm:updatePlant": (plantData) => {
        let plant = JSON.parse(plantData);
        if (plant.FarmId == currentFarm) {
            UpdatePointData(plant, plant.FarmId)
        }
    },

    "farm:deletePlant": (farmId, plantId) => {
        if (farmId == currentFarm) {
            DeletePointData(plantId, farmId)
        }
    },



});

mp.events.add('render', () => {
    try {
        if (currentFarm < 0) return;
        if (nearestPoint != null)
            mp.game.graphics.drawText(`•`, [nearestPoint.Position.x, nearestPoint.Position.y, nearestPoint.Position.z], {
                font: 0,
                color: [182, 211, 0, 200],
                scale: [0.5, 0.5],
                outline: false
            });
        if (Date.now() - lastCheck > 500)
            UpdategNearestPoint();
        else
            return;
        if (nearestPoint == null) {
            global.gui.setData('hud/setHoleInformation', JSON.stringify({ show: false, itemInfo: null, stateInfo: null }));
            return;
        }
        let plant = currentPlants[currentFarm].find(item => item.PointId == nearestPoint.ID);
        itemInfo =
        {
            isMy: null,
            name: null,
            icon: null,
            isWatered: null,
            fertilizer: null,
            hole: `farmHouse_${29 + nearestPoint.PitType}`
        };
        stateInfo = {};
        if (plant) {
            let status = plant.GetCurrentStatus();
            if (status) {
                itemInfo = {
                    isMy: global.UUID == plant.UUID,
                    name: `item_${status.plantName.toLowerCase()}`,
                    icon: status.plantName.toLowerCase().replace('seed', ''),
                    isWatered: status.isWatering,
                    fertilizer: `fertilizer_${status.isFertilizering}`,
                    hole: `farmHouse_${29 + nearestPoint.PitType}`
                };
                stateInfo =
                {
                    show: true,
                    isWithers: status.currentStage >= 1,
                    value: Math.floor(status.currentStage < 1 ? status.timeToRipening : status.currentStage < 300 ? status.witheringTime + status.timeToRipening : 0),
                    maxValue: status.currentStage < 1 ? status.currentRipeningTime : status.witheringTime
                }
                nearestPoint.Position = plant.Position;
            }
        }
        global.gui.setData('hud/setHoleInformation', JSON.stringify({
            show: true,
            itemInfo: itemInfo,
            stateInfo: stateInfo
        }));

    } catch (e) {
        if (global.sendException && !sendingExcept) {
            sendingExcept = true;
            mp.serverLog(`Error in farm.main.render: ${e.name}\n${e.message}\n${e.stack}`);
        }
    }
});

function UpdategNearestPoint() {
    try {
        lastCheck = Date.now()
        // let resolution = mp.game.graphics.getScreenActiveResolution(1, 1);
        // let lookingPoint = mp.game.graphics.screen2dToWorld3d([resolution.x / 2, resolution.y / 2, (2 | 4 | 8)]);
        // if (!lookingPoint) {
        //     nearestPoint = null;
        //     return;
        // }
        nearestPoint = GetNearestPointForCoord(mp.players.local.position);
        if (nearestPoint != null && getDist(nearestPoint.Position, mp.players.local.position) > distanceToNearestPoint)
            nearestPoint = null;
        // if (nearestPoint != null) {
        //     const zCoord = mp.game.gameplay.getGroundZFor3dCoord(nearestPoint.Position.x, nearestPoint.Position.y, 1000, 0.0, false);
        //     nearestPoint.Position.z = zCoord;
        // }
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in farm.main.UpdategNearestPoint: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

function GetNearestPointForCoord(coord) {
    try {
        if (!pointsConfig[currentFarm])
            return null;
        let nearest = pointsConfig[currentFarm][0];
        pointsConfig[currentFarm].forEach(point => {
            if (getDist(coord, nearest.Position) > getDist(coord, point.Position))
                nearest = point;
        });
        return nearest;
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in farm.main.GetNearestPointForCoord: ${e.name}\n${e.message}\n${e.stack}`);
        return null;
    }
}

function getDist(p1, p2) {
    return mp.game.system.vdist(p1.x, p1.y, p1.z, p2.x, p2.y, p2.z)
}

function UpdatePlants() {
    try {
        if (!currentPlants[currentFarm])
            return;
        currentPlants[currentFarm].forEach(item => {
            if (item)
                item.UpdateObject()
        });
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in farm.main.UpdatePlants: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

var plants_markers = void 0;

function LoadPlants(plants, farmId) {
    try {
        //Удаляем растения, которых нет в обновленном списке
        currentPlants[farmId].forEach(itemCurr => {
            if (plants.findIndex(itemNew => itemNew.PointId == itemCurr.PointId) < 0)
                itemCurr.DeletePlant()
        });
        plants.forEach(itemNew => {
            let index = currentPlants[farmId].findIndex(itemCurr => itemNew.PointId == itemCurr.PointId)
            if (index >= 0) 
			{
				if (!currentPlants[farmId][index]) return;
				
                currentPlants[farmId][index].UpdateData(itemNew);
			}
            else 
			{
                currentPlants[farmId].push(new Plant(itemNew));
            }
                
        });
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in farm.main.LoadPlants: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

function UpdatePointData(point, farmId) {
    try {
		if (!currentPlants[farmId]) return;
		
        let index = currentPlants[farmId].findIndex(itemCurr => point.PointId == itemCurr.PointId)
        if (index >= 0) 
		{
			if (!currentPlants[farmId][index]) return;
			
            currentPlants[farmId][index].UpdateData(point);
        }
        else {
            currentPlants[farmId].push(new Plant(point));
        }
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in farm.main.UpdatePointData: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

function DeletePointData(pointId, farmId) {
    try {
        let index = currentPlants[farmId].findIndex(itemCurr => pointId == itemCurr.PointId)
        if (index >= 0) 
		{
			if (!currentPlants[farmId][index]) return;
			
            currentPlants[farmId][index].DeletePlant();
        }
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in farm.main.DeletePointData: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

let helpMarkers = [];
let waipoint = false;
mp.events.add({
    "farm:createHelpMarkers": (farmId, maxPitType) => {
        DeleteHelpMarkers();
        waipoint = false;
        pointsConfig[farmId].forEach(point => {
            if (point.PitType <= maxPitType) {
                let index = currentPlants[farmId].findIndex(itemCurr => point.PointId == itemCurr.PointId)
                if (index < 0 || index >= 0 && currentPlants[farmId][index].PlantName == -1)
                {
                    CreateHelpMarker(point.Position)
                    return;
                }
            }
        });
    },

    "farm:deleteHelpMarkers": () => {
        DeleteHelpMarkers();
    },
});

function CreateHelpMarker(pos) {
    let marker = mp.markers.new(0, new mp.Vector3(pos.x, pos.y, pos.z + 2), 1,
        {
            rotation: new mp.Vector3(),
            color: [50, 200, 100, 200],
            visible: true,
            dimension: 0
        });
    helpMarkers.push(marker);
    if (!waipoint)
    {
        mp.game.ui.setNewWaypoint(pos.x, pos.y);
        waipoint = true;
    }
}

function DeleteHelpMarkers() {
    helpMarkers.forEach(marker => {
        marker.destroy();
    });
    helpMarkers = [];
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

const { pointsConfig, plantsConfig, pitsConfig, fertilizersConfig, productConfigs } = __webpack_require__(3);

let garbage = [];

class Plant {
    constructor(plantData) {
        this.FarmId = plantData.FarmId
        this.PointId = plantData.PointId
        this.UUID = plantData.UUID
        this.PlantName = plantData.PlantName
        this.PlantingTime = plantData.PlantingTime
        this.WateringTime = plantData.WateringTime
        this.Fertilizer = plantData.Fertilizer
		this.BuffedByPet = plantData.BuffedByPet
        this.obj = null;
        this.objModel = null;
        this.Position = null;
        this.UpdateObject();
    }

    UpdateData(plantData) {
        this.FarmId = plantData.FarmId
        this.PointId = plantData.PointId
        this.UUID = plantData.UUID
        this.PlantName = plantData.PlantName
        this.PlantingTime = plantData.PlantingTime
        this.WateringTime = plantData.WateringTime
        this.Fertilizer = plantData.Fertilizer
		this.BuffedByPet = plantData.BuffedByPet
        this.UpdateObject();
    }

    DeleteObject() {
        if (this.objModel != null || this.obj != null) {
            if (this.obj.doesExist())
                this.obj.destroy();
            else
                garbage.push(this.obj);
            this.objModel = null;
            this.obj = null;
        }
    }

    DeletePlant() {
        this.DeleteObject()
        this.PlantName = -1;
    }

    UpdateObject() {
        let plant = this.GetCurrentStatus();
        if (this.obj != null)
        {
            this.obj.position = this.Position;
            this.obj.setRotation(0, 0, 0, 0, true);
        }
        //уничтожаем старый объект, если есть необходимость
        if (this.objModel != null && plant != null && this.objModel == plant.model)
            return;
        this.DeleteObject();
        if (plant != null && plant.model != null) {
            this.objModel = plant.model;
            this.obj = mp.objects.new(mp.game.joaat(plant.model), this.Position, {
                rotation: new mp.Vector3(0, 0, 0),
                dimension: 0
            });
            this.obj.position = this.Position;
            this.obj.setRotation(0, 0, 0, 0, true);
            
        }
    }

    //Получаем данные для создания модели
    GetCurrentStatus() {
        let configPlant = plantsConfig[this.PlantName]
        if (this.PlantName < 0 || !configPlant)
            return null;
        let currDate = Date.now();
        let configPoint = pointsConfig[this.FarmId][this.PointId];
        if (this.Position === null)
        {
            this.Position = configPoint.Position;
            // const zCoord = mp.game.gameplay.getGroundZFor3dCoord(this.Position.x, this.Position.y, 1000, 0.0, false);
            // this.Position.z = zCoord;
        }
        if (!pointsConfig[this.FarmId] || !pointsConfig[this.FarmId][this.PointId])
            return null;
        let timePassed = currDate / 1000 - this.PlantingTime; //Времени прошло с момента посадки
        let isWatering = this.WateringTime > this.PlantingTime && (this.WateringTime - this.PlantingTime) < configPlant.SecondBeforeWatering; //Полито ли растение
        let coeffRipeningTime = 1 - pitsConfig[configPoint.PitType].TimeCoeff - fertilizersConfig[this.Fertilizer].TimeCoeff; //получаем коэффициент времени созревания
		if (this.BuffedByPet) coeffRipeningTime /= 2;
        let currentRipeningTime = configPlant.RipeningTime * coeffRipeningTime; //Получаем время созревания со всеми плюшками
        let currentStage = timePassed / currentRipeningTime; // получаем стадию растения
        if ((!isWatering && timePassed > configPlant.SecondBeforeWatering) || (timePassed > currentRipeningTime + configPlant.WitheringTime)) //если растение не полито и время полива закончилось, либо если уже завяло
            currentStage = 333;
        let modelName = configPlant.Stages.filter(item => item.Time > currentStage)[0].ModelName;
        return {
            plantName: configPlant.Name,
            model: modelName, //Модель растения
            isWatering: isWatering, //Полито ли растение
            isFertilizering: this.Fertilizer, //Удобрено ли растение
            timeToRipening: currentRipeningTime - timePassed, //время до созревания
            currentRipeningTime: currentRipeningTime, //полное время роста
            witheringTime: configPlant.WitheringTime, //время увядания
            currentStage: currentStage, //стадия созревания
        }
    }
}

module.exports = Plant;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const { pointsConfig, plantsConfig, pitsConfig, fertilizersConfig, productConfigs } = __webpack_require__(3);
let opened = false;

mp.events.add('farm::openMenu', (experience, productsJSON) => {
    if (global.checkIsAnyActivity()) return;
    let seeds = [];
    let fertilizers = [];
    let others = [];
    let products = JSON.parse(productsJSON);
    let plantsConfigArray = Object.values(plantsConfig);
    products.forEach(product => {
        let plant = plantsConfigArray.find(item => item.Name == product.Name);
        if (plant) {
            seeds.push({
                id: product.Name,
                minTime: Math.floor(plant.RipeningTime / 60),
                countFetus: plant.CountFetus,
                exp: plant.Exp,
                title: `item_${product.Name.toLowerCase()}`,
                cost: product.Price,
                img: product.Name.toLowerCase()
            });
            return;
        }
        let prodConf = productConfigs[product.Name]
        if (prodConf) {
            if (prodConf.Type == 'Fert') {
                fertilizers.push({
                    id: product.Name,
                    minTime: prodConf.TimeBonus,
                    exp: prodConf.Experience,
                    title: `item_${product.Name.toLowerCase()}`,
                    cost: product.Price,
                    img: product.Name.toLowerCase()
                });
            }
            else {
                others.push({
                    id: product.Name,
                    param: prodConf.Parametr,
                    paramType: prodConf.ParametrType,
                    title: `item_${product.Name.toLowerCase()}`,
                    cost: product.Price,
                    img: product.Name.toLowerCase()
                });
            }
        }
    });
    opened = global.gui.openPage('FarmHouse');
    global.gui.setData('farmHouse/setSeedsList', JSON.stringify(seeds));
    global.gui.setData('farmHouse/setNeedfulList', JSON.stringify(others));
    global.gui.setData('farmHouse/setFertilizersList', JSON.stringify(fertilizers));
    global.gui.setData('farmHouse/setExp', JSON.stringify(experience));
    global.gui.setData('farmHouse/setNickname', JSON.stringify(mp.players.local.name));


});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        CloseMenu();
});

mp.events.add('farm::closeMenu', () => {
    if (opened)
        CloseMenu();
});

function CloseMenu() {
    global.gui.close();
    opened = false;
    mp.events.callRemote('farmHouse:closeMenu')
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let skinsList = [];
let lastSkin = "DressDefault"
let openedTypeMenu = 0;

let baseClothes =
{
    [true]: {
        [3]:15,
        [4]:61,
        [5]:0,
        [6]:34,
        [7]:0,
        [8]:15,
        [9]:0,
        [10]:0,
        [11]:15,
    },
    [false]: {
        [3]:15,
        [4]:56,
        [5]:0,
        [6]:35,
        [7]:0,
        [8]:6,
        [9]:0,
        [10]:0,
        [11]:101,
    },
};

mp.events.add("frac:changeclothesmenu", (skins, fracType) => {
    let listSkin = JSON.parse(skins);
    skinsList = [{ id: 0, label: 'DressDefault' }];
    let id = 1;
    if (fracType == 3)
        skinsList.push({ id: id++, label: "WorkInMyDress" })

    listSkin.forEach(skin => {
        skinsList.push({ id: id++, label: skin })
    });
    if(global.gui.isOpened()) global.gui.close();
    global.gui.openPage('DressingUpMenu');
    global.gui.setData('dressingUpMenu/setDresses', JSON.stringify(skinsList));
    openedTypeMenu = 0;
});

mp.events.add("family:changeclothesmenu", (skins) => {
    let listSkin = JSON.parse(skins);
    skinsList = [];
    let id = 0;
    listSkin.forEach(skin => {
        skinsList.push({ id: id++, label: skin })
    });
    global.gui.openPage('DressingUpMenu');
    global.gui.setData('dressingUpMenu/setDresses', JSON.stringify(skinsList));
    openedTypeMenu = 1;
});

mp.events.add("frac:tryonclothes", (clothesJson, propsJson, gender) => {
    if (!global.loggedin)
        return;
    let clothes = JSON.parse(clothesJson);
    let props = JSON.parse(propsJson);

    for(let i = 3; i <= 11; i++)
    {
        if (clothes[i])
            global.setClothing(mp.players.local, i, clothes[i].Drawable, clothes[i].Texture, 0);
        else
            global.setClothing(mp.players.local, i, baseClothes[gender][i], 0, 0);
    }
    for(let i = 0; i <= 2; i++)
    {
        if (props[i])
            global.setProp(mp.players.local, i, props[i].Drawable, props[i].Texture)
        else
            global.setProp(mp.players.local, i, -1, 0)
    }
    for(let i = 6; i <= 7; i++)
    {
        if (props[i])
            global.setProp(mp.players.local, i, props[i].Drawable, props[i].Texture)
        else
            global.setProp(mp.players.local, i, -1, 0)
    }
        
});

mp.events.add("frac:setCurrDress", (skinId) => {
    if (!global.loggedin)
        return;
    let skin = skinsList.find(item => item.id == skinId);
    mp.events.callRemote('frac:setskin', skin.label);
});

mp.events.add("frac:applyDress", (skinId) => {
    if (!global.loggedin)
        return;
    let skin = skinsList.find(item => item.id == skinId);
    lastSkin = skin.label;
    global.gui.close();
    global.showCursor(false);
    global.updateClientClothes(mp.players.local);
    mp.events.callRemote('frac:applyskin', skin.label, openedTypeMenu);
});

mp.events.add("frac:cancelDress", () => {
    if (!global.loggedin)
        return;
    global.gui.close();
    global.showCursor(false)
    global.updateClientClothes(mp.players.local);
    mp.events.callRemote('frac:applyskin', 'cancel', openedTypeMenu);
});

let lastcheck = Date.now();

mp.keys.bind(global.Keys.Key_OEM_1, false, function () {
    //if (global.checkIsAnyActivity()) return;
    if (Date.now() < lastcheck)
        return;
    lastcheck = Date.now() + 1000;
    if (!mp.players.local.vehicle)
        return;
    mp.events.callRemote('police:spawnSpike');
});

mp.events.addDataHandler('placeOnGround', DataHandlerPlaceOnGround);

async function DataHandlerPlaceOnGround(object, toggle)
{
    try {
        if(object.type !== 'object') return;
        let index = 0;
        while ((!object.doesExist() || object.handle === 0) && index++ < 1000) {
            await mp.game.waitAsync(0);
        }
        if(object.handle === 0) return;
        if (toggle == true)
        {
            object.placeOnGroundProperly();
            object.notifyStreaming = true;
        }     
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in fractions.placeOnGround: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

//Sync data on stream in
mp.events.add("entityStreamIn", (object) => {
    try {
        if (!object || object.type !== "object") return;
        if (global.getVariable(object, 'placeOnGround', false))
            object.placeOnGroundProperly();
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in fractions.entityStreamIn: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

mp.events.add("friskInterface:openmenu", (items, target, targetId) => {
    try {
        global.gui.setData('friskInterface/setData', JSON.stringify({items: items, name: target, id: targetId}));
        global.gui.openPage('FriskInterface');
    } catch (e) {
        if (global.sendException) mp.serverLog(`Error in fractions.openfriskmenu: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

mp.events.add("friskInterface:close", () => {
    CloseFriskMenu();
});

mp.events.add("friskInterface:takeAll", () => {
    mp.events.callRemote('friskInterface:takeAllIllegal');
    CloseFriskMenu();
});

function CloseFriskMenu() {
    global.gui.close();
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(118);
__webpack_require__(119);

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let isHaveContainer = false;

const controlsToDrop = [
    { group: 0, control: 21 },
    { group: 0, control: 22 },
    { group: 0, control: 24 },
    { group: 0, control: 25 },
    { group: 0, control: 37 },
    { group: 0, control: 36 },
    { group: 0, control: 44 },
    { group: 0, control: 45 }
];
mp.events.add({
    "materialsSupply:pickContainer": () => {
        isHaveContainer = true;
        global.controlsManager.canSprintJump(true, true);
    },

    "materialsSupply:takeContainer": () => {
        isHaveContainer = false;
        global.controlsManager.canSprintJump(false, false);
    },

    "render": () => {
        if (!isHaveContainer) return;

        controlsToDrop.forEach((c) => {
            if (mp.game.controls.isControlJustPressed(c.group, c.control) || mp.game.controls.isControlPressed(c.group, c.control)) {
                
                mp.events.callRemote('materialsSupply:dropContainer');
            }
        });
    },
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let isStockInfoOpenned = false;

mp.events.add({
    "fraction:openStockInfo": (data) => {
        global.gui.setData("stockInfo/setData", data);
        isStockInfoOpenned = global.gui.openPage("StockInfo");
    }
});

mp.events.add("stockInfo::close", () => {        
    if (!isStockInfoOpenned) return;
    global.gui.close();
    isStockInfoOpenned = false;
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function() {
    if (!isStockInfoOpenned) return;
    
    global.gui.close();
    global.showCursor(false);

    isStockInfoOpenned = false;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const Cigarette = __webpack_require__(121);

const dropAnimDict = "amb@code_human_in_car_mp_actions@first_person@smoke@std@ds@base";
const dropAnimName = "exit";

let sendingExcept = false;

function cigeretteExists(player){
    if(!player) return false;
    return player.hasOwnProperty("attachedCigarette");
}

function destroyIfExists(player){
    if(cigeretteExists(player)){
        player.attachedCigarette.destroy();
        delete player.attachedCigarette;
    }
}

function createCigarette(player){
    player.attachedCigarette = new Cigarette(player);
}


mp.events.addDataHandler("attach:cigarette", (entity, newData, oldData) => {
    try {        
        if(entity.type !== 'player'|| entity.handle == 0) return;
        if(entity.handle == mp.players.local.handle && newData == false){
            mp.players.local.clearTasksImmediately();
            mp.players.local.taskPlayAnim(dropAnimDict, dropAnimName, 8, 1, -1, 52, .35,false, false, false );
            mp.game.wait(0)
        }    
        destroyIfExists(entity);
        
        if(newData) 
            createCigarette(entity);

        if(!mp.game.streaming.hasAnimDictLoaded(dropAnimDict)) 
        mp.game.streaming.requestAnimDict(dropAnimDict);
    } catch (e) {        
        if (global.sendException) mp.serverLog(`siga.addDataHandler: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

mp.events.add("entityStreamIn", (entity)=>{
    try {
        if (entity && entity.type === 'player') {
            let cigarette = entity.getVariable('attach:cigarette');
            if(cigarette){
                destroyIfExists(entity);            
                createCigarette(entity);
            }
        }        
    } catch (e) {
        if (global.sendException) mp.serverLog(`siga.entityStreamIn: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

mp.events.add("entityStreamOut", (entity)=>{
    if (entity && entity.type === 'player') {
        destroyIfExists(entity);
    }
});

let rightPressed = false;
let leftPressed = false;
mp.events.add("render", ()=>{
    try {        
        if(mp.game.controls.isControlPressed(0, 25)){
            if(!rightPressed) {
                rightPressed = true;
                if(cigeretteExists(mp.players.local)){
                    mp.events.callRemote('scene:cigarette:cancel');
                };
            };
        }else{
            if(rightPressed)
                rightPressed = false;
        }

        if(mp.game.controls.isControlPressed(0, 24)){
            if(!leftPressed){
                leftPressed = true;
                if(cigeretteExists(mp.players.local)){
                    mp.events.callRemote('scene:cigarette:smoking');
                }
            }
        }else{
            if(leftPressed)
                leftPressed = false;
        }
    } catch (e) {
        if (global.sendException && !sendingExcept) {
            sendingExcept = true;
            mp.serverLog(`siga.render: ${e.name}\n${e.message}\n${e.stack}`);
        } 
    }
})

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 121 */
/***/ (function(module, exports) {

module.exports = class Cigarette{
  constructor(player) {
      this.obj = null;
      this.model = "ng_proc_cigarette01a";
      this.boneId = 64097;
      this.offsetX = 0;
      this.offsetY = .025;
      this.offsetZ = 0; 
      this.rotateX = 95;
      this.rotateY = -25;
      this.rotateZ = 80;
      this.create(player);
  }

  create(player){
    if(this.obj == null){
      const model = mp.game.joaat(this.model);
      if(!mp.game.streaming.isModelValid(model)) return;
      if(!mp.game.streaming.hasModelLoaded(model)){
        mp.game.streaming.requestModel2(model);
        for (let index = 0;!mp.game.streaming.hasModelLoaded(model) && index < 250; index++) {
          mp.game.wait(0);          
        }
      }
      this.obj = mp.objects.new(model, player.position);
      for (let index = 0; !this.obj.doesExist() && !this.obj.handle !== 0 && index < 250; index++) {
        mp.game.wait(0);          
      }        
      this.attach(player.handle);
    }
  }
  
  attach(handle){
    if(this.obj == null && handle != 0) return;
    this.obj.attachTo(handle, mp.players.local.getBoneIndex(this.boneId), this.offsetX,this.offsetY,this.offsetZ, this.rotateX,this.rotateY,this.rotateZ,  false, true, false, false, 0, true);
  }
  
  destroy(){
    if(this.obj == null) return;
    this.obj.detach(true, true);
    this.obj.destroy();
  }
}

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {__webpack_require__(123);
__webpack_require__(124);
__webpack_require__(125);
__webpack_require__(126);

mp.events.add({
    // COMMON1
    "lifesystem:setStatsByKey": (key, value) => {
        const data = {
            key: key,
            value: value
        };
        
        global.gui.setData('hud/setStatusDisplay', JSON.stringify(data));
    },

    "lifesystem:startScreenEffect": (effectName) => {
        mp.game.graphics.startScreenEffect(effectName, 3000, true);
    },

    "lifesystem:stopScreenEffect": (effectName) => {
        mp.game.graphics.stopScreenEffect(effectName);
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let moveDisabled = false;

mp.events.add({
    "lifesystem:playStomachSound": () => {
        global.gui.playSound("stomach", .3, false);
    },

    "lifesystem:enableRagdoll": () => {
        mp.players.local.setToRagdoll(1000, 2000, 1, false, false, false);
    },

    "lifesystem:disableMoveOnTime": (time) => {
        moveDisabled = true;
        setTimeout(() => moveDisabled = false, time);
    },

    // RAGE EVENTS
    "render": () => {
        if (moveDisabled) {
            mp.game.controls.disableControlAction(0, 30, true);
            mp.game.controls.disableControlAction(0, 31, true);
            mp.game.controls.disableControlAction(0, 32, true);
            mp.game.controls.disableControlAction(0, 33, true);
            mp.game.controls.disableControlAction(0, 34, true);
            mp.game.controls.disableControlAction(0, 35, true);
        }
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 124 */
/***/ (function(module, exports) {



/***/ }),
/* 125 */
/***/ (function(module, exports) {



/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let endlessStamina = true;

mp.events.add({
    "lifesystem:toggleStaminaDecreased": (toggle) => {
        togle = toggle == true;
        const staminaParam = toggle ? 10 : 100;
        endlessStamina = !toggle;

        mp.game.stats.statSetInt(mp.game.joaat("SP0_STAMINA"), staminaParam, false);
    },

    // RAGE EVENTS
    "render": () => {
        if (endlessStamina) {
            if  (global.localplayer.isSprinting() || global.localplayer.isOnAnyBike()) mp.game.player.restoreStamina(100);
        }
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {__webpack_require__(128);
__webpack_require__(129);
__webpack_require__(130);
__webpack_require__(131);
__webpack_require__(132);

mp.events.add("admin:checkinventory:responce", (equip, items)=>{
    global.gui.setData("inventory/updateCheckInventory", JSON.stringify({equip, items}))
    global.showCursor(true);
})

global.isDemorgan = false;

mp.events.add("admin:toDemorgan", (freeze)=>{ 
    global.isDemorgan = true;
    if (freeze)  
    {
        // global.gui.setData("setLoadScreen", 'true');
        mp.players.local.freezePosition(true);
        setTimeout(() => {
            mp.players.local.freezePosition(false);
            // global.gui.setData("setLoadScreen", 'false');
        }, 3000);
    } 
})

mp.events.add("admin:releaseDemorgan", ()=>{ 
    global.isDemorgan = false;
})

/*
let spamProtection = 0;

mp.keys.bind(global.Keys.Key_F10, false, () =>
{
    if(spamProtection > Date.now()) return;
    spamProtection = Date.now() + 1000;
    if(global.getVariable(mp.players.local, 'IS_MEDIA', false) || global.getVariable(mp.players.local, 'ALVL', 0) > 7)
        mp.events.callRemote("media:mute:press")
});
*/
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {mp.events.add('setadminlvl', (newLvl) => {
	global.LOCAL_ADMIN_LVL = newLvl;
	global.gui.setData("hud/updateAdminData", newLvl > 0);
});

let maxScale = 0.33;
let minScale = 0.26
let playerLevelExcretion = 3;
let adminLvlHide = 7;

let sendingExcept = false;

mp.keys.bind(global.Keys.Key_F12, false, function () {
	if (!global.loggedin || global.getVariable(mp.players.local, 'ALVL', 0) < 1 && global.localplayer.getVariable('IS_MEDIAHELPER') !== true) return;
	// myalvl = global.localplayer.getVariable('ALVL');
	if (global.esptoggle == 3) global.esptoggle = 0;
	else global.esptoggle++;
	//if(global.esptoggle == 0) mp.game.graphics.notify('ESP: ~r~Disabled');
	//else if(global.esptoggle == 1) mp.game.graphics.notify('ESP: ~g~Only Players');
	//else if(global.esptoggle == 2) mp.game.graphics.notify('ESP: ~g~Only Vehicles');
	//else if(global.esptoggle == 3) mp.game.graphics.notify('ESP: ~g~Players & Vehicles');
});

mp.events.add('render', () => {
	if (!global.loggedin || global.getVariable(mp.players.local, 'ALVL', 0) < 1) return;
	if (global.esptoggle >= 1) {
		try {
			let position;
			let pos = mp.players.local.position;
			let distance;
			if (global.esptoggle == 1 || global.esptoggle == 3) {
				mp.players.forEachInStreamRange(player => {
					if (player.handle !== 0 && player !== mp.players.local) {
						let invis = global.getVariable(player, 'INVISIBLE', false);
						let admlvl = global.getVariable(player, 'ALVL', 0);
						if (!invis || admlvl < adminLvlHide || global.getVariable(mp.players.local, 'ALVL', false) >= admlvl)
						{
							position = player.position;
							distance = mp.game.gameplay.getDistanceBetweenCoords(pos.x, pos.y, pos.z, position.x, position.y, position.z, true);
							let correctScale = maxScale - distance / 2000;
							if (correctScale < minScale)
								correctScale = minScale;
	
							let text = '';
							let lvl = global.getVariable(player, 'lvl', 0);
							let color = getColorNameTag(player);
							let voiceColor = player.isVoiceActive ? (lvl >= playerLevelExcretion ? '~g~' : '~HUD_COLOUR_REDLIGHT~') : color;
							let hpNarmor = `[${player.getHealth()}|${player.getArmour()}]`;
							let fraction = global.getVariable(player, 'fraction', 0);
							let family = global.getVariable(player, 'familyname', '-');
							let id = global.getVariable(player, 'C_ID', `${player.remoteId}~`);
							if (global.getVariable(player, 'InDeath', false))
								text += (global.getVariable(player, 'ALVL', 0) > 0 ? '~p~' : '~r~') + `Dead `;
							text += voiceColor + `#${id} \n`;
							text += `Fr: ${fraction}, Fam: ${family}\n`;
							text += color + player.name + ` ${hpNarmor}`;
	
							mp.game.graphics.drawText(text, [position.x, position.y, position.z + 1.2], {
								scale: [correctScale, correctScale],
								outline: true,
								color: [255, 255, 255, 255],
								font: 4
							});
						}
					}
				});
			}
			if (global.esptoggle == 2 || global.esptoggle == 3) {
				mp.vehicles.forEachInStreamRange(vehicle => {
					if (vehicle.handle !== 0 /*&& vehicle !== mp.players.local*/) {
						position = vehicle.position;
						distance = mp.game.gameplay.getDistanceBetweenCoords(pos.x, pos.y, pos.z, position.x, position.y, position.z, true);
						let correctScale = maxScale - distance / 2000;
						if (correctScale < minScale)
							correctScale = minScale;
						mp.game.graphics.drawText(mp.game.vehicle.getDisplayNameFromVehicleModel(vehicle.model) + ` (${vehicle.getNumberPlateText()} | ${vehicle.remoteId})` + `\n${global.getVariable(vehicle, 'HOLDERNAME', '')}`, [position.x, position.y, position.z - 0.5], {
							scale: [correctScale, correctScale],
							outline: true,
							color: [255, 255, 255, 255],
							font: 4
						});
					}
				});
			}
		} catch (e) {
			if (global.sendException && !sendingExcept) {
				sendingExcept = true;
				mp.serverLog(`Error in adminesp.render: ${e.name}\n${e.message}\n${e.stack}`);
			} 
		}
	}
});


mp.events.add('render', () => {
	if (!global.loggedin || global.localplayer.getVariable('IS_MEDIAHELPER') !== true || global.getVariable(mp.players.local, 'ALVL', 0) > 0) return;
	if (global.esptoggle >= 1) {
		try {
			let position;
			let pos = mp.players.local.position;
			let distance;
			if (global.esptoggle == 1 || global.esptoggle == 3) {
				mp.players.forEachInStreamRange(player => {
					if (player.handle !== 0 && player !== mp.players.local) {
						let invis = global.getVariable(player, 'INVISIBLE', false);
						let admlvl = global.getVariable(player, 'ALVL', 0);
						if (!invis || admlvl < adminLvlHide)
						{
							position = player.position;
							distance = mp.game.gameplay.getDistanceBetweenCoords(pos.x, pos.y, pos.z, position.x, position.y, position.z, true);
							let correctScale = maxScale - distance / 2000;
							if (correctScale < minScale)
								correctScale = minScale;
	
							let color = getColorNameTag(player);
							let voiceColor = player.isVoiceActive ? '~HUD_COLOUR_REDLIGHT~' : color;
							let id = global.getVariable(player, 'C_ID', `${player.remoteId}~`);
							let text = voiceColor + `#${id}`;
	
							mp.game.graphics.drawText(text, [position.x, position.y, position.z + 1.2], {
								scale: [correctScale, correctScale],
								outline: true,
								color: [255, 255, 255, 255],
								font: 4
							});
						}
					}
				});
			}
		} catch (e) {
			if (global.sendException && !sendingExcept) {
				sendingExcept = true;
				mp.serverLog(`Error in adminesp.mediahelper: ${e.name}\n${e.message}\n${e.stack}`);
			} 
		}
	}
});

function getColorNameTag(player) {
	if (global.getVariable(player, 'ALVL', 0) > 0)
		return '~r~';
	if (global.getVariable(player, 'IS_MEDIA', false))
		return '~b~';
	if (global.getVariable(player, 'IS_MEDIAHELPER', false))
		return '~HUD_COLOUR_NET_PLAYER23~';
	let lvl = global.getVariable(player, 'lvl', 0);
	if (lvl < playerLevelExcretion)
		return '~HUD_COLOUR_NET_PLAYER31~';
	return '~w~';
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {mp.events.add({
    // SERVER EVENTS
    "vehicleConfiguration:openEditMenu": (data) => {
        global.gui.setData("devTools/setVehicleEdit", data);
        global.gui.setData("devTools/selectMenu", 1);
        global.gui.openPage("DevTools");
    },

    // GUI EVENTS
    "vehicleConfiguration::save": (configuration) => {
        mp.events.callRemote('vehicleConfiguration:saveConfig', configuration);
        global.gui.close();
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
mp.events.add("spmode", (target, toggle) => {
	try {
		mp.players.local.freezePosition(toggle == true);
		if (toggle == true) {
			if (target && mp.players.exists(target)) {
				global.spectating = true;
				mp.players.local.attachTo(target.handle, -1, -1.5, -1.5, 2, 0, 0, 0, true, false, false, false, 0, false);
			} else mp.events.callRemote("UnSpectate");
		} else {
			mp.players.local.detach(true, true);
			global.spectating = false;
		}		
	} catch (e) {
		if(global.sendException)mp.serverLog(`spmode: ${e.name }\n${e.message}\n${e.stack}`);
	}
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// credits to ragempdev

const controlsIds = {
    F11: 0x74,
    W: 32,
    S: 33,
    A: 34,
    D: 35, 
    Space: 321,
    LCtrl: 326,
    LMB: 24,
	RMB: 25
};

global.fly = {
    flying: false, f: 2.0, w: 2.0, h: 2.0, point_distance: 1000,
};

global.gameplayCam = mp.cameras.new('gameplay');

let direction = null;
let coords = null;

function pointingAt(distance) {
    const farAway = new mp.Vector3((direction.x * distance) + (coords.x), (direction.y * distance) + (coords.y), (direction.z * distance) + (coords.z));

    const result = mp.raycasting.testPointToPoint(coords, farAway, 1, 16);
    if (result === undefined) {
        return 'undefined';
    }
    return result;
}

mp.events.add("AGM", (toggle) => {
	global.pidrgm = toggle == true;
	mp.players.local.setInvincible(toggle == true);
	// mp.game.graphics.notify(toggle ? 'GM: ~g~Enabled' : 'GM: ~r~Disabled');
});

mp.keys.bind(global.Keys.Key_F11, false, function () {
    if (mp.keys.isUp(global.Keys.Key_ALT) || !global.loggedin || global.getVariable(mp.players.local, 'ALVL', 0) < 1 && global.localplayer.getVariable('IS_MEDIAHELPER') !== true) return;

    const controls = mp.game.controls;
    const fly = global.fly;
    direction = global.gameplayCam.getDirection();
    coords = global.gameplayCam.getCoord();

    fly.flying = !fly.flying;

    const player = mp.players.local;
    
    if(fly.flying)
        player.setInvincible(true);
    else if(!global.pidrgm)
        player.setInvincible(false);

    player.freezePosition(fly.flying);
	player.setVisible(!global.fly.flying, false);
    const position = mp.players.local.position;
    if (!fly.flying && !controls.isControlPressed(0, controlsIds.Space)) {
        position.z = mp.game.gameplay.getGroundZFor3dCoord(position.x, position.y, position.z, 0.0, false);
        mp.players.local.setCoordsNoOffset(position.x, position.y, position.z, false, false, false);
    }

    mp.events.callRemote('FlyToggle', fly.flying, position.z);
    //mp.game.graphics.notify(fly.flying ? 'Fly: ~g~Enabled' : 'Fly: ~r~Disabled');
});

function isBoolean(val) 
{
   return val === false || val === true;
}

mp.events.addDataHandler("INVISIBLE", (entity, value, oldValue) => 
{
	if (!entity || !mp.players.exists(entity)) return;
	if (!isBoolean(value)) return;
	entity.setVisible(!value, false);
});

mp.events.add('render', () => {
    if (fly.flying) {
        const controls = mp.game.controls;
        const fly = global.fly;
        direction = global.gameplayCam.getDirection();
        coords = global.gameplayCam.getCoord();

        let updated = false;
        const position = mp.players.local.position;
		let speed;
        if(controls.isControlPressed(0, controlsIds.LMB)) speed = 1.0
		else if(controls.isControlPressed(0, controlsIds.RMB)) speed = 0.02
		else speed = 0.2
		if (controls.isControlPressed(0, controlsIds.W)) {
            if (fly.f < 8.0) fly.f *= 1.025;
            position.x += direction.x * fly.f * speed;
            position.y += direction.y * fly.f * speed;
            position.z += direction.z * fly.f * speed;
            updated = true;
        } else if (controls.isControlPressed(0, controlsIds.S)) {
            if (fly.f < 8.0) fly.f *= 1.025;
            position.x -= direction.x * fly.f * speed;
            position.y -= direction.y * fly.f * speed;
            position.z -= direction.z * fly.f * speed;
            updated = true;
        } else fly.f = 2.0;
        if (controls.isControlPressed(0, controlsIds.A)) {
            if (fly.l < 8.0) fly.l *= 1.025;
            position.x += (-direction.y) * fly.l * speed;
            position.y += direction.x * fly.l * speed;
            updated = true;
        } else if (controls.isControlPressed(0, controlsIds.D)) {
            if (fly.l < 8.0) fly.l *= 1.05;
            position.x -= (-direction.y) * fly.l * speed;
            position.y -= direction.x * fly.l * speed;
            updated = true;
        } else fly.l = 2.0;
        if (controls.isControlPressed(0, controlsIds.Space)) {
            if (fly.h < 8.0) fly.h *= 1.025;
            position.z += fly.h * speed;
            updated = true;
        } else if (controls.isControlPressed(0, controlsIds.LCtrl)) {
            if (fly.h < 8.0) fly.h *= 1.05;
            position.z -= fly.h * speed;
            updated = true;
        } else fly.h = 2.0;
        if (updated) mp.players.local.setCoordsNoOffset(position.x, position.y, position.z, false, false, false);
    }
});

mp.events.add('getCamCoords', (name) => {
    mp.events.callRemote('saveCamCoords', JSON.stringify(coords), JSON.stringify(pointingAt(fly.point_distance)), name);
});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 132 */
/***/ (function(module, exports) {

mp.game.streaming.requestAnimDict("mini@prostitutes@sexlow_veh");
mp.game.streaming.requestAnimDict("mini@prostitutes@sexnorm_veh");
mp.game.streaming.requestAnimDict("mini@prostitutes@sexlow_veh_first_person");
mp.game.streaming.requestAnimDict("misscarsteal2pimpsex");
mp.game.streaming.requestAnimDict("rcmpaparazzo_2");

let partner = null;

mp.events.add("rape:target", (pos, id)=>{
    partner = mp.players.atRemoteId(id);
    if(!partner) return;
    partner.taskPlayAnimAdvanced("mini@prostitutes@sexlow_veh_first_person", "low_car_bj_to_prop_p1_player", pos.x, pos.y, pos.z, 0, 0, 0, 8, 1, -1, 39, 0, 2, 1);//5642
    mp.players.local.taskPlayAnimAdvanced("mini@prostitutes@sexlow_veh_first_person", "low_car_bj_to_prop_p1_female", pos.x, pos.y, pos.z, 0, 0, 0, 8, 1, -1, 5641, 0, 2, 1);//5642
})
mp.events.add("rape:king", (pos, id)=>{
    partner = mp.players.atRemoteId(id);
    if(!partner) return;
    partner.taskPlayAnimAdvanced("mini@prostitutes@sexlow_veh_first_person", "low_car_bj_to_prop_p1_female", pos.x, pos.y, pos.z, 0, 0, 0, 8, 1, -1, 39, 0, 2, 1);//5642
    mp.players.local.taskPlayAnimAdvanced("mini@prostitutes@sexlow_veh_first_person", "low_car_bj_to_prop_p1_player", pos.x, pos.y, pos.z, 0, 0, 0, 8, 1, -1, 5641, 0, 2, 1);//5642
})
mp.events.add("rape:off", ()=>{
    mp.players.local.clearTasksImmediately();
    if(partner) partner.clearTasksImmediately();
})



/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let InstructorIsOn = true;

let schoolPed = mp.peds.newValid(mp.game.joaat("cs_andreas"), new mp.Vector3(-928.49084, -2036.9944, 9.4033785), -127.79, 0);

let Instructors =
{
	[0]: 42647445,
	[1]: 793439294,
	[2]: 1752208920,
	[3]: 117698822,
	[4]: -1422914553,
	[5]: -1422914553,
};

// 0 - Moto
// 1 - Car,
// 2 - Truck,
// 3 - Boat,
// 4 - Helicopter,
// 5 - Plane,

let pedPositions = {
	[0]: new mp.Vector3(-984.11896, -2064.3271, 9.40642),
	[1]: new mp.Vector3(-984.11896, -2064.3271, 9.40642),
	[2]: new mp.Vector3(-984.11896, -2064.3271, 9.40642),
	[3]: new mp.Vector3(-729.6624, -1318.266, 2.0809747),
	[4]: new mp.Vector3(-731.6271, -1438.907, 4.880671),
	[5]: new mp.Vector3(1722.593, 3286.659, 41.04894),
}

let currTypeExam = -1;

let _schoolVehicle = null;

let Instructor = null;

let _onSchool = false;

let _spawnedCones;

let listCones = [];

let totalTime = 0;

let startTime = Date.now();

let _currPoint;

let _nextPointShape;
let _nextPointMarker;
let _nextPointBlip;


let currDimension = 0;

let StartPedPosition = new mp.Vector3(0, 0, 0);
let shapeStartExam = null;
let markerStartExam = null;
let blipStartExam = null;

let enableKeys = false;

let rightAutoStart = true;

let playSoundStop = Date.now();

let oldHealth = 1000;


mp.game.ped.setPedDensityMultiplierThisFrame(0);
mp.game.streaming.setPedPopulationBudget(0);
mp.game.streaming.setVehiclePopulationBudget(0);

mp.events.add('school:setStartPosition', (position, type) => {
	let pos = JSON.parse(position);
	if (shapeStartExam != null && mp.colshapes.exists(shapeStartExam))
		shapeStartExam.destroy();
	if (markerStartExam != null && mp.markers.exists(markerStartExam))
		markerStartExam.destroy();
	if (blipStartExam != null && mp.blips.exists(blipStartExam))
		blipStartExam.destroy();
	currTypeExam = type;
	mp.game.ui.setNewWaypoint(pos.x, pos.y);
	shapeStartExam = mp.colshapes.newCircle(pos.x, pos.y, 2, 0);
	markerStartExam = mp.markers.new(27, pos, 2,
		{
			direction: new mp.Vector3(0, 0, 0),
			rotation: new mp.Vector3(0, 0, 0),
			color: [232, 228, 33, 255],
			visible: true,
			dimension: 0
		});
	blipStartExam = mp.blips.new(1, pos, {
		alpha: 255,
		color: 33,
		dimension: currDimension,
		scale: 1
	})
});

mp.events.add('school:startLearnTask', (type, dimension, veh, vehPos) => {
	let pedModel = Instructors[type];
	let vehiclePosition = JSON.parse(vehPos);
	StartLearnTask(type, pedModel, pedPositions[type], dimension, veh, vehiclePosition);
});

function GetDistance(vector1, vector2) {
	return mp.game.gameplay.getDistanceBetweenCoords(vector1.x, vector1.y, vector1.z, vector2.x, vector2.y, vector2.z, true);
}

// Создаем пропсы для трассы
function SpawnProps(allProps, dim) {
	try {
		if (!listCones)
			listCones = [];
		else {
			listCones.forEach(obj => {
				obj.objectCone.destroy();
			});
			listCones = [];
		}
		_spawnedCones = false;
		let i = 0;
		allProps.forEach(props => {
			for (i = 0; i < props.Positions.length; i++) {
				let obj = mp.objects.new(mp.game.joaat(props.Model), props.Positions[i], {
					rotation: props.Rotations[i],
					alpha: 255,
					dimension: dim
				});
				listCones.push({ objectCone: obj, pos: props.Positions[i], rotation: obj.getRotation(1), damage: false, freeze: props.FreezeProp });
			}
		});
	} catch (e) {
		if (global.sendException) mp.serverLog(`Error in school.SpawnProps: ${e.name}\n${e.message}\n${e.stack}`);
	}
}

mp.events.add('render', () => {
	if (!_onSchool)
		return;
	if (mp.players.local.vehicle && mp.players.local.vehicle.getPedInSeat(-1) == mp.players.local.handle)
		mp.game.controls.disableControlAction(27, 75, true);
	if (enableKeys || !rightAutoStart) {
		mp.game.controls.disableControlAction(27, 71, true);
		mp.game.controls.disableControlAction(27, 72, true);
	}
	if (_spawnedCones) {
		let i = 0;
		while (i < listCones.length) {
			if (!listCones[i].freeze) {
				let distSubRotation = GetDistance(listCones[i].objectCone.getRotation(1), listCones[i].rotation);
				listCones[i].rotation = listCones[i].objectCone.getRotation(1);
				if (distSubRotation > 0.2 && GetDistance(listCones[i].pos, global.localplayer.position) < 2) {
					if (!listCones[i].damage)
						DamageCone();
					listCones[i].damage = true;
				}
			}
			i++;
		}
	}
	let vehicle = mp.players.local.vehicle;
	if (vehicle != null) {
		if (vehicle.getHealth() < oldHealth)
			GetDamage();
		oldHealth = vehicle.getHealth();
	}
});


// Начало выполнения экзамена
async function StartLearnTask(type, pedModel, pedPos, dimension, veh, vehiclePosition) {
	currDimension = dimension;
	currTypeExam = type;
	StartPedPosition = pedPos;
	_schoolVehicle = veh;
	if (InstructorIsOn)
	{
		if (Instructor != null)
			Instructor.destroy();
		Instructor = mp.peds.newValid(
			pedModel,
			pedPos,
			0,
			currDimension
		);
	}
	blipStartExam = mp.blips.new(1, vehiclePosition, {
		alpha: 255,
		color: 33,
		dimension: currDimension,
		scale: 1
	})
}

mp.events.add('school:finishPractic', (result) => {
	EndOfExam(result)
});

mp.events.add('school:buyLic', (type) => {
	mp.events.callRemote('server:school:buyLic', type);
});

//Конец экзамена
function EndOfExam(completeMiss) {
	_onSchool = false;
	totalTime = (Date.now() - startTime) / 1000;
	let points = GetPointsForExam(_schoolVehicle.getHealth(), listCones.filter(item => item.damage).length);
	SetStreetTraffic(false);
	if (completeMiss) {
		mp.players.local.taskLeaveAnyVehicle(0, 0);
		if(Instructor !== undefined && Instructor.doesExist()){
			Instructor.taskLeaveAnyVehicle(0, 0);
			Instructor.taskGoStraightToCoord(StartPedPosition.x, StartPedPosition.y, StartPedPosition.z, 5, 10000, 0, 0);
		}
	}
	global.goodScreenFadeOut(500, 5000, 500);
	LeaveMission(points, totalTime, GetResultExam(completeMiss, points));

	
	var pos = mp.players.local.position;
	
	
	setTimeout(() => {
        mp.events.call('teleport:newPos', new mp.Vector3(-984.11896, -2064.3271, 9.40642));
		mp.players.local.freezePosition(true);
		setTimeout(() => {
			mp.players.local.freezePosition(false);
			mp.events.call('teleport:newPos', pos);
		}, 4500);
	}, 500);
}

//Создание очередного чекпойнта
function CreateCheckpoint(number) {
	DestroyCheckpoint(); //удаляем старый чекпойнт
	let points = global.schoolCheckpoints[currTypeExam] //получаем список чекпойнтов текущего вида экзамена
	if (points.Positions.length <= number)
		return;
	_nextPointShape = mp.colshapes.newSphere(points.Positions[number].x, points.Positions[number].y, points.Positions[number].z, points.Radius, currDimension);
	mp.game.ui.setNewWaypoint(points.Positions[number].x, points.Positions[number].y);
	_nextPointMarker = mp.markers.new(points.Model, points.Positions[number], points.Radius,
		{
			direction: new mp.Vector3(0, 0, 0),
			rotation: points.Rotation,
			color: points.MarkerColor,
			visible: true,
			dimension: currDimension
		});

	_nextPointBlip = mp.blips.new(1, points.Positions[number], {
		alpha: 255,
		color: 33,
		dimension: currDimension,
		scale: 1
	})

	/*
	if (points.TrafficStatus[number] !== undefined) {
		SetStreetTraffic(points.TrafficStatus[number]);
	}
	*/
}

function DestroyCheckpoint() {
	if (_nextPointShape != null)
		_nextPointShape.destroy();
	_nextPointShape = null;
	if (_nextPointMarker != null)
		_nextPointMarker.destroy();
	_nextPointMarker = null;
	if (_nextPointBlip != null)
		_nextPointBlip.destroy();
	_nextPointBlip = null;

}

mp.events.add("playerEnterColshape", playerEnterColshapeHandler);

function playerEnterColshapeHandler(shape) {
	try {
		if (shape == shapeStartExam) {
			if (shapeStartExam != null && mp.colshapes.exists(shapeStartExam))
				shapeStartExam.destroy();
			if (markerStartExam != null && mp.markers.exists(markerStartExam))
				markerStartExam.destroy();
			if (blipStartExam != null && mp.blips.exists(blipStartExam))
				blipStartExam.destroy();
			mp.events.callRemote('school:createSchoolVehicle', currTypeExam);
		}
		if (!_onSchool)
			return;
		if (_nextPointShape == shape) {
			CheckSoundInCheckpoint(_currPoint);
			if (global.schoolCheckpoints[currTypeExam].Positions.length == _currPoint + 1) {
				_currPoint++;
				DestroyCheckpoint();
				EndOfExam(true);
			}
			else {
				if (global.schoolCheckpoints[currTypeExam].UnfreezeIndex.findIndex(item => item == _currPoint) > -1) {
					listCones.forEach(obj => {
						if (!obj.freeze) {
							_spawnedCones = false;
							obj.objectCone.freezePosition(false);
							obj.objectCone.setDynamic(true);
						}
					});
					setTimeout(() => {
						_spawnedCones = true;
					}, 2000);
				}
				_currPoint++;
				CreateCheckpoint(_currPoint);
			}
		}
	} catch (e) {
		if (global.sendException) mp.serverLog(`Error in school.playerEnterColshapeHandler: ${e.name}\n${e.message}\n${e.stack}`);
	}
}

function SetStreetTraffic(trafficOn) {
	if (trafficOn) {
		if(!mp.storage.data.mainSettings.trafficOff) return;
		mp.game.ped.setPedDensityMultiplierThisFrame(3);
		mp.game.streaming.setPedPopulationBudget(3);
		mp.game.streaming.setVehiclePopulationBudget(3);
	}
	else {
		mp.game.ped.setPedDensityMultiplierThisFrame(0);
		mp.game.streaming.setPedPopulationBudget(0);
		mp.game.streaming.setVehiclePopulationBudget(0);
	}
}

function GetPointsForExam(health, destroyProps) {
	return (health - destroyProps * 50) / 10;
}

function GetResultExam(finaly, point) {
	if (finaly && point > 80)
		return true;
	return false
}

function LeaveMission(points, totalTime, completeMiss) {
	_schoolVehicle = null;
	if (Instructor) {
		Instructor.destroy();
		Instructor = null;
	}

	let dto = { show: true, items: [] }
	global.gui.setData('hud/setPromptData', JSON.stringify(dto));
	let result = {
		time: `${Math.floor(totalTime / 60)}:${Math.floor(totalTime % 60)}`,
		quality: points,
		result: completeMiss
	}
	mp.events.callRemote("cancelmiss", currTypeExam, JSON.stringify(result), completeMiss);
}

mp.events.add("playerEnterVehicle", (entity, seat) => {
	try {
		if (seat == -1) {
			if (_schoolVehicle == null)
				return;
			if (_schoolVehicle == entity) {
				if (Instructor)
				{
					Instructor.freezePosition(false);
					Instructor.taskEnterVehicle(_schoolVehicle.handle, 4000, 0, 7, 0, 0);
				}
				if (!_onSchool) {
					_onSchool = true;
					if (blipStartExam != null && mp.blips.exists(blipStartExam))
						blipStartExam.destroy();
					if (global.schoolCones[currTypeExam])
						SpawnProps(global.schoolCones[currTypeExam], currDimension);
					_currPoint = 0;
					rightAutoStart = true;
					enableKeys = true;
					setTimeout(() => {
						InitExam();
					}, 4100);
				}
			}
		}
	} catch (e) {
		if (global.sendException) mp.serverLog(`Error in school.playerEnterVehicle: ${e.name}\n${e.message}\n${e.stack}`);
	}
});

global.RefreshHints = () => {
	try {
		if (!_onSchool)
			return;
		if (_schoolVehicle == null)
			return;
		let dto = { show: true, items: [] }
		enableKeys = false;
		let engineState = global.getVariable(_schoolVehicle, 'veh:engineStatus', false);
		if (mp.players.local.getConfigFlag(32, true)) {
			dto.items.push({ key: 'J', text: 'AutoSchool_2' });
			enableKeys = true;
		}
		if (!engineState) {
			dto.items.push({ key: '2', text: 'AutoSchool_1'});
			if (enableKeys) //когда ремень не пристегнуть и авто не заведено
				rightAutoStart = true;
			enableKeys = true;
		}
		else if (enableKeys && currTypeExam == 1) //когда ремень не пристегнуть, но авто заведено
		{
			rightAutoStart = false;
		}
		dto.show = true;
		setTimeout(() => {
			if (mp.players.local.vehicle)
			{
				mp.events.callRemote('VehStream_RadioChange', mp.players.local.vehicle, 255);
				mp.game.audio.setRadioToStationName("OFF");
			}
		}, 300);
		global.gui.setData('hud/setPromptData', JSON.stringify(dto));
		if (Date.now() < startTime)
		{
			mp.players.local.setConfigFlag(32, false);
			enableKeys = true;
			return;
		}
		if (_currPoint == 0) {
			switch (currTypeExam) {
				case 0:
					if (!enableKeys)
						PlaySound('motoGo');
					break;
				case 1:
					if (!rightAutoStart)
						PlaySound('autoBelt');
					else if (!enableKeys)
						PlaySound('autoStart');
					break;
				case 4:
					if (!enableKeys)
						PlaySound('planeScary');
					break;
				case 5:
					if (!enableKeys) {
						PlaySound('planeScary');
						setTimeout(() => {
							PlaySound('planeChassis');
						}, 3000);
					}
					break;
			}
		}
	}
	catch (e) {
		if (global.sendException) mp.serverLog(`Error in school.RefreshHints: ${e.name}\n${e.message}\n${e.stack}`);
	}
};

let soundVolume = 0.15;

function InitExam() {
	// let sound = '';
	let timeOut = 0;
	// switch (currTypeExam) {
	// 	case 0:
	// 		sound = 'motoWelcome';
	// 		break;
	// 	case 1:
	// 		sound = 'autoWelcome';
	// 		break;
	// 	case 2:
	// 		sound = 'truckWelcome';
	// 		break;
	// 	case 3:
	// 		sound = 'boatWelcome';
	// 		break;
	// 	case 4:
	// 		sound = 'heliWelcome';
	// 		break;
	// 	case 5:
	// 		sound = 'planeWelcome';
	// 		break;
	// }
	// if (soundLength[sound] !== undefined)
	// 	timeOut = soundLength[sound];
	// PlaySound(sound);
	timeOut = 1000;
	if (currTypeExam == 5) {
		timeOut = 3000;
		setTimeout(() => {
			PlaySound('planeStart');
			setTimeout(() => {
				PlaySound('planeStartSecond');
			}, 5000);
		}, 5000);
	}
	RefreshHints();
	startTime = Date.now() + timeOut;
	setTimeout(() => {
		CreateCheckpoint(_currPoint);
	}, timeOut);
}

function GetDamage() {
	switch (currTypeExam) {
		case 0:
			PlaySound('motoLookOut');
			break;
		case 1:
			PlaySound('autoLookOut');
			break;
		case 4:
			PlaySound('planeOneLife');
			break;
		case 5:
			PlaySound('planeOneLife');
			break;
	}
}

function DamageCone() {
	switch (currTypeExam) {
		case 0:
			PlaySound('autoCone');
			break;
		case 1:
			PlaySound('autoCone');
			break;
	}
}

function CheckSoundInCheckpoint(checkpoint) {
	switch (currTypeExam) {
		case 0:
			switch (checkpoint) {
				case 1:
					PlaySound('motoSmellGood')
					break;
				case 2:
					PlaySound('motoMuscular')
					break;
				case 4:
					PlaySound('autoArea')
					break;
				case 26:
					PlaySound('motoThisMyNumberCallMeMaybe')
					break;
			}
			break;
		case 1:
			switch (checkpoint) {
				case 4:
					PlaySound('autoArea')
					break;
				case 21:
					PlaySound('autoGoSchool')
					break;
			}
			break;
		case 2:
			switch (checkpoint) {
				case 15:
					PlaySound('examOver');
					setTimeout(() => {
						PlaySound('resultSurprise');
					}, 2000);
					break;
			}
			break;
		case 3:
			switch (checkpoint) {
				case 147:
					PlaySound('boatOver')
					break;
			}
			break;
		case 4:
			switch (checkpoint) {
				case 51:
					PlaySound('examOver');
					setTimeout(() => {
						PlaySound('goToFlyingschool');
					}, 2000);
					setTimeout(() => {
						PlaySound('resultSurprise');
					}, 2000);
					break;
			}
			break;
		case 5:
			switch (checkpoint) {
				case 88:
					PlaySound('examOver');
					setTimeout(() => {
						PlaySound('goToFlyingschool');
					}, 2000);
					setTimeout(() => {
						PlaySound('resultSurprise');
					}, 2000);
					break;
			}
			break;
	}
}

function PlaySound(soundName) {
	if (playSoundStop > Date.now())
		return;
	global.gui.playSoundLang(soundName, mp.storage.data.language, soundVolume, false);
	if (soundLength[soundName] !== undefined)
		playSoundStop = Date.now() + soundLength[soundName];
}

let soundLength = {
	['autoWelcome']: 18000,
	['autoBelt']: 6000,
	['autoStart']: 2000,
	['autoLookOut']: 6000,
	['autoArea']: 2000,
	['autoCone']: 3000,
	['autoGoSchool']: 4000,
	['motoWelcome']: 7000,
	['motoGo']: 1000,
	['motoLookOut']: 9000,
	['motoSmellGood']: 4000,
	['motoMuscular']: 2000,
	['motoThisMyNumberCallMeMaybe']: 7000,
	['planeWelcome']: 5000,
	['planeStart']: 5000,
	['planeStartSecond']: 5000,
	['planeScary']: 3000,
	['planeChassis']: 3000,
	['planeOneLife']: 4000,
	['heliWelcome']: 5000,
	['goToFlyingschool']: 2000,
	['resultSurprise']: 3000,
	['examOver']: 2000,
	['boatWelcome']: 6000,
	['boatOver']: 6000,
	['truckWelcome']: 6000,
}


//Теоретическая часть
let currType = -1;
let answers = [];
let theoryRes = null;
let practiceRes = null;
let opened = false;

let schoolNames = {
	[0]: { name: 'AutoSchool_26', welcome: 'AutoSchool_32' },
	[1]: { name: 'AutoSchool_27', welcome: 'AutoSchool_33' },
	[2]: { name: 'AutoSchool_28', welcome: 'AutoSchool_34' },
	[3]: { name: 'AutoSchool_29', welcome: 'AutoSchool_35' },
	[4]: { name: 'AutoSchool_30', welcome: 'AutoSchool_36' },
	[5]: { name: 'AutoSchool_31', welcome: 'AutoSchool_37' },
}

let questData = {
	[0]: { number: 1, count: 10 },
	[1]: { number: 1, count: 10 },
	[2]: { number: 1, count: 10 },
	[3]: { number: 2, count: 5 },
	[4]: { number: 3, count: 7 },
	[5]: { number: 3, count: 7 },
}


const licConfig = {
    [0]: {
        type: "vehicle",
        name: "A",
        img: 'bike',
		status: false,
    },
    [1]: {
        type: "vehicle",
        name: 'B',
        img: 'car',
		status: false,
    },
    [2]: {
        type: "vehicle",
        name: 'C',
        img: 'truck',
		status: false,
    },
    [3]: {
        type: "vehicle",
        name: 'D',
        img: 'ship',
		status: false,
    },
    [4]: {
        type: "vehicle",
        name: 'E',
        img: 'helicopter',
		status: false,
    },
    [5]: {
        type: "vehicle",
        name: 'F',
        img: 'flight',
		status: false,
    },
    [6]: {
        type: 'weapon',
        name: 'gun',
		status: false,
    },
    [7]: {
        type: 'medical',
        name: 'med',
		status: false,
    },
    [8]: {
        type: 'military',
        name: 'cl:lic:mil',
		status: false,
    },
    [9]: {
        type: 'job',
        name: 'cl:lic:taxi',
        img: 'taxi',
		status: false,
    },
    [10]: {
        type: 'job',
        name: 'cl:lic:mgmw',
        img: 'weapon',
		status: false,
    },
    [11]: {
        type: 'job',
        name: 'cl:lic:miner',
        img: 'iron',
		status: false,
    },
    [12]: {
        type: 'job',
        name: 'cl:lic:hunter',
        img: 'hunting',
		status: false,
    },
    [13]: {
        type: 'job',
        name: 'cl:lic:truckdriver',
        img: 'truck',
		status: false,
    },
    [14]: {
        type: 'job',
        name: 'cl:lic:fish',
        img: 'fishing',
		status: false,
    },
    [15]: {
        type: 'job',
        name: 'cl:lic:metalPlant',
        img: 'iron',
		status: false,
    },
}

mp.events.add('school:updateMenu', (licenses) => 
{
	if (!licenses) return;
	
	let licens = JSON.parse(licenses);
	licens.forEach(el => 
	{
		licConfig[el.Name].status = true
	});
	global.gui.setData('autoSchool/setLicensesData', JSON.stringify(licConfig));
});

mp.events.add('school:openMenu', (theoryResults, practiceResults, typeSchool, licenses) => {
	//global.gui.setData('autoSchool/setAnswersOnQuestions', theoryResults);
	global.gui.setData('autoSchool/setPracticResults', practiceResults);

	let licens = JSON.parse(licenses);
	licens.forEach(el => 
	{
		licConfig[el.Name].status = true
	});
	global.gui.setData('autoSchool/setLicensesData', JSON.stringify(licConfig));
	//theoryRes = JSON.parse(theoryResults);
	OpenSchoolMenu(typeSchool);
});

function OpenSchoolMenu(typeSchool) {
	opened = global.gui.openPage('AutoSchool');
	currType = typeSchool;
	global.gui.setData('autoSchool/setCurrentSection', JSON.stringify({ section: 'GeneralSection', data: null }));
	global.gui.setData('autoSchool/setCurrentSchoolName', JSON.stringify(schoolNames[typeSchool].name));
	global.gui.setData('autoSchool/setCurrentSchoolWelcome', JSON.stringify(schoolNames[typeSchool].welcome));
}

mp.events.add('school:startExam', (typeExam) => {
	if (typeExam == 'theory') {
		mp.events.callRemote('school:startTheoryExam', currType);
		CloseMenu();
	}
	else if (typeExam == 'practic') {
		mp.events.callRemote('school:startPracticExam', currType);
		CloseMenu();
	}
});


mp.events.add('school:selectExam', (key) => {
	currType = key;
});

mp.events.add('school:openTheoryMenu', (typeExam) => {
	OpenSchoolMenu(typeExam);
	StartTest(typeExam);
});

mp.events.add('school:sendAnswer', (resultAnswers) => {
	theoryRes = JSON.parse(resultAnswers);
	ViewResultTheory(true);
});

function ViewResultTheory(saveRes) {
	let questions = [];
	let totalQuest = 0;
	let correctQuest = 0;
	theoryRes.forEach(item => {
		let currQuest = {
			quest: GetElementForKey(global.schoolQuestion[questData[currType].number], item.keyQuest).quest,
			myAnswer: GetElementForKey(global.schoolQuestion[questData[currType].number][item.keyQuest].answers, item.keyAnswer).title,
			correctAnswer: GetElementForKey(global.schoolQuestion[questData[currType].number][item.keyQuest].answers, global.schoolQuestion[questData[currType].number][item.keyQuest].correctAnswer).title
		};
		questions.push(currQuest);
		totalQuest++;
		if (currQuest.myAnswer == currQuest.correctAnswer)
			correctQuest++;
	});
	let result = { totalQuest, correctQuest, result: getResultTheory(totalQuest, correctQuest), questions };
	if (saveRes)
		mp.events.callRemote('school:saveTheoryResult', currType, JSON.stringify(result), result.result);
	global.gui.setData('autoSchool/setAnswersOnQuestions', JSON.stringify(result));
}

function GetElementForKey(answers, key) {
	return answers.find(item => item.key == key);
}

function getResultTheory(totalQuest, correctQuest) {
	if ((correctQuest / totalQuest) >= 0.8)
		return true;
	else
		return false;
}

function StartTest(typeQuest) {
	let questions = GetQuestions(typeQuest);
	questions.forEach(item => {
		item.answers = GetRandomElements(item.answers, item.answers.length);
	});
	global.gui.setData('autoSchool/setQuestions', JSON.stringify(questions));
	global.gui.setData('autoSchool/setCurrentSection', JSON.stringify({ section: 'QuestionSection', data: 'theory' }));
}

function GetQuestions(typeQuest) {
	return GetRandomElements(global.schoolQuestion[questData[typeQuest].number], questData[typeQuest].count);
}

function GetRandomElements(array, count) {
	let initialArray = array.map(item => item);
	let outArray = [];
	for (let i = 0; i < count; i++) {
		let index = Math.floor(Math.random() * initialArray.length);
		outArray.push(initialArray[index]);
		initialArray.splice(index, 1);
	}
	return outArray;
}

mp.events.add('school:closeMenu', () => {
	if (opened)
		CloseMenu();
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
	if (opened)
		CloseMenu();
});

function CloseMenu() {
	global.gui.close();
	opened = false;
}

mp.events.add("ClientTrafficChangeStatus", SetStreetTraffic);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const moveSettings = {
	size: {
		x: 60,
		y: 35
	},
	position: {
		left: '85%',
		top: '78%',
	},
	showIcons: [false, false, false, false],
	values: [
		{//LEFT X
			value: 160,
			min: -1800,
			max: 1800,
			step: 5,
			invert: true,
			enabled: true,
			callback: "camMoveAngleX"
		},
		{//LEFT Y
			value: 1,
			min: -0.6,
			max: 2.6,
			step: .2,
			invert: false,
			enabled: true,
			callback: "camMoveCamZ"
		},
		{//RIGHT X
			value: 2,
			min: 1,
			max: 3,
			step: .1,
			invert: false,
			enabled: false,
			callback: ""
		},
		{//RIGHT Y
			value: 0,
			min: -1,
			max: 1,
			step: .1,
			invert: true,
			enabled: false,
			callback: "camMovePointZ"
		},
		{ //WHEELE
			value: 4,
			min: .5,
			max: 5,
			step: .5,
			invert: false,
			enabled: true,
			callback: "camSetDist"
		}
	]
}



let opened = false;

let MileageToOilChange = 1000;
let MileageToTransmissionService = 2000;
let MileageToBrakeBroken = 2000;

let pedMehanic = null;
let pedModel = -261389155;

mp.events.add('repair:openMenu', (name, mileage, mileageOilChange, mileageTransmissionService, mileageBrakePadsChange, pricePart, pricePerEnginePart, engineOilPrice, transmissionOilPrice, brakesPrice, pedPos) => {

	let vehicle = mp.players.local.vehicle;
	if (vehicle == null || vehicle == undefined)
		return;
	opened = global.gui.openPage('VehicleRepairsServices');
	if(!opened) return;	
	
	global.gui.setData('vehicleRepairsServices/setAutoState', JSON.stringify({ name: name, Mileage: Math.round(mileage * 100) / 100 }));

	let doorBreak = vehicle.getVariable('veh:doorBreak');
	if ((typeof doorBreak) === 'undefined' || doorBreak == null)
		doorBreak = 0;
	let brokenDoor = 0;
	for (let index = 0; index < 8; index++) {
		if ((doorBreak >> index) % 2 == 1)
			brokenDoor++;
	}
	global.gui.setData('vehicleRepairsServices/setPriceRepair', JSON.stringify((brokenDoor + 1) * pricePart));


	let engineHealth = vehicle.getVariable('veh:engineHealth');
	if ((typeof engineHealth) === 'undefined' || engineHealth == null)
		engineHealth = 1000;
	let engineState = Math.round(engineHealth / 10);
	let engineRepairPrice = (100 - engineState) * pricePerEnginePart;

	global.gui.setData('vehicleRepairsServices/setEngineState', JSON.stringify({ StateEngine: engineState, PriceRepairEngine: engineRepairPrice }));

	let oilChangeDist = Math.round((MileageToOilChange - mileageOilChange) * 100) / 100;
	global.gui.setData('vehicleRepairsServices/setEngineOilState', JSON.stringify({ Mileage: oilChangeDist < 0 ? 0 : oilChangeDist, State: Math.round((oilChangeDist < 0 ? 0 : oilChangeDist / MileageToOilChange) * 100), Price: engineOilPrice }));

	let oilTransmChangeDist = Math.round((MileageToTransmissionService - mileageTransmissionService) * 100) / 100;
	global.gui.setData('vehicleRepairsServices/setTransmOilState', JSON.stringify({ Mileage: oilTransmChangeDist < 0 ? 0 : oilTransmChangeDist, State: Math.round((oilTransmChangeDist < 0 ? 0 : oilTransmChangeDist / MileageToTransmissionService) * 100), Price: transmissionOilPrice }));

	let brakeChangeDist = Math.round((MileageToBrakeBroken - mileageBrakePadsChange) * 100) / 100;
	global.gui.setData('vehicleRepairsServices/setBrakeState', JSON.stringify({ Mileage: brakeChangeDist < 0 ? 0 : brakeChangeDist, State: Math.round((brakeChangeDist < 0 ? 0 : brakeChangeDist / MileageToBrakeBroken) * 100), Price: brakesPrice }));

	//camera settings
	const pos = global.localplayer.position;
	global.customCamera.setPos(new mp.Vector3(pos.x, pos.y, pos.z + .6));
	global.customCamera.setPoint(new mp.Vector3(pos.x, pos.y, pos.z + .6));
	global.customCamera.moveCamZ(0);
	global.customCamera.setDist(4);
	global.customCamera.moveAngleX(160);
	global.customCamera.switchOn(0);
	global.gui.setData('mouseMove/setSettings', JSON.stringify(moveSettings));
	global.gui.setData('mouseMove/setEnebled', true);


	if (pedMehanic != null) {
		pedMehanic.destroy();
		pedMehanic = null;
	}
	pedMehanic = mp.peds.newValid(
		pedModel,
		pedPos,
		0,
		0
	);

	if(pedMehanic == null) return; 
	pedMehanic.freezePosition(false);
	let posHood = vehicle.getOffsetFromInWorldCoords(0, 2.5, 0);
	//let boneIndex = vehicle.getBoneIndexByName('bonnet');
	//let pos = vehicle.getWorldPositionOfBone(boneIndex);
	//pedMehanic.taskGoToCoordAnyMeans(pos.x, pos.y, pos.z, 2, 1, true, 1, 1);
	pedMehanic.taskSlideToCoord(posHood.x, posHood.y, posHood.z, 0, 1)
	//pedMehanic.taskOpenVehicleDoor(vehicle.handle, 7000, 4, 2);
	setTimeout(() => {
		if (pedMehanic == null || mp.players.local.vehicle == null)
			return;
		vehicle.setDoorOpen(4, false, false);
		//pedMehanic.taskLookAt(vehicle.handle, -1, 2048, 3);
		pedMehanic.taskTurnToFace(vehicle.handle, -1);
		//pedMehanic.taskAchieveHeading(180, 5000);		
	}, 4000);
});

mp.events.add('repair:buyService', (state) => {
	mp.events.callRemote('repair:buy', state);
});


mp.events.add('repair:updateInfo', (mileageOilChange, mileageTransmissionService, mileageBrakePadsChange, pricePart, pricePerEnginePart, engineOilPrice, transmissionOilPrice, brakesPrice) => {

	let vehicle = mp.players.local.vehicle;
	if (vehicle == null || vehicle == undefined)
		return;

	let doorBreak = vehicle.getVariable('veh:doorBreak');
	if ((typeof doorBreak) === 'undefined' || doorBreak == null)
		doorBreak = 0;
	let brokenDoor = 0;
	for (let index = 0; index < 8; index++) {
		if ((doorBreak >> index) % 2 == 1)
			brokenDoor++;
	}
	global.gui.setData('vehicleRepairsServices/setPriceRepair', JSON.stringify((brokenDoor + 1) * pricePart));


	let engineHealth = vehicle.getVariable('veh:engineHealth');
	if ((typeof engineHealth) === 'undefined' || engineHealth == null)
		engineHealth = 1000;
	let engineState = Math.round(engineHealth / 10);
	let engineRepairPrice = (100 - engineState) * pricePerEnginePart;

	global.gui.setData('vehicleRepairsServices/setEngineState', JSON.stringify({ StateEngine: engineState, PriceRepairEngine: engineRepairPrice }));

	let oilChangeDist = Math.round((MileageToOilChange - mileageOilChange) * 100) / 100;
	global.gui.setData('vehicleRepairsServices/setEngineOilState', JSON.stringify({ Mileage: oilChangeDist < 0 ? 0 : oilChangeDist, State: Math.round((oilChangeDist < 0 ? 0 : oilChangeDist / MileageToOilChange) * 100), Price: engineOilPrice }));

	let oilTransmChangeDist = Math.round((MileageToTransmissionService - mileageTransmissionService) * 100) / 100;
	global.gui.setData('vehicleRepairsServices/setTransmOilState', JSON.stringify({ Mileage: oilTransmChangeDist < 0 ? 0 : oilTransmChangeDist, State: Math.round((oilTransmChangeDist < 0 ? 0 : oilTransmChangeDist / MileageToTransmissionService) * 100), Price: transmissionOilPrice }));

	let brakeChangeDist = Math.round((MileageToBrakeBroken - mileageBrakePadsChange) * 100) / 100;
	global.gui.setData('vehicleRepairsServices/setBrakeState', JSON.stringify({ Mileage: brakeChangeDist < 0 ? 0 : brakeChangeDist, State: Math.round((brakeChangeDist < 0 ? 0 : brakeChangeDist / MileageToBrakeBroken) * 100), Price: brakesPrice }));
});




mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
	if (opened)
		CloseMenu();
});

function CloseMenu() {
	if (!opened)
		return;
	mp.events.callRemote('repair:closemenu');
	global.gui.setData('mouseMove/setEnebled', false);
	global.gui.close();
	opened = false;

	global.customCamera.switchOff(0);

	if (pedMehanic != null) {
		pedMehanic.destroy();
		pedMehanic = null;
	}
	let vehicle = mp.players.local.vehicle;
	if (vehicle != null && vehicle != undefined)
		vehicle.setDoorShut(4, false);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
let _scale;
let _targetToRender = -1
let _fixPlayer = false;
let _gender = true;

let greenscreenMenuOpened = false;
let objects = [];

mp.events.add('greenscreen:openedMenu', (toggle) => {
    objects.forEach(element => {
        element.destroy();
    });
    objects = [];
    if (toggle == true) {
        if (!mp.game.graphics.hasStreamedTextureDictLoaded('mpweaponsgang0'))
            mp.game.graphics.requestStreamedTextureDict('mpweaponsgang0', true);
        greenscreenMenuOpened = true;
        _targetToRender = -1
    }
    else {
        greenscreenMenuOpened = false;
    }
});

mp.events.add('render', () => {
    if (!greenscreenMenuOpened)
        return;
    RenderThings(_targetToRender);
});

mp.keys.bind(global.Keys.Key_NUMPAD5, false, function () {
    if (global.checkIsAnyActivity()) return;
    if (!greenscreenMenuOpened)
        return;
    Init();
});

function Init() {
    if (!greenscreenMenuOpened)
        return;
    mp.game.graphics.setFarShadowsSuppressed(true);
    var pos = mp.players.local.position;
    var rot = mp.players.local.getRotation(0);
    _scale = mp.game.graphics.requestScaleformMovie('cellphone_ifruit');
    offsetList.forEach(offset => {
        x = CreateModel('xm_prop_orbital_cannon_table', global.GetOffsetPosition(pos, rot.z, offset.pos), new mp.Vector3(rot.x + offset.rotX, rot.y, rot.z));
        id = CreateRenderTarget('orbital_table', 'xm_prop_orbital_cannon_table');
        if (id != -1)
            _targetToRender = id;
        objects.push(x);
    });
}

let offsetList = [

    { pos: new mp.Vector3(0, 0, 0), rotX: 0 },
    { pos: new mp.Vector3(2, 0, 0), rotX: 0 },
    { pos: new mp.Vector3(4, 0, 0), rotX: 0 },
    { pos: new mp.Vector3(6, 0, 0), rotX: 0 },
    { pos: new mp.Vector3(-2, 0, 0), rotX: 0 },
    { pos: new mp.Vector3(-4, 0, 0), rotX: 0 },
    { pos: new mp.Vector3(-6, 0, 0), rotX: 0 },
    { pos: new mp.Vector3(0, -2, 0), rotX: 0 },
    { pos: new mp.Vector3(2, -2, 0), rotX: 0 },
    { pos: new mp.Vector3(4, -2, 0), rotX: 0 },
    { pos: new mp.Vector3(6, -2, 0), rotX: 0 },
    { pos: new mp.Vector3(-2, -2, 0), rotX: 0 },
    { pos: new mp.Vector3(-4, -2, 0), rotX: 0 },
    { pos: new mp.Vector3(-6, -2, 0), rotX: 0 },
    { pos: new mp.Vector3(0, -4, 0), rotX: 0 },
    { pos: new mp.Vector3(2, -4, 0), rotX: 0 },
    { pos: new mp.Vector3(4, -4, 0), rotX: 0 },
    { pos: new mp.Vector3(6, -4, 0), rotX: 0 },
    { pos: new mp.Vector3(-2, -4, 0), rotX: 0 },
    { pos: new mp.Vector3(-4, -4, 0), rotX: 0 },
    { pos: new mp.Vector3(-6, -4, 0), rotX: 0 },
    { pos: new mp.Vector3(0, -6, 0), rotX: 0 },
    { pos: new mp.Vector3(2, -6, 0), rotX: 0 },
    { pos: new mp.Vector3(4, -6, 0), rotX: 0 },
    { pos: new mp.Vector3(6, -6, 0), rotX: 0 },
    { pos: new mp.Vector3(-2, -6, 0), rotX: 0 },
    { pos: new mp.Vector3(-4, -6, 0), rotX: 0 },
    { pos: new mp.Vector3(-6, -6, 0), rotX: 0 },
    { pos: new mp.Vector3(0, -8, 0), rotX: 0 },
    { pos: new mp.Vector3(2, -8, 0), rotX: 0 },
    { pos: new mp.Vector3(4, -8, 0), rotX: 0 },
    { pos: new mp.Vector3(6, -8, 0), rotX: 0 },
    { pos: new mp.Vector3(-2, -8, 0), rotX: 0 },
    { pos: new mp.Vector3(-4, -8, 0), rotX: 0 },
    { pos: new mp.Vector3(-6, -8, 0), rotX: 0 },
    { pos: new mp.Vector3(0, -10, 0), rotX: 0 },
    { pos: new mp.Vector3(2, -10, 0), rotX: 0 },
    { pos: new mp.Vector3(4, -10, 0), rotX: 0 },
    { pos: new mp.Vector3(6, -10, 0), rotX: 0 },
    { pos: new mp.Vector3(-2, -10, 0), rotX: 0 },
    { pos: new mp.Vector3(-4, -10, 0), rotX: 0 },
    { pos: new mp.Vector3(-6, -10, 0), rotX: 0 },
    { pos: new mp.Vector3(0, 0, 1), rotX: 90 },
    { pos: new mp.Vector3(2, 0, 1), rotX: 90 },
    { pos: new mp.Vector3(4, 0, 1), rotX: 90 },
    { pos: new mp.Vector3(6, 0, 1), rotX: 90 },
    { pos: new mp.Vector3(-2, 0, 1), rotX: 90 },
    { pos: new mp.Vector3(-4, 0, 1), rotX: 90 },
    { pos: new mp.Vector3(-6, 0, 1), rotX: 90 },
    { pos: new mp.Vector3(0, 0, 3), rotX: 90 },
    { pos: new mp.Vector3(2, 0, 3), rotX: 90 },
    { pos: new mp.Vector3(4, 0, 3), rotX: 90 },
    { pos: new mp.Vector3(6, 0, 3), rotX: 90 },
    { pos: new mp.Vector3(-2, 0, 3), rotX: 90 },
    { pos: new mp.Vector3(-4, 0, 3), rotX: 90 },
    { pos: new mp.Vector3(-6, 0, 3), rotX: 90 },
]

function CreateModel(model, pos, rot) {
    if (!mp.game.streaming.hasModelLoaded(mp.game.joaat(model)))
        mp.game.streaming.requestModel(mp.game.joaat(model));
    
    let obj = mp.objects.new(mp.game.joaat(model), pos, {
        rotation: rot,
        alpha: 255,
        dimension: mp.players.local.dimension
    });
    for (let index = 0; !obj.doesExist() && index < 250; index++) {
        mp.game.wait(0);
    }
    return obj;
}

function CreateRenderTarget(name, model) {
    if (!mp.game.ui.isNamedRendertargetRegistered(name))
        mp.game.ui.registerNamedRendertarget(name, false);
    if (!mp.game.ui.isNamedRendertargetLinked(mp.game.joaat(model)))
        mp.game.ui.linkNamedRendertarget(mp.game.joaat(model));
    if (mp.game.ui.isNamedRendertargetRegistered(name))
        return mp.game.ui.getNamedRendertargetRenderId(name);
    return -1;
}

function RenderThings(id) {
    mp.game.ui.setTextRenderId(id);
    mp.game.graphics.set2dLayer(100);
    //mp.game.graphics.drawRect(0, 0, 10, 10, 0, 255, 0, 255);
    mp.game.graphics.drawSprite('mpinventory', 'in_world_circle', 0.5, 0.5, 1, 1, 0, 0, 255, 0, 255);
    //Graphics.DrawScaleformMovie(_scale, 0.5F, 0.5F, 10, 10, 255, 100, 100, 255, 0);
    mp.game.ui.setTextRenderId(1);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(137);
__webpack_require__(138);

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let cursorWasOpened = false;
let currentDialogCallback;

mp.events.add({
    "dialog:open": (header, buttons, callback) => {
        currentDialogCallback = callback;
        
        const dto = {
            Header: header,
            Buttons: buttons
        }
        
        global.gui.setData('dialogMenu/setBody', JSON.stringify(dto));
        global.gui.setData('dialogMenu/setShow', true);
        
        cursorWasOpened = mp.gui.cursor.visible;
        global.showCursor(true);
    },

    "dialog:close": () => {
        if (!cursorWasOpened) {
            global.showCursor(false)
        }

        global.gui.setData('dialogMenu/setShow', false);
    },

    // GUI EVENTS
    "dialog::buttonClick": (buttonIndex) => {
        currentDialogCallback(buttonIndex);
        mp.events.call('dialog:close');
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 138 */
/***/ (function(module, exports) {

const dialogCallback = (buttonIndex) => {
    mp.events.callRemote('dialog:buttonClick', buttonIndex);
};

mp.events.add({
    "dialogServer:open": (header, buttons) => {
        buttons = JSON.parse(buttons);
        mp.events.call('dialog:open', header, buttons, dialogCallback);
    }
});

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let isAnimationsMenuOpened = false;
let isAnimPlayed = false;
mp.events.add('gui:ready', loadAnimationsSettings);

let lastMessage = 0;
mp.events.add({
    "animations:setPlay": (isPlayed) => {
        if (isPlayed) {
            global.gui.setData('hud/setPromptData', JSON.stringify({ show: true, items: [{ key: '🠐', text: 'Animations_hint' }] }));
        }
        else {
            global.gui.setData('hud/setPromptData', JSON.stringify({ show: false, items: [] }));
        }

        isAnimPlayed = isPlayed;
    },
    
    // CEF events
    "animations::close": () => {
        isAnimationsMenuOpened = false;
        global.gui.close();
    },

    "animations::setQuickAccess": (quickKey, animKey) => {
        mp.storage.data.animations.quickAccess[quickKey] = animKey;
        //mp.storage.flush();
    },

    "animations::setFavourite": (animKey, isFav) => {
        if (isFav)
            mp.storage.data.animations.favorites[animKey] = true;
        else
            delete mp.storage.data.animations.favorites[animKey];

        // mp.storage.flush();
    },

    "animations::play": (animationKey) => {
        if(global.inAction ||  global.isPhoneOpened) return;
        mp.events.callRemote('animations:play', animationKey);
    }
});

mp.keys.bind(global.Keys.Key_BACK, false, function() {
    if (!global.loggedin || global.chatActive || global.editing || global.gui.isOpened()) return;

    if (isAnimPlayed) {
       mp.events.callRemote('animations:stop');
    } 
});

mp.keys.bind(global.Keys.Key_U, false, function() {
    if (isAnimationsMenuOpened) return;

    if (global.checkIsAnyActivity()) return;

    if (global.localplayer.isInAnyVehicle(true)) return;

    isAnimationsMenuOpened = global.gui.openPage('AnimationsMenu');
    
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function() {
    if (!isAnimationsMenuOpened) return;
    
    mp.events.call('animations::close');
});

function loadAnimationsSettings() {
    //#region Storage init
    if (!mp.storage.data.animations) {
        mp.storage.data.animations = {
            quickAccess: {},
            favorites: {}
        }

        //mp.storage.flush();
    }
    //#endregion Storage init
    
    global.gui.setData('animationsMenu/init',
        JSON.stringify({
            quickAccess: mp.storage.data.animations.quickAccess,
            favorites: mp.storage.data.animations.favorites
        }));
}

mp.keys.bind(global.Keys.Key_Q, false, () => playAnimFromQuickAccess('Q'));
mp.keys.bind(global.Keys.Key_W, false, () => playAnimFromQuickAccess('W'));
mp.keys.bind(global.Keys.Key_E, false, () => playAnimFromQuickAccess('E'));
mp.keys.bind(global.Keys.Key_R, false, () => playAnimFromQuickAccess('R'));
mp.keys.bind(global.Keys.Key_T, false, () => playAnimFromQuickAccess('T'));
mp.keys.bind(global.Keys.Key_Y, false, () => playAnimFromQuickAccess('Y'));
mp.keys.bind(global.Keys.Key_U, false, () => playAnimFromQuickAccess('U'));
mp.keys.bind(global.Keys.Key_I, false, () => playAnimFromQuickAccess('I'));

function playAnimFromQuickAccess(button) {
    if (global.inAction || !isAnimationsMenuOpened) return;
    
    const animationKey = mp.storage.data.animations.quickAccess[button];
    if (animationKey) {
        mp.events.call('animations::play', animationKey);
    }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {__webpack_require__(141)
const WeaponModel = __webpack_require__(142);
const WeaponData = __webpack_require__(7);
const weaponSlots = ["attach:weapon:1", "attach:weapon:2", "attach:weapon:3", "attach:weapon:4"/*, "weapon:current"*/];


function attachTo(player, slot, weapon){
    if(player.attachedWeapons.hasOwnProperty(slot)){
        player.attachedWeapons[slot].destroy();
        delete player.attachedWeapons[slot];
    }
    player.attachedWeapons[slot] = new WeaponModel(player, slot, weapon);
    mp.game.wait(0);
    player.attachedWeapons[slot].attach();
}

function detachSlot(player, slot){
    if(!player.attachedWeapons.hasOwnProperty(slot)) return;
    player.attachedWeapons[slot].destroy();
    delete player.attachedWeapons[slot];
}

function checkSlotExists(player){
    if(!player.hasOwnProperty("attachedWeapons")){
        player.attachedWeapons = {};
    } 
    if(!player.hasOwnProperty("this.player.weaponComponents")){
        player.weaponComponents = {};
    }
}

function getCurrentWeaponModel(){
    return mp.players.local.attachedWeapons["weapon:current"];    
}

mp.events.add('weapon:hideCurrentWeapon', hideCurrentWeapon);
mp.events.add('weapon:showCurrentWeapon', showCurrentWeapon);
mp.events.add('weapon:detachAll', () => detachAll(global.localplayer));
mp.events.add('weapon:updateAttach', () => updateAllAttach(global.localplayer));

function hideCurrentWeapon(player){
    if (player.type !== 'player' || !player.handle) return;
    detachSlot(player, "weapon:current")
}

function showCurrentWeapon(player){
    if (player.type !== 'player' || !player.handle) return;
    const data = player.getVariable("weapon:current");
    if(data)
        attachTo(player, "weapon:current", data);
}

function detachAll(player){
    weaponSlots.forEach(slot => {
        detachSlot(player, slot);
    });
}

function updateAllAttach(player){
    detachAll(player);
    weaponSlots.forEach(slot => {
        let data = player.getVariable(slot);
        if(data && data.length > 0){
            attachTo(player, slot, data);
        }
    });
}


function SetDamageModifier(){
    mp.game.player.setWeaponDefenseModifier(1.01);
    mp.game.player.setVehicleDefenseModifier(0.01);
}

weaponSlots.forEach(slot => {
    mp.events.addDataHandler(slot, (player, value)=>{
        try {
            if (player.type !== 'player' || !player.handle) return;
            checkSlotExists(player);
            if(value)
                attachTo(player, slot, value);
            else
                detachSlot(player, slot);
        } catch (e) {
            if(global.sendException) mp.serverLog(`weapon.addDataHandler.${slot}: ${e.name}\n${e.message}\n${e.stack}`);
        }
    });
});

mp.events.add("entityStreamIn", (player)=>{
    try {        
        if (!player || player.type !== 'player') return;
        checkSlotExists(player);
        updateAllAttach(player);
    } catch (e) {
        if(global.sendException) mp.serverLog(`weapon.entityStreamIn: ${e.name}\n${e.message}\n${e.stack}`);        
    }
})

mp.events.add("entityStreamOut", (player)=>{
    try {       
        if (!player || player.type !== 'player') return;
        checkSlotExists(player);
        detachAll(player);
    } catch (e) {
        if(global.sendException) mp.serverLog(`weapon.entityStreamOut: ${e.name}\n${e.message}\n${e.stack}`);        
    }
})

mp.events.add("playerDeath", function(player, reason, killer) {
    try {        
        if (player.type !== 'player' || player.handle == 0) return;
        checkSlotExists(player);
        detachAll(player);
    } catch (e) {
        if(global.sendException) mp.serverLog(`weapon.playerDeath: ${e.name}\n${e.message}\n${e.stack}`);           
    }
});

mp.events.add("playerSpawn", (player)=>{
    try {        
        if (player.type !== 'player' || player.handle == 0) return;
        checkSlotExists(player);
        updateAllAttach(player);
        if(player === mp.players.local) {
            mp.game.wait(0);
            SetDamageModifier();
        }
    } catch (e) {
        if(global.sendException) mp.serverLog(`weapon.playerSpawn: ${e.name}\n${e.message}\n${e.stack}`);          
    }
});

mp.events.add("playerQuit", (player, exitType, reason) => {
    try {
        if (player.type !== 'player') return;
        checkSlotExists(player);
        detachAll(player);
    } catch (e) {
        if(global.sendException) mp.serverLog(`weapon.playerQuit: ${e.name}\n${e.message}\n${e.stack}`);          
    }
});

mp.events.add('common:setWeaponsDefenseModifier', () => {
    SetDamageModifier();
});



mp.events.add('render', () => {
    mp.game.controls.disableControlAction(2, 45, true); // reload control
    mp.game.controls.disableControlAction(1, 243, true); // CCPanelDisable

    mp.game.controls.disableControlAction(2, 12, true);
    mp.game.controls.disableControlAction(2, 13, true);
    mp.game.controls.disableControlAction(2, 14, true);
    mp.game.controls.disableControlAction(2, 15, true);
    mp.game.controls.disableControlAction(2, 16, true);
    mp.game.controls.disableControlAction(2, 17, true);

    mp.game.controls.disableControlAction(2, 36, true);
    mp.game.controls.disableControlAction(2, 37, true);
    mp.game.controls.disableControlAction(2, 99, true);
    mp.game.controls.disableControlAction(2, 100, true);

    mp.game.controls.disableControlAction(2, 157, true);
    mp.game.controls.disableControlAction(2, 158, true);
    mp.game.controls.disableControlAction(2, 159, true);
    mp.game.controls.disableControlAction(2, 160, true);
    mp.game.controls.disableControlAction(2, 161, true);
    mp.game.controls.disableControlAction(2, 162, true);
    mp.game.controls.disableControlAction(2, 163, true);
    mp.game.controls.disableControlAction(2, 164, true);
    mp.game.controls.disableControlAction(2, 165, true);

    mp.game.controls.disableControlAction(2, 261, true);
    mp.game.controls.disableControlAction(2, 262, true);

    //global.debugText = `1: ${mp.players.local.isDucking()}`;

    if (mp.players.local.currentWeaponData) { // heavy attack controls
        mp.game.controls.disableControlAction(2, 140, true);
        mp.game.controls.disableControlAction(2, 141, true);
        mp.game.controls.disableControlAction(2, 142, true);
        mp.game.controls.disableControlAction(2, 143, true);
        mp.game.controls.disableControlAction(2, 263, true);
        mp.game.controls.disableControlAction(2, 264, true);
    }
    if(global.inAction || global.isPhoneOpened || mp.keys.isDown(global.Keys.Key_R)){
        mp.game.controls.disableControlAction(0, 24, true);
        mp.game.controls.disableControlAction(0, 69, true);
        mp.game.controls.disableControlAction(0, 257, true);
    }
});



global.getCurrentPlayerWeapon = () => {
    return mp.game.invoke(global.NATIVES.GET_SELECTED_PED_WEAPON, mp.players.local.handle) >>> 0;
};

checkSlotExists(mp.players.local);
SetDamageModifier();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const waeaponConfigs = __webpack_require__(5);
const WeaponData = __webpack_require__(7);

let waitWeapon = Date.now();
let spamProtection = 0;
let spamProtectionTime = 1000;
let dmgCoefs = [1.3, .6, .5]; // 0 - head, 1 - arms/legs, 2-melee
let damageConfig = {};
function isSpam(){
    if(spamProtection > Date.now()) return true;
    spamProtection = Date.now() + spamProtectionTime;
}

function updateAmmoInHud(){
    global.gui.setData('hud/updateData', JSON.stringify({name: 'ammo', value: mp.players.local.currentWeaponData ? mp.players.local.currentWeaponData.ammo : 0}));
}

async function CurrentWeaponDataHandler(player, newValue, oldValue){
    if (!player || player.type !== 'player') return;
    if(newValue){
        const data = new WeaponData(newValue);
        waitWeapon = Date.now() + 2000;
        while (player.weapon !== data.weaponHash &&  waitWeapon > Date.now()) {
            await mp.game.waitAsync(0);
        }
        updateWeaponComponents(player, data);
    }else{
        removeAllWeaponComponents(player);
    }

    if(player === mp.players.local){
        if(mp.players.local.currentWeaponData){
            while (mp.players.local.currentWeaponData && mp.players.local.getAmmoInClip(mp.players.local.currentWeaponData.weaponHash) !== mp.players.local.currentWeaponData.ammo &&  waitWeapon > Date.now()) {
                mp.players.local.setAmmoInClip(mp.players.local.currentWeaponData.weaponHash, mp.players.local.currentWeaponData.ammo);
                await mp.game.waitAsync(0);
            }
        }
        updateAmmoInHud();
    }
}

function updateWeaponComponents(player, newData) {
    if(!player.currentWeaponData){
        setWeaponComponents(player, newData);
    }else{
        if(newData.weaponHash !== player.currentWeaponData.weaponHash){ 
            removeAllWeaponComponents(player);
            setWeaponComponents(player, newData);
        }else{
            for (let index = 0; index < player.currentWeaponData.components.length; index++) {
                const newComponent = newData.components[index];
                const oldComponent = player.currentWeaponData.components[index];
                if(newComponent === oldComponent) continue;
                if(oldComponent !== 0)
                    mp.game.invoke(global.NATIVES.REMOVE_WEAPON_COMPONENT_FROM_PED, player.handle, player.currentWeaponData.weaponHash >> 0, oldComponent >> 0)
    
                if(newComponent !== 0)
                    mp.game.invoke(global.NATIVES.GIVE_WEAPON_COMPONENT_TO_PED, player.handle, newData.weaponHash >> 0, newComponent >> 0);
            }
            player.currentWeaponData = newData;            
        }        
    }
}

function setWeaponComponents(player, data) {
    if(data !== undefined){
        player.currentWeaponData = data;
    }
    if(player.currentWeaponData){
        player.currentWeaponData.components.forEach(component=>{
            if(component !== 0)
                mp.game.invoke(global.NATIVES.GIVE_WEAPON_COMPONENT_TO_PED, player.handle, player.currentWeaponData.weaponHash >> 0, component >> 0);
        });  
    }          
}

function removeAllWeaponComponents(player) {
    if(!player.currentWeaponData) return;
    player.currentWeaponData.components.forEach(component => {
        if(component !== 0)
            mp.game.invoke(global.NATIVES.REMOVE_WEAPON_COMPONENT_FROM_PED, player.handle, player.currentWeaponData.weaponHash >> 0, component >> 0);
    });
    if(player === mp.players.local)
        mp.players.local.setAmmoInClip(mp.players.local.currentWeaponData.weaponHash, 0);
    player.currentWeaponData = undefined;
}

async function reloadWeapon(ammo, mammo) {
    if(!mp.players.local.currentWeaponData) return;
    mp.players.local.currentWeaponData.ammo = +ammo;
    updateAmmoInHud();
    mp.players.local.setAmmoInClip(mp.players.local.currentWeaponData.weaponHash, 0);
    mp.game.invoke(global.NATIVES.SET_CURRENT_PED_WEAPON, mp.players.local.handle, mp.game.joaat('weapon_unarmed') >> 0, true);
    await mp.game.waitAsync(0);
    mp.game.invoke(global.NATIVES.SET_PED_AMMO, mp.players.local.handle, mp.players.local.currentWeaponData.weaponHash >> 0, mp.players.local.currentWeaponData.ammo, false);
    await mp.game.waitAsync(0);
    mp.game.invoke(global.NATIVES.SET_CURRENT_PED_WEAPON, mp.players.local.handle, mp.players.local.currentWeaponData.weaponHash >> 0, true);
    global.gui.setData('hud/updateData', JSON.stringify({name: 'mammo', value: mammo }));
    //global.inAction = false;
}

async function setmammo(mammo) {
    global.gui.setData('hud/updateData', JSON.stringify({name: 'mammo', value: mammo }));
}


async function cancelSwapWeapon(){
    if(mp.players.local.weapon !== mp.players.local.currentWeaponData.weaponHash)
        mp.players.local.giveWeapon(mp.players.local.currentWeaponData.weaponHash, 0, true);
    mp.players.local.taskSwapWeapon(false);
    setTimeout(requestReloadWeapon, 500);
}

async function onWeaponShot(targetPosition, targetEntity){
    if (global.IsPlayingDM) return;
    if (mp.players.local.currentWeaponData) {
        mp.players.local.currentWeaponData.ammo--;
        updateAmmoInHud();
        const ammo =  mp.game.invoke(global.NATIVES.GET_AMMO_IN_PED_WEAPON, mp.players.local.handle, mp.players.local.currentWeaponData.weaponHash >> 0);
        //.logInfo(`check ${mp.players.local.weapon}: ${ammo} / ${mp.players.local.currentWeaponData.ammo} `)
        if(ammo === 0){
            if(mp.players.local.currentWeaponData.ammo > 0)
                mp.players.local.currentWeaponData.ammo = 0;
            await cancelSwapWeapon();
        }else if(mp.players.local.currentWeaponData.ammo < 1){
            mp.players.local.setAmmoInClip(mp.players.local.currentWeaponData.weaponHash, 0);
            await cancelSwapWeapon();
        }else{
            if(ammo !== mp.players.local.currentWeaponData.ammo)               
                mp.players.local.setAmmoInClip(mp.players.local.currentWeaponData.weaponHash, mp.players.local.currentWeaponData.ammo);
        }         
    }
}

function requestReloadWeapon(){
    if(isSpam()) return;
    if(!global.loggedin || 
        mp.players.local.getVariable('InDeath') == true ||
        global.inAction ||
        global.isPhoneOpened ||
        global.chatActive || 
        global.gui.isOpened() || 
        mp.gui.cursor.visible || 
        global.IsPlayingDM == true ||
        !mp.players.local.currentWeaponData || 
        mp.players.local.currentWeaponData.weaponHash !== mp.players.local.weapon
    ) return;
    if(global.playerInventory.items.find(i=>i.id == mp.players.local.currentWeaponData.ammoType) === -1) return;
    //global.inAction = true;
    mp.events.callRemote("weapon:reload", mp.players.local.currentWeaponData.ammo || 0);
}

async function entityStreamIn(player){  
    if (!player || player.type !== 'player') return;
    if (player.currentWeaponData){
        waitWeapon = Date.now() + 2000;
        while (player.currentWeaponData && player.weapon !== player.currentWeaponData.weaponHash &&  waitWeapon > Date.now()) {
            await mp.game.waitAsync(10);
        }
        setWeaponComponents(player);
    }
}

function onOutgoingDamage(sourceEntity, targetEntity, sourcePlayer, weapon, boneIndex, damage)
{
	if (sourceEntity === global.localplayer && (global.cuffed || global.isDemorgan)) return true;
	
	if (sourceEntity === global.localplayer && targetEntity && targetEntity.type === "player")
	{
		if (global.IsPlayingDM || mp.players.local.weapon === 2725352035) return false;
		if(!mp.players.local.currentWeaponData || mp.players.local.currentWeaponData.weaponHash !== mp.players.local.weapon)
		{
			if(global.getVariable(mp.players.local, 'ALVL', 0) > 0) return;
			mp.events.callRemote("weapon:cheat", `${mp.players.local.currentWeaponData ? mp.players.local.currentWeaponData.weaponHash : 0}`, `${mp.players.local.weapon}`);
			return true;
		}
		else return false;
	}
	else if (sourceEntity !== global.localplayer && sourceEntity && sourceEntity.type === "ped") 
	{
		if (targetEntity) 
		{
			if (targetEntity.type === "player")
			{
				mp.events.callRemoteUnreliable("server::pet:dmgPetToPlayer", targetEntity, sourceEntity);
				return true;
			}
			else if (targetEntity.type === "ped" && targetEntity.isPet)
			{
				mp.events.callRemoteUnreliable("server::pet:dmgPetToPet", targetEntity, sourceEntity);
				return true;
			}
		}
    }
    else if (sourceEntity === global.localplayer && targetEntity && targetEntity.type === "ped" && targetEntity.isPet) 
	{
		if (global.IsMyPet(targetEntity.handle)) return true;
		
        mp.events.callRemoteUnreliable("server::pet:dmgPlayerToPet", targetEntity);
        return true;
    }
}
function onIncomingDamage(sourceEntity, sourcePlayer, targetEntity, weapon, boneIndex, damage)
{
	//console.logInfo(`inDamage ${weapon}:${damage}(${sourceEntity.type}/${targetEntity.type}/${sourcePlayer.type}/${boneIndex})`);
			
    if (global.pidrgm === true) return true;
    if (sourceEntity.type === "vehicle") return false;
	if (targetEntity === mp.players.local)
	{
        if (global.inGreenZone)
        {
            if (sourceEntity.weapon === 911657153) return false;
            return true;
        }
		
		if (mp.players.exists(sourcePlayer)) mp.events.call('client::pet:attackPlayer', sourcePlayer.remoteId, false);
		
        let coef = 1;
		if(sourceEntity.currentWeaponData || global.IsPlayingDM)
		{
            switch (boneIndex) {
                case 20:
                    coef = dmgCoefs[1];
                    break;
                case 2:
                case 6:
                case 12:
                case 14:
                case 16:
                case 18:
                    coef = dmgCoefs[2];
                    break;
                default:
                    break;
            }
            damage = parseInt((damageConfig[weapon] || 10) * coef);
            if(mp.players.local.getArmour() + mp.players.local.getHealth() <= damage) return false;
            else mp.players.local.applyDamageTo(damage, true);
        } 
		else if(sourceEntity.weapon === 2725352035)
		{
            coef = dmgCoefs[3];
            damage = parseInt((damage || 10) * coef);
            if(mp.players.local.getArmour() + mp.players.local.getHealth() <= damage) return false;
            else mp.players.local.applyDamageTo(damage, true);
        };
    }
    if(global.sendException)
        console.logInfo(`damage: ${damage}`);
    return true;
}


function updateDamageConfig(config) {
    damageConfig = config;   
    global.gui.setData("weaponsSetting/updateWeaponConfig", JSON.stringify(damageConfig))
    //console.logInfo(`${JSON.stringify(damageConfig)}`);
}

function updateDamageCoef(coef) {
    dmgCoefs = coef;
    global.gui.setData("weaponsSetting/updateWeaponCoefs", JSON.stringify(dmgCoefs))
    //console.logInfo(`${JSON.stringify(dmgCoefs)}`);
}

let menuOpened = false;

function openDamageSettingsMenu() {    
    if(global.gui.isOpened()) return;
    menuOpened = global.gui.openPage("WeaponsSetting");
}

function closeMenu() {
    if (menuOpened) {
        mp.game.ui.setPauseMenuActive(false);
        global.gui.close();
        menuOpened = false;
    }
}


mp.events.addDataHandler("weapon:current", CurrentWeaponDataHandler);

mp.events.add("weapon:reload", reloadWeapon);
mp.events.add("weapon:setmammo", setmammo);
mp.events.add("playerWeaponShot", onWeaponShot);
mp.events.add("entityStreamIn", entityStreamIn);
mp._events.add('outgoingDamage', onOutgoingDamage);
mp._events.add('incomingDamage', onIncomingDamage);
mp.events.add('weapon:damage:config:update', updateDamageConfig);
mp.events.add('weapon:damage:coef:update', updateDamageCoef);
mp.events.add('weapon:settings:open', openDamageSettingsMenu);

mp.keys.bind(global.Keys.Key_R, false, requestReloadWeapon);
mp.keys.bind(global.Keys.Key_ESCAPE, false, closeMenu);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const waeaponConfigs = __webpack_require__(5); 
const attachInfos = __webpack_require__(143);



module.exports = class WeaponModel{
    constructor(player, slot, weaponData, position = undefined, heading = undefined){
        /*
            weaponData имеет 9 элементов
            0: id оружия
            1-7: инвексы установленых компонентов для каждого из слотов
            8: количество патронов 
        */
        this.id = weaponData[0];
        this.config = waeaponConfigs[this.id];
        if(!this.config) {
            mp.serverLog(`WeaponModel no config for weapon ${this.id}`);
            return;
        }   
        this.weaponHash = this.config.Hash;
        this.ammoType = this.config.AmmoType;
        this.lastReport = 0;
        this.player = player;   
        this.weaponData = weaponData;
        this.position = position;
        this.slot = slot;
        this.rotateX = 0;
        this.rotateY = 0;
        this.ammo = this.weaponData[7] || 0;
        this.rotateZ = heading;
        this.createModel();        
    }

    createModel(){
        const skin = this.weaponData[6] < 0 ? undefined : this.config.Components[6][this.weaponData[6]];            
        if(!mp.game.weapon.hasWeaponAssetLoaded(this.weaponHash)){
            mp.game.weapon.requestWeaponAsset(this.weaponHash, 31, 0);
            for (let index = 0; !mp.game.weapon.hasWeaponAssetLoaded(this.weaponHash) && index < 250 ; index++) {
                mp.game.wait(0);
            }                    
        }
    
        const pos = this.position === undefined ? new mp.Vector3(this.player.position.x, this.player.position.y, this.player.position.z): this.position;
        this.weapon = mp.game.weapon.createWeaponObject(this.weaponHash, 0 , pos.x, pos.y, pos.z, true, 0, skin == undefined ? 0 : this.getSkin(skin));
        if(this.rotateZ !== undefined) this.updateRotation();
        for (let index = 0; this.weapon === 0 && index < 250 ; index++) {
            mp.game.wait(0);
        }
        if(this.weapon == 0) return false;
        for (let index = 1; index < 6; index++) {
            this.setComponent(index, this.weaponData[index]);
        }
        return true;
    }

    attach(){
        const attachInfo = attachInfos[this.slot];
        global.customWeaponsModels.push(this.weapon);
        if(attachInfo == undefined) return;
        mp.game.invoke(global.NATIVES.ATTACH_ENTITY_TO_ENTITY, this.weapon, this.player.handle, +attachInfo.bone, 
            +attachInfo.offset.x, +attachInfo.offset.y, +attachInfo.offset.z, 
            +attachInfo.rotate.x,  +attachInfo.rotate.y,  +attachInfo.rotate.z,
             true, false, false, false, 0, true
        );
    }

    destroy(){       
        mp.game.object.deleteObject(this.weapon);
        const index = global.customWeaponsModels.findIndex(w=>w == this.weapon);
        if(index !== -1){
            global.customWeaponsModels.splice(index, 1);
        }
    }

    requestComponent(hash){
        const model = mp.game.weapon.getWeaponComponentTypeModel(+hash);
        if(model === 0 || !mp.game.streaming.isModelValid(model)) return;
        if(!mp.game.streaming.hasModelLoaded(model)){
            mp.game.streaming.requestModel2(model); 
            for (let index = 0; !mp.game.streaming.hasModelLoaded(model) && index < 250; index++) {
                mp.game.wait(0);
            }
        }
    }

    getSkin(skin){
        const model = mp.game.weapon.getWeaponComponentTypeModel(+skin);
        if(model === 0 || !mp.game.streaming.isModelValid(model)) return 0;
        if(!mp.game.streaming.hasModelLoaded(model)){
            mp.game.streaming.requestModel2(model); 
            for (let index = 0; !mp.game.streaming.hasModelLoaded(model) && index < 250; index++) {
                mp.game.wait(0);
            }
        }      
        return model;
    }
   
   
    updateRotation(){
        mp.game.invoke(global.NATIVES.SET_ENTITY_ROTATION, this.weapon, +this.rotateX + .01, +this.rotateY + .01, +this.rotateZ + .01, 1, true)
    }

    removeComponent(slot){
        if(
            slot < 1 || 
            this.weaponData[slot] == undefined ||
            this.config.Components[slot] == undefined ||
            this.config.Components[slot][this.weaponData[slot]] == undefined
        ) return;
        if(slot == 6){
            mp.game.object.deleteObject(this.weapon);
            this.weaponData[slot] = -1;
            this.createModel();
        }else{
            const element = this.config.Components[slot][this.weaponData[slot]];
            mp.game.weapon.removeWeaponComponentFromWeaponObject(this.weapon, +element);
            this.weaponData[slot] = -1;
        }
    }

    setComponent(type, index){
        if(
            type < 1 || 
            this.weaponData[type] == undefined ||
            this.config.Components[type] == undefined ||
            this.config.Components[type][index] == undefined
        ) return;
        this.weaponData[type] = index;
        if(type == 6){
            mp.game.object.deleteObject(this.weapon);
            this.createModel();
        }else{
            const element = this.config.Components[type][index];
            this.requestComponent(element)
            mp.game.weapon.giveWeaponComponentToWeaponObject(this.weapon, +element);
        }
    }
}
//3l6NZhpImg1jdk5h
//lglxUS7L1Rm741s1
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 143 */
/***/ (function(module, exports) {

module.exports = {
    "attach:weapon:1":{
        bone: 37,
        offset:{
            x: .12,
            y: -.15,
            z: .15
        },
        rotate:{
            x: 180.01,
            y: 0,
            z: 0
        }
    }, 
    "attach:weapon:2":{       
        bone: 38,
        offset:{
            x: 0,
            y: -.15,
            z: -.15
        },
        rotate:{
            x: 0,
            y: 0,
            z: 0
        }
    }, 
    "attach:weapon:3":{
        bone: 2,
        offset:{
            x: .165,
            y: 0,
            z: -.125
        },
        rotate:{
            x: -80.01,
            y: 0,
            z: 0
        }
    }, 
    "attach:weapon:4":{
        bone: 14,
        offset:{
            x: .165,
            y: .025,
            z: .125
        },
        rotate:{
            x: -110.01,
            y: 5.01,
            z: 0
        }
    },
    "weapon:shop":{
        bone: -1,
        offset:{
            x: 0,
            y: 0,
            z: 0
        },
        rotate:{
            x: 0,
            y: 0,
            z: 0
        }
    }
}

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
let lastCheck = Date.now();
const floodTime = 1000;

mp.events.add("cef:access:requestData", () => {
    if(mp.storage.data.fastAccessButtons == undefined){
        mp.storage.data.fastAccessButtons = {"1": null, "2": null, "3": null, "4": null, "5": null, "6": null, "7": null, "8": null, "9": null, "10": null};
    }
    global.gui.setData('inventory/setFastAccessData', JSON.stringify(mp.storage.data.fastAccessButtons));

    if(mp.storage.data.fastAccessWeaponButtons == undefined){
        mp.storage.data.fastAccessWeaponButtons = {"1": {type: "eq", id: 1}, "2": {type: "eq", id: 2}, "3": {type: "eq", id: 3}, "4": {type: "eq", id: 4}};
    }
    global.gui.setData('inventory/setFastAccessWeaponData', JSON.stringify(mp.storage.data.fastAccessWeaponButtons));
});

mp.events.add("cef:access:setButton", (key, button) => {
    mp.storage.data.fastAccessButtons[key] = JSON.parse(button);
    mp.storage.flush();
});

mp.events.add("cef:access:setWeaponButton", (key, button) => {
    mp.storage.data.fastAccessWeaponButtons[key] = JSON.parse(button);
    mp.storage.flush();
});

const keys = [global.Keys.Key_1, global.Keys.Key_2, global.Keys.Key_3, global.Keys.Key_4, global.Keys.Key_5, global.Keys.Key_6, global.Keys.Key_7, global.Keys.Key_8, global.Keys.Key_9, global.Keys.Key_0];
const weapkeys = [global.Keys.Key_1, global.Keys.Key_2, global.Keys.Key_3, global.Keys.Key_4];

function canUseFastKey(){
    if (
        !global.loggedin || 
        mp.players.local.getVariable('InDeath') == true ||
        global.fishingMiniGame ||
        global.isPhoneOpened ||
        global.cuffed ||
        //global.cursorShow ||
        global.chatActive || 
        mp.players.local.isInAnyVehicle(true) ||
        lastCheck > Date.now() || 
        global.gui.isOpened() || 
        mp.gui.cursor.visible || 
        global.IsPlayingDM == true ||
		global.buttonsShow
    ) return false;
    return true
}

function useFastKey(key){
    const button = mp.storage.data.fastAccessButtons[key];
    if(button == null) return;
    switch (button.type) {
        case "eq":
            if(global.playerEquip.weapons[button.id]){
                // mp.events.call('notify', 4, 9, "СКИБИДИ ВАПА", 3000);
                // mp.events.call('notify', 4, 9, global.playerEquip.weapons[button.id], 3000);
                //global.setActiveWeapon(button.id || 0);
                let ammo = 0
                if(mp.players.local.currentWeaponData){
                    ammo = mp.players.local.currentWeaponData.ammo || 0;
                }
                lastCheck = Date.now() + floodTime;
                mp.events.callRemote("weapon:activate", button.id || 0, ammo)
            }
            break;
        case "inv":
            // mp.events.call('notify', 4, 9, "СКИБИДИ ВАПА 2", 3000);
            // mp.events.call('notify', 4, 9, JSON.stringify(global.playerEquip.weapons), 3000);
            const index = global.playerInventory.items.findIndex(i=>i.id == button.id);
            if(index === -1) 
                global.gui.setData('inventory/resetFastAccessButton', `'${key}'`);
            else {                
                lastCheck = Date.now() + floodTime;
                mp.events.callRemote("inv:use:fast", button.id)
            }
            break;
            default:
            break;
    }
}

let lastMessage = 0;


weapkeys.forEach((key, index) => {
    mp.keys.bind(key, false, function () {
        if (mp.keys.isUp(global.Keys.Key_ALT)) return;
        if(global.inAction || global.isPhoneOpened) return;
        // mp.events.call('notify', 4, 9, mp.storage.data.fastAccessWeaponButtons, 3000);
        if(canUseFastKey()){
            const button = mp.storage.data.fastAccessWeaponButtons[index+1];
            if(button == null) return;
            let ammo = 0
            if(mp.players.local.currentWeaponData){
                ammo = mp.players.local.currentWeaponData.ammo || 0;
            }
            lastCheck = Date.now() + floodTime;
            mp.events.callRemote("weapon:activate", button.id || 0, ammo)
        }
    });
});

keys.forEach((key, index) => {
    mp.keys.bind(key, false, function() {
        if (!mp.keys.isUp(global.Keys.Key_ALT)) return;
        if(global.inAction || global.isPhoneOpened) return;
        if(canUseFastKey()){
            useFastKey(index + 1);
        }
    });
});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;
let productsName = {
    ['Cuffs']: 'gui_691',
    ['Hatchet']: 'gui_710',
    ['Knife']: 'gui_695',
    ['ArmyLockpick']: 'gui_689',
    ['Pocket']: 'gui_690',
    ['LowRod']: 'gui_716',
    ['MiddleRod']: 'gui_717',
    ['HightRod']: 'gui_718',
    ['LowFishingCage']: 'gui_720',
    ['MiddleFishingCage']: 'gui_721',
    ['HightFishingCage']: 'gui_722',
    ['FishingBait']: 'gui_723',
    ['Dynamite']: 'item_dynamite',
    ['Stetoskop']: 'item_stetoskop',
}




mp.events.add('illegalShop:open', (items) => {
    opened = global.gui.openPage('IllegalShop');
    if(!opened) return;
    let products = JSON.parse(items);
    let productsSell = [];
    Object.keys(products).forEach(key => {
        productsSell.push({
            name: productsName[key],
            cost: products[key],
            product: key,
            count: 1
        });
    });
    global.gui.setData('illegalShop/setProductsSell', JSON.stringify(productsSell));
    
});


mp.events.add('illegalShop:buy', (items) => {
    mp.events.callRemote('illegalShop:buyProduct', items);
});

mp.events.add('illegalShop:close', () => {
    ExitMenu();
});

function ExitMenu() {
    global.gui.close();
    mp.events.callRemote('illegalShop:closeMenu');
    opened = false;
    global.showCursor(false)
}

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        ExitMenu();
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {

const moveSettings = {
    size: {
        x: 70,
        y: 30
    },
    position: {
        left: '90%',
        top: '90%',
    },
    showIcons: [false, false, false, false],
    values: [
        {//LEFT X
            value: 160,
            min: -1800,
            max: 1800,
            step: 5,
            invert: true,
            enabled: true,
            callback: "camMoveAngleX"
        },
        {//LEFT Y
            value: 1,
            min: 0,
            max: 1.6,
            step: .2,
            invert: false,
            enabled: true,
            callback: "camMoveCamZ"
        },
        {//RIGHT X
            value: 2,
            min: 1,
            max: 3,
            step: .1,
            invert: false,
            enabled: false,
            callback: ""
        },
        {//RIGHT Y
            value: 0,
            min: -1,
            max: 1,
            step: .1,
            invert: true,
            enabled: false,
            callback: "camMovePointZ"
        },
        { //WHEELE
            value: 4,
            min: 2,
            max: 6,
            step: .5,
            invert: false,
            enabled: true,
            callback: "camSetDist"
        }
    ]
}


let opened = false;
let spanwPosition = new mp.Vector3(1660, -457.8873, 105.8244);  //+ new Vector3(5060, 110, -345)
//let spanwPosition = new mp.Vector3(-1508.435, -2992.874, -83.2728);  //
let autoModels = [];
let lockSelector = false;

let currIndexVeh = -1;
let countVeh = 0;
let currentAuto = {
    color: { r: 0, g: 0, b: 0 },
    entity: null,
    rotate: 90,
    startTestDrivePos: null,
    canTestDrive: false
}
let specificationMaxValues = {
    speed: 110,
    braking: 3,
    acceleration: 1,
    traction: 4
}
let maxValueSpecifications = 6;

mp.events.add('carshop:open', (vehicles, name) => {
    if (gui.isOpened()) 
	{
        ExitMenu()
        return;
    }
    autoModels = JSON.parse(vehicles);
    countVeh = autoModels.length;
    currIndexVeh = 0;
	global.gui.setData('carDealership/setCarList', vehicles);
	global.gui.setData('carDealership/setDealerType', JSON.stringify({ name }));
    LoadShop();
});

function SetVehicle(index) {
    if (!autoModels[index])
        return;
    if (lockSelector) return;
    lockSelector = true;
    if (!currentAuto.entity) {
        currentAuto.entity = mp.vehicles.new(mp.game.joaat(autoModels[index].model), spanwPosition, {
            heading: 0,
            numberPlate: 'GTAGO',
            alpha: 255,
            color: [
                [0, 0, 0],
                [0, 0, 0]
            ],
            locked: false,
            engine: false,
            dimension: global.localplayer.dimension
        });
        //if(!currentAuto.entity) return;
        for (let index = 0; ((currentAuto.entity.handle !== 0 || !currentAuto.entity.doesExist()) && index < 500); index++) {
            mp.game.wait(0);
        }
    }
    else
    {
        let newModel = mp.game.joaat(autoModels[index].model);
        currentAuto.entity.model = newModel;
        for (let index = 0; (currentAuto.entity.model != newModel && index < 2500); index++) {
            mp.game.wait(0);
        }
    }

    currentAuto.entity.setCustomPrimaryColour(currentAuto.color.r, currentAuto.color.g, currentAuto.color.b);
    currentAuto.entity.setCustomSecondaryColour(currentAuto.color.r, currentAuto.color.g, currentAuto.color.b);
    currentAuto.entity.setDirtLevel(0);
    //currentAuto.entity.setRotation(0, 0, currentAuto.rotate, 2, true);

    global.gui.setData('carDealership/setData', JSON.stringify({ data: autoModels[index], specifications: GetSpecData(currentAuto.entity) }));
    lockSelector = false;
}

function GetSpecData(vehicle) {
    let data = null;
    if (vehicle === undefined || vehicle.type !== 'vehicle' || vehicle.handle == 0) 
	{
        data = 
		{
            speed: 0,
            braking: 0,
            acceleration: 0,
            traction: 0,
        };
    }
    else 
	{
		data = 
		{
            speed: Math.round((mp.game.vehicle.getVehicleModelMaxSpeed(vehicle.model) / specificationMaxValues.speed) * maxValueSpecifications),
            braking: Math.round((mp.game.vehicle.getVehicleModelMaxBraking(vehicle.model) / specificationMaxValues.braking) * maxValueSpecifications),
            acceleration: Math.round((mp.game.vehicle.getVehicleModelAcceleration(vehicle.model) / specificationMaxValues.acceleration) * maxValueSpecifications),
            traction: Math.round((mp.game.vehicle.getVehicleModelMaxTraction(vehicle.model) / specificationMaxValues.traction) * maxValueSpecifications),
        };

        if (data.speed == 0) data.speed = 1;
		else if (data.speed > 5) data.speed = 5;
		
        if (data.braking == 0) data.braking = 1;
		else if (data.braking > 5) data.braking = 5;
		
        if (data.acceleration == 0) data.acceleration = 1;
		else if (data.acceleration > 5) data.acceleration = 5;
		
        if (data.traction == 0) data.traction = 1;
		else if (data.traction > 5) data.traction = 5;
    }
    return data;
}
let objects = [];
function LoadAutoroomProps() {
    // let intID = mp.game.interior.getInteriorAtCoords(-1505.783, -3012.587, -80.000);
    // let propList = [
    //     "Int02_ba_truckmod",
    // ];
    // for (const propName of propList) {
    //     if (!mp.game.interior.isInteriorPropEnabled(intID, propName)) {
    //         mp.game.interior.enableInteriorProp(intID, propName);
    //     }
    // }
    // mp.game.interior.refreshInterior(intID);
    //CreateModel('vw_prop_vw_casino_podium_01a', sum(spanwPosition, new mp.Vector3(0, 0, 0.1)), new mp.Vector3(0, 0, 0));

};


function sum(v1, v2) {
    return new mp.Vector3(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);
}

function CreateModel(model, pos, rot) {
    mp.objects.new(mp.game.joaat(model), pos, {
        rotation: rot,
        alpha: 255,
        dimension: 4294967295
    });
}

LoadAutoroomProps();

mp.events.add('carDealership:setColor', (r, g, b) => {

    if (currentAuto.entity == null) return;
    currentAuto.color = { r: r, g: g, b: b };
    currentAuto.entity.setCustomPrimaryColour(r, g, b);
    currentAuto.entity.setCustomSecondaryColour(r, g, b)
});

mp.events.add('carDealership:prevVehicle', () => {
    if (currentAuto.entity == null) return;
    if (lockSelector) return;
    if (global.lastCheck > Date.now()) return;
    global.lastCheck = Date.now() + 500;

    currIndexVeh--;
    if (currIndexVeh < 0)
        currIndexVeh = countVeh - 1;
    SetVehicle(currIndexVeh);
});

mp.events.add('carDealership:nextVehicle', () => {
    if (currentAuto.entity == null) return;
    if (lockSelector) return;
    if (global.lastCheck > Date.now()) return;
    global.lastCheck = Date.now() + 500;

    currIndexVeh++;
    if (currIndexVeh >= countVeh)
        currIndexVeh = 0;
    SetVehicle(currIndexVeh);
});

mp.events.add('carDealership:buyVehicleCash', (forFamily) => {
    if (currentAuto.entity == null) return;
    if (global.lastCheck > Date.now()) return;
    global.lastCheck = Date.now() + 500;

    UnloadShop();
    BuyVehicle(true, forFamily)
});

mp.events.add('carDealership:buyVehicleCard', (forFamily) => {
    if (currentAuto.entity == null) return;
    if (global.lastCheck > Date.now()) return;
    global.lastCheck = Date.now() + 500;

    UnloadShop();
    BuyVehicle(false, forFamily)
});

function BuyVehicle(typeMoney, forFamily) {
    mp.events.callRemote('carshop:buyvehicle', autoModels[currIndexVeh].model, currentAuto.color.r, currentAuto.color.g, currentAuto.color.b, typeMoney, forFamily);
}


const testdrive = {
    isGoing: false,
    timeLeft: 60,
    timer: null
};

function testDriveTimer() {
    testdrive.timeLeft--;

    if (testdrive.timeLeft < 0) {
        mp.events.callRemote('endTestDriveAuto');

        clearInterval(testdrive.timer);
        testdrive.timer = null;
    }
}
mp.events.add('carDealership:testDrive', () => {

    if (currentAuto.entity == null) return;

    testdrive.isGoing = true;
    testdrive.timeLeft = 300;
    testdrive.timer = setInterval(testDriveTimer, 1000);

    UnloadShop();
    mp.events.callRemote('testDriveAuto', autoModels[currIndexVeh].model, currentAuto.color.r, currentAuto.color.g, currentAuto.color.b);
});

mp.events.add('endTestDrive', (dead) => {
    if (currentAuto.entity != null) return;

    testdrive.isGoing = false;

    if (testdrive.timer != null) {
        clearInterval(testdrive.timer);
        testdrive.timer = null;
    }

    if (!dead)
        LoadShop();
});

mp.events.add("playerLeaveVehicle", (entity) => {
    if (!testdrive.isGoing) return;
    if (currentAuto.entity != null) return;
    testdrive.isGoing = false;

    if (testdrive.timer != null) {
        clearInterval(testdrive.timer);
        testdrive.timer = null;
        mp.events.callRemote('endTestDriveAuto');
    }

    // LoadShop();
    // currIndexVeh = 0;
    // if (currIndexVeh >= countVeh)
    //     currIndexVeh = 0;
    // SetVehicle(currIndexVeh);
});


mp.events.add('carDealership:selectVeh', (index) => {
    if (currentAuto.entity == null) return;
    if (lockSelector) return;
    if (global.lastCheck > Date.now()) return;
    global.lastCheck = Date.now() + 500;

    currIndexVeh = index;
    if (currIndexVeh >= countVeh)
        currIndexVeh = 0;
    SetVehicle(currIndexVeh);
});


mp.events.add('render', () => {

    if (!testdrive.isGoing) return;
    // mp.game.controls.disableControlAction(2, 75, true);

    mp.game.graphics.drawText(`Тест-драйв закончится через ${testdrive.timeLeft}\n~r~F~w~ для выхода`, [0.5, 0.9], {
        font: 0,
        color: [255, 255, 255, 255],
        scale: [0.5, 0.5],
        outline: false
    });
});




mp.events.add('carDealership:closeInterface', () => {
    if (opened)
        ExitMenu();
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        ExitMenu();
});

function ExitMenu() {
    if (UnloadShop())
        mp.events.callRemote('carshop:exitMenu');
}

function LoadShop() {

    global.goodScreenFadeOut(200, 2000, 500);
    setTimeout(() => {
        //camera settings
        const pos = spanwPosition;
        global.gui.setData('mouseMove/setSettings', JSON.stringify(moveSettings));
        global.gui.setData('mouseMove/setEnebled', true);
        opened = global.gui.openPage('CarDealership')
        if (!opened) return;
        global.customCamera.setPos(new mp.Vector3(pos.x, pos.y, pos.z + .6));
        global.customCamera.setPoint(new mp.Vector3(pos.x, pos.y, pos.z + .6));
        global.customCamera.moveCamZ(0);
        global.customCamera.setDist(8); //4
        global.customCamera.moveAngleX(160);
        global.customCamera.switchOn(0);
        SetVehicle(currIndexVeh);
    }, 500);
}

function UnloadShop() {
    if (!opened)
        return false;
    global.goodScreenFadeOut(200, 2000, 500);
    opened = false;
    setTimeout(() => {
        global.gui.setData('mouseMove/setEnebled', false);
        global.gui.close();
        global.customCamera.switchOff(0);
        opened = false;
        global.showCursor(false)

        if (currentAuto.entity == null) return;
        currentAuto.entity.destroy();
        currentAuto.entity = null;
    }, 500);
    return true;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {


__webpack_require__(148);
__webpack_require__(149);

__webpack_require__(150);
__webpack_require__(151);


/***/ }),
/* 148 */
/***/ (function(module, exports) {

let callLength = {
    ['callGiveVehicle']: 22000,
    ['callStealCar']: 14000,
    ['callStealSecondCar']: 12000,
    ['goToSchool']: 16000,
    ['schoolCompleate']: 28000,
}


let fadeOutAndInDuration = 300;
let fadeInTimeOut = 4000;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let soundLength = {
    ['welcomeServer']: 36000,
    ['callGiveVehicle']: 22000,
    ['meetingFriendTrevor']: 21000,
    ['callStealCar']: 14000,
    ['callStealSecondCar']: 12000,
    ['police1FirstSay']: 4000,
    ['police2FirstSay']: 5000,
    ['police1SecondSay']: 10000,
    ['judgeAdjudicates']: 11000,
    ['courtSounds']: 18000,
}
let playSoundStop = Date.now();
let soundVolume = 1.0;


global.PlaySoundQuest = (soundName) => {
    if (playSoundStop > Date.now())
        return;
    global.gui.playSoundLang(soundName, mp.storage.data.language, soundVolume, false);
    if (soundLength[soundName] !== undefined)
        playSoundStop = Date.now() + soundLength[soundName];
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 150 */
/***/ (function(module, exports) {

let peds = [
    // { key: 1, Pos: new mp.Vector3(-805.0755, -222.98671, 37.252777), Hash: -1932625649, Angle: 168.28566, Name: "Brandon" },
    { key: 1, Pos: new mp.Vector3(-47.526466, -1090.6543, 26.422356), Hash: -1932625649, Angle: 115.8, Name: "Brandon" },
    // { key: 2, Pos: new mp.Vector3(-117.20474, -608.2347, 37.75329), Hash: 365775923, Angle: -86.20102, Name: "Leo" },
    { key: 2, Pos: new mp.Vector3(277.509, -1163.3269, 29.273012), Hash: 365775923, Angle: 18.6, Name: "Leo" },
    { key: 4, Pos: new mp.Vector3(-183.81058, -1157.8107, 23.053408), Hash: -96953009, Angle: -50.2, Name: "Mary" },
    { key: 8, Pos: new mp.Vector3(-109.83661, -572.8314, 40.603302), Hash: -815646164, Angle: -25.719664, Name: "Don" },
];
let createdPeds = null;
let labels = null;
let mailPos = new mp.Vector3(-535.79486, -170.78406, 38.219646);
let createdBlips = {};
let createdMarkers = {};

let ped1Colplete = false;
let ped2Colplete = false;
let ped3Colplete = false;

mp.events.add("startquest:Stage3DeliveryOfMail:delBlip", (id) => {
    if (createdBlips[id]) {
        createdBlips[id].destroy();
        createdBlips[id] = undefined;
    }
    if (createdMarkers[id]) {
        createdMarkers[id].destroy();
        createdMarkers[id] = undefined;
    }
});

mp.events.add("startquest:Stage3DeliveryOfMail:stop", () => {
    peds.forEach(ped => {
        if (createdBlips[ped.key]) {
            createdBlips[ped.key].destroy();
            createdBlips[ped.key] = undefined;
        }
        if (createdMarkers[ped.key]) {
            createdMarkers[ped.key].destroy();
            createdMarkers[ped.key] = undefined;
        }
    });
    if (createdPeds != null)
        destroyPeds();
});

mp.events.add("startquest:Stage3DeliveryOfMail", () => {
    if (createdPeds != null)
        destroyPeds();
    createdPeds = [];
    labels = [];
    let pedModel;
    let blip;
    let marker;
    let label;
    peds.forEach(ped => {
        pedModel = mp.peds.newValid(ped.Hash, ped.Pos, ped.Angle, 0);
        createdPeds.push(pedModel);

        label = mp.labels.new(ped.Name, new mp.Vector3(ped.Pos.x, ped.Pos.y, ped.Pos.z + 1),
            {
                los: false,
                font: 4,
                drawDistance: 10,
                color: [255, 255, 255, 200],
                dimension: 0
            });
        labels.push(label);

        blip = mp.blips.new(1, ped.Pos,
            {
                name: 'Target',
                scale: 1,
                color: 46,
                alpha: 255,
                drawDistance: 100,
                shortRange: false,
                rotation: 0,
                dimension: 0,
            });
        if (createdBlips[ped.key]) {
            createdBlips[ped.key].destroy();
            createdBlips[ped.key] = undefined;
        }
        createdBlips[ped.key] = blip


        marker = mp.markers.new(0, new mp.Vector3(ped.Pos.x, ped.Pos.y, ped.Pos.z + 2), 1,
            {
                rotation: new mp.Vector3(),
                color: [50, 200, 100, 200],
                visible: true,
                dimension: 0
            });
        if (createdMarkers[ped.key]) {
            createdMarkers[ped.key].destroy();
            createdMarkers[ped.key] = undefined;
        }
        createdMarkers[ped.key] = marker
    });
});

mp.events.add("startquest:Stage3DeliveryOfMail:close", () => {
    if (createdPeds != null)
        destroyPeds();
});

function destroyPeds() {
    createdPeds.forEach(createdPed => {
        createdPed.destroy();
    });
    createdPeds = null;
    if (labels != null) {
        labels.forEach(label => {
            label.destroy();
        });
        labels = null;
    }
}

/***/ }),
/* 151 */
/***/ (function(module, exports) {



let colShapeSchool = null;


mp.events.add("playerExitColshape", playerExitColshapeHandler);
function playerExitColshapeHandler(shape) {
    if (shape == colShapeSchool) {
        mp.events.callRemote('startquest:enterSchoolBlip');
        colShapeSchool.destroy();
        colShapeSchool = null;
    }
}

mp.events.add("startquest:Stage7AutoSchool", (shapePos) => {
    try {
        colShapeSchool = mp.colshapes.newCircle(shapePos.x, shapePos.y, 1, mp.players.local.dimension)
    }
    catch (e) {
        mp.serverLog(`Error in startquest:Stage7AutoSchool: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

mp.events.add("startquest:Stage7AutoSchool:stop", () => {
    try {
        if (colShapeSchool) {
            colShapeSchool.destroy();
            colShapeSchool = null;
        }
    }
    catch (e) {
        mp.serverLog(`Error in startquest:Stage7AutoSchool:stop: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// Common phone storage init
if (!mp.storage.data.phone) {
    mp.storage.data.phone = { };
    // mp.storage.flush();
}

mp.phone = {
    onStartCallback: [],
    
    onStart: (callback) => {
        mp.phone.onStartCallback.push(callback);
    },

    invokeStart: () => {
        mp.phone.onStartCallback.forEach(callback => {
            callback();
        });
    }
}

__webpack_require__(153);
__webpack_require__(154);
__webpack_require__(155);

__webpack_require__(156);
__webpack_require__(157);
__webpack_require__(158);
__webpack_require__(159);
__webpack_require__(160);
__webpack_require__(161);
__webpack_require__(162);
__webpack_require__(163);
__webpack_require__(164);

mp.events.add('gui:ready', () => {
    mp.phone.invokeStart();
});

mp.events.add('cefLog', (txt) => {
    if (global.gui.debug)
        mp.serverLog(txt);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 153 */
/***/ (function(module, exports) {

function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
}

const createProxyCallback = (eventName, callback) => {
    if (eventName === 'render' || eventName === 'entityStreamIn' || eventName === 'entityStreamIn' || eventName === 'click')
        return callback;

    return new Proxy(callback, {
        apply: (target, thisArg, args) => {
            mp.game.mobile.moveFinger(getRandomInt(1, 5));
            target.apply(thisArg, args);
        }
    });
}


mp.events.addPhone = (event, callback) => {
    if (typeof(event) === 'object') {
        for (eventName in event) {
            mp.events.add(eventName, createProxyCallback(eventName, event[eventName]));
        }

        return;
    }

    const newCallback = createProxyCallback(event, callback)
    mp.events.add(event, newCallback);
}

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const { getZoneNameByPosition, getStreetNameByPosition } = __webpack_require__(4);
const DESTROY_MOBILE_PHONE = '0x3BC861DF703E5097';

let sendingExcept = false;

global.isPhoneOpened = false;

function openPhone(withCursor = true) {
    if (!mp.phone.fuckingPedCanOpenPhone(true))
        return;
    mp.phone.setTexting();
    global.isPhoneOpened = global.gui.openPhone(true, withCursor);
}

function closePhone() {
    if(mp.players.local.isInAir()) return;
    if(global.malboro || !global.isPhoneOpened) return;
    
    mp.phone.takeDown();
    global.gui.openPhone(false, false);
    global.isPhoneOpened = false;
}

global.openGoPhone = openPhone;
global.closeGoPhone = closePhone;

mp.keys.bind(global.Keys.Key_UP, false, () => {
    if (mp.players.local.getVariable('InDeath') == true) {
        return;
    }
    
    if (!global.isPhoneOpened && !gui.isOpened()) {
        openPhone();
    }
});

mp.keys.bind(global.Keys.Key_DOWN, false, () => {
    closePhone();
});

mp.events.add('phone::hide', () => {
    closePhone();
});

mp.events.addDataHandler("InDeath", (entity, isDeath) => {
    if (entity === mp.players.local && isDeath == true)
        closePhone();
});

let geopositionUpdateTimer = null;
mp.phone.onStart(() => {
    geopositionUpdateTimer = setInterval(() => {
        try {
            if (!global.loggedin)
                return;
            
            const pos = mp.players.local.isInAnyVehicle(false) ? mp.players.local.vehicle.position : mp.players.local.position;

            const geolocation = {
                currentPosition: {
                    X: pos.x,
                    Y: pos.y,
                    Z: pos.z
                },

                zoneName: getZoneNameByPosition(pos),
                streetName: getStreetNameByPosition(pos)
            }
                
            global.gui.setData('smartphone/setCurrentPosition', JSON.stringify(geolocation))
        }
        catch (e){ 
            if(global.sendException && !sendingExcept) {
                sendingExcept = true;
                mp.serverLog(`mp.phone.onStart geopositionUpdateTimer: ${e.name}\n${e.message}\n${e.stack}`);
            }
        }
    }, 5000);

});

mp.phone.open = openPhone;
mp.phone.close = closePhone;


mp.phone.fuckingPedCanOpenPhone = (notify) => {
    if(
        mp.game.ui.isPauseMenuActive() ||
        mp.players.local.isInAir() ||
        global.malboro || 
        global.isPhoneOpened || 
        global.inAction || 
        global.fishingMiniGame ||
        global.cuffed
    ) return false;
    if(global.getCurrentPlayerWeapon() !== 2725352035)
    {
        if (notify)
            mp.events.call('notify', 4, 9, 'act:canc:w', 3000);
        return false;
    }
    return true;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 155 */
/***/ (function(module, exports) {

mp.phone.setTexting = () => {
    if (mp.phone.fuckingPedCanOpenPhone(false))
    {
        if (!mp.players.local.isInAnyVehicle(true) && !mp.players.local.isGettingIntoAVehicle())
            mp.events.callRemote('phone:getHeld');
    }
};

mp.phone.takeDown = () => {
    mp.events.callRemote('phone:offHeld');
};

mp.phone.setSpeaking = () => {
    mp.events.callRemote('phone:setSpeaking');
};

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// Settings App init
if (!mp.storage.data.phone.settings) {
    mp.storage.data.phone.settings = {
        Wallpaper: 0,
        NotificationSound: 0,
        Ringtone: 0,
        IsAirplaneMode: false
    };

    // mp.storage.flush();
}

function loadConfigs() {    
    global.gui.setData('smartphone/setConfigWallpaper', mp.storage.data.phone.settings.Wallpaper);
    global.gui.setData('smartphone/setConfigNotificationSound', mp.storage.data.phone.settings.NotificationSound);
    global.gui.setData('smartphone/setConfigRingtoneSound', mp.storage.data.phone.settings.Ringtone);
    global.gui.setData('smartphone/setConfigIsAirplaneMode', mp.storage.data.phone.settings.IsAirplaneMode);
}

mp.phone.onStart(loadConfigs);

mp.events.addPhone({
    "phone::settings::setConfigWallpaper": (wallpaper) => {
        mp.storage.data.phone.settings.Wallpaper = wallpaper;
        // mp.storage.flush();
    },

    "phone::settings::setConfigNotificationSound": (notificationSound) => {
        mp.storage.data.phone.settings.NotificationSound = notificationSound;
        // mp.storage.flush();
    },

    "phone::settings::setConfigRingtone": (ringtone) => {
        mp.storage.data.phone.settings.Ringtone = ringtone;
        // mp.storage.flush();
    },

    "phone::settings::setConfigAirplaneMode": (isAirplaneMode) => {
        mp.storage.data.phone.settings.IsAirplaneMode = isAirplaneMode;
        // mp.storage.flush();
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 157 */
/***/ (function(module, exports) {

mp.events.addPhone({
    // CEF events
    "phone::appStore::installApp": (appId) => {
        mp.events.callRemote('phone:appStore:install', appId);
    },

    "phone::appStore::removeApp": (appId) => {
        mp.events.callRemote('phone:appStore:remove', appId);
    }
});

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {mp.events.add({
    "phone:contacts:load": (contacts) => {
        global.gui.setData('smartphone/addContacts', contacts);
    },
    
    "phone:contacts:applyEdit": (contact) => {
        global.gui.setData('smartphone/editContact', contact);
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {mp.events.add({
    "phone:calls:incomeCall": (fromNumber) => {
        if (!global.isPhoneOpened && !gui.isOpened()) {
            mp.phone.open(false);
        }

        global.gui.setData('smartphone/incomeCall', fromNumber);
    },

    "phone:calls:setFakeCall": (callerName) => {
        if (!global.isPhoneOpened && !gui.isOpened()) {
            mp.phone.open(false);
        }

        global.gui.setData('smartphone/setFakeCall', JSON.stringify({ callerName }));
    },

    "phone:calls:endFakeCall": () => {
        global.gui.setData('smartphone/endFakeCall');

        setTimeout(() => {
            mp.phone.close();
        }, 1500);
    }
})

mp.events.addPhone({
    "phone::calls::phoneUp": () => {
        mp.phone.setSpeaking();
        // mp.players.local.taskUseMobilePhone(1);
    },

    "phone::calls::phoneDown": () => {
        mp.phone.setTexting();
        // mp.players.local.taskUseMobilePhone(0);
    },
});

// 0.07 0 -0.02 90 90 110

// 0.07 0.035 0 110 -20 0

// amb@code_human_wander_mobile@male@base static
// amb@code_human_wander_texting@male@base static -- move_characters@sandy@texting sandy_text_loop_base
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 160 */
/***/ (function(module, exports) {

mp.events.addPhone({
    "phone::msg::setGeoposition": (x, y) => {
        mp.game.ui.setNewWaypoint(x, y);
    }
});

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

const { getFullAddressByPosition } = __webpack_require__(4);

mp.events.add("phone:gps:load", (gpsData) => {
    
    gpsData = JSON.parse(gpsData);

    for (gpsCat in gpsData) {
        gpsData[gpsCat].forEach(gpsItem => {
            const pos = gpsItem.Position;
            gpsItem.Address = getFullAddressByPosition(pos);
        });
    }

    mp.events.call('gui:setData', 'smartphone/gps_loadData', JSON.stringify(gpsData));
});


mp.events.add("phone::gps::setWaypoint", (x, y) => {
    mp.game.ui.setNewWaypoint(x, y);
});

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const { getFullAddressByPosition } = __webpack_require__(4);

let isWaitingForWaypoint = false;
let waypointPosition = null;

mp.events.add({
    // CEF events
    "phone::taxi::sendToMap": () => {
        isWaitingForWaypoint = true;
        global.closeGoPhone();
        mp.game.ui.setFrontendActive(true);
    },

    "phone::taxi::requestTaxi": (paymentByCard) => {
      mp.events.callRemote('phone:taxi:requestTaxi', paymentByCard, waypointPosition.x, waypointPosition.y)
    }
    
    // Server events
});

// Rage events
mp.events.add("playerCreateWaypoint", (position, toggle) => {
    if (isWaitingForWaypoint) {
      mp.game.ui.setFrontendActive(false);
      isWaitingForWaypoint = false;
      waypointPosition = position;
      
      mp.events.call('gui:setData', 'smartphone/taxiPage/taxi_setSpecifyLocation', JSON.stringify({
          name: getFullAddressByPosition(position),
          position: position,
          type: 'known'
      }));

      setTimeout(() => {
        global.openGoPhone();
      }, 100);
    }
});

//#region playerCreateWaypoint event fix
// Stuff for fixing playerCreateWaypoint event on 0.3.7, can be deleted on 1.1 i think.
// https://rage.mp/forums/topic/3875-solution-for-waypoint/

let waypoint;

mp.events.add('render', () => {
  // Waypoint
  if (waypoint !== mp.game.invoke('0x1DD1F58F493F1DA5')) {
    waypoint = mp.game.invoke('0x1DD1F58F493F1DA5');
    let blipIterator = mp.game.invoke('0x186E5D252FA50E7D');
    let FirstInfoId = mp.game.invoke('0x1BEDE233E6CD2A1F', blipIterator);
    let NextInfoId = mp.game.invoke('0x14F96AA50D6FBEA7', blipIterator);
    for (let i = FirstInfoId; mp.game.invoke('0xA6DB27D19ECBB7DA', i) != 0; i = NextInfoId) {
      if (mp.game.invoke('0xBE9B0959FFD0779B', i) == 4 ) {
        var coord = mp.game.ui.getBlipInfoIdCoord(i);
        mp.events.call("playerCreateWaypoint", coord, Boolean(waypoint));
      };
    };
  };
});
//#endregion playerCreateWaypoint event fix
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const { getFullAddressByPosition } = __webpack_require__(4);

let pedModels =
    [
        42647445,
        793439294,
        1752208920,
        117698822,
        -1422914553,
        1074457665,
        -67533719,
        1830688247,
        -412008429,
        588969535,
        2114544056,
        1068876755,
        2120901815,
        -1280051738,
        1650288984,
        1182012905,
        -872673803,
        2010389054,
        653289389,
        348382215,
        -886023758,

    ]

let Ped = null;
let pedBlip = null;
let pedEnterVehicleTimeout = null;
let intervalDestroy = null;


mp.events.add({
    // Server events
    "phone:taxijob:sendOrder": (order) => {
        order = JSON.parse(order);
        order.Address = getFullAddressByPosition(order.Destination);
        mp.events.call('gui:setData', 'smartphone/taxiPage/taxijob_addOrder', JSON.stringify(order));
    },

    "phone:taxijob:sendOrders": (orders) => {
        orders = JSON.parse(orders);
        orders.forEach(order => {
            order.Address = getFullAddressByPosition(order.Destination);
        });

        mp.events.call('gui:setData', 'smartphone/taxiPage/taxijob_setOrders', JSON.stringify(orders));
    },

    "phone:taxijob:setCurrentOrder": (status, position, sum, isCardPayment) => {
        mp.game.ui.setNewWaypoint(position.x, position.y);

        const dto = {
            status: status,
            location: getFullAddressByPosition(position),
            sum,
            isCardPayment
        };

        mp.events.call('gui:dispatch', 'smartphone/taxiPage/taxijob_setCurrentOrder', JSON.stringify(dto));
    },

    "phone:taxijob:createPed": (position) => {
        DestroyPed();
        DestroyPedBlip();
        let pedModel = pedModels[Math.floor(Math.random() * (pedModels.length - 1))]
        Ped = mp.peds.newValid(
            pedModel,
            position,
            0,
            0
        );
        pedBlip = mp.blips.new(0, position,
            {
                name: "Checkpoint",
                scale: 1,
                color: 49,
                alpha: 255,
                drawDistance: 100,
                shortRange: false,
                rotation: 0,
                dimension: 0,
            });
    },

    "phone:taxijob:pedEnterVehicle": () => {
        if (Ped) {
            for (let i = 0; !Ped.doesExist() && i < 250; i++)
                mp.game.wait(0);
            if (Ped.doesExist()) {
                Ped.freezePosition(false);
                pedEnterVehicleTimeout = setInterval(TrySeatInVehicle, 3000);
            }
        }
    },

    "phone:taxijob:pedLeaveVehicle": (position) => {
        if (Ped && Ped.doesExist()) {
            Ped.taskLeaveAnyVehicle(0, 0);
            Ped.taskGoStraightToCoord(position.x, position.y, position.z, 3, 10000, 0, 0);
            intervalDestroy = setTimeout(() => {
                DestroyPed();
                DestroyPedBlip();

            }, 10000);
        }
    },

    "phone:taxijob:destroyPed": () => {
        DestroyPed();
        DestroyPedBlip();
        StopEnterVehicleTimeout();
    }
});



function TrySeatInVehicle() {
    if (Ped == null || !Ped.doesExist()) {
        StopEnterVehicleTimeout();
        return false;
    }
    Ped.freezePosition(false);
    if (!mp.players.local.vehicle)
        return false;
    let res = global.seatVehicleOnClearPlace(mp.players.local.vehicle, Ped, 7000, 15);
    if (res) {
        setTimeout(() => {
            mp.events.callRemote('phone::taxijob::pedEnterVehicle')
        }, 7000);
        DestroyPedBlip();
        StopEnterVehicleTimeout();
    }
    return res;
}

function StopEnterVehicleTimeout() {
    if (pedEnterVehicleTimeout != null) {
        clearInterval(pedEnterVehicleTimeout);
        pedEnterVehicleTimeout = null;
    }
}

function DestroyPed() {
    if (Ped != null) {
        if (Ped.doesExist())
            Ped.destroy();
        Ped = null;
    }
    if (intervalDestroy != null) {
        clearInterval(intervalDestroy);
        intervalDestroy = null;
    }
}

function DestroyPedBlip() {
    if (pedBlip != null) {
        pedBlip.destroy();
        pedBlip = null;
    }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let lasViewMode = 4;
global.phoneCameraIsOpened = false;


mp.events.add('phone::camera::open', () => {
    global.closeGoPhone();    
    lasViewMode = mp.game.invoke(global.getNative("GET_FOLLOW_PED_CAM_VIEW_MODE"));
    mp.game.invoke(global.getNative("SET_FOLLOW_PED_CAM_VIEW_MODE"), 4);
    global.phoneCameraIsOpened = true;
    global.showHud(false);
});


mp.keys.bind(global.Keys.Key_ESCAPE, false, ()=>{
    if (!global.phoneCameraIsOpened) return;
    global.phoneCameraIsOpened = false;
    global.showHud(true);
    mp.game.invoke(global.getNative("SET_FOLLOW_PED_CAM_VIEW_MODE"), lasViewMode);
})
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {__webpack_require__(166)
__webpack_require__(167)
let mainMenuOpened = false;
mp.keys.bind(global.Keys.Key_M, false, ()=> {
    if(mainMenuOpened || global.chatActive || global.gui.isOpened()) return;
    mainMenuOpened = global.gui.openPage("OptionsMenu");
})

mp.keys.bind(global.Keys.Key_ESCAPE, false, ()=> {
    close();
})

mp.events.add("mmenu:stats:update", (data) =>{
    global.gui.setData('optionsMenu/setStats', data);
})

mp.events.add("mmenu:donate:update", (premium, dataMoney) =>{
    // var finalData;
    // data.forEach(el => {
    //     if(el.Type == 1){
    //         finalData.premium.price = el.Price;
    //     }else if(el.Type == 2){
    //         finalData.money = { id: el.Id, name: el.Name, price: el.Price }
    //     }
    // });
    //mp.serverLog(`premium DATA: ${premium}`);
    //mp.serverLog(`DONATE DATA: ${dataMoney}`);
    global.gui.setData('optionsMenu/setDonatePremium', premium);
    global.gui.setData('optionsMenu/setDonateMoney', dataMoney);
    // global.gui.setData('optionsMenu/setDonateMoney', JSON.parse(dataMoney));
})

mp.events.add("mmenu:donateExclusive:update", (price, count, maxcount) =>{
    global.gui.setData('optionsMenu/setExclusivePrice', price);
    global.gui.setData('optionsMenu/setExclusiveCount', count);
    global.gui.setData('optionsMenu/setExclusiveMaxCount', maxcount);
})

mp.events.add("mmenu:open:donate", () =>{
    close();
    mp.events.call("dshop:open");
})

mp.events.add("mmenu:props:update", (data) =>{
    global.gui.setData('optionsMenu/setProps', data);
})

mp.events.add("mmenu:products:update", (data) =>{
    global.gui.setData('optionsMenu/setProducts', data);
})

mp.events.add("mmenu:setting:set", (name, status) =>{   
    mp.storage.data.mainSettings[name] = status;
    mp.storage.flush();
    if(name == 'hint') global.gui.setData('hud/showHelp', status);
})

mp.events.add("mmenu:bp:update", (bp) =>{   
    global.gui.setData("optionsMenu/updateBonusPoints", `${bp}`);
})

mp.events.add("cef:mmenu:close", () =>{
    close();
})

mp.events.add("cef:mmenu:capt:open", ()=>{
    close();
    global.gui.setData("optionsMenu/setAttack", 'false');
    mp.events.callRemote("mmenu:captteam")
})

function close(){    
    if(!mainMenuOpened) return;
    global.gui.close();
    mainMenuOpened = false
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {mp.events.add("mmenu:frac:members:update", (members)=>{
    global.gui.setData("optionsMenu/setFractionMembers", members);
})

mp.events.add("mmenu:frac:biz:update", (biz)=>{
    global.gui.setData("optionsMenu/setFractionBusinesses", biz);
})

mp.events.add("mmenu:frac:data:update", (id, bank, lastHour, lastDay, canInvite, canKick, canRank, canWhithdraw, canAccess)=>{
    global.gui.setData("optionsMenu/setFractionData", JSON.stringify({id, bank, lastHour, lastDay, canInvite, canKick, canRank, canWhithdraw, canAccess}));
})

mp.events.add("mmenu:frac:access:set", (access)=>{
    global.gui.setData("optionsMenu/setFractionAccess", access);
})

mp.events.add("mmenu:frac:capt:attack", ()=>{
    global.gui.playSound("alarm", 0.1, false);
    global.gui.setData("optionsMenu/setAttack", 'true');
})

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function setReferalsData(total, code) {
    global.gui.setData("optionsMenu/updateReferalsData", JSON.stringify({key: "total", value: total}))
    global.gui.setData("optionsMenu/updateReferalsData", JSON.stringify({key: "code", value: code}))
}
function updateReferalsData(total) {    
    global.gui.setData("optionsMenu/updateReferalsData", JSON.stringify({key: "total", value: total}))
}

mp.events.add("mmenu:referals:set", setReferalsData)
mp.events.add("mmenu:referals:update", updateReferalsData)
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;
let lastcheck = Date.now();

mp.keys.bind(global.Keys.Key_OEM_7, false, function () {
    if (!opened)
        OpenMenu()
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        CloseMenu();
});


mp.events.add('pda:exit', () => {
    CloseMenu();
});

function OpenMenu() {
    if (global.checkIsAnyActivity()) return;
    if (Date.now() < lastcheck)
        return;
    lastcheck = Date.now() + 1000;
    mp.events.callRemote('pda:pressOpenMenu');
}

function CloseMenu() {
    global.gui.close();
    opened = false;
    mp.events.callRemote('pda:closeMenu');
}

mp.events.add('pda:openAndLoad', (frac, wantedPlayer, wantedVehicles, helpList) => {
    if (global.chatActive || global.gui.isOpened()) return;
    let type = frac == 'POLICE' ? 0 : frac == 'FIB' ? 1 : 2;
    global.gui.setData("personalDigitalAssistant/setType", JSON.stringify(type));
    global.gui.setData("personalDigitalAssistant/setHumanListWanted", wantedPlayer);
    global.gui.setData("personalDigitalAssistant/setCarListWanted", wantedVehicles);
    let helps = JSON.parse(helpList);
    let pos = mp.players.local.position;
    helps.forEach(item => {
        item.distance = Math.round(mp.game.gameplay.getDistanceBetweenCoords(item.position.x, item.position.y, item.position.z, pos.x, pos.y, pos.z, true));
    });
    global.gui.setData("personalDigitalAssistant/setHelpList", JSON.stringify(helps));
    //global.gui.setData("personalDigitalAssistant/dataBase/setPrisoners", JSON.stringify([]));
    global.gui.setData("personalDigitalAssistant/setSearchHuman", "{}");
    global.gui.setData("personalDigitalAssistant/setSearchCar", "{}");
    opened = global.gui.openPage('PersonalDigitalAssistant');
});


mp.events.add('pda:loadArrests', (jsonPrisoners) => {
    var prisoners = JSON.parse(jsonPrisoners);
    prisoners.forEach(prison => {
        global.gui.setData("personalDigitalAssistant/dataBase/updatePrisoners", JSON.stringify(prison));
    });
});


mp.events.add('pda:open', () => {
    if (global.chatActive || global.gui.isOpened()) return;
    global.gui.setData("personalDigitalAssistant/setSearchHuman", "{}");
    global.gui.setData("personalDigitalAssistant/setSearchCar", "{}");
    opened = global.gui.openPage('PersonalDigitalAssistant');
});

mp.events.add('pda:setWanted', (type, id, wantedlvl, reason) => {
    if (Date.now() < lastcheck)
        return;
    lastcheck = Date.now() + 1000;
    if (type == 'car')
        mp.events.callRemote('pda:setVehicleWantedLvl', id, wantedlvl, reason);
    else if (type == 'player')
        mp.events.callRemote('pda:setPlayerWantedLvl', id, wantedlvl, reason);
});

mp.events.add('pda:setSearchHuman', (text, type) => {
    if (Date.now() < lastcheck)
        return;
    lastcheck = Date.now() + 1000;
    mp.events.callRemote('pda:searchPlayer', text, type);
});

mp.events.add('pda:findCar', (text) => {
    if (Date.now() < lastcheck)
        return;
    lastcheck = Date.now() + 1000;
    mp.events.callRemote('pda:searchVehicle', text);
});

mp.events.add('pda:toHelp', (idHelp) => {
    if (Date.now() < lastcheck)
        return;
    lastcheck = Date.now() + 1000;
    mp.events.callRemote('pda:acceptCall', idHelp);
});

mp.events.add('pda:pushCode', (code) => {
    if (Date.now() < lastcheck)
        return;
    lastcheck = Date.now() + 1000;
    mp.events.callRemote('pda:callNeedHelp', code);
});


mp.events.add('pda:releaseOnBail', (id, amount) => {
    if (Date.now() < lastcheck)
        return;
    lastcheck = Date.now() + 1000;
    mp.events.callRemote('pda:releaseFromKPZ', id, amount)
});

mp.events.add('pda:overrideBail', (id) => {
    if (Date.now() < lastcheck)
        return;
    lastcheck = Date.now() + 1000;
    mp.events.callRemote('pda:blockCanBeIssue', id)
});


mp.events.add('pda:updwantedpl', (wantedPlayer) => {
    global.gui.setData("personalDigitalAssistant/updatePlayerWantedLVL", wantedPlayer);
});

mp.events.add('pda:updwantedveh', (wantedVehicle) => {
    global.gui.setData("personalDigitalAssistant/updateVehicleWantedLVL", wantedVehicle);
});

mp.events.add('pda:updhelpers', (id, helpers) => {
    global.gui.setData("personalDigitalAssistant/updateHelpers", JSON.stringify({id: id, helpers: JSON.parse(helpers)}));    
});

mp.events.add('pda:returnFindPlayer', (findPlayer) => {
    global.gui.setData("personalDigitalAssistant/setSearchHuman", findPlayer);
});

mp.events.add('pda:returnFindVehicle', (findVehicle) => {
    global.gui.setData("personalDigitalAssistant/setSearchCar", findVehicle);
});

mp.events.add('pda:callPolice', (callJson) => {
    let call = JSON.parse(callJson);
    let pos = mp.players.local.position;
    call.distance = Math.round(mp.game.gameplay.getDistanceBetweenCoords(call.position.x, call.position.y, call.position.z, pos.x, pos.y, pos.z, true));
    global.gui.setData("personalDigitalAssistant/addIntoHelpList", JSON.stringify(call));
});

mp.events.add('pda:delcallPolice', (callId) => {
    global.gui.setData("personalDigitalAssistant/removeFromHelpList", JSON.stringify(callId));
});

mp.events.add('pda:updatePrisoner', (prison) => {
    global.gui.setData("personalDigitalAssistant/dataBase/updatePrisoners", prison);
});



/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;
let lastcheck = Date.now();

mp.keys.bind(global.Keys.Key_OEM_7, false, function () {
    if (!opened)
        OpenMenu()
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        CloseMenu();
});


mp.events.add('lsnews::exit', () => {
    CloseMenu();
});

function OpenMenu() {
    if (global.checkIsAnyActivity()) return;
    if (global.getVariable(mp.players.local, 'fraction', 0) != 15)
        return;
    if (Date.now() < lastcheck)
        return;
    lastcheck = Date.now() + 1000;
    mp.events.callRemote('lsnews::pressOpenMenu');
    global.gui.setData('news/setName', JSON.stringify(mp.players.local.name));
}

function CloseMenu() {
    global.gui.close();
    opened = false;
}

mp.events.add('lsnews::open', () => {
    if (global.checkIsAnyActivity()) return;
    opened = global.gui.openPage('News');
});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
let soundVolume = 1.0;
mp.events.add('playSoundForCall', (sound) => {
    PlaySound(sound);
});

function PlaySound(soundName) {
    global.gui.playSound(soundName, soundVolume, false);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;
let inFamily = false;

mp.keys.bind(global.Keys.Key_K, false, function () {
    if (!global.loggedin) return;
    if (global.checkIsAnyActivity()) return;
    if (!opened)
        mp.events.callRemote('family:openFamilyMenu');
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        CloseMenu();
});

mp.events.add('family:closeMenu', () => {
    CloseMenu();
});

mp.events.add('family:openMenu', (money) => {
    global.gui.setData('familyMenu/setBankBalance', JSON.stringify(money));
    if (!opened)
        OpenFamilyMenu()
});

mp.events.add('family:openFamilyInterface', () => {
    if (!global.loggedin) return;
    //!global.loggedin || global.chatActive || global.editing || global.gui.isOpened() || global.IsPlayingDM || global.cuffed || global.inAction;
    // if (global.checkIsAnyActivity()) return;
    if (!opened)
        mp.events.callRemote('family:openFamilyMenu');
});

function CloseMenu() {
    global.gui.close();
    opened = false;
}
function OpenFamilyMenu() {
    if (!global.loggedin) return;
    // if (global.checkIsAnyActivity()) return;
    if (!inFamily)
        return;
    // global.gui.close();
    mp.events.call('cef:mmenu:close');
    global.gui.openPage('FamilyMenu');
    opened = true;
}

mp.events.add('family:loadData', (data, rank, chatIcon, chatColor, members, name, businesses, allBiz, myUUID) => {
    global.gui.setData('familyMenu/setInfoPage', data);
    global.gui.setData('familyMenu/setRank', rank);
    global.gui.setData('familyMenu/setCurrentMemberId', myUUID);
    global.gui.setData('familyMenu/controlPage/setChatOptions', JSON.stringify({
        currentColor: chatColor,
        currentIcon: chatIcon
    }));
    global.showFamMembersOnMinimup = mp.storage.data.showFamMembersOnMinimup;
    global.gui.setData('familyMenu/setMembersOnMap', JSON.stringify(global.showFamMembersOnMinimup));
    global.gui.setData('familyMenu/membersPage/setMembers', members);
    global.gui.setData('familyMenu/controlPage/setOrganizationName', JSON.stringify(name));
    global.gui.setData('familyMenu/propertyPage/setPropertyList', businesses);
    global.gui.setData('familyMenu/eventsPage/setBusinessList', allBiz);
    inFamily = true;
    global.gui.setData('familyMenu/setInFamily', inFamily);
});


mp.events.add('family:loadFamilyBattles', (battles) => {
    global.gui.setData('familyMenu/battlePage/loadBattles', battles);
});

mp.events.add('family:unloadData', () => {
    inFamily = false;
    global.gui.setData('familyMenu/setInFamily', inFamily);
});


mp.events.add('family:loadFamilyRatings', (ratings) => {
    global.gui.setData('familyMenu/ratingPage/setOrgList', ratings);

});

mp.events.add('familyMenu:editHouse', () => {
    mp.events.callRemote('house:openFamilyHouseMenu');
});


let openedCompanyCapt = false;

mp.keys.bind(global.Keys.Key_OEM_6, false, function () {
    if (!global.loggedin) return;
    if (global.checkIsAnyActivity()) return;
    let family = global.getVariable(mp.players.local, 'familyuuid', -1);
    let fraction = global.getVariable(mp.players.local, 'fraction', -1);
    if (family <= 0) {
        if ((fraction < 1 || fraction > 5) && fraction != 16)
            return;
        else
            global.gui.setData('warForEnterprice/setOwner', JSON.stringify({ owner: fraction, ownerType: 2 }));

    }
    else
        global.gui.setData('warForEnterprice/setOwner', JSON.stringify({ owner: family, ownerType: 1 }));

    openedCompanyCapt = global.gui.openPage('WarForEnterprice');
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (openedCompanyCapt)
        CloseCompanyMenu();
});

mp.events.add('warForEnterprice::exit', () => {
    CloseCompanyMenu();
});

function CloseCompanyMenu() {
    global.gui.close();
    openedCompanyCapt = false;
}

let peds = [];
mp.events.add('warForEnterprice:loadPeds', (pedsJSON) => {
    pedinfo = JSON.parse(pedsJSON);

    pedinfo.forEach(ped => {
        let p = mp.peds.newValid(579932932, ped.position, ped.heading, 0);
        let obj = { ped: p, id: ped.id };
        peds.push(obj);
        //if(p !== null) p.taskPlayAnim("friends@frm@ig_1", "greeting_idle_a", 8.0, 1.0, -1, 1, 1.0, false, false, false);
    });
});
mp.events.add('warForEnterprice:updatePeds', (pedJSON) => {
    ped = JSON.parse(pedJSON);
    const index = peds.findIndex(item => item.id == ped.id)
    if (index >= 0) {
        peds[index].ped.destroy();
        peds[index].ped = mp.peds.newValid(579932932, ped.position, ped.heading, 0);
    }
    else {
        let p = mp.peds.newValid(579932932, ped.position, ped.heading, 0);
        let obj = { ped: p, id: ped.id };
        peds.push(obj);
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
let familyCars = [];

mp.events.add('family:loadCarsAndRanks', (cars, ranks) => {
    familyCars = JSON.parse(cars);
    var familyRanks = JSON.parse(ranks);
    familyRanks.forEach(rank => {
        loadRankVehicleAccess(rank);
    });
    global.gui.setData('familyMenu/controlPage/setRanksList', JSON.stringify(familyRanks));
});

function loadRankVehicleAccess(rank) {
    if (rank.accessCars == undefined) rank.accessCars = [];
    let rankAccessCars = rank.accessCars;
    rank.accessCars = [];
    familyCars.forEach(car => {
        var index = rankAccessCars.findIndex(item => item.key == car.key);
        if (index >= 0) {
            rank.accessCars.push({ key: rankAccessCars[index].key, access: rankAccessCars[index].access, carName: `${car.model} (${car.number})` });
        }
        else {
            rank.accessCars.push({ key: car.key, access: rank.rankId > 0 ? 0 : 3, carName: `${car.model} (${car.number})` });
        }
    });
}

mp.events.add('family:errorName', () => {
    global.gui.setData('familyMenu/controlPage/setErrorName', JSON.stringify(true));
});

mp.events.add('family:newNation', (nation) => {
    global.gui.setData('familyMenu/setNation', JSON.stringify(nation));
});

mp.events.add('family:newBiography', (biography) => {
    global.gui.setData('familyMenu/setBiography', JSON.stringify(biography));
});

mp.events.add('family:newRules', (tabooJson, rulesJson) => {
    global.gui.setData('familyMenu/setRules', JSON.stringify({taboo: JSON.parse(tabooJson), rules: JSON.parse(rulesJson)}));
});

mp.events.add('family:updateRank', (jsonRank) => {
    let rank = JSON.parse(jsonRank);
    loadRankVehicleAccess(rank);
    global.gui.setData('familyMenu/controlPage/updateRank', JSON.stringify(rank));
});

mp.events.add('family:deleteRank', (rankId) => {
    global.gui.setData('familyMenu/controlPage/removeRank', JSON.stringify(rankId));
});

mp.events.add('family:updateChat', (icon, color) => {
    global.gui.setData('familyMenu/controlPage/setChatOptions', JSON.stringify({
        currentColor: color,
        currentIcon: icon
    }));
});

mp.events.add('family:updateVehicle', (jsonCar) => {
    let car = JSON.parse(jsonCar);
    let carData = { key: car.key, access: 0, carName: `${car.model} (${car.number})` };
    let index = familyCars.findIndex(item => item.key == car.key);
    if (index > -1)
        familyCars[index] = car;
    else
        familyCars.push(car);
    global.gui.setData('familyMenu/controlPage/updateCar', JSON.stringify(carData));
});

mp.events.add('family:removeVehicle', (carId) => {
    let index = familyCars.findIndex(item => item.key == carId);
    if (index > -1)
        familyCars.splice(index, 1);
    global.gui.setData('familyMenu/controlPage/removeCar', JSON.stringify(carId));
});

mp.events.add('family:updateMemberRank', (rank) => {
    global.gui.setData('familyMenu/setRank', rank);
});
mp.events.add('family:updateMember', (member) => {
    global.gui.setData('familyMenu/membersPage/updateMember', member);
});

mp.events.add('family:removeMember', (member) => {
    global.gui.setData('familyMenu/membersPage/removeMember', member);
});

mp.events.add('family:updateBusiness', (business) => {
    global.gui.setData('familyMenu/propertyPage/updateProperty', business);
});

mp.events.add('family:removeBusiness', (bizId) => {
    global.gui.setData('familyMenu/propertyPage/removeProperty', JSON.stringify(bizId));
});

mp.events.add('family:updateBusinessFamPatronage', (bizId, famName) => {
    global.gui.setData('familyMenu/eventsPage/updateBusinessFamilyPatronage', JSON.stringify({biz: bizId, familyName: famName}));
});

mp.events.add('family:updateFamilyRating', (familId, name, ownerName, countBattles, countBusiness, membersCount, eloRating, rank) => {
    global.gui.setData('familyMenu/ratingPage/updateOrganization', JSON.stringify({id: familId, name: name, owner: ownerName, victories: countBattles, buissCount: countBusiness, membersCount: membersCount, rating: eloRating, rank: rank}));
});

mp.events.add('family:updateMoney', (money) => {
    global.gui.setData('familyMenu/setBankBalance', JSON.stringify(money));
});

mp.events.add('family:createBattleResponse', (message, confirm) => {
    global.gui.setData('familyMenu/eventsPage/setNotificationMessage', JSON.stringify({message: message, result: confirm ? 'createBattle_ResultOk' : 'createBattle_ResultCancel'}));
});

mp.events.add('family:updateBattleData', (data) => {
    global.gui.setData('familyMenu/battlePage/updateBattleData', data);
});



mp.events.add('family:loadMP', (data) => {
    global.gui.setData('familyMenu/eventsPage/loadGlobalEvents', data);
});
mp.events.add('family:updateFamilyMP', (data) => {
    global.gui.setData('familyMenu/eventsPage/updateGlobalEvents', data);
});


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 173 */
/***/ (function(module, exports) {

let lastClick = Date.now();

function checkLastCheck() {
    if (Date.now() < lastClick + 1000)
        return false;
    lastClick = Date.now();
    return true;
}

mp.events.add('familyMenu:saveOrganizationName', (name) => {
    if (!checkLastCheck())
        return;
    mp.events.callRemote('family:tryChangeName', name);
});

mp.events.add('familyMenu:saveNation', (nation) => {
    if (!checkLastCheck())
        return;
    mp.events.callRemote('family:tryChangeNation', nation);
});

mp.events.add('familyMenu:setBio', (bio) => {
    if (!checkLastCheck())
        return;
    mp.events.callRemote('family:tryChangeBiography', bio);
});

mp.events.add('familyMenu:saveEditFamilyRules', (tabooJson, rulesJson) => {
    if (!checkLastCheck())
        return;
    var taboo = JSON.parse(tabooJson);
    var rules = JSON.parse(rulesJson);
    mp.events.callRemote('family:tryChangeRules', JSON.stringify(taboo.map(item=> item.text)), JSON.stringify(rules.map(item=> item.text)));
});

mp.events.add('familyMenu:addNewRank', (rankId) => {
    if (!checkLastCheck())
        return;
    mp.events.callRemote('family:tryCreateRank', rankId);
});

mp.events.add('familyMenu:deleteRank', (rankId) => {
    if (!checkLastCheck())
        return;
    mp.events.callRemote('family:tryDeleteRank', rankId);
});

mp.events.add('familyMenu:setRank', (jsonRank) => {
    if (!checkLastCheck())
        return;
    let rank = JSON.parse(jsonRank);
    let accessCars = {};
    rank.accessCars.forEach(car => {
        accessCars[car.key] = car.access
    });
    mp.events.callRemote('family:trySetRank', rank.rankId, rank.rankName, rank.accessHouse, rank.accessFurniture, rank.accessClothes, rank.accessWar, rank.accessMembers, JSON.stringify(accessCars));
});

mp.events.add('familyMenu:saveChatOptions', (icon, color) => {
    if (!checkLastCheck())
        return;
    mp.events.callRemote('family:trySetChatOptions', icon, color);
});

mp.events.add('familyMenu:setCurrentRank', (memberId, rankId) => {
    if (!checkLastCheck())
        return;
    mp.events.callRemote('family:trySetCurrentRank', memberId, rankId);
});
mp.events.add('familyMenu:kickMember', (memberId) => {
    if (!checkLastCheck())
        return;
    mp.events.callRemote('family:tryKickMember', memberId);
});
mp.events.add('familyMenu:leaveFromOrganization', () => {
    if (!checkLastCheck())
        return;
    mp.events.callRemote('family:leaveFromOrganization');
});
mp.events.add('familyMenu:deleteOrganization', () => {
    if (!checkLastCheck())
        return;
    mp.events.callRemote('family:deleteOrganization');
});



mp.events.add('familyMenu:selectCarOption', (iventKey, vehKey) => {
    if (!checkLastCheck())
        return;
    switch (iventKey) {
        case 0:
            mp.events.callRemote('family:repairCar', vehKey);
            break;
        case 1:
            mp.events.callRemote('family:evacCar', vehKey);
            break;
        case 2:
            mp.events.callRemote('family:sellCar', vehKey);
            break;
        case 3:
            mp.events.callRemote('vehicle::key::enableGPS', vehKey);
            break;
        case 4:
            mp.events.callRemote('family:transferCarToMe', vehKey);
            break;
    }
});

mp.events.add('familyMenu:setOnGps', (bizId) => {
    if (!checkLastCheck())
        return;
    mp.events.callRemote('family:setOnGps', bizId);
});


mp.events.add('familyMenu:takeMoney', (amount) => {
    if (!checkLastCheck())
        return;
    mp.events.callRemote('family:takeMoney', amount);
});

mp.events.add('familyMenu:putMoney', (amount) => {
    if (!checkLastCheck())
        return;
    mp.events.callRemote('family:putMoney', amount);
});

mp.events.add('familyMenu:pushRegBattle', (place, bizId, weapon, date, time, comment) => {
    mp.events.callRemote('family:createBattle', place, bizId, weapon, date, time, comment);
});

mp.events.add('familyMenu:acceptBattle', (battleId, accepted) => {
    mp.events.callRemote('family:acceptBattle', battleId, accepted);
});


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let members = [];
global.showFamMembersOnMinimup = false;
let checkInterval = 500;
let nextCheck = Date.now();

mp.events.add('familyMenu:saveMapOptions', (showMember) => {
    global.showFamMembersOnMinimup = showMember;
    mp.storage.data.showFamMembersOnMinimup = showMember;
    mp.storage.flush();
    if (global.showFamMembersOnMinimup)
        LoadMembers(global.getVariable(mp.players.local, 'familyuuid', -1))
    else
        LoadMembers(-1);
    global.gui.setData('familyMenu/setMembersOnMap', JSON.stringify(global.showFamMembersOnMinimup));
});

let lastRenderLog = Date.now();

mp.events.add('render', () => {
    try {
        if (!global.showFamMembersOnMinimup)
            return;
        //update positions 
        if (Date.now() > nextCheck) {
            nextCheck = Date.now() + checkInterval;
            members.forEach(member => {
                if (member.blip && mp.blips.exists(member.blip) && member.player && mp.players.exists(member.player) && member.player.handle && member.player.position !== undefined)
                    member.blip.setCoords(member.player.getCoords(true));
            });
        }
    } catch (e) {
        if (global.sendException){
            if(lastRenderLog > Date.now()) return;
            lastRenderLog = Date.now() + 3000;
            mp.serverLog(`syncMemberBlip.render: ${e.name}\n${e.message}\n${e.stack}`);
        } 
    }
});

mp.events.addDataHandler("familyuuid", (player, familyId) => {
    try {
        if (!global.showFamMembersOnMinimup)
            return;
        if (player == mp.players.local) {
            LoadMembers(familyId);
        }
        else if (player.handle != 0) {
            DeleteMember(player);
            if (familyId == global.getVariable(mp.players.local, 'familyuuid', -1))
                AddMember(player)
        }
    } catch (e) {
        if (global.sendException) mp.serverLog(`syncMemberBlip.addDataHandler(familyuuid): ${e.name}\n${e.message}\n${e.stack}`);
    }
});

mp.events.add('entityStreamOut', (player) => {
    try {
        if (!global.showFamMembersOnMinimup)
            return;
        if (!player || player.type !== "player") return;
        DeleteMember(player);
    } catch (error) {
        if (global.sendException) mp.serverLog(`syncMemberBlip.entityStreamOut: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

//Sync data on stream in
mp.events.add("entityStreamIn", (player) => {
    try {
        if (!global.showFamMembersOnMinimup)
            return;
        if (!player || player.type !== "player") return;
        if (global.getVariable(player, 'familyuuid', -2) == global.getVariable(mp.players.local, 'familyuuid', -1))
            AddMember(player)
    } catch (error) {
        if (global.sendException) mp.serverLog(`syncMemberBlip.entityStreamIn: ${e.name}\n${e.message}\n${e.stack}`);

    }
});

function LoadMembers(familyId) {
    try {
        members.forEach(member => {
            if (member.blip && mp.blips.exists(member.blip))
                member.blip.destroy();
        });
        members = [];
        if (familyId > 0) {
            mp.players.forEachInStreamRange(player => {
                if (player !== mp.players.local && familyId == global.getVariable(player, 'familyuuid', -1)) {
                    AddMember(player);
                }
            });
        }
    } catch (error) {
        if (global.sendException) mp.serverLog(`syncMemberBlip.LoadMembers: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

function DeleteMember(player) {    
    let index = members.findIndex(item => item.player == player);
    if (index >= 0) {
        if (members[index].blip && mp.blips.exists(members[index].blip))
            members[index].blip.destroy();
        members.splice(index, 1);
    }
}

function AddMember(player) {
    const blip = mp.blips.new(1, player.getCoords(true),
        {
            name: 'Участник семьи',
            scale: 0.5,
            color: 25,
            alpha: 255,
            drawDistance: 250,
            shortRange: false,
            rotation: 0,
            dimension: 0,
        }
    );
    members.push({ player, blip });
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;
let showWar = false;

let blip = null;

let zone = null;

mp.events.add('familyMp:showWarKey', (value, position, range, isLegal, time) => {
    showWar = value;
    global.gui.setData('hud/setWarZoneShow', value);
    if (!value)
        CloseMenu();
    UpdateBlip(value, position, range, isLegal);
    UpdateZone(value, position, range);
    time = Math.round(time);
    if (time > 0)
        global.gui.setData("timerTemo/setTimer", time);
    else
        global.gui.setData("timerTemo/resetTimer");
})

function UpdateBlip(value, position, range, isLegal) {

    if (blip) {
        mp.game.ui.removeBlip(blip);
        blip = null;
    }
    if (value) {
        blip = mp.game.ui.addBlipForRadius(position.x, position.y, position.z, range);
        mp.game.invoke(global.getNative("SET_BLIP_SPRITE"), blip, 9);
        mp.game.invoke(global.getNative("SET_BLIP_ALPHA"), blip, 120);
        mp.game.invoke(global.getNative("SET_BLIP_COLOUR"), blip, isLegal ? 2 : 1);
    }
}

function UpdateZone(value, position, range) {

    if (zone != null) {
        global.deleteZone(zone);
        zone = null;
    }
    if (value) {
        zone = global.newZone(500, position, range, position, range, Date.now(), 0, 0, 0, 9999)
    }
}

mp.keys.bind(global.Keys.Key_CAPITAL, false, () => {
    if (!showWar)
        return;
    if (showWar && !opened)
        OpenMenu();
    else if (opened)
        CloseMenu();
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        CloseMenu();
});


mp.events.add('familyMp::statMenu::exit', () => {
    CloseMenu();
});

function OpenMenu() {
    if (global.checkIsAnyActivity()) return;
    opened = global.gui.openPage('War');
}

function CloseMenu() {
    global.gui.close();
    opened = false;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;

mp.events.add('government:openVoteMenu', (uuid, data, socialStatus) => {
    
    if (!global.loggedin) return;
    if (global.checkIsAnyActivity()) return;
    if (opened) return;
    global.gui.setData('cityHallWeb/vote/setState', data);
    global.gui.setData('cityHallWeb/setName', JSON.stringify(mp.players.local.name.replace('_', ' ')));
    global.gui.setData('cityHallWeb/setSocialStatus', socialStatus);
    global.gui.setData('cityHallWeb/setUuid', uuid);
    
    global.gui.openPage('CityHallWeb');
    opened = true;
});

mp.events.add('government:closeMenu', () => {
    if (opened)
        CloseMenu();
});


mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        CloseMenu();
});
function CloseMenu() {
    global.gui.close();
    opened = false;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
mp.events.add('voteMenu:sendVote', (vote) => {
    mp.events.callRemote('government:sendVote', vote);
});

mp.events.add('cityHallWeb:sendFormComplaintPage', (fraction, name, text) => {
    mp.events.callRemote('government:createComplaint', fraction, name, text);
});

mp.events.add('cityHallWeb:sendFormBillPage', (currentName, currentUrl) => {
    sendNotify("cl:cityhall:web:1", "cl:cityhall:web:2");
});

mp.events.add('cityHallWeb:sendFormDebatePage', () => {
    sendNotify("cl:cityhall:web:1", "cl:cityhall:web:2");
});

mp.events.add('cityHallWeb:sendMessageToCityhall', () => {
    sendNotify("cl:cityhall:web:1", "cl:cityhall:web:2");
});

mp.events.add('cityHallWeb:sendFormNotaryPage', (currentService, currentProxy, currentNumber, currentMail) => {
    sendNotify("cl:cityhall:web:1", "cl:cityhall:web:2");
});

mp.events.add('cityHallWeb:sendFormRecordingPage', (employee, text) => {
    sendNotify("cl:cityhall:web:1", "cl:cityhall:web:2");
    return;//TODO
    mp.events.callRemote('government:createRecord', employee, text);
});

mp.events.add('cityHallWeb:sendFormNameEditPage', (name, payType) => {
    mp.events.callRemote('government:changeName', name, payType);
});

mp.events.add('cityHallWeb:sendFormRelationshipsReg', (name, payType) => {
    sendNotify("cl:cityhall:web:1", "cl:cityhall:web:2");
    return;
    mp.events.callRemote('government:', name, payType);
});

mp.events.add('cityHallWeb:sendFormRelationshipsDivorce', (partner, dispute) => {
    sendNotify("cl:cityhall:web:1", "cl:cityhall:web:2");
    return;
});

mp.events.add('cityHallWeb:sendFormCertificatePage', (currentSertificate, currentReason) => {
    sendNotify("cl:cityhall:web:1", "cl:cityhall:web:6");
});

mp.events.add('cityHallWeb:sendFormAppointmentPage', () => {
    mp.game.ui.setNewWaypoint(354.0953, -599.1022);
    sendNotify("cl:cityhall:web:3", "cl:cityhall:web:4");
});

mp.events.add('cityHallWeb:sendFormTaxPage', (foundersList, currentCommunity, currentName, currentNation, currentReason, currentPayment) => {
    mp.events.callRemote('government:createFamily', currentName,  currentPayment, foundersList, currentNation);
});

mp.events.add('cityHallWeb:sendFormLetterPage', (letter) => {
    sendNotify("cl:cityhall:web:5", "cl:cityhall:web:6");
});

mp.events.add('cityHallWeb:sendPayDonat', (amount, type) => {
    mp.events.callRemote('government:donateToGov', amount, type, true);
});

mp.events.add('cityHallWeb:sendFormLicensesPage', (currentLicense, currentDesc, currentPayment) => {
    //mp.serverLog(`${currentLicense}, ${currentDesc}, ${currentPayment}`)
    //sendNotify("cl:cityhall:web:1", "cl:cityhall:web:2");
    mp.events.callRemote('government:buyLicense', currentLicense, currentPayment);
});


function sendNotify(title, message) {
    global.gui.setData('cityHallWeb/openModal', JSON.stringify({ title:title, desc: message }));
};


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {mp.events.add('government:setVote', (vote) => {
    global.gui.setData('cityHallWeb/vote/setCurrentVote', JSON.stringify(vote));
});

mp.events.add('government:loadPhilanthropistsList', (data) => {
    global.gui.setData('cityHallWeb/donations/setDonationList', data);
});

mp.events.add('government:sendNotify', (title, message) => {
    global.gui.setData('cityHallWeb/openModal', JSON.stringify({ title:title, desc: message }));
});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {__webpack_require__(180);
__webpack_require__(181);


// let range = 500;
let height = 250;


let timeoutZone = 20
let currentZone =
{
    Center: new mp.Vector3(4991, -4886, -100),
    Range: 0,
}
let nextZone =
{
    Center: new mp.Vector3(4991, -4886, -100),
    Range: 0,
}
let zoneStartTime = Date.now();
let zoneConstrictionTime = 5;

let zoneDamage = 7;
let zoneDamageInterval = 350;



let inBattle = false;
global.isFight = false;
let inZone = true;

let isDemorganFight = false;

let zoneBlip = null;
let damageInterval = null;

//sound
let soundTimeout = null;
let soundVolume = 0.5;

//hud
let phase = 0;
let myKills = 0;
let allPlayers = 0;

mp.events.add('render', () => {
    if (!inBattle && !global.isDemorgan)
        return;
    let color = getColor();
    let zone = getZone();
    mp.game.graphics.drawMarker(
        1,
        zone.Center.x, zone.Center.y, zone.Center.z,
        0, 0, 0,
        0, 0, 0,
        zone.Range * 1.981, zone.Range * 1.981, height,
        color, 255 - color, 50, 156,
        false, false, 2,
        false, null, null, false
    );

    if (!global.isFight && !isDemorganFight)
        return;
    let dist = mp.game.gameplay.getDistanceBetweenCoords(zone.Center.x, zone.Center.y, zone.Center.z, mp.players.local.position.x, mp.players.local.position.y, zone.Center.z, true)
    if (inZone != dist < zone.Range)
        OnPlayerChangeInCircle(dist < zone.Range);

    // mp.game.graphics.drawText(`dist - ${dist}, zone.Range - ${zone.Range}`, [0.5, 0.035], {
    //     font: 7,
    //     color: [255, 100, 100, 185],
    //     scale: [0.4, 0.4],
    //     outline: true
    // });
    // mp.game.graphics.drawText(`timecyclesIndex - ${timecyclesIndex}, currTimecycle - ${currTimecycle}`, [0.5, 0.005], {
    //     font: 7,
    //     color: [255, 100, 100, 185],
    //     scale: [0.4, 0.4],
    //     outline: true
    // });
})

function getColor() {
    let color = 255;
    if (zoneStartTime > Date.now())
        return color;
    if (timeoutZone > 0) {
        color = Math.round(getTimeCoeff(zoneStartTime, timeoutZone) * 255);
    }
    return color;
}

function getZone() {
    let length = getTimeCoeff(zoneStartTime + (timeoutZone - zoneConstrictionTime) * 1000, zoneConstrictionTime);
    let zone =
    {
        Center: new mp.Vector3(currentZone.Center.x + (nextZone.Center.x - currentZone.Center.x) * length, currentZone.Center.y + (nextZone.Center.y - currentZone.Center.y) * length, currentZone.Center.Z),
        Range: nextZone.Range + (currentZone.Range - nextZone.Range) * (1 - length)
    }
    return zone;
}

function getTimeCoeff(startTime, timeLength) {
    if (timeLength == 0)
        return 0;
    let value = (Date.now() - startTime) / (timeLength * 1000);
    if (value > 1)
        return 1;
    if (value < 0)
        return 0;
    return value;
}
mp.events.add('royalBattle:createZone', (currZoneJson, nextZoneJson, constrictionTime, zoneTimer, isDemorgan) => {
    currentZone = parseZone(currZoneJson);
    nextZone = parseZone(nextZoneJson);
    zoneConstrictionTime = constrictionTime
    zoneStartTime = Date.now();
    timeoutZone = zoneTimer;
    setTimeout(() => {
        updateBlip(nextZone);
    }, (timeoutZone - constrictionTime) * 500);

    setTimeout(() => {
        soundTimeout = PlaySound('constrictionZone');
    }, (timeoutZone - constrictionTime) * 1000);
    if (isDemorgan) {
        isDemorganFight = true;
        PlaySound('demorganStartBattle')
    } else {
        inBattle = true;
        global.isFight = true;
        phase = 1;
        global.gui.setData('hud/setPhaseTimer', JSON.stringify({ show: true, title: `Phase ${phase}`, time: timeoutZone }));
    }
})

mp.events.add('royalBattle:updateZone', (nextZoneJson, constrictionTime, zoneTimer, isDemorgan) => {
    currentZone = nextZone
    nextZone = parseZone(nextZoneJson);
    zoneConstrictionTime = constrictionTime
    zoneStartTime = Date.now();
    timeoutZone = zoneTimer;
    setTimeout(() => {
        updateBlip(nextZone);
    }, (timeoutZone - constrictionTime) * 500);
    setTimeout(() => {
        soundTimeout = PlaySound('constrictionZone');
    }, (timeoutZone - constrictionTime) * 1000);
    if (!isDemorgan) {
        global.gui.setData('hud/setPhaseTimer', JSON.stringify({ show: false, title: ``, time: 0 }));
        phase++;
        global.gui.setData('hud/setPhaseTimer', JSON.stringify({ show: true, title: `Phase ${phase}`, time: timeoutZone }));
    }
})

function parseZone(zoneJson) {
    let zone = JSON.parse(zoneJson);
    zone.Center = new mp.Vector3(zone.Center.x, zone.Center.y, zone.Center.z);
    return zone;
}

function updateBlip(zone) {
    if (zoneBlip) {
        mp.game.ui.removeBlip(zoneBlip);
    }
    if (!inBattle && !global.isDemorgan)
        return;
    if (zone != null) {
        zoneBlip = mp.game.ui.addBlipForRadius(zone.Center.x, zone.Center.y, zone.Center.z, zone.Range);
        mp.game.invoke(global.getNative("SET_BLIP_SPRITE"), zoneBlip, 9);
        mp.game.invoke(global.getNative("SET_BLIP_ALPHA"), zoneBlip, 120);
        mp.game.invoke(global.getNative("SET_BLIP_COLOUR"), zoneBlip, 2);
    }
}

mp.events.add('royalBattle:startBattle', (countPlayers) => {
    allPlayers = countPlayers;
    myKills = 0;
    global.gui.setData('hud/setRoyalBattleStats', JSON.stringify({ alive: allPlayers, kills: myKills }));

    mp.players.local.freezePosition(true);
    // global.gui.setData("setLoadScreen", 'true');
    setTimeout(() => {
        mp.players.local.freezePosition(false);
        // global.gui.setData("setLoadScreen", 'false');
        mp.players.local.taskParachute(true);
        //PlaySound('startBattle');
    }, 2000);
});

mp.events.add('royalBattle:updateKills', (kills) => {
    myKills = kills;
    global.gui.setData('hud/setRoyalBattleStats', JSON.stringify({ alive: allPlayers, kills: myKills }));
});

mp.events.add('royalBattle:updateCountPlayers', (countPlayers) => {
    allPlayers = countPlayers;
    global.gui.setData('hud/setRoyalBattleStats', JSON.stringify({ alive: allPlayers, kills: myKills }));
});

mp.events.add('royalBattle:endBattle', (timeToSendToStartPosition) => {
    global.isFight = false;
    if (damageInterval != null) {
        clearInterval(damageInterval);
        damageInterval = null;
    }
    if (soundTimeout != null) {
        clearTimeout(soundTimeout);
        soundTimeout = null;
    }
    setTimeout(() => {
        inBattle = false;
        // global.gui.setData("setLoadScreen", 'true');
        setTimeout(() => {
            // global.gui.setData("setLoadScreen", 'false');
        }, 2000);
        updateBlip(null);
        global.gui.setData('hud/setPhaseTimer', JSON.stringify({ show: false, title: '', time: 0 }));
    }, timeToSendToStartPosition - 500);


    currentZone =
    {
        Center: new mp.Vector3(4991, -4886, -100),
        Range: 0,
    }
    nextZone =
    {
        Center: new mp.Vector3(4991, -4886, -100),
        Range: 0,
    }
});
mp.events.add('royalBattle:endDemorganBattle', () => {
    isDemorganFight = false;
});

mp.events.add("onConnectionLost", () => {
    try {
        updateBlip(null);
    } catch (e) {
        mp.game.graphics.notify(` ${e.name}\n${e.message}\n${e.stack}`);
    }
});

function OnPlayerChangeInCircle(toggle) {
    inZone = toggle;
    if (damageInterval != null) 
	{
        clearInterval(damageInterval);
        damageInterval = null;
    }
	if (inZone) return;
	
	mp.events.call('notify', 0, 9, "Вернитесь в зону, чтобы не терять здоровье.", 3000);
    damageInterval = setInterval(() => 
	{
		DamagePlayer()
	}, 1500);
}

function DamagePlayer() {
    mp.game.graphics.setTimecycleModifier('damage');
    mp.players.local.applyDamageTo(zoneDamage, true);
    setTimeout(() => {
        mp.game.graphics.setTimecycleModifier('default');
    }, zoneDamageInterval);
}


function PlaySound(soundName) {
    if (!inBattle && !global.isDemorgan)
        return;
    global.gui.playSound(soundName, soundVolume, false);
}

// mp.keys.bind(global.Keys.Key_NUMPAD8, false, function () {
//     timecyclesIndex++;
//     currTimecycle = global.timecycles[timecyclesIndex];
//     mp.game.graphics.setTimecycleModifier(currTimecycle);
// });

// mp.keys.bind(global.Keys.Key_NUMPAD2, false, function () {
//     timecyclesIndex--;
//     if (timecyclesIndex < 0)
//         timecyclesIndex = 0;
//     currTimecycle = global.timecycles[timecyclesIndex];
//     mp.game.graphics.setTimecycleModifier(currTimecycle);
// });

// mp.keys.bind(global.Keys.Key_NUMPAD1, false, function () {
// });
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {global.timecycles = [
'AirRaceBoost01',
'AirRaceBoost02',
'AmbientPUSH',
'AP1_01_B_IntRefRange',
'AP1_01_C_NoFog',
'ArenaEMP',
'ArenaEMP_Blend',
'ArenaWheelPurple01',
'ArenaWheelPurple02',
'Bank_HLWD',
'Barry1_Stoned',
'BarryFadeOut',
'baseTONEMAPPING',
'BeastIntro01',
'BeastIntro02',
'BeastLaunch01',
'BeastLaunch02',
'BikerFilter',
'BikerForm01',
'BikerFormFlash',
'Bikers',
'BikersSPLASH',
'blackNwhite',
'BlackOut',
'BleepYellow01',
'BleepYellow02',
'Bloom',
'BloomLight',
'BloomMid',
'BombCam01',
'BombCamFlash',
'Broken_camera_fuzz',
'buggy_shack',
'buildingTOP',
'BulletTimeDark',
'BulletTimeLight',
'CAMERA_BW',
'CAMERA_secuirity',
'CAMERA_secuirity_FUZZ',
'canyon_mission',
'carMOD_underpass',
'carpark',
'carpark_dt1_02',
'carpark_dt1_03',
'Carpark_MP_exit',
'cashdepot',
'cashdepotEMERGENCY',
'casino_brightroom',
'casino_mainfloor',
'casino_mainWhiteFloor',
'casino_managementlobby',
'casino_managementOff',
'casino_managersoffice',
'CasinoBathrooms',
'cBank_back',
'cBank_front',
'ch2_tunnel_whitelight',
'CH3_06_water',
'CHOP',
'cinema',
'cinema_001',
'cops',
'CopsSPLASH',
'crane_cam',
'crane_cam_cinematic',
'CrossLine01',
'CrossLine02',
'CS1_railwayB_tunnel',
'CS3_rail_tunnel',
'CUSTOM_streetlight',
'damage',
'DeadlineNeon01',
'default',
'DefaultColorCode',
'dlc_casino_carpark',
'DLC_Casino_Garage',
'DONT_overide_sunpos',
'Dont_tazeme_bro',
'dont_tazeme_bro_b',
'downtown_FIB_cascades_opt',
'DrivingFocusDark',
'DrivingFocusLight',
'Drone_FishEye_Lens',
'DRUG_2_drive',
'Drug_deadman',
'Drug_deadman_blend',
'drug_drive_blend01',
'drug_drive_blend02',
'drug_flying_01',
'drug_flying_02',
'drug_flying_base',
'DRUG_gas_huffin',
'drug_wobbly',
'Drunk',
'dying',
'eatra_bouncelight_beach',
'epsilion',
'exile1_exit',
'exile1_plane',
'ExplosionJosh',
'EXT_FULLAmbientmult_art',
'ext_int_extlight_large',
'EXTRA_bouncelight',
'eyeINtheSKY',
'Facebook_NEW',
'facebook_serveroom',
'FIB_5',
'FIB_6',
'FIB_A',
'FIB_B',
'FIB_interview',
'FIB_interview_optimise',
'FinaleBank',
'FinaleBankexit',
'FinaleBankMid',
'fireDEPT',
'FORdoron_delete',
'Forest',
'fp_vig_black',
'fp_vig_blue',
'fp_vig_brown',
'fp_vig_gray',
'fp_vig_green',
'fp_vig_red',
'FrankilinsHOUSEhills',
'frankilnsAUNTS_new',
'frankilnsAUNTS_SUNdir',
'FRANKLIN',
'FranklinColorCode',
'FranklinColorCodeBasic',
'FranklinColorCodeBright',
'FullAmbientmult_interior',
'gallery_refmod',
'garage',
'gen_bank',
'glasses_black',
'Glasses_BlackOut',
'glasses_blue',
'glasses_brown',
'glasses_Darkblue',
'glasses_green',
'glasses_orange',
'glasses_pink',
'glasses_purple',
'glasses_red',
'glasses_Scuba',
'glasses_VISOR',
'glasses_yellow',
'gorge_reflection_gpu',
'gorge_reflectionoffset',
'gorge_reflectionoffset2',
'graveyard_shootout',
'grdlc_int_02',
'grdlc_int_02_trailer_cave',
'gunclub',
'gunclubrange',
'gunshop',
'gunstore',
'half_direct',
'hangar_lightsmod',
'Hanger_INTmods',
'heathaze',
'heist_boat',
'heist_boat_engineRoom',
'heist_boat_norain',
'helicamfirst',
'heliGunCam',
'Hicksbar',
'HicksbarNEW',
'hillstunnel',
'Hint_cam',
'hitped',
'hud_def_blur',
'hud_def_blur_switch',
'hud_def_colorgrade',
'hud_def_desat_cold',
'hud_def_desat_cold_kill',
'hud_def_desat_Franklin',
'hud_def_desat_Michael',
'hud_def_desat_Neutral',
'hud_def_desat_switch',
'hud_def_desat_Trevor',
'hud_def_desatcrunch',
'hud_def_flash',
'hud_def_focus',
'hud_def_Franklin',
'hud_def_lensdistortion',
'hud_def_lensdistortion_subtle',
'hud_def_Michael',
'hud_def_Trevor',
'ImpExp_Interior_01',
'IMpExt_Interior_02',
'IMpExt_Interior_02_stair_cage',
'InchOrange01',
'InchOrange02',
'InchPickup01',
'InchPickup02',
'InchPurple01',
'InchPurple02',
'INT_FullAmbientmult',
'INT_FULLAmbientmult_art',
'INT_FULLAmbientmult_both',
'INT_garage',
'INT_mall',
'INT_NO_fogALPHA',
'INT_NoAmbientmult',
'INT_NoAmbientmult_art',
'INT_NoAmbientmult_both',
'INT_NOdirectLight',
'INT_nowaterREF',
'INT_posh_hairdresser',
'INT_smshop',
'INT_smshop_indoor_bloom',
'INT_smshop_inMOD',
'INT_smshop_outdoor_bloom',
'INT_streetlighting',
'INT_trailer_cinema',
'id1_11_tunnel',
'impexp_interior_01_lift',
'int_amb_mult_large',
'int_arena_01',
'int_arena_Mod',
'int_arena_Mod_garage',
'int_arena_VIP',
'int_Barber1',
'int_carmod_small',
'int_carrier_control',
'int_carrier_control_2',
'int_carrier_hanger',
'int_carrier_rear',
'int_carrier_stair',
'int_carshowroom',
'int_chopshop',
'int_clean_extlight_large',
'int_clean_extlight_none',
'int_clean_extlight_small',
'int_ClothesHi',
'int_clotheslow_large',
'int_cluckinfactory_none',
'int_cluckinfactory_small',
'int_ControlTower_none',
'int_ControlTower_small',
'int_dockcontrol_small',
'int_extlght_sm_cntrst',
'int_extlight_large',
'int_extlight_large_fog',
'int_extlight_none',
'int_extlight_none_dark',
'int_extlight_none_dark_fog',
'int_extlight_none_fog',
'int_extlight_small',
'int_extlight_small_clipped',
'int_extlight_small_fog',
'int_Farmhouse_none',
'int_Farmhouse_small',
'int_FranklinAunt_small',
'int_GasStation',
'int_hanger_none',
'int_hanger_small',
'int_Hospital_Blue',
'int_Hospital_BlueB',
'int_hospital_dark',
'int_Hospital_DM',
'int_hospital_small',
'int_Hospital2_DM',
'int_lesters',
'int_Lost_none',
'int_Lost_small',
'int_methlab_small',
'int_motelroom',
'int_office_Lobby',
'int_office_LobbyHall',
'int_tattoo',
'int_tattoo_B',
'int_tunnel_none_dark',
'interior_WATER_lighting',
'introblue',
'jewel_gas',
'jewel_optim',
'jewelry_entrance',
'jewelry_entrance_INT',
'jewelry_entrance_INT_fog',
'Kifflom',
'KT_underpass',
'lab_none',
'lab_none_dark',
'lab_none_dark_fog',
'lab_none_dark_OVR',
'lab_none_exit',
'lab_none_exit_OVR',
'LectroDark',
'LectroLight',
'LIGHTSreduceFALLOFF',
'li',
'LifeInvaderLOD',
'lightning',
'lightning_cloud',
'lightning_strong',
'lightning_weak',
'LightPollutionHills',
'lightpolution',
'LODmult_global_reduce',
'LODmult_global_reduce_NOHD',
'LODmult_HD_orphan_LOD_reduce',
'LODmult_HD_orphan_reduce',
'LODmult_LOD_reduce',
'LODmult_SLOD1_reduce',
'LODmult_SLOD2_reduce',
'LODmult_SLOD3_reduce',
'lodscaler',
'LostTimeDark',
'LostTimeFlash',
'LostTimeLight',
'maxlodscaler',
'metro',
'METRO_platform',
'METRO_Tunnels',
'METRO_Tunnels_entrance',
'MichaelColorCode',
'MichaelColorCodeBasic',
'MichaelColorCodeBright',
'MichaelsDarkroom',
'MichaelsDirectional',
'MichaelsNODirectional',
'micheal',
'micheals_lightsOFF',
'michealspliff',
'michealspliff_blend',
'michealspliff_blend02',
'militarybase_nightlight',
'mineshaft',
'morebloom',
'morgue_dark',
'morgue_dark_ovr',
'Mp_apart_mid',
'MP_Arena_theme_atlantis',
'MP_Arena_theme_evening',
'MP_Arena_theme_hell',
'MP_Arena_theme_midday',
'MP_Arena_theme_morning',
'MP_Arena_theme_night',
'MP_Arena_theme_saccharine',
'MP_Arena_theme_sandstorm',
'MP_Arena_theme_scifi_night',
'MP_Arena_theme_storm',
'MP_Arena_theme_toxic',
'MP_Arena_VIP',
'mp_battle_int01',
'mp_battle_int01_dancefloor',
'mp_battle_int01_dancefloor_OFF',
'mp_battle_int01_entry',
'mp_battle_int01_garage',
'mp_battle_int01_office',
'mp_battle_int02',
'mp_battle_int03',
'mp_battle_int03_tint1',
'mp_battle_int03_tint2',
'mp_battle_int03_tint3',
'mp_battle_int03_tint4',
'mp_battle_int03_tint5',
'mp_battle_int03_tint6',
'mp_battle_int03_tint7',
'mp_battle_int03_tint8',
'mp_battle_int03_tint9',
'mp_bkr_int01_garage',
'mp_bkr_int01_small_rooms',
'mp_bkr_int01_transition',
'mp_bkr_int02_garage',
'mp_bkr_int02_hangout',
'mp_bkr_int02_small_rooms',
'mp_bkr_ware01',
'mp_bkr_ware02_dry',
'mp_bkr_ware02_standard',
'mp_bkr_ware02_upgrade',
'mp_bkr_ware03_basic',
'mp_bkr_ware03_upgrade',
'mp_bkr_ware04',
'mp_bkr_ware05',
'MP_Bull_tost',
'MP_Bull_tost_blend',
'MP_casino_apartment_bar',
'MP_casino_apartment_barPARTY',
'MP_casino_apartment_barPARTY_0',
'MP_casino_apartment_barPARTY_01',
'MP_casino_apartment_barPARTY_2',
'MP_casino_apartment_Bath',
'MP_casino_apartment_changing',
'MP_casino_apartment_cinema',
'MP_casino_apartment_colour0',
'MP_casino_apartment_colour1',
'MP_casino_apartment_colour2',
'MP_casino_apartment_exec',
'MP_casino_apartment_lobby',
'MP_casino_apartment_lounge',
'MP_casino_apartment_MBed',
'MP_casino_apartment_office',
'MP_casino_apartment_spa',
'MP_corona_heist',
'MP_corona_heist_blend',
'MP_corona_heist_BW',
'MP_corona_heist_BW_night',
'MP_corona_heist_DOF',
'MP_corona_heist_night',
'MP_corona_heist_night_blend',
'MP_corona_selection',
'MP_corona_switch',
'MP_corona_tournament',
'MP_corona_tournament_DOF',
'MP_death_grade',
'MP_death_grade_blend01',
'MP_death_grade_blend02',
'MP_deathfail_night',
'mp_exec_office_01',
'mp_exec_office_02',
'mp_exec_office_03',
'mp_exec_office_03_blue',
'mp_exec_office_03C',
'mp_exec_office_04',
'mp_exec_office_05',
'mp_exec_office_06',
'mp_exec_warehouse_01',
'MP_Garage_L',
'mp_gr_int01_black',
'mp_gr_int01_grey',
'mp_gr_int01_white',
'MP_H_01_Bathroom',
'MP_H_01_Bedroom',
'MP_H_01_New',
'MP_H_01_New_Bathroom',
'MP_H_01_New_Bedroom',
'MP_H_01_New_Study',
'MP_H_01_Study',
'MP_H_02',
'MP_H_04',
'mp_h_05',
'MP_H_06',
'mp_h_07',
'mp_h_08',
'MP_heli_cam',
'mp_imx_intwaremed',
'mp_imx_intwaremed_office',
'mp_imx_mod_int_01',
'MP_intro_logo',
'MP_job_end_night',
'MP_job_load',
'MP_job_load_01',
'MP_job_load_02',
'MP_job_lose',
'MP_job_preload',
'MP_job_preload_blend',
'MP_job_preload_night',
'MP_job_win',
'MP_Killstreak',
'MP_Killstreak_blend',
'mp_lad_day',
'mp_lad_judgment',
'mp_lad_night',
'MP_Loser',
'MP_Loser_blend',
'MP_lowgarage',
'MP_MedGarage',
'mp_nightshark_shield_fp',
'MP_Powerplay',
'MP_Powerplay_blend',
'MP_race_finish',
'MP_select',
'mp_smg_int01_han',
'mp_smg_int01_han_blue',
'mp_smg_int01_han_red',
'mp_smg_int01_han_yellow',
'Mp_Stilts',
'Mp_Stilts_gym',
'Mp_Stilts_gym2',
'Mp_Stilts2',
'Mp_Stilts2_bath',
'MP_Studio_Lo',
'mp_x17dlc_base',
'mp_x17dlc_base_dark',
'mp_x17dlc_base_darkest',
'mp_x17dlc_facility',
'mp_x17dlc_facility_conference',
'mp_x17dlc_facility2',
'mp_x17dlc_in_sub',
'mp_x17dlc_in_sub_no_reflection',
'mp_x17dlc_int_01',
'mp_x17dlc_int_01_tint1',
'mp_x17dlc_int_01_tint2',
'mp_x17dlc_int_01_tint3',
'mp_x17dlc_int_01_tint4',
'mp_x17dlc_int_01_tint5',
'mp_x17dlc_int_01_tint6',
'mp_x17dlc_int_01_tint7',
'mp_x17dlc_int_01_tint8',
'mp_x17dlc_int_01_tint9',
'mp_x17dlc_int_02',
'mp_x17dlc_int_02_hangar',
'mp_x17dlc_int_02_outdoor_intro_camera',
'mp_x17dlc_int_02_tint1',
'mp_x17dlc_int_02_tint2',
'mp_x17dlc_int_02_tint3',
'mp_x17dlc_int_02_tint4',
'mp_x17dlc_int_02_tint5',
'mp_x17dlc_int_02_tint6',
'mp_x17dlc_int_02_tint7',
'mp_x17dlc_int_02_tint8',
'mp_x17dlc_int_02_tint9',
'mp_x17dlc_int_02_vehicle_avenger_camera',
'mp_x17dlc_int_02_vehicle_workshop_camera',
'mp_x17dlc_int_02_weapon_avenger_camera',
'mp_x17dlc_int_silo',
'mp_x17dlc_int_silo_escape',
'mp_x17dlc_lab',
'mp_x17dlc_lab_loading_bay',
'MPApart_H_01',
'MPApart_H_01_gym',
'MPApartHigh',
'MPApartHigh_palnning',
'mugShot',
'mugShot_lineup',
'Multipayer_spectatorCam',
'multiplayer_ped_fight',
'nervousRON_fog',
'NeutralColorCode',
'NeutralColorCodeBasic',
'NeutralColorCodeBright',
'NeutralColorCodeLight',
'NEW_abattoir',
'new_bank',
'NEW_jewel',
'NEW_jewel_EXIT',
'NEW_lesters',
'new_MP_Garage_L',
'NEW_ornate_bank',
'NEW_ornate_bank_entrance',
'NEW_ornate_bank_office',
'NEW_ornate_bank_safe',
'New_sewers',
'NEW_shrinksOffice',
'NEW_station_unfinished',
'new_stripper_changing',
'NEW_trevorstrailer',
'NEW_tunnels',
'NEW_tunnels_ditch',
'new_tunnels_entrance',
'NEW_tunnels_hole',
'NEW_yellowtunnels',
'NewMicheal',
'NewMicheal_night',
'NewMicheal_upstairs',
'NewMichealgirly',
'NewMichealstoilet',
'NewMichealupstairs',
'NewMod',
'nextgen',
'NG_blackout',
'NG_deathfail_BW_base',
'NG_deathfail_BW_blend01',
'NG_deathfail_BW_blend02',
'NG_filmic01',
'NG_filmic02',
'NG_filmic03',
'NG_filmic04',
'NG_filmic05',
'NG_filmic06',
'NG_filmic07',
'NG_filmic08',
'NG_filmic09',
'NG_filmic10',
'NG_filmic11',
'NG_filmic12',
'NG_filmic13',
'NG_filmic14',
'NG_filmic15',
'NG_filmic16',
'NG_filmic17',
'NG_filmic18',
'NG_filmic19',
'NG_filmic20',
'NG_filmic21',
'NG_filmic22',
'NG_filmic23',
'NG_filmic24',
'NG_filmic25',
'NG_filmnoir_BW01',
'NG_filmnoir_BW02',
'NG_first',
'nightvision',
'NO_coronas',
'NO_fog_alpha',
'NO_streetAmbient',
'NO_weather',
'NoAmbientmult',
'NoAmbientmult_interior',
'NOdirectLight',
'NoPedLight',
'NOrain',
'OrbitalCannon',
'overwater',
'Paleto',
'paleto_nightlight',
'paleto_opt',
'PennedInDark',
'PennedInLight',
'PERSHING_water_reflect',
'phone_cam',
'phone_cam1',
'phone_cam10',
'phone_cam11',
'phone_cam12',
'phone_cam13',
'phone_cam2',
'phone_cam3',
'phone_cam3_REMOVED',
'phone_cam4',
'phone_cam5',
'phone_cam6',
'phone_cam7',
'phone_cam8',
'phone_cam8_REMOVED',
'phone_cam9',
'plane_inside_mode',
'player_transition',
'player_transition_no_scanlines',
'player_transition_scanlines',
'PlayerSwitchNeutralFlash',
'PlayerSwitchPulse',
'plaza_carpark',
'PoliceStation',
'PoliceStationDark',
'polluted',
'poolsidewaterreflection2',
'PORT_heist_underwater',
'powerplant_nightlight',
'powerstation',
'PPFilter',
'PPGreen01',
'PPGreen02',
'PPOrange01',
'PPOrange02',
'PPPink01',
'PPPink02',
'PPPurple01',
'PPPurple02',
'prison_nightlight',
'projector',
'prologue',
'prologue_ending_fog',
'prologue_ext_art_amb',
'prologue_reflection_opt',
'prologue_shootout',
'Prologue_shootout_opt',
'pulse',
'RaceTurboDark',
'RaceTurboFlash',
'RaceTurboLight',
'ranch',
'REDMIST',
'REDMIST_blend',
'ReduceDrawDistance',
'ReduceDrawDistanceMAP',
'ReduceDrawDistanceMission',
'reducelightingcost',
'ReduceSSAO',
'reducewaterREF',
'refit',
'reflection_correct_ambient',
'RemixDrone',
'RemoteSniper',
'resvoire_reflection',
'rply_brightness',
'rply_brightness_neg',
'rply_contrast',
'rply_contrast_neg',
'rply_motionblur',
'rply_saturation',
'rply_saturation_neg',
'rply_vignette',
'rply_vignette_neg',
'SALTONSEA',
'sandyshore_nightlight',
'SAWMILL',
'scanline_cam',
'scanline_cam_cheap',
'scope_zoom_in',
'scope_zoom_out',
'secret_camera',
'services_nightlight',
'shades_pink',
'shades_yellow',
'SheriffStation',
'ship_explosion_underwater',
'ship_explosion_underwater',
'ship_lighting',
'Shop247',
'Shop247_none',
'sleeping',
'SmugglerCheckpoint01',
'SmugglerCheckpoint02',
'SmugglerFlash',
'Sniper',
'SP1_03_drawDistance',
'spectator1',
'spectator10',
'spectator2',
'spectator3',
'spectator4',
'spectator5',
'spectator6',
'spectator7',
'spectator8',
'spectator9',
'StadLobby',
'stc_coroners',
'stc_deviant_bedroom',
'stc_deviant_lounge',
'stc_franklinsHouse',
'stc_trevors',
'stoned',
'stoned_aliens',
'stoned_cutscene',
'stoned_monkeys',
'StreetLighting',
'StreetLightingJunction',
'StreetLightingtraffic',
'STRIP_changing',
'STRIP_nofog',
'STRIP_office',
'STRIP_stage',
'StuntFastDark',
'StuntFastLight',
'StuntSlowDark',
'StuntSlowLight',
'subBASE_water_ref',
'sunglasses',
'superDARK',
'switch_cam_1',
'switch_cam_2',
'telescope',
'TinyGreen01',
'TinyGreen02',
'TinyPink01',
'TinyPink02',
'TinyRacerMoBlur',
'torpedo',
'traffic_skycam',
'trailer_explosion_optimise',
'TransformFlash',
'TransformRaceFlash',
'TREVOR',
'TrevorColorCode',
'TrevorColorCodeBasic',
'TrevorColorCodeBright',
'Trevors_room',
'trevorspliff',
'trevorspliff_blend',
'trevorspliff_blend02',
'Tunnel',
'tunnel_entrance',
'tunnel_entrance_INT',
'TUNNEL_green',
'TUNNEL_green_ext',
'Tunnel_green1',
'tunnel_id1_11',
'TUNNEL_orange',
'TUNNEL_orange_exterior',
'TUNNEL_white',
'TUNNEL_yellow',
'TUNNEL_yellow_ext',
'ufo',
'ufo_deathray',
'underwater',
'underwater_deep',
'underwater_deep_clear',
'v_abattoir',
'V_Abattoir_Cold',
'v_bahama',
'v_cashdepot',
'V_CIA_Facility',
'v_dark',
'V_FIB_IT3',
'V_FIB_IT3_alt',
'V_FIB_IT3_alt5',
'V_FIB_stairs',
'v_foundry',
'v_janitor',
'v_jewel2',
'v_metro',
'V_Metro_station',
'V_Metro2',
'v_michael',
'v_michael_lounge',
'V_Office_smoke',
'V_Office_smoke_ext',
'V_Office_smoke_Fire',
'v_recycle',
'V_recycle_dark',
'V_recycle_light',
'V_recycle_mainroom',
'v_rockclub',
'V_Solomons',
'V_strip_nofog',
'V_strip_office',
'v_strip3',
'v_strpchangerm',
'v_sweat',
'v_sweat_entrance',
'v_sweat_NoDirLight',
'v_torture',
'Vagos',
'vagos_extlight_small',
'VAGOS_new_garage',
'VAGOS_new_hangout',
'VagosSPLASH',
'VC_tunnel_entrance',
'vehicle_subint',
'venice_canal_tunnel',
'vespucci_garage',
'VolticBlur',
'VolticFlash',
'VolticGold',
'warehouse',
'WAREHOUSE',
'WarpCheckpoint',
'WATER_lab_cooling',
'WATER_CH2_06_01_03',
'WATER_CH2_06_02',
'WATER_CH2_06_04',
'WATER_cove',
'WATER_hills',
'WATER_ID2_21',
'WATER_lab',
'WATER_lab_cooling',
'WATER_militaryPOOP',
'WATER_muddy',
'WATER_port',
'WATER_REF_malibu',
'WATER_refmap_high',
'WATER_refmap_hollywoodlake',
'WATER_refmap_low',
'WATER_refmap_med',
'WATER_refmap_off',
'WATER_refmap_poolside',
'WATER_refmap_silverlake',
'WATER_refmap_venice',
'WATER_refmap_verylow',
'WATER_resevoir',
'WATER_RichmanStuntJump',
'WATER_river',
'WATER_salton',
'WATER_salton_bottom',
'WATER_shore',
'WATER_silty',
'WATER_silverlake',
'WeaponUpgrade',
'whitenightlighting',
'WhiteOut',
'winning_room',
'yacht_DLC',
'yell_tunnel_nodirect']
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let openedEnterMenu = false;
let openedStatsMenu = false;

//Enter menu
mp.events.add('royalBattle:openMenuEnterBattle', (isReg, playersCount, secondsUntilStart) => {    
    openedEnterMenu = global.gui.openPage('BattlegroundReg');
    if (!openedEnterMenu) return;
	
    global.gui.setData('battlegroundReg/setData', JSON.stringify({isReg:isReg, peopleCount:playersCount}));
	global.gui.setData('battlegroundReg/setDate', secondsUntilStart);    
})

mp.events.add('battlegroundReg:registerForBattle', () => {
    mp.events.callRemote('royalBattle:registerForBattle');
})

//Stats menu
mp.events.add('royalBattle:openBattleStats', (stats) => {
    openedStatsMenu = global.gui.openPage('BattlegroundStats');
    if (!openedStatsMenu) return;
    global.gui.setData('battlegroundStats/setData', stats);    
})

mp.events.add('royalBattle:sendSearchBattleStats', (stats) => {
    global.gui.setData('battlegroundStats/setListSearch', stats);
})

mp.events.add('battlegroundStats:setSearch', (value) => {
    mp.events.callRemote('royalBattle:searchStats', value);
})

//Close menus
mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (openedEnterMenu)
        closeEnterMenu();
    if (openedStatsMenu)
        closeStatsMenu();
});

mp.events.add('battlegroundReg:closeModal', () => {
    if (openedEnterMenu)
        closeEnterMenu();
})

function closeEnterMenu() {
    global.gui.close();
    openedEnterMenu = false;
}

function closeStatsMenu() {
    global.gui.close();
    openedStatsMenu = false;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let answersTemplates = [];

let reports = {};

let opened = false;

let openPage = null;

let openReport = -1;

mp.keys.bind(global.Keys.Key_F6, false, function () {
    if (opened)
        CloseMenu();
    else
        OpenMenu()
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        CloseMenu();
});

mp.events.add('report:closemenu', () => {
    CloseMenu();
});

function OpenMenu() {
    if (!global.loggedin|| global.getVariable(mp.players.local, 'ALVL', 0) < 1) return;
    if (global.checkIsAnyActivity()) return;
    opened = global.gui.openPage('ReportMenu');
    global.gui.setData('reportMenu/refreshCurrentChat');
}

function CloseMenu() {
    global.gui.close();
    opened = false;
}

mp.events.add('report:addreport', (reportJson) => {
    let report = JSON.parse(reportJson);
    if(!report) return;
    reports[report.ID] = {
        id: report.ID,
        time: report.OpenedDate * 1000,
        reporterName: report.Author,
        reporterId: report.AuthorApiID,
        reporterStatus: report.StateAuthor,
        adminName: report.AdminName,
        closed: report.Closed,
        unreadMessages: 0,
        messages: report.Answers
    };
    global.gui.setData('reportMenu/addReport', JSON.stringify(reports[report.ID]));
    UpdateClosedReport();
});

mp.events.add('report:loadreports', (reportListJson, access) => {    
    if (!mp.storage.data.answerTemplate)
        mp.storage.data.answerTemplate = [];
    global.gui.setData('reportMenu/setAnswersTemplates', JSON.stringify(mp.storage.data.answerTemplate));
    global.gui.setData('reportMenu/setMySettingsName', JSON.stringify(mp.players.local.name.replace('_',' ')));

    let reportList = JSON.parse(reportListJson);
    reportList.forEach(report => {
        reports[report.ID] = {
            id: report.ID,
            time: report.OpenedDate * 1000,
            reporterName: report.Author,
            reporterId: report.AuthorApiID,
            reporterStatus: report.StateAuthor,
            adminName: report.AdminName,
            closed: report.Closed,
            unreadMessages: 0,
            messages: report.Answers
        };
    });
    global.gui.setData('reportMenu/setReports', JSON.stringify(Object.values(reports).filter(item => item.closed == false && item.adminName == null)));
    global.gui.setData('reportMenu/setMyReports', JSON.stringify(Object.values(reports).filter(item => item.closed == true && item.adminName == mp.players.local.name.replace('_',' '))));
    global.gui.setData('reportMenu/setReportsLogs', JSON.stringify(Object.values(reports).filter(item => access && item.closed == true || (item.closed == false && item.adminName != null))));
    UpdateClosedReport();
});

mp.events.add('report:updatetakereport', (access, reportId, adminName) => {
    if(!reports[reportId]) return;
    reports[reportId].adminName = adminName;
    if (adminName != null) {
        if (adminName != mp.players.local.name.replace('_',' ')) {
            global.gui.setData('reportMenu/deleteReport', JSON.stringify(reportId));
            if (access)
                global.gui.setData('reportMenu/addReportLogs', JSON.stringify(reports[reportId]));
        }
    }
    else {
        global.gui.setData('reportMenu/deleteReportLogs', JSON.stringify(reportId));
        global.gui.setData('reportMenu/addReport', JSON.stringify(reports[reportId]));
    }
    UpdateClosedReport();
});

mp.events.add('report:addmessage', (messageDTO) => {
    let message = JSON.parse(messageDTO);
    if (!reports[message.reportId])
        return;
    reports[message.reportId].messages.push(message);
    global.gui.setData('reportMenu/addReportMessage', JSON.stringify(message));
    global.gui.setData('reportMenu/addReportLogsMessage', JSON.stringify(message));
});

mp.events.add('report:closereport', (access, reportId, adminName) => {
    if(!reports[reportId]) return;
    reports[reportId].adminName = adminName;
    reports[reportId].closed = true;
    global.gui.setData('reportMenu/deleteReport', JSON.stringify(reportId));
    global.gui.setData('reportMenu/addReportsLogAdmins', JSON.stringify(adminName));

    global.gui.setData('reportMenu/updateAdminNameForReportLog', JSON.stringify({ id: reportId, adminName: adminName }));


    if (access)
        global.gui.setData('reportMenu/addReportLogs', JSON.stringify(reports[reportId]));
    if (adminName == mp.players.local.name.replace('_',' '))
        global.gui.setData('reportMenu/addMyReport', JSON.stringify(reports[reportId]));
    UpdateClosedReport();
});


mp.events.add('report:sendrating', (reportId, rating) => {
    reports[reportId].rating = rating;
    global.gui.setData('reportMenu/updateRating', JSON.stringify({ id: reportId, rating: rating }));
});

mp.events.add('reportMenu:trytakereport', (reportId, text) => {
    mp.events.callRemote('report:takereport', reportId, text)
});

mp.events.add('reportMenu:addAnswerTemplate', (text) => {
    if (!mp.storage.data.answerTemplate)
        mp.storage.data.answerTemplate = [];
    mp.storage.data.answerTemplate.push({ text: text });
    mp.storage.flush();
});

mp.events.add('reportMenu:deleteAnswerTemplate', (index) => {
    if (!mp.storage.data.answerTemplate)
        mp.storage.data.answerTemplate = [];
    mp.storage.data.answerTemplate.splice(index, 1);
    mp.storage.flush();
});

mp.events.add('reportMenu:kickPlayer', (reportId, text) => {
    mp.events.callRemote('report:kick', reportId, text)
});

mp.events.add('reportMenu:closereport', (reportId, rating) => {
    mp.events.callRemote('report:sendclosereport', reportId, rating)
});

mp.events.add('reportMenu:sendmessage', (reportId, message) => {
    mp.events.callRemote('report:sendmessage', reportId, message)
});

mp.events.add('reportMenu:hotkeys', (reportId, key) => {
    mp.events.callRemote('report:presshotkey', reportId, key)
});

let menuHash = mp.game.joaat("FE_MENU_VERSION_MP_PAUSE");
global.reportPosirion = -1;
mp.events.add('reportMenu:position', (reportId)=>{
    try {
        global.reportPosirion = reportId;
        mp.game.ui.activateFrontendMenu(menuHash, true, -1);       
    } catch (e) {
        if(global.sendException) mp.serverLog(`Error in reportMenu:position: ${e.name}\n${e.message}\n${e.stack}`);
	}
});

function UpdateClosedReport() {
    let reportsInQueue = Object.values(reports).filter(item => item.closed == false && item.adminName == null).length;
    let reportsAnswered = Object.values(reports).filter(item => item.closed == true).length;
    global.gui.setData('reportMenu/setReportsInQueue', JSON.stringify(reportsInQueue));
    global.gui.setData('reportMenu/setReportsAnswered', JSON.stringify(reportsAnswered));
    global.gui.setData('hud/setReportsCount', reportsInQueue);
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {mp.events.add("report:player:answer", (id, name, text)=>{
    global.gui.setData("optionsMenu/addAnswer", JSON.stringify({id,name,text}));
    global.gui.setData('sounds/play','{"name":"reportMsg","volume":0.2}');
})
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;

mp.keys.bind(global.Keys.Key_F7, false, function () {
    if (opened)
        CloseMenu();
    else
        OpenMenu()
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        CloseMenu();
});

mp.events.add('transfer:closemenu', () => {
    CloseMenu();
});

function OpenMenu() {
    if (!global.loggedin|| global.getVariable(mp.players.local, 'ALVL', 0) < 1) return;
    if (global.checkIsAnyActivity()) return;
    opened = global.gui.openPage('TransfersConfirmation');
}

function CloseMenu() {
    global.gui.close();
    opened = false;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
// ELEVATOR //
let lift = 0;

function closeLift() {
    global.gui.close();
}
mp.events.add('openliftmenu', (liftId, floors) => {
    lift = liftId;
    global.gui.setData("elevator/set", floors)
    global.gui.openPage("Elevator")
})
mp.events.add('lift', (act, data) => {
    switch (act) {
        case "stop":
            closeLift();
            break;
        case "start":
            mp.events.callRemote('lift:callBack', lift, data);
            closeLift();
            break;
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 186 */
/***/ (function(module, exports) {

let prevPosition = new mp.Vector3(0, 0, 0);
let lastMinuteDistance = 0;
let lastMinuteCheck = Date.now();
let last15MinuteDistance = 0;
let last15MinuteCheck = Date.now();

let isAFK = false;

// setInterval(() => {
//     if (!global.loggedin)
//         return;
//     //Пройдено за секунду
//     let currPos = mp.players.local.position;
//     let distance = mp.game.system.vdist(currPos.x, currPos.y, currPos.z, prevPosition.x, prevPosition.y, prevPosition.z);
//     prevPosition = mp.players.local.position;

//     lastMinuteDistance += distance;

//     //раз в минуту обновляем пройденную дистанцию за последние 15 минут
//     if (lastMinuteCheck + 60000 < Date.now()) {
//         last15MinuteDistance += lastMinuteDistance;
//         lastMinuteDistance = 0;
//         lastMinuteCheck = Date.now();
//         //если пройденная дистанция больше 100 м. за 15 минут, то обнуляем 
//         if (last15MinuteDistance > 100) {
//             last15MinuteDistance = 0;
//             last15MinuteCheck = Date.now();
//         }
//     }
//     //если за 15 минут не ходил, то триггерим афк
//     if (checkNoMove() && !isAFK) {
//         isAFK = true;
//         mp.events.callRemote("antiafk:setAfk", isAFK);
//     }
//     else if (!checkNoMove() && isAFK) {
//         isAFK = false;
//         mp.events.callRemote("antiafk:setAfk", isAFK);
//     }
// }, 1000);

function checkNoMove() {
    return last15MinuteCheck + 900000 < Date.now() && last15MinuteDistance + lastMinuteDistance <= 100;
}

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let passportOpen = false;

mp.events.add('passport', (data) => 
{
    global.gui.close();
    global.gui.openPage('passport');
    global.gui.setData('passport/setPassportData', JSON.stringify(data));
	passportOpen = true;
});

mp.events.add('passport:close', () => {
    global.gui.close();
	passportOpen = false;
});

mp.events.add('dochide', () => {
    global.gui.close();
});

let certificatesOpen = false;
let certificatesFracName = {
    [6]: 'lsg',
    [7]: 'lspd',
    [8]: 'lses',
    [9]: 'fib',
    [14]: 'lsa',
    [15]: 'lsn',
    [17]: 'lsc',
}

mp.events.add('certificates:show', (dataJSON) => {
    let data = JSON.parse(dataJSON);
    data.key = certificatesFracName[data.frac];
    global.gui.setData('certificate/setData', JSON.stringify(data));
    certificatesOpen = global.gui.openPage("Certificate");
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (certificatesOpen) 
	{
        global.gui.close();
        certificatesOpen = false;
    }
	if (passportOpen) 
	{
		global.gui.close();
		passportOpen = false;
	}
});



let carPassOpened = false;

mp.events.add('veh:technicalCertificate', (data) => {
    global.gui.setData('technicalCertificate/setCarState', data);
    carPassOpened = global.gui.openPage("TechnicalCertificate");
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (carPassOpened) {
        global.gui.close();
        carPassOpened = false;
    }
});

const licConfig = {
    [0]: {
        type: "vehicle",
        name: "A",
        img: 'bike',
    },
    [1]: {
        type: "vehicle",
        name: 'B',
        img: 'car',
    },
    [2]: {
        type: "vehicle",
        name: 'C',
        img: 'truck',
    },
    [3]: {
        type: "vehicle",
        name: 'D',
        img: 'ship',
    },
    [4]: {
        type: "vehicle",
        name: 'E',
        img: 'helicopter',
    },
    [5]: {
        type: "vehicle",
        name: 'F',
        img: 'flight',
    },
    [6]: {
        type: 'weapon',
        name: 'gun',
    },
    [7]: {
        type: 'medical',
        name: 'med',
    },
    [8]: {
        type: 'military',
        name: 'cl:lic:mil',
    },
    [9]: {
        type: 'job',
        name: 'cl:lic:taxi',
        img: 'taxi'
    },
    [10]: {
        type: 'job',
        name: 'cl:lic:mgmw',
        img: 'weapon'
    },
    [11]: {
        type: 'job',
        name: 'cl:lic:miner',
        img: 'iron'
    },
    [12]: {
        type: 'job',
        name: 'cl:lic:hunter',
        img: 'hunting'
    },
    [13]: {
        type: 'job',
        name: 'cl:lic:truckdriver',
        img: 'truck'
    },
    [14]: {
        type: 'job',
        name: 'cl:lic:fish',
        img: 'fishing'
    },
    [15]: {
        type: 'job',
        name: 'cl:lic:metalPlant',
        img: 'iron'
    },
}

let licOpened = false;

mp.events.add('licenses', (licensesJson, playerName, gender, birthday) => {
    try {
        let licens = JSON.parse(licensesJson);
        let data =
        {
            lic: licens.map(item => ({ type: licConfig[item.Name].type, name: licConfig[item.Name].name, img: licConfig[item.Name].img, date: item.DateReceive, dateEnd: item.DateEnd })),
            nickname: playerName.replace('_', ' '),
            gender: gender,
            bithday: birthday,
        }
        global.gui.setData('licenses/setData', JSON.stringify(data));
        licOpened = global.gui.openPage("Licenses");
    } catch (e) {
        if(global.sendException) 
            mp.serverLog(`Error in docs.licenses: ${e.name}\n${e.message}\n${e.stack}`);
    }
});

function closeLicensesMenu()
{
	if (!licOpened) return;
	
	licOpened = false;
	global.gui.close();
}

mp.events.add('Licenses:closeLicenses', closeLicensesMenu);
mp.keys.bind(global.Keys.Key_ESCAPE, false, closeLicensesMenu);


// mp.events.add("selectJob", (jobid) => {
//     if (global.lastCheck > Date.now()) return;
//     global.lastCheck = Date.now() + 500;
//     mp.events.callRemote("jobjoin", jobid);
// });
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;
let currPoint = -1;

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        CloseMenu();
});

mp.events.add('vehTrade::exit', () => {
    CloseMenu();
});


function CloseMenu() {
    global.gui.close();
    opened = false;
}

mp.events.add('vehTrade::openSellMenu', (idPoint, vehicleName) => {
    if (global.checkIsAnyActivity()) return;
    currPoint = idPoint;
    opened = global.gui.openPage('SettingAmountCarSales');
    global.gui.setData('settingAmountCarSales/setCarModel', JSON.stringify(vehicleName))
});

mp.events.add('vehTrade:acceptSell', (price) => {
    CloseMenu()
    mp.events.callRemote('vehTrade:setVehicleOnPoint', currPoint, price)
});

mp.events.add('vehTrade:cancelSell', () => {
    CloseMenu()
});




mp.events.add('vehTrade::openBuyMenu', (idPoint, price, number) => {
    if (global.checkIsAnyActivity()) return;
    currPoint = idPoint;
    opened = global.gui.openPage('SellCar');
    global.gui.setData('sellCar/setData', JSON.stringify({currentPrice: price, registrationNumber: number}))
});


mp.events.add('sellCar:acceptBuyCar', () => {
    CloseMenu()
    mp.events.callRemote('vehicleTrade:buyVehicle', currPoint)
});

mp.events.add('sellCar:closeBuyCar', () => {
    CloseMenu()
});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const ZoneModel = __webpack_require__(190);

let zones = [];
global.newZone = (height, startPosition, startRange, endPosition, endRange, timeoutZone, zoneConstrictionTime, damageHP, damageTime) => {
    let zone = new ZoneModel(height, startPosition, startRange, endPosition, endRange, timeoutZone, zoneConstrictionTime, damageHP, damageTime);
    zones.push(zone);
    return zone.id;
};


global.deleteZone = (id) => {
    let index = zones.findIndex(item => item.id == id);
    if (index >= 0)
    {
        zones.splice(index, 1)[0].destroy();
    }
};
global.newZoneParams = (id, endPosition, endRange, timeoutZone, zoneConstrictionTime) => {
    let index = zones.findIndex(item => item.id == id);
    if (index >= 0)
        zones[index].updateParams(endPosition, endRange, timeoutZone, zoneConstrictionTime)
};

mp.events.add('render', () => {
    zones.forEach(zone => {
        zone.drawZone();
    });
});

// mp.events.add('render', () => {
//     mp.game.graphics.drawMarker(
//         1,
//         0, 0, 73,
//         0, 0, 0,
//         0, 0, 0,
//         10, 10, 2000,
//         255, 255, 50, 156,
//         false, false, 2,
//         false, null, null, false
//     );
// });
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 190 */
/***/ (function(module, exports) {

const coeffZoneRange = 1.981; //коэффициент размеров маркера к радиусу
let zoneId = 1;
class ZoneModel {
    constructor(height, startPosition, startRange, endPosition, endRange, zoneStartTime, timeoutZone, zoneConstrictionTime, damageHP, damageTime) {
        this.id = zoneId++;
        this.height = height;
        this.timeoutZone = timeoutZone; //время от создания зоны до полного сужения
        this.zoneStartTime = zoneStartTime; //время начала зоны
        this.zoneConstrictionTime = zoneConstrictionTime; //время сужения зоны
        this.currentZone =
        {
            Center: startPosition,
            Range: startRange,
        };
        this.nextZone =
        {
            Center: endPosition,
            Range: endRange,
        };

        this.zoneDamage = damageHP;
        this.zoneDamageInterval = damageTime;

        this.inZone = true;

        this.damageInterval = null;
    }

    updateParams(endPosition, endRange, timeoutZone, zoneConstrictionTime) {
        this.currentZone = this.nextZone;
        this.zoneConstrictionTime = zoneConstrictionTime;
        this.timeoutZone = timeoutZone
        this.nextZone =
        {
            Center: endPosition,
            Range: endRange,
        }
    }

    drawZone() {
        let color = this.getColor();
        let zone = this.getZone();
        mp.game.graphics.drawMarker(
            1,
            zone.Center.x, zone.Center.y, zone.Center.z,
            0, 0, 0,
            0, 0, 0,
            zone.Range * coeffZoneRange, zone.Range * coeffZoneRange, this.height,
            color, 255 - color, 50, 156,
            false, false, 2,
            false, null, null, false
        );
        if (this.zoneDamage <= 0)
            return;
        let dist = mp.game.gameplay.getDistanceBetweenCoords(zone.Center.x, zone.Center.y, zone.Center.z, mp.players.local.position.x, mp.players.local.position.y, zone.Center.z, true)
        if (this.inZone != dist < zone.Range)
            this.OnPlayerChangeInCircle(dist < zone.Range);
    }
    getColor() {
        let color = 255;
        if (this.zoneStartTime > Date.now())
            return color;
        if (this.timeoutZone > 0) {
            color = Math.round(this.getTimeCoeff(this.zoneStartTime, this.timeoutZone) * 255);
        }
        return color;
    }

    getZone() {
        let length = this.getTimeCoeff(this.zoneStartTime + (this.timeoutZone - this.zoneConstrictionTime) * 1000, this.zoneConstrictionTime);
        let zone =
        {
            Center: new mp.Vector3(this.currentZone.Center.x + (this.nextZone.Center.x - this.currentZone.Center.x) * length, this.currentZone.Center.y + (this.nextZone.Center.y - this.currentZone.Center.y) * length, this.currentZone.Center.Z),
            Range: this.nextZone.Range + (this.currentZone.Range - this.nextZone.Range) * (1 - length)
        }
        return zone;
    }

    getTimeCoeff(startTime, timeLength) {
        if (timeLength == 0)
            return 0;
        let value = (Date.now() - startTime) / (timeLength * 1000);
        if (value > 1)
            return 1;
        if (value < 0)
            return 0;
        return value;
    }

    OnPlayerChangeInCircle(toggle) {
        this.inZone = toggle;
        if (this.damageInterval != null) {
            clearInterval(this.damageInterval);
            this.damageInterval = null;
        }
        if (!this.inZone) {
            this.damageInterval = setInterval(() => {
                this.DamagePlayer()
            }, 1500);

        }
    }

    DamagePlayer() {
        mp.game.graphics.setTimecycleModifier('damage');
        mp.players.local.applyDamageTo(this.zoneDamage, true);
        setTimeout(() => {
            mp.game.graphics.setTimecycleModifier('default');
        }, this.zoneDamageInterval);
    }

    destroy() {

        if (this.damageInterval != null) {
            clearInterval(this.damageInterval);
            this.damageInterval = null;
        }
    }
}

module.exports = ZoneModel;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let zone = null;
let height = 250;
let damageHP = 10;
let damageTime = 350;

mp.events.add('islandCapt::loadZone', (startTime, totalTime, constrictionTime, startZoneCenter, startZoneRange, endZoneCenter, endZoneRange) => {
    if (zone != null) {
        global.deleteZone(zone);
        zone = null;
    }
    let start = Date.now() - (startTime * 1000);
    zone = global.newZone(height, startZoneCenter, startZoneRange, endZoneCenter, endZoneRange, start, totalTime, constrictionTime, damageHP, damageTime)
})
mp.events.add('islandCapt::unloadZone', () => {
    if (zone != null) {
        global.deleteZone(zone);
        zone = null;
    }
})
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;
let currentId = -1;
mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        CloseMenu();
});

mp.events.add('vehicleRent:openMenu', (id, categories) => {
    if (!global.loggedin) return;
    if (opened || global.checkIsAnyActivity()) return;
    currentId = id;
    global.gui.setData('rentVehicle/setCategories', categories);
    opened = global.gui.openPage('RentVehicle');
});

function CloseMenu() {
    global.gui.close();
    opened = false;
}



mp.events.add('vehicleRent:acceptRent', (model, category, payment) => {    
    mp.events.callRemote('vehicleRent:tryRent', currentId, model, category, payment)
    if (opened)
        CloseMenu();
});



let peds = [];
mp.events.add('vehicleRent:loadPeds', (pedsJSON) => {
    pedinfo = JSON.parse(pedsJSON);

    pedinfo.forEach(ped => {
        let p = mp.peds.newValid(579932932, ped.position, ped.heading, 0);
        let obj = { ped: p, id: ped.id };
        peds.push(obj);
        //if(p !== null) p.taskPlayAnim("friends@frm@ig_1", "greeting_idle_a", 8.0, 1.0, -1, 1, 1.0, false, false, false);
    });
});

mp.events.add('vehicleRent:updatePeds', (pedJSON) => {
    ped = JSON.parse(pedJSON);
    const index = peds.findIndex(item => item.id == ped.id)
    if (index >= 0) {
        peds[index].ped.destroy();
        peds[index].ped = mp.peds.newValid(579932932, ped.position, ped.heading, 0);
    }
    else {
        let p = mp.peds.newValid(579932932, ped.position, ped.heading, 0);
        let obj = { ped: p, id: ped.id };
        peds.push(obj);
    }
});

mp.events.add('vehicleRent:deletePed', (id) => {
    const index = peds.findIndex(item => item.id == id)
    if (index >= 0) {
        peds[index].ped.destroy();
        peds.splice(index, 1);
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(194);



/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        CloseMenu();
});


mp.events.add('bankMenu:open', (bankDto, depositsDto, businessDto, creditDto, familyDto, fractionDto) => {
    if (opened)
    {
        CloseMenu();
        return;
    }
    global.gui.setData('bank/setData', bankDto);
    global.gui.setData('bank/deposit/setDepositsList', depositsDto);
    global.gui.setData('bank/business/setData', businessDto);
    global.gui.setData('bank/credit/setData', creditDto);
    global.gui.setData('bank/family/setData', familyDto);
    global.gui.setData('bank/organization/setData', fractionDto);
    opened = global.gui.openPage('Bank');
});
mp.events.add('bankMenu:exit', () => {
    CloseMenu();
});

function OpenMenu() {
}

function CloseMenu() {
    global.gui.close();
    opened = false;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        CloseMenu();
});

mp.events.add('priceMenu:open', (priceList, categories) => {
    if (opened)
    {
        CloseMenu();
        return;
    }
    global.gui.setData('priceMenu/setPriceList', priceList);
    global.gui.setData('priceMenu/setPriceCategories', categories);
    opened = global.gui.openPage('PriceMenu');
});

mp.events.add('priceMenu:close', () => {
    CloseMenu();
});

function CloseMenu() {
    global.gui.close();
    opened = false;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(197);
__webpack_require__(201);


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
const achievesConfig = __webpack_require__(198);
const actionSyncParams = __webpack_require__(199);
const Achieve = __webpack_require__(200);


let notSyncActions = {};
let myAchieves = {};
let subscribes = {};
let needSyncAchieves = {};
let syncTimers = {}

mp.events.add("personalEvents:load", (currentStatsJson) => {
    let currentStats = JSON.parse(currentStatsJson);
    achievesConfig.forEach(achieveConf => {
        if (achieveConf.IsActive)
        {
            if (currentStats[achieveConf.AchieveName]) {
                myAchieves[achieveConf.AchieveName] = new Achieve(currentStats[achieveConf.AchieveName].CurrentLevel, currentStats[achieveConf.AchieveName].GivenReward, currentStats[achieveConf.AchieveName].DateCompleated, achieveConf);
            }
            else {
                myAchieves[achieveConf.AchieveName] = new Achieve(0, false, 0, achieveConf);
            }
        }
    });
});

mp.events.add("personalEvents:updateAchieve", (achieveJson) => {
    var achieve = JSON.parse(achieveJson);
    if (myAchieves[achieve.AchieveName])
        myAchieves[achieve.AchieveName].UpdateProgress(achieve.CurrentLevel, achieve.GivenReward, achieve.DateCompleated)
});

global.personalEventsSubscribe = (achieve, ActionName) => {
    if (subscribes[ActionName]) {
        if (subscribes[ActionName].findIndex(item => item === achieve) < 0)
            subscribes[ActionName].push(achieve);
    }
    else {
        subscribes[ActionName] = [achieve];
    }
}


mp.events.add("personalEvents:invokeEvents", (ActionName, points) => {
    points = Math.round(points);
    if (subscribes[ActionName]) {
        subscribes[ActionName].forEach(achieve => {
            achieve.AchieveProgress(points);
        });
    }
    UpdateCurrentActionState(ActionName, points)
});

mp.events.add("personalEvents:needSync", (ActionName) => {
    needSyncAchieves[ActionName] = true;
});

mp.events.add("personalEvents:syncAction", (ActionName) => {
    let points = notSyncActions[ActionName];
    if (points) {
        notSyncActions[ActionName] = 0;
        if (syncTimers[ActionName])
        {
            clearTimeout(syncTimers[ActionName]);
            syncTimers[ActionName] = null;
        }
        mp.events.callRemote("personalEvents:syncClientEvents", ActionName, points)
    }
});


function UpdateCurrentActionState(ActionName, points) {
    if (notSyncActions[ActionName])
        notSyncActions[ActionName] += points;
    else
        notSyncActions[ActionName] = points;
    if (needSyncAchieves[ActionName] || actionSyncParams[ActionName].SyncMaxPoint <= notSyncActions[ActionName]) {
        needSyncAchieves[ActionName] = false;
        mp.events.call("personalEvents:syncAction", ActionName);
    }
    else {
        if (!syncTimers[ActionName] && actionSyncParams[ActionName].SyncTime) {
            syncTimers[ActionName] = setTimeout(() => {
                mp.events.call("personalEvents:syncAction", ActionName);
            }, actionSyncParams[ActionName].SyncTime * 1000);
        }
    }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 198 */
/***/ (function(module, exports) {

module.exports = [{"IsActive":true,"IsHidden":false,"Name":"Шопоголик","ShortDesc":"Потратить $9.000.000 на одежду","Desc":"Потратить $9.000.000 на одежду","MaxLevel":9000000,"AchieveName":0,"PlayerAction":3,"PlayerActionName":"BuyClothes","Rewards":[{"Desc":"Bonus Point","Image":"BonusReward","Value":20},{"Desc":"Coins","Image":"CoinsReward","Value":200},{"Desc":"Respect","Image":"RespectReward","Value":10}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"Профессиональный убийца","ShortDesc":"Совершить 500 убийств на каптах и/или бизварах","Desc":"Совершить 500 убийств на каптах и/или бизварах","MaxLevel":500,"AchieveName":1,"PlayerAction":4,"PlayerActionName":"KillOnCaptAndBizwar","Rewards":[{"Desc":"Bonus Point","Image":"BonusReward","Value":30},{"Desc":"Coins","Image":"CoinsReward","Value":200},{"Desc":"Respect","Image":"RespectReward","Value":40}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"Игровой маньяк","ShortDesc":"Отыграть 1500 часов","Desc":"Отыграть 1500 часов","MaxLevel":90000,"AchieveName":2,"PlayerAction":5,"PlayerActionName":"PlayingOnServer","Rewards":[{"Desc":"Bonus Point","Image":"BonusReward","Value":100},{"Desc":"Coins","Image":"CoinsReward","Value":1000},{"Desc":"Reward_Inventory","Image":"InventoryReward","Value":0}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"Король дальнобойщиков","ShortDesc":"Совершить 1000 перевозок","Desc":"Совершить 1000 перевозок","MaxLevel":1000,"AchieveName":3,"PlayerAction":6,"PlayerActionName":"CompleteTruckCarry","Rewards":[{"Desc":"Bonus Point","Image":"BonusReward","Value":100},{"Desc":"Coins","Image":"CoinsReward","Value":200},{"Desc":"Money","Image":"MoneyReward","Value":77805}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"Добрый врач","ShortDesc":"Вылечить 500 людей","Desc":"Вылечить 500 людей","MaxLevel":500,"AchieveName":4,"PlayerAction":7,"PlayerActionName":"HealPlayer","Rewards":[{"Desc":"Bonus Point","Image":"BonusReward","Value":100},{"Desc":"Coins","Image":"CoinsReward","Value":300},{"Desc":"Respect","Image":"RespectReward","Value":80}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"Супер таксист","ShortDesc":"Совершить 1500 перевозок на такси","Desc":"Совершить 1500 перевозок на такси","MaxLevel":1500,"AchieveName":5,"PlayerAction":8,"PlayerActionName":"CompleteTaxiCarry","Rewards":[{"Desc":"Bonus Point","Image":"BonusReward","Value":20},{"Desc":"Coins","Image":"CoinsReward","Value":300},{"Desc":"Reward_Vehicle","Image":"VehicleReward","Value":0}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"Мастер спорта по рыбной ловле","ShortDesc":"Поймать 2500 рыб","Desc":"Поймать 2500 рыб","MaxLevel":2500,"AchieveName":6,"PlayerAction":9,"PlayerActionName":"CathAFish","Rewards":[{"Desc":"Bonus Point","Image":"BonusReward","Value":120},{"Desc":"Coins","Image":"CoinsReward","Value":100}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"Счастливый семьянин","ShortDesc":"Соединить брачные узы воедино","Desc":"Соединить брачные узы воедино","MaxLevel":1,"AchieveName":8,"PlayerAction":11,"PlayerActionName":"Mariage","Rewards":[{"Desc":"Respect","Image":"RespectReward","Value":60}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"Железная печень","ShortDesc":"Выпить 300 бутылок алкоголя","Desc":"Выпить 300 бутылок алкоголя","MaxLevel":300,"AchieveName":10,"PlayerAction":13,"PlayerActionName":"DringAlco","Rewards":[{"Desc":"Bonus Point","Image":"BonusReward","Value":100},{"Desc":"Coins","Image":"CoinsReward","Value":100},{"Desc":"Respect","Image":"RespectReward","Value":10}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"От чистого сердца","ShortDesc":"Пожертвовать 1кк в мерии","Desc":"Пожертвовать 1кк в мерии","MaxLevel":1000000,"AchieveName":12,"PlayerAction":14,"PlayerActionName":"DonateInGOV","Rewards":[{"Desc":"Bonus Point","Image":"BonusReward","Value":30},{"Desc":"Respect","Image":"RespectReward","Value":60}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"Люблю нашу страну","ShortDesc":"Пожертвовать в банке 1кк","Desc":"Пожертвовать в банке 1кк","MaxLevel":1000000,"AchieveName":13,"PlayerAction":15,"PlayerActionName":"DonateInBank","Rewards":[{"Desc":"Bonus Point","Image":"BonusReward","Value":50},{"Desc":"Coins","Image":"CoinsReward","Value":50},{"Desc":"Respect","Image":"RespectReward","Value":30}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"А мы вообще за государство","ShortDesc":"Помоги государству сохранить ресурсы","Desc":"Помоги государству сохранить ресурсы","MaxLevel":1,"AchieveName":14,"PlayerAction":16,"PlayerActionName":"RepairNGStation","Rewards":[{"Desc":"Bonus Point","Image":"BonusReward","Value":50},{"Desc":"Respect","Image":"RespectReward","Value":100}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"Начальник фермеров","ShortDesc":"Выполнить 15000 действий на ферме","Desc":"Выполнить 15000 действий на ферме","MaxLevel":15000,"AchieveName":16,"PlayerAction":18,"PlayerActionName":"MoveOnFarm","Rewards":[{"Desc":"Bonus Point","Image":"BonusReward","Value":200},{"Desc":"Coins","Image":"CoinsReward","Value":500},{"Desc":"Reward_Inventory","Image":"InventoryReward","Value":0}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"Король гонок","ShortDesc":"Победить 100 раз в гонках на арене","Desc":"Победить 100 раз в гонках на арене","MaxLevel":100,"AchieveName":17,"PlayerAction":19,"PlayerActionName":"WinRace","Rewards":[{"Desc":"Coins","Image":"CoinsReward","Value":1000},{"Desc":"Respect","Image":"RespectReward","Value":100}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"Лучший стрелок","ShortDesc":"победить 5 раз в Охоте за головами","Desc":"победить 5 раз в Охоте за головами","MaxLevel":5,"AchieveName":19,"PlayerAction":21,"PlayerActionName":"WinRoyalBattle","Rewards":[{"Desc":"Coins","Image":"CoinsReward","Value":1500}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"Лучший рудокоп","ShortDesc":"Подорвать 1000 зарядов динамита","Desc":"Подорвать 1000 зарядов динамита","MaxLevel":1000,"AchieveName":20,"PlayerAction":22,"PlayerActionName":"ExplodeDynamite","Rewards":[{"Desc":"Coins","Image":"CoinsReward","Value":1500}],"IsClient":false},{"IsActive":true,"IsHidden":false,"Name":"Взломщик","ShortDesc":"Взломать 1000 домов","Desc":"Взломать 1000 домов","MaxLevel":1000,"AchieveName":22,"PlayerAction":24,"PlayerActionName":"BreakHouseLock","Rewards":[{"Desc":"Coins","Image":"CoinsReward","Value":1500},{"Desc":"Respect","Image":"RespectReward","Value":100},{"Desc":"Bonus Point","Image":"BonusReward","Value":200}],"IsClient":false}]

/***/ }),
/* 199 */
/***/ (function(module, exports) {

module.exports = {"Driving":{"SyncTime":0,"SyncMaxPoint":5000}}

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {class Achieve {
    constructor (level, reward, date, achieveConf) {
        this.CurrentLevel = level;
        this.GivenReward = reward;
        this.DateCompleated = date;
        this.AchieveConfig = achieveConf;
        if (this.AchieveConfig.IsClient)
        {
            global.personalEventsSubscribe(this, this.AchieveConfig.PlayerActionName);
        }
        this.SendToCef();
    }
    UpdateProgress(level, reward, date) {
        this.CurrentLevel = level;
        this.GivenReward = reward;
        this.DateCompleated = date;
        this.SendToCef();
    }
    AchieveProgress(point) {
        if (!this.AchieveConfig.IsClient)
            return;
        if (this.CurrentLevel < this.AchieveConfig.MaxLevel && this.CurrentLevel + point >= this.AchieveConfig.MaxLevel){
            mp.events.call("personalEvents:needSync", this.AchieveConfig.PlayerActionName)
        }
        this.CurrentLevel += point
        this.SendToCef();
    }
    SendToCef() {
        global.gui.setData('optionsMenu/updateAchievements', JSON.stringify({
            key: this.AchieveConfig.AchieveName, 
            value: {
                CurrentLevel: this.CurrentLevel,
                GivenReward: this.GivenReward,
                DateCompleated: this.DateCompleated,
            }
        }));        
    }
}

module.exports = Achieve;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
const contractsConfig = __webpack_require__(202);
let allContract = {};




mp.events.add("personalEvents:loadMyContracts", (contractsJson) => {
    let contracts = JSON.parse(contractsJson);
    contracts.forEach(item => {
        item.ExpirationDateMS = Date.now() + item.SecondToEndContract * 1000
        allContract[item.ContractName] = item;
    });
    global.gui.setData("optionsMenu/setMyContracts", JSON.stringify(contracts));
});


mp.events.add("personalEvents:loadFamilyContracts", (contractsJson) => {
    let contracts = JSON.parse(contractsJson);
    contracts.forEach(item => {
        item.ExpirationDateMS = Date.now() + item.SecondToEndContract * 1000
        allContract[item.ContractName] = item;
    });
    global.gui.setData("optionsMenu/setFamilyContracts", JSON.stringify(contracts));
});


mp.events.add("personalEvents:updateMyContracts", (contractJson) => {
    let contract = JSON.parse(contractJson);
    contract.ExpirationDateMS = Date.now() + contract.SecondToEndContract * 1000
    allContract[contract.ContractName] = contract;
    global.gui.setData("optionsMenu/updateMyContracts", JSON.stringify(contract));
});


mp.events.add("personalEvents:updateFamilyContracts", (contractJson) => {
    let contract = JSON.parse(contractJson);
    contract.ExpirationDateMS = Date.now() + contract.SecondToEndContract * 1000
    allContract[contract.ContractName] = contract;
    global.gui.setData("optionsMenu/updateFamilyContracts", JSON.stringify(contract));
});


mp.events.add("personalEvents:selectCoordinats", (positionJson) => {
    let position = JSON.parse(positionJson);
    mp.game.ui.setNewWaypoint(position.x, position.y);
});

mp.events.add('family:unloadData', () => {
    contractsConfig.forEach((contractConf) => {
        if (contractConf.ContractType =="Family")
            allContract[contractConf.ContractName] = null;
    });
});

let defaultColor = {
    Red : 182, 
    Green : 211, 
    Blue : 0, 
    Alpha : 200,
}

mp.events.add('render', () => {
    let i = 0;
    contractsConfig.forEach((contractConf) => {
        if (allContract[contractConf.ContractName] && allContract[contractConf.ContractName].InProgress && allContract[contractConf.ContractName].ExpirationDateMS > Date.now() && 0 === mp.players.local.dimension) {
            contractConf.Coords.forEach(coord => {
                coord.Positions.forEach(position => {
                    const pos1 = mp.players.local.position;
                    const pos2 = new mp.Vector3(position.x, position.y, position.z);
                    const distance = mp.game.system.vdist(pos1.x, pos1.y, pos1.z, pos2.x, pos2.y, pos2.z);
        
                    if (distance < 50) {
                        global.drawRotateMarkerInRender(27, pos2, 2, defaultColor)
                        i++;
                    }
                });
            });
        }
    });
})    
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 202 */
/***/ (function(module, exports) {

module.exports = [{"IsActive":true,"Name":"Цемент","Desc":"На цементном заводе работает некий Билл, проявите дружелюбие и помогите перевезти цемент на стройку","MaxLevel":625,"Rewards":[{"Desc":"Money","Image":"MoneyReward","Value":1250000}],"Coords":[{"IsOneInteract":false,"Name":"Cement","Positions":[{"x":973.4,"y":-1937.1,"z":31.32}],"ActionModel":{"AbstractItem":0}},{"IsOneInteract":false,"Name":"CementStock","Positions":[{"x":-99.99,"y":-1049.9,"z":26.45}],"ActionModel":{"AbstractItem":0}}],"MinReputation":10,"MinMembers":5,"MaxLevelOnOnePlayer":125,"ContractType":"Family","ContractName":0,"Image":"contract-1.png","MinutesToComplete":1440,"PriceContract":250000,"FamilyType":-1},{"IsActive":true,"Name":"Мясо","Desc":"Помоги сотрудникам мясокомбината в Палетто Бэй перевезти продукцию на склад, нужна машина с большим багажником","MaxLevel":100,"Rewards":[{"Desc":"Money","Image":"MoneyReward","Value":100000}],"Coords":[{"IsOneInteract":false,"Name":"Meat","Positions":[{"x":-107.6714,"y":6201.532,"z":30.12576}],"ActionModel":{"AbstractItem":2}},{"IsOneInteract":false,"Name":"MeatStock","Positions":[{"x":1243.2894,"y":-3149.1973,"z":4.628235}],"ActionModel":{"AbstractItem":2}}],"MinReputation":1,"MinMembers":1,"MaxLevelOnOnePlayer":100,"ContractType":"Single","ContractName":1,"Image":"contract-2.png","MinutesToComplete":240,"PriceContract":10000,"FamilyType":-1},{"IsActive":true,"Name":"А кто оружие возить будет","Desc":"Развезите ящики с оружием по магазинам, не забудьте про охрану","MaxLevel":10,"Rewards":[{"Desc":"Money","Image":"MoneyReward","Value":1250000}],"Coords":[{"IsOneInteract":false,"Name":"Weapons","Positions":[{"x":-285.3027,"y":-2679.0317,"z":5.549989}],"ActionModel":{"AbstractItem":4}},{"IsOneInteract":true,"Name":"Gun Shops","Positions":[{"x":-1144.2672,"y":2681.3274,"z":17.193485},{"x":-1322.4062,"y":-393.3032,"z":35.546856},{"x":-3157.3953,"y":1128.0559,"z":19.943758},{"x":-320.93698,"y":6096.156,"z":30.561962},{"x":-665.8908,"y":-951.2752,"z":20.528557},{"x":1705.1722,"y":3761.8933,"z":33.36404},{"x":234.88094,"y":-34.625763,"z":68.81105},{"x":2582.8323,"y":294.0868,"z":107.5573},{"x":28.914179,"y":-1109.4165,"z":28.401928},{"x":822.09644,"y":-2143.6238,"z":27.890335}],"ActionModel":{"AbstractItem":4}}],"MinReputation":10,"MinMembers":10,"MaxLevelOnOnePlayer":1,"ContractType":"Family","ContractName":3,"Image":"contract-1.png","MinutesToComplete":1440,"PriceContract":250000,"FamilyType":-1}]

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(204);




/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const QuadColShape = __webpack_require__(205);
const SquareColShape = __webpack_require__(206);

let currentShapes = [];

let sendingExcept = false;


mp.events.add("customShape:load", (shapesDTO) => {
    let shapes = JSON.parse(shapesDTO);
    shapes.forEach(shape => {
        switch (shape.Type) {
            case 0:
                let quadShape = new QuadColShape(shape.ID, shape.Point1, shape.Point2, shape.Point3, shape.Point4, shape.Dimension);
                currentShapes.push(quadShape);
                break;
            case 1:
                let squareShape = new SquareColShape(shape.ID, shape.Center, shape.Width, shape.Rotation, shape.Dimension);
                currentShapes.push(squareShape);
                break;
            default:
                let defaultShape = new QuadColShape(shape.ID, shape.Point1, shape.Point2, shape.Point3, shape.Point4, shape.Dimension);
                currentShapes.push(defaultShape);
                break;
        }
    });
    setInterval(CheckSHapes, 100);
});
mp.events.add("customShape:add", (shapeDTO) => {
    let shape = JSON.parse(shapeDTO);
    switch (shape.Type) {
        case 0:
            let quadShape = new QuadColShape(shape.ID, shape.Point1, shape.Point2, shape.Point3, shape.Point4, shape.Dimension);
            currentShapes.push(quadShape);
            break;
        case 1:
            let squareShape = new SquareColShape(shape.ID, shape.Center, shape.Width, shape.Rotation, shape.Dimension);
            currentShapes.push(squareShape);
            break;
        default:
            let defaultShape = new QuadColShape(shape.ID, shape.Point1, shape.Point2, shape.Point3, shape.Point4, shape.Dimension);
            currentShapes.push(defaultShape);
            break;
    }
});

function CheckSHapes() {
    currentShapes.forEach(shape => {
        shape.CheckPlayer();
    });
}

let viewShapes = false;

mp.events.add('loadCustomShapes', (state) => {
    viewShapes = state;
});

let col = { r: 255, g: 0, b: 0, a: 255 };

let height = [
    20,
    30,
    40,
    50,
    60,
    70,
    80,
    90,
    100,
    110,
    120,
    130,
    140,
    150,
    160,
    170,
    180,
];
mp.events.add('render', () => {
    try {
        if (!global.loggedin || !viewShapes) 
            return;
        currentShapes.forEach(s => {
            height.forEach(h => {
                mp.game.graphics.drawLine(s.Point1.x, s.Point1.y, h, s.Point2.x, s.Point2.y, h, col.r, col.g, col.b, col.a);
                mp.game.graphics.drawLine(s.Point2.x, s.Point2.y, h, s.Point3.x, s.Point3.y, h, col.r, col.g, col.b, col.a);
                mp.game.graphics.drawLine(s.Point3.x, s.Point3.y, h, s.Point4.x, s.Point4.y, h, col.r, col.g, col.b, col.a);
                mp.game.graphics.drawLine(s.Point4.x, s.Point4.y, h, s.Point1.x, s.Point1.y, h, col.r, col.g, col.b, col.a);
            });
            mp.game.graphics.drawLine(s.Point1.x, s.Point1.y, 20, s.Point1.x, s.Point1.y, 180, col.r, col.g, col.b, col.a);
            mp.game.graphics.drawLine(s.Point2.x, s.Point2.y, 20, s.Point2.x, s.Point2.y, 180, col.r, col.g, col.b, col.a);
            mp.game.graphics.drawLine(s.Point3.x, s.Point3.y, 20, s.Point3.x, s.Point3.y, 180, col.r, col.g, col.b, col.a);
            mp.game.graphics.drawLine(s.Point4.x, s.Point4.y, 20, s.Point4.x, s.Point4.y, 180, col.r, col.g, col.b, col.a);
        });
    } catch (e) {
        if (global.sendException && !sendingExcept) {
            sendingExcept = true;
            mp.serverLog(`customColSHapes.manager.render: ${e.name}\n${e.message}\n${e.stack}`);
        } 
        viewShapes = false;
    }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

const BaseShape = __webpack_require__(8);
const Line2D = __webpack_require__(9);


class QuadColShape extends BaseShape {
    constructor (id, point1, point2, point3, point4, dimension) {
        super(id, new mp.Vector3(point1.x, point1.y, point1.z), new mp.Vector3(point2.x, point2.y, point2.z), new mp.Vector3(point3.x, point3.y, point3.z), new mp.Vector3(point4.x, point4.y, point4.z), dimension)
        this.line1 = new Line2D(this.Point1, this.Point2);
        this.line2 = new Line2D(this.Point4, this.Point3);
        this.line3 = new Line2D(this.Point1, this.Point4);
        this.line4 = new Line2D(this.Point2, this.Point3);
    }
    
    IsPointWithin(point) {
        let check1 = this.line1.CheckPointOnLine(point);
        let check2 = this.line2.CheckPointOnLine(point);
        let check3 = this.line3.CheckPointOnLine(point);
        let check4 = this.line4.CheckPointOnLine(point);
        return (check1 >= 0 && check2 <= 0 || check1 <= 0 && check2 >= 0) && (check3 >= 0 && check4 <= 0 || check3 <= 0 && check4 >= 0);
    }
}

module.exports = QuadColShape;

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

const BaseShape = __webpack_require__(8);
const Line2D = __webpack_require__(9);
const _twoRoot = Math.sqrt(2);

class SquareColShape extends BaseShape {
    constructor (id, center, width, rotation, dimension) {
        let r = width / 2;
        let xOffset = Math.cos(rotation / 180 * Math.PI) * r * _twoRoot;
        let yOffset = Math.sin(rotation / 180 * Math.PI) * r * _twoRoot;
        let point1 = new mp.Vector3(center.x + xOffset, center.y + yOffset, center.z);
        let point2 = new mp.Vector3(center.x - yOffset, center.y + xOffset, center.z);
        let point3 = new mp.Vector3(center.x - xOffset, center.y - yOffset, center.z);
        let point4 = new mp.Vector3(center.x + yOffset, center.y - xOffset, center.z);
        super(id, point1, point2, point3, point4, dimension)
        this.line1 = new Line2D(this.Point1, this.Point2);
        this.line2 = new Line2D(this.Point4, this.Point3);
        this.line3 = new Line2D(this.Point1, this.Point4);
        this.line4 = new Line2D(this.Point2, this.Point3);
    }
    
    IsPointWithin(point) {
        let check1 = this.line1.CheckPointOnLine(point);
        let check2 = this.line2.CheckPointOnLine(point);
        let check3 = this.line3.CheckPointOnLine(point);
        let check4 = this.line4.CheckPointOnLine(point);
        return (check1 >= 0 && check2 <= 0 || check1 <= 0 && check2 >= 0) && (check3 >= 0 && check4 <= 0 || check3 <= 0 && check4 >= 0);
    }
}

module.exports = SquareColShape;

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let stoneModel = 'iron';//'prop_boxing_glove_01';//'prop_rock_5_d';//
let c4Model = 'stt_prop_c4_stack';
let flagInZone = -1;
let zonePosition = null;
let nextUpdateDate = Date.now();
let useDetector = false;
let objectC4 = {};
let objectsDrop = {};

let animTime = 2;



mp.events.add('OreVein:UseDetector', (value) => {
    useDetector = value;
})

mp.events.add('OreVein:EnterPoint', (point, position) => {
    flagInZone = point;
    zonePosition = position;
})

mp.events.add('OreVein:ExitPoint', (point) => {
    if (flagInZone == point)
        flagInZone = -1;
})

mp.events.add('OreVein:explosionDynamitTimer', (pos, time, point) => {
    try {
        global.gui.setData("timerTemo/setTimer", time);
        setTimeout(() => {
            objectC4[point] = mp.objects.new(mp.game.joaat(c4Model), new mp.Vector3(pos.x, pos.y, pos.z - 1), {
                alpha: 255,
                dimension: 0,
                rotation: new mp.Vector3(0, 0, 0)
            });
            while (!mp.objects.exists(objectC4[point])) {
                mp.game.wait(0);
            }
            objectC4[point].freezePosition(false);
            objectC4[point].setDynamic(true);
            objectC4[point].setActivatePhysicsAsSoonAsItIsUnfrozen(true);
            setTimeout(() => {
                if (objectC4[point]) {
                    objectC4[point].destroy();
                    objectC4[point] = null;
                }
            }, (time - animTime) * 1000);
        }, animTime * 1000);
    } catch (e) {
        if (global.sendException)
            mp.serverLog(`Error in steelMaking.OreVein:explosionDynamitTimer: ${e.name}\n${e.message}\n${e.stack}`);
    }
})


mp.events.add('OreVein:GetDropPositions', (pos, point, count) => {
    try {
        if (objectsDrop[point] !== null && objectsDrop[point] !== undefined) {
            SendPoint(point);
        }
        else {
            CreateOres(point, count, pos);
            setTimeout(() => {
                mp.game.fire.addExplosion(pos.x, pos.y, pos.z, 10, 1, false, true, 1);
                mp.game.fire.addExplosion(pos.x, pos.y + 0.1, pos.z, 9, 1, false, true, 1);
                mp.game.fire.addExplosion(pos.x + 0.1, pos.y + 0.1, pos.z, 8, 1, false, true, 1);
            }, 500);
            setTimeout(() => {
                SendPoint(point);
            }, 7000);
        }
    } catch (e) {
        if (global.sendException)
            mp.serverLog(`Error in steelMaking.OreVein:GetDropPositions: ${e.name}\n${e.message}\n${e.stack}`);
    }
})

function SendPoint(point) {
    try {
        let positions = [];
        objectsDrop[point].forEach(obj => {
            positions.push(obj.getCoords(false));
        });
        DestroyOres(point);

        mp.events.callRemote('OreVeid:CreateDrops', point, JSON.stringify(positions));
    } catch (e) {
        if (global.sendException)
            mp.serverLog(`Error in steelMaking.SendPoint: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

function CreateOres(point, count, pos) {
    try {
        objectsDrop[point] = [];
        for (let i = 0; i < count; i++) {
            let obj = mp.objects.new(mp.game.joaat(stoneModel), new mp.Vector3(pos.x + (i % 3) * 0.3 - 0.3, pos.y + (i % 5) * 0.3 - 0.6, pos.z + 0.2 + 0.05 * i), {
                alpha: 255,
                dimension: 0,
                rotation: new mp.Vector3(0, 0, 0)
            });
            if (obj) {
                objectsDrop[point].push(obj);
                SetDinamic(obj);
            }
        }
    } catch (e) {
        if (global.sendException)
            mp.serverLog(`Error in steelMaking.CreateOres: ${e.name}\n${e.message}\n${e.stack}`);
    }
}
async function SetDinamic(obj) {
    while (obj && !obj.doesExist()) {
        await mp.game.waitAsync(0);
    }
    if (obj) {
        obj.freezePosition(false);
        obj.setDynamic(true);
        obj.setActivatePhysicsAsSoonAsItIsUnfrozen(true);
    }
}
function DestroyOres(point) {
    try {
        if (objectsDrop[point] != null && objectsDrop[point] != undefined) {
            objectsDrop[point].forEach(obj => {
                if (obj != null)
                    obj.destroy();
            });
            objectsDrop[point] = null;
        }
    } catch (e) {
        if (global.sendException)
            mp.serverLog(`Error in steelMaking.CreateOres: ${e.name}\n${e.message}\n${e.stack}`);
    }
}


mp.events.add('OreVein:explodeDynamit', (pos, point, count) => {
    try {
        if (objectC4[point]) {
            objectC4[point].destroy();
            objectC4[point] = null;
        }

        CreateOres(point, count, pos);
        setTimeout(() => {
            mp.game.fire.addExplosion(pos.x, pos.y, pos.z, 10, 1, true, false, 1);
            mp.game.fire.addExplosion(pos.x, pos.y + 0.1, pos.z, 9, 1, true, false, 1);
            mp.game.fire.addExplosion(pos.x + 0.1, pos.y + 0.1, pos.z, 8, 1, true, false, 1);
        }, 500);
        setTimeout(() => {
            DestroyOres(point);
        }, 10000);
    }
    catch (e) {
        mp.events.callRemote('srv_consoleLog', `Error in steelMaking.OreVein:explodeDynamit: ${e.name}\n${e.message}\n${e.stack}`);
    }
})


// mp.keys.bind(global.Keys.Key_NUMPAD8, false, function () {
//     mp.events.callRemote("OreVeid:savePoint");
// });

mp.events.add('render', () => {
    if (flagInZone >= 0 && useDetector) {
        if (nextUpdateDate < Date.now()) {
            let pos = mp.players.local.position;
            let dist = mp.game.gameplay.getDistanceBetweenCoords(zonePosition.x, zonePosition.y, zonePosition.z, pos.x, pos.y, pos.z, false);
            nextUpdateDate = Date.now() + (dist < 1 ? 1 : dist) * 100;
            mp.game.graphics.drawText(`.`, [0.01, 0.01], {
                scale: [2, 2],
                outline: true,
                color: [255, 0, 0, 255],
                font: 4
            });
            mp.game.audio.playSoundFrontend(-1, 'Beep_Red', 'DLC_HEIST_HACKING_SNAKE_SOUNDS', true);

        }
    }
});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const moveSettings = {
    size: {
        x: 45,
        y: 45
    },
    showIcons:[true, true, false, true],
    values:[
        {//LEFT X
            value: 90,
            min: -90,
            max: 270,
            step: 5,
            invert: true,
            enabled: true,
            callback: "camMoveAngleX"
        },
        {//LEFT Y
            value: .4,
            min: -.5,
            max: 1.5,
            step: .05,
            invert: false,
            enabled: true,
            callback: "camMoveCamZ"
        },
        {//RIGHT X
            value: 2,
            min: 1,
            max: 3,
            step: .1,
            invert: false,
            enabled: false,
            callback: ""
        },
        {//RIGHT Y
            value: .9,
            min: -1.1,
            max: .9,
            step: .05,
            invert: true,
            enabled: true,
            callback: "camMovePointZ"
        },
        { //WHEELE
            value: 2,
            min: .5,
            max: 2,
            step: .5,
            invert: false,
            enabled: true,
            callback: "camSetDist"
        }
    ]
}

let tattooList = [];
let tatooMenuOpen = false;

mp.events.add('tattoo:open', (price) => {
    const gender = mp.players.local.getVariable("GENDER") ? true : false;
    global.gui.setData("tattooShop/setData", JSON.stringify({price, gender}));
    if(!global.gui.openPage("TattooShop")) return;
	tatooMenuOpen = true;
    mp.game.cam.doScreenFadeOut(50);
    mp.players.local.freezePosition(true);
    
    const pos = mp.players.local.position;
    global.customCamera.setPos(new mp.Vector3(1864.089, 3747.348, 33) );
    global.customCamera.setPoint(new mp.Vector3(1864.089, 3747.348, 33));
    global.customCamera.moveCamZ(.9);
    global.customCamera.movePointZ(.9);
    global.customCamera.setDist(2);
    global.customCamera.moveAngleX(90);
    global.customCamera.switchOn(0);
    global.gui.setData('mouseMove/setSettings', JSON.stringify(moveSettings));
    global.gui.setData('mouseMove/setEnebled', true)
  
    mp.game.cam.doScreenFadeIn(1000);      
})

mp.events.add('tattoo:list:update', list => {
    tattooList = list;
    global.gui.setData('tattooShop/updateTattooList', JSON.stringify(list));
})

const categories = {
    "torso": 0,
    "head": 1,
    "leftarm": 2,
    "rightarm": 3,
    "leftleg": 4,
    "rightleg": 5,
}

mp.events.add('tattoo:select', (dict, name, slots)=>{
    mp.players.local.clearDecorations();
    tattooList.forEach(tattoo => {
        mp.players.local.setDecoration(tattoo.Collection, tattoo.Overlay);
    });
    mp.players.local.setDecoration(dict, name); // applay tattoo
})


mp.events.add('tattoo:buy', (category, id) => {
    if ( global.lastCheck > Date.now()) return;
    global.lastCheck = Date.now() + 500;
    const catId = categories[category];
    mp.events.callRemote("tattoo:buy", catId, id);
});

function closeTattooMenu() 
{
	if (!tatooMenuOpen) return;
	
	if (global.lastCheck > Date.now()) return;
    global.lastCheck = Date.now() + 500;
    mp.players.local.freezePosition(false);
    global.gui.setData('mouseMove/setEnebled', false);
    global.gui.close();
	tatooMenuOpen = false;
    mp.players.local.clearDecorations();
    global.customCamera.switchOff(0);
    mp.events.callRemote("tattoo:close");
}

mp.events.add('tattoo:close', () => {
    closeTattooMenu();
})

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    closeTattooMenu();
});

let tatooRemoveMenuOpen = false;
function closeRemoveMenu()
{
	if (!tatooRemoveMenuOpen) return;
	
	const gender = mp.players.local.getVariable("GENDER") ? true : false;
    global.gui.setData("tattooShop/setGender", gender);
    if(!global.gui.openPage("RemovingTattoo")) return;
	tatooRemoveMenuOpen = true;
    mp.game.cam.doScreenFadeOut(50);
    mp.players.local.freezePosition(true);
    
    const pos = mp.players.local.position;
    global.customCamera.setPos(new mp.Vector3(323.8332, -582.7084, 43.12974) );
    global.customCamera.setPoint(new mp.Vector3(323.8332, -582.7084, 43.12974));
    global.customCamera.moveCamZ(.9);
    global.customCamera.movePointZ(.9);
    global.customCamera.setDist(2);
    global.customCamera.moveAngleX(90);
    global.customCamera.switchOn(0);
    global.gui.setData('mouseMove/setSettings', JSON.stringify(moveSettings));
    global.gui.setData('mouseMove/setEnebled', true)
  
    mp.game.cam.doScreenFadeIn(1000);      
}

mp.events.add('tattoo:remove:open', () => {
    const gender = mp.players.local.getVariable("GENDER") ? true : false;
    global.gui.setData("tattooShop/setGender", gender);
    if(!global.gui.openPage("RemovingTattoo")) return;
	tatooRemoveMenuOpen = true;
    mp.game.cam.doScreenFadeOut(50);
    mp.players.local.freezePosition(true);
    
    const pos = mp.players.local.position;
    global.customCamera.setPos(new mp.Vector3(323.8332, -582.7084, 43.12974) );
    global.customCamera.setPoint(new mp.Vector3(323.8332, -582.7084, 43.12974));
    global.customCamera.moveCamZ(.9);
    global.customCamera.movePointZ(.9);
    global.customCamera.setDist(2);
    global.customCamera.moveAngleX(90);
    global.customCamera.switchOn(0);
    global.gui.setData('mouseMove/setSettings', JSON.stringify(moveSettings));
    global.gui.setData('mouseMove/setEnebled', true)
  
    mp.game.cam.doScreenFadeIn(1000);      
})

mp.events.add('tattoo:remove:close', () => {
    closeRemoveMenu();
})

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    closeRemoveMenu();
});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const moveSettings = {
    size: {
        x: 35,
        y: 35
    },
    showIcons:[true, true, false, true],
    values:[
        {//LEFT X
            value: -40,
            min: -110,
            max: 30,
            step: 5,
            invert: true,
            enabled: true,
            callback: "camMoveAngleX"
        },
        {//LEFT Y
            value: 0.1,
            min: -.5,
            max: .8,
            step: .05,
            invert: false,
            enabled: true,
            callback: "camMoveCamZ"
        },
        {//RIGHT X
            value: 2,
            min: 1,
            max: 3,
            step: .1,
            invert: false,
            enabled: false,
            callback: ""
        },
        {//RIGHT Y
            value: 0,
            min: -1,
            max: 1,
            step: .05,
            invert: true,
            enabled: false,
            callback: "camMovePointZ"
        },
        { //WHEELE
            value: 1,
            min: .6,
            max: 1.2,
            step: .2,
            invert: false,
            enabled: true,
            callback: "camSetDist"
        }
    ]
}

mp.events.add('openBarber', (price, playerdata)=>{
    barberScene.blocked = false;
    global.showHud(false); 
    mp.game.cam.doScreenFadeOut(0);
    setTimeout(()=>{

        let gender = global.localplayer.getVariable("GENDER");
        global.gui.setData("barbershop/setData", JSON.stringify({gender, price}));
        // mp.gui.notify(mp.gui.notifyType.INFO, playerdata.money, 3000);
        // mp.gui.notify(mp.gui.notifyType.INFO, playerdata.bank, 3000);
        global.gui.setData("barbershop/setMoney", playerdata);

        global.customCamera.setPos(new mp.Vector3(barberScene.position.x, barberScene.position.y, barberScene.position.z + 1.6));
        global.customCamera.setPoint(new mp.Vector3(barberScene.position.x, barberScene.position.y, barberScene.position.z + 1.6));
        global.customCamera.moveCamZ(.1);
        global.customCamera.setDist(1);
        global.customCamera.moveAngleX(-40);
        global.customCamera.switchOn(0);
        global.gui.setData('mouseMove/setSettings', JSON.stringify(moveSettings));
        global.gui.setData('mouseMove/setEnebled', true);
        
        playEnterAnim();
    },1000)
})



mp.events.add('closeBarber', ()=>{
    if(barberScene.blocked) return; 
    barberScene.blocked = true;
    global.gui.setData('mouseMove/setEnebled', false);
    global.gui.close();
    global.showHud(false); 
    global.customCamera.switchOff(0);
    playExitAnim();
})

mp.keys.bind(global.Keys.Key_ESCAPE, false, function() {
    if(barberScene.blocked) return; 
    barberScene.blocked = true;
    global.gui.setData('mouseMove/setEnebled', false);
    global.gui.close();
    global.showHud(false); 
    global.customCamera.switchOff(0);
    playExitAnim();
});


mp.events.add('buyBarber', (type, style, color, cashtype)=>{
    let gender = global.localplayer.getVariable("GENDER");
    if((gender && +style == 23) || (!gender && style == 24)) return; 

    if(barberScene.blocked) return;
    barberScene.blocked = true;

    mp.events.callRemote('buyBarber', type, +style, +color, cashtype);
})

mp.events.add('buyBarberCallback', (type, price)=>{
    switch (+type) {
        case 1:
            mp.events.call('notify', 1, 9, "client_161", 3000);
            barberScene.blocked = false;
            break;
        case 2:
            mp.events.call('notify', 1, 9, "client_162", 3000);   
            barberScene.blocked = false;         
            break;
        case 3:
            mp.events.call('notify', 1, 9, "client_163", 3000);   
            barberScene.blocked = false;
            break;
        case 4:            
            mp.events.call('notify', 2, 9, "Вы оплатили услугу Барбер-Шопа "+price+"$", 3000);               
            playIdleAnim();
            break;       
        default:
            barberScene.blocked = false;
            break;
    }
})

mp.events.add('changeBarber', (type, style, color)=>{
    switch (type) {
        case 'hairstyle':
            const gender = global.localplayer.getVariable("GENDER");
            if((gender && +style == 23) || (!gender && style == 24)) return; 
            global.setClothing(global.localplayer, 2, +style, 0, 0);
            global.localplayer.setHairColor(+color, 0);
            break;
        case 'eyebrows':
            global.localplayer.setHeadOverlay(2, +style, 100, +color, +color);
            break;
        case 'torso':
            global.localplayer.setHeadOverlay(10, +style, 100, +color, +color);            
            break;
        case 'lenses':
            global.localplayer.setEyeColor(+style);
            break;
        case 'pomade':
            global.localplayer.setHeadOverlay(8, +style, 100, +color, +color);  
            break;
        case 'blush':
            global.localplayer.setHeadOverlay(5, +style, 100, +color, +color);  
            break;
        case 'shadows':
            global.localplayer.setHeadOverlay(4, +style, 100, 0, 0); 
            global.localplayer.setHeadOverlayColor(4, 2, +color, +color); // makeup 
            break;
        case 'beard':
            global.localplayer.setHeadOverlay(1, +style, 100, +color, +color);
            break;
    
        default:
            break;
    }
})

mp.events.add("render", ()=>{
    if(barberScene.handler.begine && barberScene.handler.condition()){
        barberScene.handler.begine = false;
        barberScene.handler.callback();
    }
})

const barberScene = {
    id: -1,
    blocked: true,
	position: new mp.Vector3(138.3647, -1709.252, 28.3182),
    dict: "misshair_shop@barbers",
    handler:{
        begine: false,
        condition(){},
        callback(){}
    },
	barber:{
		entity: null,
		model: -2109222095,
        enter: "keeper_enterchair",
        exit: "keeper_exitchair",
        base: "keeper_base",
        idle: "keeper_idle_b"
    },
    player:{
		entity: null,
		model: 0,
		enter: "player_enterchair",
        exit: "player_exitchair",
        idle: "player_idle_b"
	},
	scissors:{
		entity: null,
		model: 3070787497,
		enter: "scissors_enterchair",
        exit: "scissors_exitchair",
        idle: "scissors_idle_b"
    },
    createSceneObjects(){
        mp.game.streaming.requestModel(this.barber.model);
        mp.game.streaming.requestModel(this.scissors.model);	
        for (let index = 0;(!mp.game.streaming.hasModelLoaded(this.barber.model) || !mp.game.streaming.hasModelLoaded(this.scissors.model)) && index < 250; index++) {
            mp.game.wait(0);
        };
        
        if(this.barber.entity == null) this.barber.entity = mp.peds.newValid(this.barber.model, this.position, -40, mp.players.local.dimension)
        if(this.scissors.entity == null) this.scissors.entity = mp.objects.new(this.scissors.model, this.position, {dimension: mp.players.local.dimension});
    },
    deleteSceneObjects(){
        if(this.barber.entity != null) this.barber.entity.destroy();
        if(this.scissors.entity != null) this.scissors.entity.destroy();
        this.barber.entity = null;
        this.scissors.entity = null;
    },
    loadDict(){
        if(!mp.game.streaming.hasAnimDictLoaded(this.dict)){            
            mp.game.streaming.requestAnimDict(this.dict);
            for (let index = 0;!mp.game.streaming.hasAnimDictLoaded(this.dict) && index < 250; index++) {
                mp.game.wait(0);
            };
        }
    }
}

function playEnterAnim(){
    try {
        barberScene.loadDict();
        barberScene.createSceneObjects();

        barberScene.handler.callback = ()=>{
            global.gui.openPage("Barbershop");
        }

        barberScene.handler.condition = ()=>{
            return mp.players.local.getAnimCurrentTime(barberScene.dict, barberScene.player.enter) > .9;
        }

        barberScene.id = mp.game.ped.createSynchronizedScene(barberScene.position.x, barberScene.position.y, barberScene.position.z, 0, 0, -40, 2);	
        mp.game.ped.setSynchronizedSceneLooped(barberScene.id, false);
        mp.game.ped.setSynchronizedScenePhase(barberScene.id, 0);

        mp.players.local.taskPlayAnimAdvanced(barberScene.dict, barberScene.player.enter, barberScene.position.x, barberScene.position.y, barberScene.position.z, 0, 0, -40, 8, 1, -1, 5642, 0, 2, 1);
        barberScene.scissors.entity.playSynchronizedAnim(barberScene.id, barberScene.scissors.enter, barberScene.dict, 1000, 8, 0, 1000);	
        barberScene.barber.entity.taskPlayAnimAdvanced(barberScene.dict, barberScene.barber.enter, barberScene.position.x, barberScene.position.y, barberScene.position.z, 0, 0, -40, 8, 1, -1, 5642, 0, 2, 1);

        mp.game.cam.doScreenFadeIn(100);
        barberScene.handler.begine = true;
    } catch (e) {
        if(global.sendException) mp.serverLog(`Error in basesync.detachObject: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

function playIdleAnim(){
    try {
        barberScene.createSceneObjects();

        barberScene.handler.callback = ()=>{
            barberScene.blocked = false;
        }

        barberScene.handler.condition = ()=>{
            return mp.players.local.getAnimCurrentTime(barberScene.dict, barberScene.player.idle) > .9;
        }

        barberScene.id = mp.game.ped.createSynchronizedScene(barberScene.position.x, barberScene.position.y, barberScene.position.z, 0, 0, -40, 2);	
        mp.game.ped.setSynchronizedSceneLooped(barberScene.id, false);
        mp.game.ped.setSynchronizedScenePhase(barberScene.id, 0);

        mp.players.local.taskPlayAnimAdvanced(barberScene.dict, barberScene.player.idle, barberScene.position.x, barberScene.position.y, barberScene.position.z, 0, 0, -40, 8, 1, -1, 5642, 0, 2, 1);
        barberScene.scissors.entity.playSynchronizedAnim(barberScene.id, barberScene.scissors.idle, barberScene.dict, 1000, 8, 0, 1000);	
        barberScene.barber.entity.taskPlayAnimAdvanced(barberScene.dict, barberScene.barber.idle, barberScene.position.x, barberScene.position.y, barberScene.position.z, 0, 0, -40, 8, 1, -1, 5642, 0, 2, 1);

        barberScene.handler.begine = true;
    } catch (error) {
        if(global.sendException) mp.serverLog(`Error in basesync.detachObject: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

function playExitAnim(){
    try {
        barberScene.createSceneObjects();

        barberScene.handler.callback = ()=>{
            mp.events.callRemote('closeBarber');
            barberScene.deleteSceneObjects();
            mp.players.local.clearTasksImmediately();
            mp.players.local.setCollision(true, true);
        }

        barberScene.handler.condition = ()=>{
            return mp.players.local.getAnimCurrentTime(barberScene.dict, barberScene.player.exit) > .9;
        }

        barberScene.id = mp.game.ped.createSynchronizedScene(barberScene.position.x, barberScene.position.y, barberScene.position.z, 0, 0, -40, 2);	
        mp.game.ped.setSynchronizedSceneLooped(barberScene.id, false);
        mp.game.ped.setSynchronizedScenePhase(barberScene.id, 0);

        mp.players.local.taskPlayAnimAdvanced(barberScene.dict, barberScene.player.exit, barberScene.position.x, barberScene.position.y, barberScene.position.z, 0, 0, -40, 8, 1, -1, 5642, 0, 2, 1);
        barberScene.scissors.entity.playSynchronizedAnim(barberScene.id, barberScene.scissors.exit, barberScene.dict, 1000, 8, 0, 1000);	
        barberScene.barber.entity.taskPlayAnimAdvanced(barberScene.dict, barberScene.barber.exit, barberScene.position.x, barberScene.position.y, barberScene.position.z, 0, 0, -40, 8, 1, -1, 5642, 0, 2, 1);        
        global.showHud(true);
        barberScene.handler.begine = true;
    } catch (error) {
        if(global.sendException) mp.serverLog(`Error in basesync.detachObject: ${e.name}\n${e.message}\n${e.stack}`);
    }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const moveSettings = {
    size: {
        x: 35,
        y: 35
    },
    showIcons:[true, true, false, true],
    values:[
        {//LEFT X
            value: 1,
            min: -1800,
            max: 1800,
            step: 5,
            invert: true,
            enabled: true,
            callback: "camMoveAngleX"
        },
        {//LEFT Y
            value: .4,
            min: -.5,
            max: 1.5,
            step: .05,
            invert: false,
            enabled: true,
            callback: "camMoveCamZ"
        },
        {//RIGHT X
            value: 2,
            min: 1,
            max: 3,
            step: .1,
            invert: false,
            enabled: false,
            callback: ""
        },
        {//RIGHT Y
            value: 0,
            min: -1,
            max: 1,
            step: .05,
            invert: true,
            enabled: true,
            callback: "camMovePointZ"
        },
        { //WHEELE
            value: 2.5,
            min: .5,
            max: 3,
            step: .5,
            invert: false,
            enabled: true,
            callback: "camSetDist"
        }
    ]
}
    
function clearClothes() {
    const gender =  global.localplayer.getVariable("GENDER") ? 1 : 0;

    global.localplayer.clearProp(0);
    global.localplayer.clearProp(1);
    global.localplayer.clearProp(2);
    global.localplayer.clearProp(6);
    global.localplayer.clearProp(7);

    global.setClothing(global.localplayer, 1, global.clothesEmpty[gender][1], 0, 0);
    global.setClothing(global.localplayer, 3, global.clothesEmpty[gender][3], 0, 0);
    global.setClothing(global.localplayer, 4, global.clothesEmpty[gender][4], 0, 0);
    global.setClothing(global.localplayer, 5, global.clothesEmpty[gender][5], 0, 0);
    global.setClothing(global.localplayer, 6, global.clothesEmpty[gender][6], 0, 0);
    global.setClothing(global.localplayer, 7, global.clothesEmpty[gender][7], 0, 0);
    global.setClothing(global.localplayer, 8, global.clothesEmpty[gender][8], 0, 0);
    global.setClothing(global.localplayer, 9, global.clothesEmpty[gender][9], 0, 0);
    global.setClothing(global.localplayer, 10, global.clothesEmpty[gender][10], 0, 0);
    global.setClothing(global.localplayer, 11, global.clothesEmpty[gender][11], 0, 0);
}    

let opened = false;
mp.events.add('openClothes', (price, pos, playerdata) => {
    const gender = global.localplayer.getVariable("GENDER") ? 1 : 0;
    global.gui.setData('clothingStore/setData', JSON.stringify({gender, price}));
    global.gui.setData("clothingStore/setMoney", playerdata);
    if(!global.gui.openPage('ClothingStore')) return;    
    opened = true;
    mp.game.cam.doScreenFadeOut(50);
    global.localplayer.freezePosition(true);
    clearClothes();
    global.customCamera.setPos(new mp.Vector3(pos.x, pos.y, pos.z) );
    global.customCamera.setPoint(new mp.Vector3(pos.x, pos.y, pos.z + .2));
    global.customCamera.moveCamZ(.4);
    global.customCamera.setDist(2.5);
    global.customCamera.moveAngleX(-1);
    global.customCamera.switchOn(0);
    global.gui.setData('mouseMove/setSettings', JSON.stringify(moveSettings));
    global.gui.setData('mouseMove/setEnebled', true);
    mp.game.cam.doScreenFadeIn(1000);      
    //global.gui.playSound("editor_bg", .04, true);
})


function closeShop(){
    opened = false;
    global.localplayer.freezePosition(false);
    global.gui.setData('mouseMove/setEnebled', false);
    global.gui.close();    
    global.customCamera.switchOff(0);
    mp.events.callRemote('cancelClothes');    
}

mp.keys.bind(global.Keys.Key_ESCAPE, false, function() {
    if(opened) closeShop();
});


mp.events.add('componentVariation', (clotheId, variation, color) => {
    //mp.serverLog(`componentVariation: ${clotheId} - ${variation} - ${color}`);
    global.setClothing(global.localplayer, +clotheId, +variation, +color, 0);
});
mp.events.add('propVariation', (cloheId, vaiation, color) => {
    //mp.serverLog(`propVariation: ${clotheId} - ${variation} - ${color}`);
    global.setProp(global.localplayer, +cloheId, +vaiation, +color, true);
});
mp.events.add('buyClothes', (type, style, color, cashbool) => {
    mp.events.callRemote('buyClothes', type, style, color, cashbool);
})
mp.events.add('closeClothes', () => {
    if ( global.lastCheck > Date.now()) return;
    global.lastCheck = Date.now() + 500;
    closeShop();
})
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const moveSettings = {
    size: {
        x: 40,
        y: 40
    },
    showIcons:[true, false, false, false],
    values:[
        {//LEFT X
            value: 160,
            min: 110,
            max: 250,
            step: 5,
            invert: true,
            enabled: true,
            callback: "camMoveAngleX"
        },
        {//LEFT Y
            value: 0,
            min: -.5,
            max: 1.5,
            step: .05,
            invert: false,
            enabled: true,
            callback: "camMoveCamZ"
        },
        {//RIGHT X
            value: 2,
            min: 1,
            max: 3,
            step: .1,
            invert: false,
            enabled: false,
            callback: ""
        },
        {//RIGHT Y
            value: 0,
            min: -1,
            max: 1,
            step: .05,
            invert: true,
            enabled: false,
            callback: "camMovePointZ"
        },
        { //WHEELE
            value: 1.5,
            min: .5,
            max: 3,
            step: .5,
            invert: false,
            enabled: true,
            callback: "camSetDist"
        }
    ]
}

let opened = false;

mp.events.add('openMasks', (price, playerdata) => {
    global.gui.setData("maskShop/setPrice", price)
    global.gui.setData("maskShop/setMoney", playerdata);
    if(!global.gui.openPage("MaskShop")) return;
    opened = true;
    global.localplayer.setRotation(0,0,70,2,true);
    global.localplayer.freezePosition(true);
    global.setClothing(global.localplayer, 1, 1, 0, 0);

    global.localplayer.clearProp(0);
    global.localplayer.clearProp(1);

    const pos = global.localplayer.position;
    global.customCamera.setPos(new mp.Vector3(pos.x, pos.y, pos.z + .6) );
    global.customCamera.setPoint(new mp.Vector3(pos.x, pos.y, pos.z + .6));
    global.customCamera.moveCamZ(0);
    global.customCamera.setDist(1.5);
    global.customCamera.moveAngleX(160);
    global.customCamera.switchOn(0);
    global.gui.setData('mouseMove/setSettings', JSON.stringify(moveSettings));
    global.gui.setData('mouseMove/setEnebled', true);
})

mp.events.add('buyMasks', (variation, color, paytype) => {
    if ( global.lastCheck > Date.now()) return;
    global.lastCheck = new Date() + 500;
    //closeMaskShop()
    mp.events.callRemote('buyMasks', variation, color, paytype);
})

mp.events.add('closeMasks', () => {
    if ( global.lastCheck > Date.now()) return;
    global.lastCheck = Date.now() + 500;
    closeMaskShop()
})

mp.events.add('setMask', (variation, color) => {
    global.setClothing(global.localplayer, 1, variation, color, 0);
})

mp.keys.bind(global.Keys.Key_ESCAPE, false, ()=> {
    if(opened)
        closeMaskShop();
})

function closeMaskShop(){     
    global.localplayer.freezePosition(false);
    global.gui.setData('mouseMove/setEnebled', false);
    global.gui.close();   
    opened = false; 
    global.customCamera.switchOff(0);
    mp.events.callRemote('cancelMasks');  
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const WeaponShop = __webpack_require__(213);

let shop = new WeaponShop();

mp.events.add('wshop:open', (prices, playerdata) => {
    shop.open(prices, playerdata);
})

mp.events.add('cef:wshop:close', () => {
    shop.close();
})

mp.events.add('cef:wshop:update:model', (id, slot, compIndex, model)=>{
    shop.update(id, slot, compIndex, model);
});

mp.events.add('wshopbuy', (cat, id, val) => {
    if (global.lastCheck > Date.now()) return;
    global.lastCheck = Date.now() + 500;
    mp.events.callRemote('wshopbuy', cat, id, val);
})

mp.events.add('wshop:move:x', (val) => {
    shop.moveX(val);
})

mp.events.add('wshop:move:y', (val) => {
    shop.moveY(val);
})

mp.events.add('wshop:move:z', (val) => {
    shop.moveZ(val);
})

mp.events.add('cef:wshop:buy', (count, payCard)=>{
    shop.buy(count, payCard);
})

mp.keys.bind(global.Keys.Key_ESCAPE, false, ()=>{
    shop.close();
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const WeaponModel = __webpack_require__(214);
const ItemModel = __webpack_require__(217);
const moveSettings = __webpack_require__(218);

module.exports = class WeaponShop{
    constructor() {
        this.model = null;
        this.slotName = "weapon:shop";
        this.trargetPosition = new mp.Vector3(251.994, -52.306, 71.151);
        this.cameraPosition = new mp.Vector3(252.787, -50.306, 71.151);
        this.heading = 160;
        this.baseData = [-1,-1,-1,-1,-1,-1, 0];
        this.camera = mp.cameras.new("default", this.cameraPosition, new mp.Vector3(), 40);
        this.camera.pointAtCoord(this.trargetPosition.x, this.trargetPosition.y, this.trargetPosition.z);
        this.shopOpened = false;
    }

    open(prices, playerdata){
        if (this.shopOpened || gui.isOpened()) return;
        mp.game.cam.doScreenFadeOut(0);
        this.update(-1,-1,-1);
        global.gui.setData('weaponShop/setWeapons', JSON.stringify(prices));  
        global.gui.setData("weaponShop/setMoney", playerdata);
        setTimeout(()=>{
            this.shopOpened = true;
            this.camera.setActive(true);
            mp.game.cam.renderScriptCams(true, false, 0, true, false);
            mp.game.cam.renderScriptCams(true, false, 0, true, false); 
            mp.game.streaming.setFocusArea(this.trargetPosition.x, this.trargetPosition.y, this.trargetPosition.z, 0, 0, 0);
            mp.game.cam.doScreenFadeIn(300);  
            global.gui.openPage('WeaponShop');
            global.gui.setData('mouseMove/setSettings', JSON.stringify(moveSettings));
            global.gui.setData('mouseMove/setEnebled', true);
        }, 500)
    }

    close(){
        if(!this.shopOpened) return;
        global.gui.setData('weaponShop/close');
        mp.game.cam.doScreenFadeOut(0);
        global.gui.close();
        mp.events.callRemote("wshop:close"); //<<<<<<<<<<<<<<<<<
        setTimeout(()=>{
            this.shopOpened = false;
            this.camera.setActive(false);
            mp.game.cam.renderScriptCams(false, false, 0, true, false);
            this.update(-1, -1, -1);
            mp.game.invoke (global.NATIVES.RESET_FOCUS_AREA); //<<<<<<<<<<<<<<<<<
            mp.game.cam.doScreenFadeIn(300);
            global.gui.setData('mouseMove/setEnebled', false);
        }, 500)
    }

    buy(count, payCard){
        if(this.model == null) return;
        var data = this.model.weaponData === undefined ? [] : this.model.weaponData.slice(1,7);
        mp.events.callRemote("wshop:buy:weapon", this.model.id, JSON.stringify(data), count, payCard);
    }

    moveX(val){
        if(this.model == null) return;
        this.model.rotateX = val;
        this.model.updateRotation();
    }
    moveY(val){
        if(this.model == null) return;
        this.model.rotateY = val;
        this.model.updateRotation();
    }

    moveZ(val){
        if(this.model == null) return;
        this.model.rotateZ = val;
        this.model.updateRotation();
    }

    update(id, slot, compIndex, model){
        if(id == -1){
            if(this.model !== null) this.model.destroy(false);            
            this.model = null;
        }else{
            if(this.model === null) {
                this.model = model == -1 ?
                    new WeaponModel(mp.players.local, this.slotName, [id, ...this.baseData], this.trargetPosition, this.heading) :
                    new ItemModel(mp.players.local, id, model, this.trargetPosition, this.heading)
            }else{
                if(this.model.id != id || slot == -1){
                    this.model.destroy(false);
                    this.model = model == -1 ? new WeaponModel(mp.players.local, this.slotName, [id, ...this.baseData],this.trargetPosition, this.heading) :
                    new ItemModel(mp.players.local, id, model, this.trargetPosition, this.heading);
                }
            }
    
            if(compIndex == -1)
                this.model.removeComponent(slot, compIndex);
            else
                this.model.setComponent(slot, compIndex);
        }        
        global.gui.setData('weaponShop/weaponLoaded'); 
    }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const waeaponConfigs = __webpack_require__(215); 
const attachInfos = __webpack_require__(216);



module.exports = class WeaponModel{
    constructor(player, slot, weaponData, position = undefined, heading = undefined){
        /*
            weaponData имеет 9 элементов
            0: id оружия
            1-7: инвексы установленых компонентов для каждого из слотов
            8: количество патронов 
        */
        this.id = weaponData[0];
        this.config = waeaponConfigs[this.id];
        if(!this.config) {
            mp.serverLog(`WeaponModel no config for weapon ${this.id}`);
            return;
        }   
        this.weaponHash = this.config.Hash;
        this.ammoType = this.config.AmmoType;
        this.lastReport = 0;
        this.player = player;   
        this.weaponData = weaponData;
        this.position = position;
        this.slot = slot;
        this.rotateX = 0;
        this.rotateY = 0;
        this.ammo = this.weaponData[7] || 0;
        this.rotateZ = heading;
        this.createModel();        
    }

    createModel(){
        const skin = this.weaponData[6] < 0 ? undefined : this.config.Components[6][this.weaponData[6]];            
        if(!mp.game.weapon.hasWeaponAssetLoaded(this.weaponHash)){
            mp.game.weapon.requestWeaponAsset(this.weaponHash, 31, 0);
            for (let index = 0; !mp.game.weapon.hasWeaponAssetLoaded(this.weaponHash) && index < 250 ; index++) {
                mp.game.wait(0);
            }                    
        }
    
        const pos = this.position === undefined ? new mp.Vector3(this.player.position.x, this.player.position.y, this.player.position.z): this.position;
        this.weapon = mp.game.weapon.createWeaponObject(this.weaponHash, 0 , pos.x, pos.y, pos.z, true, 0, skin == undefined ? 0 : this.getSkin(skin));
        if(this.rotateZ !== undefined) this.updateRotation();
        for (let index = 0; this.weapon === 0 && index < 250 ; index++) {
            mp.game.wait(0);
        }
        if(this.weapon == 0) return false;
        for (let index = 1; index < 6; index++) {
            this.setComponent(index, this.weaponData[index]);
        }
        return true;
    }

    attach(){
        const attachInfo = attachInfos[this.slot];
        global.customWeaponsModels.push(this.weapon);
        if(attachInfo == undefined) return;
        mp.game.invoke(global.NATIVES.ATTACH_ENTITY_TO_ENTITY, this.weapon, this.player.handle, +attachInfo.bone, 
            +attachInfo.offset.x, +attachInfo.offset.y, +attachInfo.offset.z, 
            +attachInfo.rotate.x,  +attachInfo.rotate.y,  +attachInfo.rotate.z,
             true, false, false, false, 0, true
        );
    }

    destroy(){       
        mp.game.object.deleteObject(this.weapon);
        const index = global.customWeaponsModels.findIndex(w=>w == this.weapon);
        if(index !== -1){
            global.customWeaponsModels.splice(index, 1);
        }
    }

    requestComponent(hash){
        const model = mp.game.weapon.getWeaponComponentTypeModel(+hash);
        if(model === 0 || !mp.game.streaming.isModelValid(model)) return;
        if(!mp.game.streaming.hasModelLoaded(model)){
            mp.game.streaming.requestModel2(model); 
            for (let index = 0; !mp.game.streaming.hasModelLoaded(model) && index < 250; index++) {
                mp.game.wait(0);
            }
        }
    }

    getSkin(skin){
        const model = mp.game.weapon.getWeaponComponentTypeModel(+skin);
        if(model === 0 || !mp.game.streaming.isModelValid(model)) return 0;
        if(!mp.game.streaming.hasModelLoaded(model)){
            mp.game.streaming.requestModel2(model); 
            for (let index = 0; !mp.game.streaming.hasModelLoaded(model) && index < 250; index++) {
                mp.game.wait(0);
            }
        }      
        return model;
    }
   
   
    updateRotation(){
        mp.game.invoke(global.NATIVES.SET_ENTITY_ROTATION, this.weapon, +this.rotateX + .01, +this.rotateY + .01, +this.rotateZ + .01, 1, true)
    }

    removeComponent(slot){
        if(
            slot < 1 || 
            this.weaponData[slot] == undefined ||
            this.config.Components[slot] == undefined ||
            this.config.Components[slot][this.weaponData[slot]] == undefined
        ) return;
        if(slot == 6){
            mp.game.object.deleteObject(this.weapon);
            this.weaponData[slot] = -1;
            this.createModel();
        }else{
            const element = this.config.Components[slot][this.weaponData[slot]];
            mp.game.weapon.removeWeaponComponentFromWeaponObject(this.weapon, +element);
            this.weaponData[slot] = -1;
        }
    }

    setComponent(type, index){
        if(
            type < 1 || 
            this.weaponData[type] == undefined ||
            this.config.Components[type] == undefined ||
            this.config.Components[type][index] == undefined
        ) return;
        this.weaponData[type] = index;
        if(type == 6){
            mp.game.object.deleteObject(this.weapon);
            this.createModel();
        }else{
            const element = this.config.Components[type][index];
            this.requestComponent(element)
            mp.game.weapon.giveWeaponComponentToWeaponObject(this.weapon, +element);
        }
    }
}
//3l6NZhpImg1jdk5h
//lglxUS7L1Rm741s1
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 215 */
/***/ (function(module, exports) {

module.exports = {
  "52": {
    "Hash": 453432689,
    "AmmoType": 118,
    "Components": {
      "1": [
        1709866683
      ],
      "2": [
        899381934
      ],
      "3": [
        4275109233,
        3978713628
      ],
      "4": [],
      "5": [],
      "6": [
        3610841222
      ]
    },
    "Name": null
  },
  "53": {
    "Hash": 1593441988,
    "AmmoType": 118,
    "Components": {
      "1": [
        2205435306
      ],
      "2": [
        899381934
      ],
      "3": [
        4275109233,
        3978713628
      ],
      "4": [],
      "5": [],
      "6": [
        3328527730
      ]
    },
    "Name": null
  },
  "60": {
    "Hash": 584646201,
    "AmmoType": 118,
    "Components": {
      "1": [
        3271853210
      ],
      "2": [
        899381934
      ],
      "3": [
        834974250,
        614078421
      ],
      "4": [],
      "5": [],
      "6": [
        2608252716
      ]
    },
    "Name": null
  },
  "54": {
    "Hash": 2578377531,
    "AmmoType": 118,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [
        899381934
      ],
      "3": [
        580369945,
        3654528146
      ],
      "4": [],
      "5": [],
      "6": [
        2008591151
      ]
    },
    "Name": null
  },
  "59": {
    "Hash": 3249783761,
    "AmmoType": 118,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        3917905123
      ],
      "4": [],
      "5": [],
      "6": [
        384708672,
        2492708877
      ]
    },
    "Name": null
  },
  "55": {
    "Hash": 3218215474,
    "AmmoType": 118,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        4169150169,
        2063610803
      ],
      "4": [],
      "5": [],
      "6": [
        2150886575
      ]
    },
    "Name": null
  },
  "56": {
    "Hash": 3523564046,
    "AmmoType": 118,
    "Components": {
      "1": [
        3271853210
      ],
      "2": [
        899381934
      ],
      "3": [
        222992026,
        1694090795
      ],
      "4": [],
      "5": [],
      "6": [
        2053798779
      ]
    },
    "Name": null
  },
  "65": {
    "Hash": 3415619887,
    "AmmoType": 118,
    "Components": {
      "1": [
        654802123
      ],
      "2": [
        899381934
      ],
      "3": [
        3122911422,
        3336103030,
        15712037,
        284438159,
        231258687
      ],
      "4": [
        1108334355,
        77277509
      ],
      "5": [],
      "6": [
        3225415071,
        11918884,
        176157112,
        4074914441,
        288456487,
        398658626,
        628697006,
        925911836,
        1222307441,
        552442715,
        3646023783
      ]
    },
    "Name": null
  },
  "64": {
    "Hash": 2285322324,
    "AmmoType": 118,
    "Components": {
      "1": [
        1709866683,
        2860680127
      ],
      "2": [
        1246324211
      ],
      "3": [
        21392614,
        3465283442,
        2418909806,
        3870121849,
        2366665730,
        3239176998
      ],
      "4": [
        1205768792
      ],
      "5": [],
      "6": [
        259780317,
        2321624822,
        1996130345,
        2839309484,
        2626704212,
        1308243489,
        1122574335,
        1420313469,
        109848390,
        593945703,
        1142457062,
        3891161322,
        691432737,
        987648331,
        3863286761,
        3447384986,
        4202375078,
        3800418970,
        730876697,
        583159708,
        2366463693,
        52055783
      ]
    },
    "Name": null
  },
  "62": {
    "Hash": 2548703416,
    "AmmoType": 118,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "63": {
    "Hash": 3219281620,
    "AmmoType": 118,
    "Components": {
      "1": [
        1709866683,
        568543123
      ],
      "2": [
        1140676955
      ],
      "3": [
        2499030370,
        1591132456,
        634039983,
        733837882,
        2248057097,
        1329061674
      ],
      "4": [
        2396306288
      ],
      "5": [],
      "6": [
        1550611612,
        368550800,
        2525897947,
        24902297,
        4066925682,
        3710005734,
        3141791350,
        1301287696,
        1597093459,
        1769871776,
        2467084625,
        3036451504,
        438243936,
        3839888240,
        740920107,
        3753350949,
        1809261196,
        2648428428,
        3004802348,
        3330502162,
        1135718771,
        1253942266
      ]
    },
    "Name": null
  },
  "57": {
    "Hash": 137902532,
    "AmmoType": 118,
    "Components": {
      "1": [
        3271853210
      ],
      "2": [],
      "3": [
        1168357051,
        867832552
      ],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "66": {
    "Hash": 324215364,
    "AmmoType": 119,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [
        899381934
      ],
      "3": [
        3410538224,
        283556395
      ],
      "4": [
        2637152041
      ],
      "5": [],
      "6": [
        1215999497
      ]
    },
    "Name": null
  },
  "68": {
    "Hash": 736523883,
    "AmmoType": 119,
    "Components": {
      "1": [
        3271853210
      ],
      "2": [
        2076495324
      ],
      "3": [
        643254679,
        889808635,
        2043113590
      ],
      "4": [
        1019656791
      ],
      "5": [],
      "6": [
        663170192
      ]
    },
    "Name": null
  },
  "69": {
    "Hash": 4024951519,
    "AmmoType": 119,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [
        2076495324
      ],
      "3": [
        2366834608,
        3141985303
      ],
      "4": [
        2637152041
      ],
      "5": [],
      "6": [
        663517359
      ]
    },
    "Name": null
  },
  "74": {
    "Hash": 3173288789,
    "AmmoType": 119,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        2227745491,
        2474561719
      ],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "75": {
    "Hash": 2024373456,
    "AmmoType": 119,
    "Components": {
      "1": [
        3271853210,
        3113485012,
        3362234491,
        3725708239,
        3968886988,
        48731514,
        880736428,
        1303784126
      ],
      "2": [
        2076495324
      ],
      "3": [
        1277460590,
        3112393518,
        2146055916,
        3650233061,
        974903034,
        190476639
      ],
      "4": [
        2681951826,
        3842157419,
        1038927834
      ],
      "5": [],
      "6": [
        3298267239,
        940943685,
        1263226800,
        3966931456,
        1224100642,
        899228776,
        616006309,
        2733014785,
        572063080,
        1170588613
      ]
    },
    "Name": null
  },
  "67": {
    "Hash": 3675956304,
    "AmmoType": 119,
    "Components": {
      "1": [
        3271853210
      ],
      "2": [],
      "3": [
        1198425599,
        3106695545,
        2850671348
      ],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "70": {
    "Hash": 171789620,
    "AmmoType": 119,
    "Components": {
      "1": [],
      "2": [
        2076495324
      ],
      "3": [
        1125642654,
        860508675,
        1857603803
      ],
      "4": [
        2855028148
      ],
      "5": [
        202788691
      ],
      "6": []
    },
    "Name": null
  },
  "71": {
    "Hash": 2634544996,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        4097109892,
        2182449991
      ],
      "4": [
        1006677997
      ],
      "5": [],
      "6": [
        3604658878
      ]
    },
    "Name": null
  },
  "72": {
    "Hash": 2144741730,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        3791631178,
        3603274966
      ],
      "4": [
        2698550338
      ],
      "5": [
        202788691
      ],
      "6": [
        2466172125
      ]
    },
    "Name": null
  },
  "76": {
    "Hash": 3686625920,
    "AmmoType": 120,
    "Components": {
      "1": [
        3113485012,
        3362234491,
        3725708239,
        3968886988,
        48731514,
        880736428,
        1303784126
      ],
      "2": [],
      "3": [
        1227564412,
        400507625,
        4133787461,
        3274096058,
        696788003,
        1475288264
      ],
      "4": [
        1108334355,
        1060929921,
        3328927042
      ],
      "5": [
        2640679034
      ],
      "6": [
        1249283253,
        3437259709,
        3197423398,
        1980349969,
        1219453777,
        2441508106,
        2220186280,
        457967755,
        235171324,
        42685294,
        3607349581
      ]
    },
    "Name": null
  },
  "73": {
    "Hash": 1627465347,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        484812453,
        3939025520
      ],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "92": {
    "Hash": 487013001,
    "AmmoType": 122,
    "Components": {
      "1": [
        3859329886
      ],
      "2": [
        2076495324
      ],
      "3": [],
      "4": [],
      "5": [],
      "6": [
        2732039643
      ]
    },
    "Name": null
  },
  "93": {
    "Hash": 2017895192,
    "AmmoType": 122,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": [
        2242268665
      ]
    },
    "Name": null
  },
  "95": {
    "Hash": 3800352039,
    "AmmoType": 122,
    "Components": {
      "1": [
        2205435306
      ],
      "2": [
        2076495324
      ],
      "3": [
        2498239431,
        2260565874
      ],
      "4": [],
      "5": [
        202788691
      ],
      "6": []
    },
    "Name": null
  },
  "96": {
    "Hash": 2828843422,
    "AmmoType": 205,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "94": {
    "Hash": 2640438543,
    "AmmoType": 122,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [
        2076495324
      ],
      "3": [],
      "4": [],
      "5": [
        202788691
      ],
      "6": []
    },
    "Name": null
  },
  "100": {
    "Hash": 1432025498,
    "AmmoType": 122,
    "Components": {
      "1": [
        2890063729,
        1602080333
      ],
      "2": [
        2076495324
      ],
      "3": [
        3449028929,
        2676628469,
        1315288101,
        3914869031,
        1004815965
      ],
      "4": [
        1108334355,
        77277509,
        1060929921
      ],
      "5": [],
      "6": [
        3820854852,
        387223451,
        617753366,
        4072589040,
        8741501,
        3693681093,
        3783533691,
        3639579478,
        4012490698,
        1739501925,
        1178671645
      ]
    },
    "Name": null
  },
  "98": {
    "Hash": 4019527611,
    "AmmoType": 122,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "99": {
    "Hash": 317205821,
    "AmmoType": 122,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "97": {
    "Hash": 984333226,
    "AmmoType": 122,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [
        2076495324
      ],
      "3": [
        844049759,
        2535257853,
        2294798931
      ],
      "4": [],
      "5": [
        202788691
      ],
      "6": []
    },
    "Name": null
  },
  "77": {
    "Hash": 3220176749,
    "AmmoType": 120,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [
        2076495324
      ],
      "3": [
        3193891350,
        2971750299,
        3689981245
      ],
      "4": [
        2637152041
      ],
      "5": [
        202788691
      ],
      "6": [
        1319990579
      ]
    },
    "Name": null
  },
  "78": {
    "Hash": 2210333304,
    "AmmoType": 120,
    "Components": {
      "1": [
        2205435306
      ],
      "2": [
        2076495324
      ],
      "3": [
        2680042476,
        2433783441,
        3127044405
      ],
      "4": [
        2698550338
      ],
      "5": [
        202788691
      ],
      "6": [
        3634075224
      ]
    },
    "Name": null
  },
  "79": {
    "Hash": 2937143193,
    "AmmoType": 120,
    "Components": {
      "1": [
        2205435306
      ],
      "2": [
        2076495324
      ],
      "3": [
        4203716879,
        2395064697
      ],
      "4": [
        2855028148
      ],
      "5": [],
      "6": [
        930927479
      ]
    },
    "Name": null
  },
  "80": {
    "Hash": 3231910285,
    "AmmoType": 120,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [
        2076495324
      ],
      "3": [
        3334989185,
        2089537806,
        1801039530
      ],
      "4": [
        2698550338
      ],
      "5": [
        202788691
      ],
      "6": [
        1929467122
      ]
    },
    "Name": null
  },
  "81": {
    "Hash": 2132975508,
    "AmmoType": 120,
    "Components": {
      "1": [
        2205435306
      ],
      "2": [
        2076495324
      ],
      "3": [
        3315675008,
        3009973007
      ],
      "4": [
        2855028148
      ],
      "5": [
        202788691
      ],
      "6": [
        2824322168
      ]
    },
    "Name": null
  },
  "86": {
    "Hash": 2228681469,
    "AmmoType": 120,
    "Components": {
      "1": [
        2205435306,
        3113485012,
        3362234491,
        3725708239,
        3968886988,
        48731514,
        880736428,
        1303784126
      ],
      "2": [
        2076495324
      ],
      "3": [
        25766362,
        4021290536,
        2183159977,
        2845636954,
        4205311469,
        1130501904
      ],
      "4": [
        1108334355,
        3350057221,
        1060929921
      ],
      "5": [
        2640679034
      ],
      "6": [
        2923451831,
        3104173419,
        2797881576,
        2491819116,
        2318995410,
        36929477,
        4026522462,
        3720197850,
        3412267557,
        2826785822,
        3320426066
      ]
    },
    "Name": null
  },
  "85": {
    "Hash": 2526821735,
    "AmmoType": 120,
    "Components": {
      "1": [
        2805810788,
        3113485012,
        3362234491,
        3725708239,
        3968886988,
        48731514,
        880736428,
        1303784126
      ],
      "2": [
        2076495324
      ],
      "3": [
        382112385,
        3726614828,
        2271594122,
        3724612230,
        1362433589,
        1346235024
      ],
      "4": [
        1108334355,
        77277509,
        3328927042
      ],
      "5": [
        2640679034
      ],
      "6": [
        3557537083,
        1125852043,
        886015732,
        3032680157,
        3999758885,
        3750812792,
        172765678,
        2312089847,
        2072122460,
        2308747125,
        1377355801
      ]
    },
    "Name": null
  },
  "83": {
    "Hash": 961495388,
    "AmmoType": 120,
    "Components": {
      "1": [
        2805810788,
        3113485012,
        3362234491,
        3725708239,
        3968886988,
        48731514,
        880736428,
        1303784126
      ],
      "2": [
        2076495324
      ],
      "3": [
        2249208895,
        3509242479,
        4012669121,
        4218476627,
        2816286296,
        1675665560
      ],
      "4": [
        1108334355,
        77277509,
        3328927042
      ],
      "5": [
        2640679034
      ],
      "6": [
        2434475183,
        937772107,
        1401650071,
        628662130,
        3309920045,
        3482022833,
        2847614993,
        4234628436,
        2088750491,
        2781053842,
        3115408816
      ]
    },
    "Name": null
  },
  "84": {
    "Hash": 4208062921,
    "AmmoType": 120,
    "Components": {
      "1": [
        2205435306,
        3113485012,
        3362234491,
        3725708239,
        3968886988,
        48731514,
        880736428,
        1303784126
      ],
      "2": [
        2076495324
      ],
      "3": [
        1283078430,
        1574296533,
        391640422,
        1025884839,
        626875735,
        1141059345
      ],
      "4": [
        1108334355,
        77277509,
        3328927042
      ],
      "5": [
        2640679034
      ],
      "6": [
        1272803094,
        1080719624,
        792221348,
        3842785869,
        3548192559,
        2250671235,
        4095795318,
        2866892280,
        2559813981,
        1796459838,
        3663056191
      ]
    },
    "Name": null
  },
  "82": {
    "Hash": 1649403952,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        1363085923,
        1509923832
      ],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "87": {
    "Hash": 100416529,
    "AmmoType": 121,
    "Components": {
      "1": [
        2805810788
      ],
      "2": [],
      "3": [
        2613461129
      ],
      "4": [
        3527687644,
        3159677559
      ],
      "5": [],
      "6": [
        1077065191
      ]
    },
    "Name": null
  },
  "88": {
    "Hash": 205991906,
    "AmmoType": 121,
    "Components": {
      "1": [],
      "2": [],
      "3": [
        1198478068
      ],
      "4": [
        3527687644,
        3159677559
      ],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "91": {
    "Hash": 1785463520,
    "AmmoType": 121,
    "Components": {
      "1": [
        2205435306,
        3113485012,
        3362234491,
        3725708239,
        3968886988,
        48731514,
        880736428,
        1303784126
      ],
      "2": [
        2076495324
      ],
      "3": [
        2497785294,
        3872379306,
        3615105746,
        1842849902,
        4100968569,
        3779763923
      ],
      "4": [
        1108334355,
        3328927042,
        1528590652
      ],
      "5": [
        2640679034
      ],
      "6": [
        2425682848,
        1931539634,
        1624199183,
        4268133183,
        4084561241,
        423313640,
        276639596,
        3303610433,
        2612118995,
        996213771,
        3080918746
      ]
    },
    "Name": null
  },
  "90": {
    "Hash": 177293209,
    "AmmoType": 121,
    "Components": {
      "1": [
        2890063729,
        1602080333,
        1764221345
      ],
      "2": [],
      "3": [
        4196276776,
        752418717,
        247526935,
        4164277972,
        1005144310,
        2313935527
      ],
      "4": [
        2193687427,
        3159677559,
        3061846192,
        776198721
      ],
      "5": [],
      "6": [
        4164123906,
        3317620069,
        3916506229,
        329939175,
        643374672,
        807875052,
        2893163128,
        3198471901,
        3447155842,
        2881858759,
        1815270123
      ]
    },
    "Name": null
  },
  "89": {
    "Hash": 3342088282,
    "AmmoType": 121,
    "Components": {
      "1": [
        2205435306
      ],
      "2": [
        2076495324
      ],
      "3": [
        3627761985,
        3439143621
      ],
      "4": [
        471997210
      ],
      "5": [
        202788691
      ],
      "6": [
        371102273
      ]
    },
    "Name": null
  },
  "102": {
    "Hash": 2578778090,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "103": {
    "Hash": 1737195953,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "104": {
    "Hash": 1317494643,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "105": {
    "Hash": 2508868239,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "106": {
    "Hash": 2227010557,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "107": {
    "Hash": 1141786504,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "108": {
    "Hash": 4192643659,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "109": {
    "Hash": 2460120199,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "110": {
    "Hash": 4191993645,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "111": {
    "Hash": 3638508604,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "112": {
    "Hash": 3713923289,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "113": {
    "Hash": 2343591895,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "114": {
    "Hash": 3756226112,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "115": {
    "Hash": 2484171525,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "116": {
    "Hash": 419712736,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "117": {
    "Hash": 3441901897,
    "AmmoType": 0,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "133": {
    "Hash": 2726580491,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "134": {
    "Hash": 2982836145,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "135": {
    "Hash": 1119849093,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "136": {
    "Hash": 2138347493,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "137": {
    "Hash": 1834241177,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "138": {
    "Hash": 1672152130,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "139": {
    "Hash": 1305664598,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "140": {
    "Hash": 125959754,
    "AmmoType": 120,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "101": {
    "Hash": 911657153,
    "AmmoType": 118,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "61": {
    "Hash": 1198879012,
    "AmmoType": 118,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "198": {
    "Hash": 126349499,
    "AmmoType": 264,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  },
  "263": {
    "Hash": 600439132,
    "AmmoType": 264,
    "Components": {
      "1": [],
      "2": [],
      "3": [],
      "4": [],
      "5": [],
      "6": []
    },
    "Name": null
  }
}

/***/ }),
/* 216 */
/***/ (function(module, exports) {

module.exports = {
    "attach:weapon:1":{
        bone: 37,
        offset:{
            x: .12,
            y: -.15,
            z: .15
        },
        rotate:{
            x: 180.01,
            y: 0,
            z: 0
        }
    }, 
    "attach:weapon:2":{       
        bone: 38,
        offset:{
            x: 0,
            y: -.15,
            z: -.15
        },
        rotate:{
            x: 0,
            y: 0,
            z: 0
        }
    }, 
    "attach:weapon:3":{
        bone: 2,
        offset:{
            x: .165,
            y: 0,
            z: -.125
        },
        rotate:{
            x: -80.01,
            y: 0,
            z: 0
        }
    }, 
    "attach:weapon:4":{
        bone: 14,
        offset:{
            x: .165,
            y: .025,
            z: .125
        },
        rotate:{
            x: -110.01,
            y: 5.01,
            z: 0
        }
    },
    "weapon:shop":{
        bone: -1,
        offset:{
            x: 0,
            y: 0,
            z: 0
        },
        rotate:{
            x: 0,
            y: 0,
            z: 0
        }
    }
}

/***/ }),
/* 217 */
/***/ (function(module, exports) {

const SET_ENTITY_ROTATION = "0x8524A8B0171D5E07";

module.exports = class ItemModel{
    constructor(player, id, model, position = undefined, heading = undefined) {         
        this.id = id;   
        this.model = +model;   
        this.player = player;   
        this.position = position;
        this.rotateX = 0;
        this.rotateY = 0;
        this.rotateZ = heading;
        this.createModel();   
        this.updateRotation();     
    }
    
    createModel(){
        if(!mp.game.streaming.isModelValid(this.model)) return;
        if(!mp.game.streaming.hasModelLoaded(this.model)){
            mp.game.streaming.requestModel2(this.model);
            for (let index = 0;!mp.game.streaming.hasModelLoaded(this.model) && index < 250; index++) {
                mp.game.wait(0);
            };
        }

        const pos = this.position === undefined ? 
            new mp.Vector3(this.player.position.x, this.player.position.y, this.player.position.z) : 
            this.position;       
        this.object = mp.game.object.createObject(this.model, pos.x, pos.y, pos.z,true, true,true);
        if(this.rotateZ !== undefined) this.updateRotation();      
        return true;
    }

    updateRotation(){
        mp.game.invoke(SET_ENTITY_ROTATION, this.object, +this.rotateX + .01, +this.rotateY + .01, +this.rotateZ + .01, 1, true)
    }

    removeComponent(a, b){

    }

    setComponent(a,b){
        
    }

    destroy(){
        mp.game.object.deleteObject(this.object);
    }
}

/***/ }),
/* 218 */
/***/ (function(module, exports) {

module.exports = {
    size: {
        x: 35,
        y: 35
    },
    showIcons:[false, false, false, false],
    values:[
        {//LEFT X
            value: 160,
            min: 0,
            max: 320,
            step: 5,
            invert: false,
            enabled: true,
            callback: "wshop:move:z"
        },
        {//LEFT Y
            value: 0,
            min: -35,
            max: 35,
            step: 5,
            invert: false,
            enabled: true,
            callback: "wshop:move:x"
        },
        {//RIGHT X
            value: 2,
            min: 1,
            max: 3,
            step: .1,
            invert: false,
            enabled: false,
            callback: ""
        },
        {//RIGHT Y
            value: 0,
            min: -1,
            max: 1,
            step: .05,
            invert: true,
            enabled: false,
            callback: "camMovePointZ"
        },
        { //WHEELE
            value: 1,
            min: .6,
            max: 1.2,
            step: .2,
            invert: false,
            enabled: false,
            callback: "camSetDist"
        }
    ]
}


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let shop24Open = false;

mp.events.add("shop24:open", (data, money)=>
{
	shop24Open = true;
    global.gui.setData("roundTheClockShop/setData", data, money);
    global.gui.openPage("RoundTheClockShop");
});

mp.events.add("shop24:buy", (data, type)=>{
    global.gui.close();
    mp.events.callRemote("shop24:buy", data, type);
});

function closeShop24()
{
	if (!shop24Open) return;
	
	shop24Open = false;
	global.gui.close();
}

mp.events.add("shop24:close", ()=>
{
    closeShop24();
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () 
{
    closeShop24();
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let isBurgerShotOpened = false;

mp.events.add({
    // Server events
    "burgerShot:open": (dto) => {
        global.gui.setData('burgerShop/setData', dto);
        isBurgerShotOpened = global.gui.openPage('BurgerShop');
    },

    // CEF events
    "burgerShot::close": () => {
        isBurgerShotOpened = false;
        global.gui.close();
    },

    "burgerShot::buy": (data, cashpay) => {
        mp.events.callRemote("burgerShot:buyItems", data, cashpay);
    }
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function() {
    if (!isBurgerShotOpened) return;
    
    mp.events.call('burgerShot::close');
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;
function openBar(discounts) {
    global.gui.setData("bar/updateDiscounts", JSON.stringify(discounts));
    opened = global.gui.openPage("Bar");
}

function closeBar() 
{
	if (!opened) return;
	
    global.gui.close();
    opened = false;
}

mp.events.add("alco:bar:open", openBar);
mp.events.add("alco:bar:close", closeBar);
mp.keys.bind(global.Keys.Key_ESCAPE, false, closeBar);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        CloseMenu();
});

mp.events.add('carwash::exit', () => {
    CloseMenu();
});


function CloseMenu() {
    global.gui.close();
    opened = false;
}

mp.events.add('carwash::openMenu', (id, wash, wax, ceramic) => {
    if (global.checkIsAnyActivity()) return;
    opened = global.gui.openPage('CarWash');
    global.gui.setData('carWash/setData', JSON.stringify({id, wash, wax, ceramic}))
});


mp.events.add('carwash::startEffect', (position) => {
    try {
        StartEffect(new mp.Vector3(position.x, position.y, position.z + 2.5), 8, 'scr_carwash', 'ent_amb_car_wash_jet', 0, 180, 0)
        StartEffect(position, 6, 'scr_carwash', 'ent_amb_car_wash', 0, 0, 0)
    }
    catch (e) {
        mp.serverLog(`Error in carWash.startEffect: ${e.name }\n${e.message}\n${e.stack}`);
    }
});


function StartEffect(position, scale, asset, name, rotX, rotY, rotZ) {
    if(!mp.game.streaming.hasNamedPtfxAssetLoaded(asset))
        mp.game.streaming.requestNamedPtfxAsset(asset);    
    mp.game.graphics.setPtfxAssetNextCall(asset);   
    const fxHandle = mp.game.graphics.startParticleFxLoopedAtCoord(
        name, 
        position.x, position.y, position.z, //position
        rotX, rotY, rotZ, //rotate
        scale,
        false, false, false, false
    )
    setTimeout(()=>{
        mp.game.graphics.removeParticleFx(fxHandle, false);
    }, 10000)
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let kassa =  null;
let show = false;


function redirectToPayment(link)
{
    if(!mp.gui.cursor.visible) global.showCursor(true);
    if(kassa != null) kassa.destroy();
    kassa = mp.browsers.new(link);
	show = true;
}

function resultResponce(result){
    global.gui.dispatch("newDonateShop/roulette/responceStart", result)
}

function updateCoins(coins){
    global.gui.setData("optionsMenu/updateDonate", coins);
    // global.gui.setData("newDonateShop/setCoins", coins);
}

function updatePrimeData(days){
    global.gui.setData("optionsMenu/updatePrimeData", days);
    // global.gui.setData("newDonateShop/prime/setData", days);
}

// function openDonateMenu(){
//     if(kassa != null) {
//         kassa.destroy();
//         kassa = null;
//     }
//     if(global.gui.isOpened() && !show) return;
    
//     if(global.gui.isOpened())
//         closeDonateMenu();
//     else
//     {
//         if(!global.gui.openPage("NewDonateShop")) return;
//         const gender = global.localplayer.getVariable("GENDER") ? true : false;
//         global.gui.setData("newDonateShop/setGender", gender == true);
//         mp.events.callRemote("dshop:coins:request");
//         show = true;
//     }
// }

function closeDonateMenu(){
    global.gui.close();
    show = false;
}

function tryClothes(...args){
    args.forEach(cl=>{
        
    })
}

function onEscape()
{
	if (kassa == null) return;
	
    kassa.destroy();
	kassa = null;
	global.gui.close();
	show = false;
}

function setInventory(items){
    global.gui.setData("newDonateShop/inventory/setItems", items);
}

function showWinNotification(name, id){
    name = name.replace(" ", "");
    global.gui.setData("hud/showWinNotification", JSON.stringify({name, id}));
}

function updateItemFromInventory(id, count, sell){    
    global.gui.setData("newDonateShop/inventory/updateItem", JSON.stringify({id, count, sell}));
}

function takeDonateItem(items) {
    global.gui.setData("newDonateShop/setTakeItems", items);
    global.gui.openPage("TakeDonateItem");
}

function updateExchangeCource(cources, currency, coinKits){
    global.gui.setData("newDonateShop/updateExchangeCource", JSON.stringify(cources))
    global.gui.setData("newDonateShop/updateCurrency", `'${currency}'`)
    global.gui.setData("newDonateShop/updateCoinKits", coinKits)
}

mp.events.add("tryClothes", tryClothes);
mp.events.add("dshop:roulette:result", resultResponce);
mp.events.add("dshop:roulette:notify", showWinNotification);
mp.events.add("dshop:coins:update", updateCoins);
mp.events.add("dshop:prime:update", updatePrimeData);
mp.events.add("dshop:inventory:set", setInventory);
mp.events.add("dshop:inventory:update", updateItemFromInventory);
mp.events.add("dshop:wallet:redirect", redirectToPayment);
mp.events.add("dshop:close", closeDonateMenu);
// mp.events.add("dshop:open", openDonateMenu);
mp.events.add("dshop:take:item", takeDonateItem);
mp.events.add("dshop:cources:update", updateExchangeCource);

// mp.keys.bind(global.Keys.Key_F9, false, openDonateMenu);
mp.keys.bind(global.Keys.Key_ESCAPE, false, onEscape);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const keyList = __webpack_require__(6);


let itemValues = {
    [1]: {//Масса
        onlyAdmin: true,
        value: {
            min: 0,
            max: 20000,
            step: 10,
            current: 1500
        },
    },
    [2]: {//Коэф. аэродинамического сопротивления
        onlyAdmin: true,
        value: {
            min: 0,
            max: 120,
            step: 0.01,
            current: 1
        },
    },
    [6]: {//Привод тс
        onlyAdmin: false,
        value: {
            min: 0,
            max: 1,
            step: 0.01,
            current: 0.5
        },
    },
    [7]: {//Количество передач
        onlyAdmin: true,
        value: {
            min: 1,
            max: 16,
            step: 1,
            current: 8
        },
    },
    [8]: {//множитель тягового усиления
        onlyAdmin: true,
        value: {
            min: 0.01,
            max: 2,
            step: 0.01,
            current: 1
        },
    },
    [9]: {//Множитель инерции
        onlyAdmin: true,
        value: {
            min: 0.01,
            max: 5,
            step: 0.01,
            current: 1
        },
    },
    [10]: {//множитель сцепления при смещении вверх;
        onlyAdmin: true,
        value: {
            min: 0.1,
            max: 10,
            step: 0.1,
            current: 5
        },
    },
    [11]: {//множитель сцепления при смещении вниз;
        onlyAdmin: true,
        value: {
            min: 0.1,
            max: 10,
            step: 0.1,
            current: 6
        },
    },
    [12]: {//теоретическая максимальная скорость
        onlyAdmin: true,
        value: {
            min: 0,
            max: 500,
            step: 1,
            current: 200
        },
    },
    [13]: {//множитель силы торможения
        onlyAdmin: false,
        value: {
            min: 0.0,
            max: 5,
            step: 0.1,
            current: 2
        },
        max: 2,
    },
    [14]: {//смещение тормозов
        onlyAdmin: false,
        value: {
            min: 0.01,
            max: 1,
            step: 0.01,
            current: 0.65
        },
    },
    [15]: {//мощность ручного тормоза
        onlyAdmin: false,
        value: {
            min: 0.1,
            max: 5,
            step: 0.1,
            current: 1
        },
        max: 2,
    },
    [16]: {//Угол поворота руля
        onlyAdmin: false,
        value: {
            min: 0.01,
            max: 2,
            step: 0.01,
            current: 1
        },
        max: 1.5,
    },
    [17]: {//сцепление колес на повороте
        onlyAdmin: false,
        value: {
            min: 0.1,
            max: 10,
            step: 0.1,
            current: 4
        },
        max: 5,
    },
    [18]: {//пробуксовка колес
        onlyAdmin: false,
        value: {
            min: 0.1,
            max: 10,
            step: 0.1,
            current: 4
        },
        max: 5,
    },
    [19]: {//боковая сила сцепления
        onlyAdmin: false,
        value: {
            min: 0.01,
            max: 2,
            step: 0.01,
            current: 1
        },
    },
    [20]: {//расстояние от земли, при котором транспортное средство теряет сцепление
        onlyAdmin: true,
        value: {
            min: 0.01,
            max: 1,
            step: 0.01,
            current: 0.25
        },
    },
    [21]: {//параметр, отвечающий за силу сцепления транспортного средства при низкой скорости (значение 0.0, //исходная сила сцепления);
        onlyAdmin: true,
        value: {
            min: 0.01,
            max: 1,
            step: 0.01,
            current: 0.5
        },
    },
    [23]: {//параметр, отвечающий за распределение тяги между передними и задними колесами (от 0.01 до 0.99);
        onlyAdmin: true,
        value: {
            min: 0.01,
            max: 1,
            step: 0.01,
            current: 0.5
        },
    },
    [24]: {//сцепления шины с дорогой;
        onlyAdmin: false,
        value: {
            min: 0.1,
            max: 2,
            step: 0.1,
            current: 1
        },
    },
    [25]: {//сила подвески
        onlyAdmin: false,
        value: {
            min: 0.01,
            max: 10,
            step: 0.01,
            current: 1
        },
        max: 5,
    },
    [26]: {//вибрация подвески;
        onlyAdmin: false,
        value: {
            min: 0.01,
            max: 5,
            step: 0.01,
            current: 0.1
        },
        max: 1,
    },
    [27]: {//вибрация подвески на высоких скоростях
        onlyAdmin: false,
        value: {
            min: 0.01,
            max: 5,
            step: 0.01,
            current: 0.1
        },
        max: 1,
    },
    [28]: {//максимальная высота кузова транспортного средства;
        onlyAdmin: true,
        value: {
            min: 0.001,
            max: 0.5,
            step: 0.001,
            current: 1
        },
    },
    [29]: {//минимальная высота кузова транспортного средства;
        onlyAdmin: true,
        value: {
            min: -0.5,
            max: 0.5,
            step: 0.01,
            current: -0.1
        },
    },
    [30]: {//высота подвески;
        onlyAdmin: false,
        value: {
            min: -1,
            max: 2,
            step: 0.01,
            current: 0.1
        },
        min: 0,
        max: 0.4,
    },
    [31]: {//смещение подвески вперед
        onlyAdmin: true,
        value: {
            min: 0.1,
            max: 2,
            step: 0.1,
            current: 1
        },
    },
    [32]: {//сила стабилизатора подвески;
        onlyAdmin: false,
        value: {
            min: 0.01,
            max: 5,
            step: 0.01,
            current: 1
        },
    },
    [33]: {//смещение силы стабилизатора подвески вперед
        onlyAdmin: true,
        value: {
            min: 0.01,
            max: 5,
            step: 0.01,
            current: 1
        },
    },
    [34]: {//высота центра крена (перед)
        onlyAdmin: true,
        value: {
            min: 0.01,
            max: 0.5,
            step: 0.01,
            current: 1
        },
    },
    [35]: {//высота центра крена (зад)
        onlyAdmin: true,
        value: {
            min: 0.01,
            max: 0.5,
            step: 0.01,
            current: 0.2
        },
    },
    [999]: {
        onlyAdmin: false,
        value: {
            current: false,
        },
    },
};

global.shopReduce = false;

let openedMenu = false;
let inShop = false;

function GetItemByKey(vehicle, isAdmin, keyID) {
    if (keyID == 999)
        return {
            onlyAdmin: itemValues[keyID].onlyAdmin,
            defaultValue: false,
            value: {
                current: global.getVariable(vehicle, `veh:handl:999`, false)
            }
        }
    else {
        let def = global.GetDefaultHandling(vehicle, keyList[keyID]);
        let currVal = global.getSharedHandling(vehicle, keyID);
        let result = {
            onlyAdmin: itemValues[keyID].onlyAdmin,
            value: {
                min: itemValues[keyID].value.min,
                max: itemValues[keyID].value.max,
                step: itemValues[keyID].value.step,
                current: currVal
            },
            defaultValue: def,
        }
        if (!isAdmin && !result.onlyAdmin) {
            if (itemValues[keyID].max != undefined)
                result.value.max = itemValues[keyID].max;

            if (itemValues[keyID].min != undefined)
                result.value.min = itemValues[keyID].min;
        }

        if (result.value.current > result.value.max)
            result.value.max = result.value.current

        if (result.value.current < result.value.min)
            result.value.min = result.value.current
        return result;
    }
}


mp.events.add("handlingShop:openMenu", (pricePart, priceCar, isAdmin) => {
    let vehicle = mp.players.local.vehicle;
    let currentHandlings = {};
    Object.keys(keyList).forEach(keyID => {
        currentHandlings[keyID] = GetItemByKey(vehicle, isAdmin, keyID);
    });

    global.gui.setData('handlingModShop/setData', JSON.stringify(
        {
            items: currentHandlings,
            isAdmin: isAdmin,
            priceCar: priceCar,
            pricePart: pricePart,
        }));
    global.gui.setData('handlingModShop/showMenu');
    openedMenu = true;
    opened = global.gui.openPage('HandlingModShop');
    inShop = true;
    global.shopReduce = false;
});

mp.events.add("hmodshop:value:change", (keyID, value) => {
    if (keyID == 999)
        global.shopReduce = true;
    else
        mp.players.local.vehicle.setHandling(keyList[keyID], value);
});


mp.keys.bind(global.Keys.Key_F2, false, function () {
    if (inShop) {
        if (openedMenu) {
            global.gui.setData('handlingModShop/hideMenu');
            openedMenu = false;
            global.showCursor(false)
        }
        else {
            global.gui.setData('handlingModShop/showMenu');
            openedMenu = true;
            global.showCursor(true)
        }
    }
});

mp.events.add('hmodshop:exit', () => {
    if (inShop)
        ExitMenu();
});

function ExitMenu() {
    mp.events.callRemote('handlingShop:closeMenu');
    global.gui.close();
    openedMenu = false;
    inShop = false;
    global.VehicleSetSharedDataHandlingMods(mp.players.local.vehicle);
    global.shopReduce = false;
    global.reduce = false;
    mp.players.local.vehicle.setReduceGrip(global.reduce);
}

mp.events.add("VehStream_PlayerExitVehicleAttempt", (vehicle, engState) => {
    if (inShop)
        ExitMenu();
});


mp.events.add("handlingShop:update", (keyID, value) => {
    if (value !== null)
        global.gui.setData('handlingModShop/updateData', JSON.stringify({ key: keyID, current: keyID == 999 ? value : Math.round(value * 1000) / 1000 }));
    else
        global.gui.setData('handlingModShop/updateData', JSON.stringify({ key: keyID, current: keyID == 999 ? false : global.GetDefaultHandling(mp.players.local.vehicle, keyList[keyID]) }));
});

// F - seats in driver
mp.events.add('render', () => {
    if (inShop)
        mp.game.controls.disableControlAction(0, 75, true);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var opened = false;
mp.events.add("dockOrder:openPage", (data) => {
    global.gui.setData('portOrders/pushData', data);
    opened = global.gui.openPage('PortOrders');
});

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened) {
        global.gui.close();
        opened = false;
    }
});

mp.events.add("portOrders:buy", (data) => {
    mp.events.callRemote("dockOrder:playerOrdered", data); 
    global.gui.close();
});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let unloadPoints;
let currentUnloadPoint;
let objToTrack;
let objToTrackStartZPosition;
let timer;
let arrowMarker;
let vehMarker;
let unloadMarker;
let workBlip = null;

function calculateDistance(v1, v2) {
    let dx = v1.x - v2.x;
    let dy = v1.y - v2.y;
    let dz = v1.z - v2.z;

    return Math.sqrt(dx * dx + dy * dy + dz * dz);
}

function randomIntFromInterval(min, max) { // min and max included 
    return Math.floor(Math.random() * (max - min + 1) + min);
}

function placeOnGround(obj){
    obj.setActivatePhysicsAsSoonAsItIsUnfrozen(true);
    obj.placeOnGroundProperly();
    obj.setDynamic(true);
    obj.freezePosition(false);
}

mp.events.add('dockLoader:init', (cratesRemoteIds, points) => {
    cratesRemoteIds = JSON.parse(cratesRemoteIds);
    unloadPoints = JSON.parse(points);
    cratesRemoteIds.forEach(e => {
        let obj = mp.objects.atRemoteId(e);
        if(!obj || obj.handle === 0) return;
        
        for (let index = 0; !obj.doesExist() && index < 250; index++) {
            mp.game.wait(0);
        }
        placeOnGround(obj);
    });
});


mp.events.add('dockLoader:playerUnloaded', () => {
    if (objToTrack == undefined || objToTrack == null || currentUnloadPoint == null) return;
    if (calculateDistance(objToTrack.getCoords(false), currentUnloadPoint) > 5) return;
    objToTrack = null;
    if (unloadMarker != null){
        unloadMarker.destroy();
        unloadMarker = null;
    } 
    currentUnloadPoint = null;
    if (timer != null) clearInterval(timer);
    mp.events.callRemote("playerUnloadedDockCrate")
});

mp.events.add("dockLoader:destroyMarker", () => {
    global.sendTip('tip_docker_up');
    if (vehMarker != null){
        vehMarker.destroy();
        vehMarker = null;
    }
});

mp.events.add('dockLoader:vehicleLoaded', (position) => {
    position = JSON.parse(position);
    if (vehMarker != null){
        vehMarker.destroy();
        vehMarker = null;
    }
    vehMarker = mp.markers.new(20, new mp.Vector3(position.x, position.y, position.z + 4), 2, {
        rotation: new mp.Vector3(0, 180, 0),
        color: [182, 211, 0, 200]
    });
});

mp.events.add('dockLoader:CrateObjectsRequested', (id) => {
    let obj = mp.objects.atRemoteId(id);
    
    objToTrack = obj;
    objToTrackStartZPosition = obj.position.z;

    obj.notifyStreaming = true;
    obj.setDynamic(true);
    obj.freezePosition(false);
    if (unloadMarker != null && unloadMarker != undefined) {
        unloadMarker.destroy();
        unloadMarker = null;
    }
    arrowMarker = mp.markers.new(20, new mp.Vector3(obj.position.x, obj.position.y, obj.position.z + 2.5), 2, {
        bobUpAndDown: true,
        rotation: new mp.Vector3(0, 180, 0),
        color: [182, 211, 0, 200]
    });
    if (timer != null) clearInterval(timer);
    timer = setInterval(checkIfCrateLifted, 500);
    createWorkBlip(obj.position);
});

mp.events.add('dockLoader:stopedWorking', () => {
    if (timer !== null) clearInterval(timer);
    currentUnloadPoint = null;
    objToTrack = null;
    if (unloadMarker !== null && unloadMarker != undefined) {
        unloadMarker.destroy();
        unloadMarker = null;
    }
    if (arrowMarker !== null && arrowMarker != undefined) {
        arrowMarker.destroy();
        arrowMarker = null;
    }
    if (vehMarker != null){   
        vehMarker.destroy();
        vehMarker = null;
    }
    if (workBlip != null && mp.blips.exists(workBlip)){
        workBlip.destroy();
    }
});

function checkIfCrateLifted(){
    if (!objToTrack || objToTrack.handle == 0) return;
    objToTrack.freezePosition(false);
    if (Math.abs(objToTrack.getCoords(false).z - objToTrackStartZPosition) > 0.2){
        var randomIndex = randomIntFromInterval(0, unloadPoints.length - 1);
        currentUnloadPoint = unloadPoints[randomIndex];
        if (timer != null) clearInterval(timer);
        createWorkBlip(currentUnloadPoint);
        mp.events.call('notify', 2, 9, "DockLoader_6", 3000);

        if (arrowMarker != null) {
            arrowMarker.destroy();
            arrowMarker = null;
        }

        unloadMarker = mp.markers.new(0, currentUnloadPoint, 1, {
            rotation: new mp.Vector3(0, 0, 0),
            color: [182, 211, 0, 200],
        });
    }
}

function createWorkBlip(position){
    if (workBlip != null && mp.blips.exists(workBlip)){
        workBlip.destroy();
    }
    workBlip = mp.blips.new(478, position,
        {
            name: "Место разгрузки",
            scale: 1.3,
            color: 3,
            alpha: 255,
            shortRange: false,
            rotation: 0,
            dimension: 0,
        });
    mp.game.invoke('0x4F7D8A9BFB0B43E9', workBlip.handle, true);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let peds = [];
const cam = mp.cameras.new('default', new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0), 50);

mp.events.add('questPeds:load', (pedinfo) => {
    pedinfo = JSON.parse(pedinfo);

    mp.game.streaming.requestAnimDict("friends@frm@ig_1");
    mp.game.wait(0);
    
    pedinfo.forEach(ped => {
        let p = mp.peds.newValid(ped.hash, ped.position, ped.heading, ped.dimension);

        p.questId = ped.id;
        peds.push(p);  
        //if(p !== null) p.taskPlayAnim("friends@frm@ig_1", "greeting_idle_a", 8.0, 1.0, -1, 1, 1.0, false, false, false);
    });
});

mp.events.add('questPeds:interacted', (id) => {
    const ped = peds.find(p => p.questId === id);
    if (!ped) return;
    
    const pos = ped.getOffsetFromInWorldCoords(0, 1.5, 1)
    cam.setCoord(pos.x, pos.y, pos.z);
    //mp.game.invoke(0x4A5113B7E65C8C80, player.handle, speechName, speechParam)
    mp.game.invoke("0x8E04FEDD28D42462", ped.handle, "GENERIC_HOWS_IT_GOING", "Speech_Params_Standard", 0);
    cam.setActive(true);
    cam.pointAtPedBone(ped.handle, 12844, 0, 0, 0, false)
    mp.game.cam.renderScriptCams(true, true, 350, true, false);
});

mp.events.add('questPeds:openDialog', (dialogData) => {
    global.gui.setData('dialogWindow/setData', dialogData);
    opened = global.gui.openPage("DialogWindow");
});

mp.events.add('questPeds:closeDialog', (cameraOff) => {
    if (cameraOff) deleteCamera();
    opened = false;
    global.gui.close();
});

function deleteCamera(){
    if (!cam) return;
    mp.game.cam.renderScriptCams(false, true, 200, true, false);
    cam.setActive(false)
}

let opened = false;
mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened) {
        deleteCamera();
        global.gui.close();
        opened = false;
        mp.events.callRemote("dialogWindow:playerClosedDialog");        
    }
});

mp.events.add('dialogWindow:currentAnswer', (id) => {
    opened = false;
    mp.events.callRemote("dialogWindow:playerSelectedAnswer", id);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false
let currentCursorTarget
let currentInteractionType = -1

mp.events.add('intMenu:open', (menuData) => {
    global.gui.setData("interactionMenu/setItems", menuData);    
    opened = global.gui.openPage('InteractionMenu');
})

mp.keys.bind(global.Keys.Key_ESCAPE, false, closePageIfOpened)

mp.events.add('playerInteractedLocal', (target, interactionType) => {
    currentInteractionType = interactionType
    currentCursorTarget = target
    mp.events.callRemote("intMenu:opened", interactionType, target)
})

mp.events.add('intMenu:selected', (key) => {
    // mp.events.call('notify', 4, 9, currentCursorTarget, 3000);
    // mp.events.call('notify', 4, 9, currentInteractionType, 3000);
    if (currentCursorTarget == null) return
    if (currentInteractionType === -1) return
    closePageIfOpened()
    if (!interactLocallyIfPossible(key)) 
        mp.events.callRemote("intMenu:selected", currentCursorTarget, key, currentInteractionType)
})

function closePageIfOpened() {
    if (opened) {
        opened = false
        global.gui.close()
    }
}

const dogInteractionMatrix = ["pet_0", "pet_1", "pet_2", "pet_3"]
function interactLocallyIfPossible(interactionKey) {
    if (currentInteractionType === 2) {
        global.changeControlledPetState(dogInteractionMatrix.indexOf(interactionKey))
        return true;
    }
    
    return false;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {mp.game.cam.renderScriptCams(false, true, 0, true, false);

mp.events.add('auth:startReg', (name) => {
    global.customCamera.setPos(new mp.Vector3(-350.3614, 1205.5157, 345.3723));
    global.customCamera.setPoint(new mp.Vector3(-430.34457, 1106.5614, 328.87384));
    global.customCamera.switchOn(0);

    //global.gui.setData("setLoadScreen", false)
    global.gui.setData("auth/setSocialClub", JSON.stringify({ name: name }));
    global.gui.setData("auth/setCurrentTab", JSON.stringify({ page: "CreateNewAccountTab" }));
    global.gui.close();
    global.gui.openPage("Auth");
});

let waitAutoAuthResponse = false;
mp.events.add('auth:startAuth', (login) => {

    global.customCamera.setPos(new mp.Vector3(-350.3614, 1205.5157, 345.3723));
    global.customCamera.setPoint(new mp.Vector3(-430.34457, 1106.5614, 328.87384));
    global.customCamera.switchOn(0);

    // global.gui.setData("setLoadScreen", false)
    global.gui.close();
    global.gui.setData("auth/setSocialClub", JSON.stringify({ name: login }));    
    global.gui.setData("auth/setCurrentTab", JSON.stringify({ page: "LoginTab" }));  
    global.gui.openPage("Auth");
});


/// ????
mp.events.add('auth:startCreateCharacter', () => {
    // global.gui.setData("setLoadScreen", false)
    global.gui.close();
    global.gui.setData("auth/setCurrentTab", JSON.stringify({ page: "Customization" }));
    global.gui.openPage("Auth");
});

mp.events.add('auth:character:select', (data) => {
    // global.gui.setData("setLoadScreen", false)
    global.gui.close();
    // global.gui.setData("characterSelect/setData", data);
    // global.gui.setData("characterSelect/setCoins", coins);
    // global.gui.setData("characterSelect/setSlots", slots);
    // global.gui.openPage("CharacterSelect");
    
    // const pos = JSON.parse(data[1]);
    // const {streetName,crossingRoad} = mp.game.pathfind.getStreetNameAtCoord(pos.x, pos.y, pos.z, 0, 0);
    // data[1] = mp.game.ui.getStreetNameFromHashKey(streetName);  
    // var dataspawns = [
    //         {
    //             key: "s1",
    //             name: "213a",
    //             subname: "123123a",
    //             x: 1000,
    //             y: 1000,
    //         },
    //         {
    //             key: "s2",
    //             name: "123b",
    //             subname: "123123b",
    //             x: 1300,
    //             y: 1000,
    //         },
    //         {
    //             key: "s3",
    //             name: "333c",
    //             subname: "123123c",
    //             x: 1000,
    //             y: 1300,
    //         },
    // ];
    // data.push(dataspawns);
    global.gui.setData("characterSelect/setData", data);
    global.gui.openPage("Spawn");
});

mp.events.add('auth:spawn:select', (data, charindex) => {
    // global.gui.setData("setLoadScreen", false)
    // const pos = JSON.parse(data[1]);
    // const {streetName,crossingRoad} = mp.game.pathfind.getStreetNameAtCoord(pos.x, pos.y, pos.z, 0, 0);
    // data[1] = mp.game.ui.getStreetNameFromHashKey(streetName);  

    // var dataspawns = [
            // {
            //   key: "s1",
            //   name: "213",
            //   subname: "123123",
            //   x: 1000,
            //   y: 1000,
            // },
            // {
            //   key: "s2",
            //   name: "123",
            //   subname: "123123",
            //   x: 1300,
            //   y: 1000,
            // },
            // {
            //   key: "s3",
            //   name: "333",
            //   subname: "123123",
            //   x: 1000,
            //   y: 1300,
            // },
    // ];
    global.gui.setData("characterSelect/setIndex", charindex);
    global.gui.setData("characterSelect/setSpawns", JSON.stringify(data));
    // global.gui.setData("characterSelect/trashData", data);

    // spawnPoints: [
    //     {
    //       key: "s1",
    //       name: "213",
    //       subname: "123123",
    //       x: 1000,
    //       y: 1000,
    //     },
    //     {
    //       key: "s2",
    //       name: "123",
    //       subname: "123123",
    //       x: 1300,
    //       y: 1000,
    //     },
    //     {
    //       key: "s3",
    //       name: "333",
    //       subname: "123123",
    //       x: 1000,
    //       y: 1300,
    //     },
    //   ],


    //global.gui.close();
    //global.gui.setData("spawnSelect/setData", JSON.stringify(data));
    //global.gui.openPage("SpawnSelect");
});

mp.events.add("auth:save:pass", (login, password, save) => {
    checkAuthStorage();
    if(save){
        if(mp.storage.data.auth.login !== login || mp.storage.data.auth.password !== password || !mp.storage.data.auth.save){
            mp.storage.data.auth.login=login;
            mp.storage.data.auth.password=password;
            mp.storage.data.auth.save = true;
            mp.storage.flush();
        }
    }else{
        if(mp.storage.data.auth.login !== '' || mp.storage.data.auth.password !== '' || mp.storage.data.auth.save){
            mp.storage.data.auth.login='';
            mp.storage.data.auth.password='';
            mp.storage.data.auth.save = false;
            mp.storage.flush();
        }
    }
})

mp.events.add('auth:charCreated', function (name, surname) {
    mp.events.callRemote("newchar", name, surname)
});

mp.events.add('auth:doSpawn', spawn);
function spawn() {
    try {
        // global.gui.setData("setLoadScreen", true);
        global.customCamera.switchOff(0);
        mp.game.cam.doScreenFadeOut(0);
        global.gui.close();
        setTimeout(()=>{
            global.showHud(false);
        }, 10)
        
        setTimeout(()=>{
            // global.gui.setData("setLoadScreen", false)
            mp.game.cam.doScreenFadeIn(1700);
            global.showHud(true);
            global.checkFarm();
            if (global.characterEditor && global.gui.curPage !== "Customization"){
                global.gui.close();
                global.gui.openPage("Customization");
            }
        }, 3000);

        setTimeout(()=>{
            if (global.characterEditor && global.gui.curPage !== "Customization"){
                global.gui.close();
                global.gui.openPage("Customization");
            }
        }, 6000)
    
        mp.discord.update(`Playing MIKZZZ RP`, ``);
        
        global.gui.stopSound();
        global.showHud(true);
        global.loggedin = true;
        mp.game.player.setHealthRechargeMultiplier(0);
        global.gui.setData("setBackground", "0");
        global.activateAntiCheat();
    
        // finishCamera();

        setTimeout(() => {
            global.chw();
            mp.events.call("switchTime", 0);
            global.localplayer.freezePosition(false);
            global.gui.close();
        }, 500)
    } catch (e) {
        if(global.sendException)mp.serverLog(`authorization.spawn: ${e.name }\n${e.message}\n${e.stack}`);
    }
    
}

function checkAuthStorage() {
    if (!mp.storage.data.hasOwnProperty('auth')) {
        mp.storage.data.auth = {
            login: '',
            password: '',
            save: false
        };
    }
}


// function startSkyCamera(type, param) {
//     while (mp.game.invoke("0xD9D2CFFF49FAB35F") == false) {
//         mp.game.invoke("0xAAB3200ED59016BC", mp.players.local.handle, 0, 1);
//     }
//     mp.game.invoke("0xF36199225D6D8C86", 0.01)

//     let cameraWaitS = setInterval(() => {
//         if (mp.game.invoke("0x470555300D10B2A5") > 4) {
//             if(type == 'startReg'){
//                 global.gui.setData("setLoadScreen", false)
//                 global.gui.setData("auth/setSocialClub", JSON.stringify({ name: param }));
//                 global.gui.setData("auth/setCurrentTab", JSON.stringify({ page: "CreateNewAccountTab" }));
//                 global.gui.close();
//                 global.gui.openPage("Auth");
//             }else{
//                 global.gui.setData("setLoadScreen", false)
//                 global.gui.close();
//                 global.gui.setData("auth/setSocialClub", JSON.stringify({ name: param }));    
//                 global.gui.setData("auth/setCurrentTab", JSON.stringify({ page: "LoginTab" }));  
//                 global.gui.openPage("Auth");
//             }
//             clearInterval(cameraWaitS)
//         }
//     }, 10)



// };

// function finishCamera() {
//     setTimeout(() => {
//         mp.game.invoke("0xD8295AF639FD9CB8", mp.players.local.handle);
//     }, 5000);
// }
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 230 */
/***/ (function(module, exports) {

﻿const islandCenter = new mp.Vector3(4664.171, -5098.138, 13.43878);
const dist = 1500.01;
let onIsland = (mp.game.gameplay.getDistanceBetweenCoords(islandCenter.x, islandCenter.y, islandCenter.z, mp.players.local.x, mp.players.local.y, mp.players.local.z, false) < dist);
setInterval(() => {
    var pos = mp.players.local.position;
    if(mp.game.gameplay.getDistanceBetweenCoords(islandCenter.x, islandCenter.y, islandCenter.z, pos.x, pos.y, pos.z, false) < dist){
        if(!onIsland){
            onIsland = true;
            mp.game.invoke("0x9A9D1BA639675CF1", "HeistIsland", true);
            mp.game.invoke("0x5E1460624D194A38", true);
        }        
    }else{
        if(onIsland){
            onIsland = false;
            mp.game.invoke("0x9A9D1BA639675CF1", "HeistIsland", false);
            mp.game.invoke("0x5E1460624D194A38", false);
        }
        
    }
}, 1500)

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {﻿let timer
const MAX_PLAYER_SPEED = 7.2
const MAX_DISTANCE_PER_SECOND = 170;

global.activateAntiCheat = function () {
    mp.players.local.setMaxSpeed(MAX_PLAYER_SPEED);
}

global.disableAntiCheat = function () {
    if (timer) clearInterval(timer)
}

const forbiddenWeapon = [
    1119849093,
    2982836145,
    1752584910,
    1834241177,
    3056410471,
    125959754,
    1672152130,
    1305664598,
    2726580491,
    2138347493,
    3125143736,
    2481070269,
    741814745,
    615608432,
    2874559379
]

global.chw = () => {
    if (global.getVariable(mp.players.local, 'ALVL', 0) < 1) {
        let interval = setInterval(() => {
            if (global.getVariable(mp.players.local, 'ALVL', 0) > 0) {
                clearInterval(interval);
                return;
            }
            const weapon = global.getCurrentPlayerWeapon();
            if (forbiddenWeapon.find(w => w === weapon))
                mp.events.callRemote("ac:w:fb", weapon);
        }, 1000)
    }
}

setInterval(() => {
    checkTeleport()
}, 200)

let prevPosition = mp.players.local.position;
let prevDimension = mp.players.local.dimension;
let prevCheck = Date.now();
let blockReport = Date.now();
let currSpeed = 0;
let newPositionTeleport = null;

mp.events.add('teleport:newPos', (pos) => {    
    mp.players.local.position = pos;
    prevPosition = pos;
    blockReport = Date.now() + 1000;
});

mp.events.add('teleport:toVehicle', (vehicle, pos, seat) => {    
    mp.players.local.position = pos;
    prevPosition = pos;
    blockReport = Date.now() + 3000;
    seatInToVegicle(vehicle, seat);
});

async function seatInToVegicle(vehicle, seat) {
    while (!(vehicle && vehicle.type === 'vehicle' && vehicle.handle !== 0)) {
        await mp.game.waitAsync(0);
        blockReport = Date.now() + 1000;
    }
    mp.players.local.setIntoVehicle(vehicle.handle, seat);
}

global.teleport_newPos = (pos) => {    
    mp.players.local.position = pos;
    prevPosition = pos;
    blockReport = Date.now() + 1000;
};

function checkTeleport() {
    if (global.getVariable(mp.players.local, 'ALVL', 0) > 0)
        return;

    if (global.fly.flying) {
        blockReport = Date.now() + 2000;
        return;
    }
    let time = (Date.now() - prevCheck) / 1000;
    prevCheck = Date.now();
    let currPos = mp.players.local.position;
    let distance = mp.game.system.vdist(currPos.x, currPos.y, currPos.z, prevPosition.x, prevPosition.y, prevPosition.z);
    currSpeed = Math.round(distance * 3.6 / time);
    if (checkPlayerTeleport(currSpeed, currPos)) {
        blockReport = Date.now() + 1000;
        mp.events.callRemote("ac:teleport", `${Math.round(prevPosition.x)}, ${Math.round(prevPosition.y)}, ${Math.round(prevPosition.z)}`, `${Math.round(currPos.x)}, ${Math.round(currPos.y)}, ${Math.round(currPos.z)}`, Math.round(currSpeed), Math.round(distance));
    }
    prevPosition = currPos;
    prevDimension = mp.players.local.dimension;
}

function checkPlayerTeleport(currSpeed, currPos) {
    if (global.fly.flying)
        return false;
    if (blockReport >= Date.now())
        return false;
    if (prevPosition.z < -130 && currPos.z > -70)
        return false;
    if (prevDimension != mp.players.local.dimension)
        return false;
    if (mp.players.local.vehicle)
        return currSpeed > 600 &&
            ((mp.players.local.vehicle.getSpeed() * 3.6).toFixed() > 580 || (mp.players.local.vehicle.getSpeed() * 3.6).toFixed() < 300) &&
            mp.players.local.vehicle.getPedInSeat(-1) === mp.players.local.handle
    else
        return currSpeed > 250;
}

// mp.events.add('render', () => {
//     mp.game.graphics.drawText(currSpeed, [0.5, 0.005], {
//         font: 7,
//         color: [255, 100, 150, 185],
//         scale: [0.4, 0.4],
//         outline: true
//     });
// });
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let tabletOn = false;

function open(){
    global.gui.close();
    global.gui.openPage("GameTablet");
    tabletOn = true;
}

function close(){ 
    global.gui.close();
    mp.events.callRemote("scene:action:cancel");
    tabletOn = false;
}

mp.events.add("tablet:open", open);

mp.keys.bind(global.Keys.Key_ESCAPE, false, ()=>{
    if(tabletOn) {
        mp.game.ui.setPauseMenuActive(false);
        close();
    }
})
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {﻿const TIP_TIME = 6500
let waitingTips = []
let active = false
let usedTips = []
 
global.sendTip = (tipName) => {
    if (showTip(tipName))
        mp.events.callRemote('tipUsed', tipName)
}

global.sendTipNotification = (localizationStr) => {
    _showTip(localizationStr);
}

mp.events.add({
    'showTip': showTip,
    'loadTip': (tips) => {
        usedTips = JSON.stringify(tips)
    },
    'tips:showTipNotification': global.sendTipNotification
})

function showTip(text) {
    if (usedTips.includes(text)) return false
    usedTips.push(text)
    if (active) waitingTips.push(text)
    else _showTip(text)
    
    return true
}

function _showTip(text) {
    active = true
    mp.game.audio.playSoundFrontend(-1 , 'Menu_Accept', 'Phone_SoundSet_Default', true)
    global.gui.setData('hud/setTipText', JSON.stringify({text: text}))
    global.gui.setData('hud/toggleTip', true)
    setTimeout(callback, TIP_TIME)
}

function callback() {
    if (waitingTips.length === 0) {
        global.gui.setData('hud/toggleTip', false)
        active = false
    }
    else _showTip(waitingTips.pop())
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(235);
__webpack_require__(236); 
__webpack_require__(237); 


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;
let details = 0;
function nextGameStage(exp, money){
    details--;
    global.gui.setData("gameMakeWeapon/userData/updateUserExperience", exp);
    global.gui.setData("gameMakeWeapon/userData/addUserGain", money);
    global.gui.setData("gameMakeWeapon/userData/setDetails", details);
    setTimeout(
    ()=>{
        global.gui.setData("gameMakeWeapon/gameState/setWaitNewGame", true);
    }, 2000);    
}

function getDetails(){
    if(global.inAction || details > 4) return;
    global.inAction = true;
    global.controlsManager.disableAll();
    mp.players.local.taskPlayAnim("anim@scripted@freemode@postertag@collect_can@heeled@", "poster_tag_collect_can_var02_female", 8.0, -1, -1, 50, -1, true, true, true);
    setTimeout(()=>{
        global.inAction = false;
        details = 5;
        global.controlsManager.enableAll();
        mp.events.call('notify', 2, 9, "mw:game:detils:get", 3000);
        mp.players.local.clearTasksImmediately();
    }, 3000)
}

function quitGame() {    
    if(!opened) return;
    global.gui.close();
    opened = false;
}

function openGame(exp){
    if (opened || gui.isOpened()) return;
    if(details < 1){
        mp.events.call('notify', 1, 9, "mw:game:nodetails", 3000);
        return;
    }
    global.gui.setData("gameMakeWeapon/userData/setDetails", details);
    global.gui.setData("gameMakeWeapon/userData/setName", mp.players.local.name.replace('_', ' '));
    global.gui.setData("gameMakeWeapon/userData/updateUserExperience", exp);
    global.gui.setData("gameMakeWeapon/userData/updateUserGain", 0);
    global.gui.openPage("GameMakeWeapon");
    opened = true;
}

mp.events.add("mg:makeweapon:stage:next", nextGameStage);
mp.events.add("mg:makeweapon:game:open", openGame);
mp.events.add("mg:makeweapon:quit", quitGame);
mp.events.add("mw:game:detail:get", getDetails);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;

function quitGame() {    
    if(!opened) return;
    global.gui.close();
    opened = false;
}

function openGame(oreJSON, fuelJSON, exp){
    if (opened || gui.isOpened()) return;
    let oreArray = JSON.parse(oreJSON)
    let ore = {};
    oreArray.forEach(oreElement => {
        if (!ore[oreElement.Name])
            ore[oreElement.Name] = oreElement.Count;
        else
        ore[oreElement.Name] += oreElement.Count;
    });
    let fuelArray = JSON.parse(fuelJSON)
    let fuel = {};
    fuelArray.forEach(fuelElement => {
        if (!fuel[fuelElement.Name])
        fuel[fuelElement.Name] = fuelElement.Count;
        else
        fuel[fuelElement.Name] += fuelElement.Count;
    });
    global.gui.setData("gameMetalPlant/setData", JSON.stringify({ore, fuel, exp}));
    global.gui.openPage("GameMetalPlant");
    opened = true;
}

function startGame(){
    global.gui.setData("gameMetalPlant/updateGameBegineState", true);
}

function updateGameResult(diamond, metals){
    global.gui.setData("gameMetalPlant/updateGameResult", JSON.stringify({state: diamond ? 3 : 2, metals}));
}

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        quitGame();
});

mp.events.add("mg:metalplant:game:open", openGame);
mp.events.add("mg:metalplant:quit", quitGame);
mp.events.add("mg:metalplant:start", startGame);
mp.events.add("mg:metalplant:result", updateGameResult);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;

function quitGame() {    
    if(!opened) return;
    global.gui.close();
    opened = false;
}

function openGame(callback){
    if (opened || gui.isOpened()) return;
    global.gui.setData("gameLockpick/setCallback", JSON.stringify({callback}));
    global.gui.openPage("GameLockpick");
    opened = true;
}

mp.events.add("mg:lockpick:open", openGame);
mp.events.add("mg:lockpick:quit", quitGame);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const Scene = __webpack_require__(239)
const scenes = {};
let lastCheck = 0;

function isSpam(){
    if(lastCheck > Date.now()) return true;
    lastCheck = Date.now() + 500;
    return false;
}

function localScene() {
    return scenes[mp.players.local.remoteId];
}

function tick(){
    const forDelete = [];
    for (const key in scenes) {
        if(scenes[key].isCompleeted()){
            scenes[key].destroy();
            forDelete.push(key)
        }
    }
    
    if(forDelete.length > 0){
        forDelete.forEach(key => {
            delete scenes[key];
        });
    }

    if(localScene()){
        mp.game.controls.disableControlAction(0, 45, true);
        mp.game.controls.disableControlAction(0, 69, true);
        mp.game.controls.disableControlAction(0, 140, true);
        mp.game.controls.disableControlAction(0, 141, true);
        mp.game.controls.disableControlAction(0, 142, true);
    }
        
}

function addScene(player, id){
    //console.logInfo(`add scene ${player.handle}`);
    if(scenes[player.remoteId]){
        scenes[player.remoteId].destroy()
    }
    if(player.handle !== 0)
        scenes[player.remoteId] = new Scene(player, id);
}

function removeScene(player){
    if(scenes[player.remoteId]){
        scenes[player.remoteId].cancelHandle();
    }
}

function sceneUpdate(player, newSceneId){
    try {
        if(player.type !== "player") return;
        if(newSceneId)
            addScene(player, newSceneId);
        else 
            removeScene(player);
    } catch (e) {
        if(global.sendException) mp.serverLog(`sceneUpdate: ${e.name}\n${e.message}\n${e.stack}`);
    }    
}

function resetSceneLocal(){
    removeScene(mp.players.local);
}

function actionHandle(id){
    if(scenes[id])
        scenes[id].actionHandle();
}

function actionDelay(time){
    global.inAction = true;
    setTimeout(()=>{
        global.inAction = false;
    }, time * 1000)
}

function streamIn(player){
    if(player.type !== "player") return;
    const sceneId = player.getVariable("scene:current");
    if(sceneId)
        addScene(player, sceneId);
}

function streamOut(player){
    if(player.type !== "player") return;
    if(scenes[player.remoteId]){
        scenes[player.remoteId].destroy();
        delete scenes[player.remoteId];
    }
}

function playerQuit(player){
    if(player.type !== "player") return;
    if(scenes[player.remoteId]){
        scenes[player.remoteId].destroy();
        delete scenes[player.remoteId];
    }
}

mp.events.add("scene:reset:local", resetSceneLocal);
mp.events.addDataHandler("scene:current", sceneUpdate);
mp.events.add("scene:doaction", actionHandle);
mp.events.add('click', (x, y, upOrDown, leftOrRight) => {
    if(!localScene() || upOrDown === "up" || isSpam()) return;
    if(leftOrRight === "right")
        localScene().rightClick();
    else
        localScene().leftClick();
});
mp.events.add("render", tick);
mp.events.add("scene:action:delay", actionDelay)


mp.events.add('entityStreamIn', streamIn);
mp.events.add('entityStreamOut', streamOut);
mp.events.add("playerQuit", playerQuit);

let obj = null;
const pos = new mp.Vector3(-1891.9628, -3122.3472, 13.944367);
const hash = mp.game.joaat("prop_tequila_bottle");
function doesExistCheck() {
    if(obj === null){
        obj = mp.objects.new(hash, pos, {dimension: mp.players.local.dimension});
    }else{
        console.logInfo(`dows exists: ${obj.doesExist()}`);
        obj.destroy();
        obj = null;
    }
}

mp.events.add("does:exists", doesExistCheck);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const configs = __webpack_require__(240)

const states = {
    "enter": 0,
    "base": 1,
    "action": 2,
    "exit": 3,
    "sequence": 4,
    "completed": 5,
    "loop": 6
}

module.exports = class Scene{
    constructor(player, id) {
        try {
            this.id = id;
            const config = configs[id];
            this.player = player;
            
            if(this.player.remoteId === mp.players.local.remoteId)
                global.inAction = true;

            this.isLooped = config.isLooped;
            this.sequence = config.sequence;
            this.sequenceStage = 0;

            this.attachs = config.attachs;
            this.props = [];
            this.canCancel = config.canCancel;

            this.enter = config.enter;
            this.base = config.base;
            this.exit = config.exit;
            this.action = config.action;
            
            this.enterEffects = config.enterEffects;
            this.actionEffects = config.actionEffects;

            this.state = this.sequence === null ? states.enter : states.sequence;
            
            this.pos = this.player.position;
            this.rot = this.player.getRotation(2);
            this.initAttachs();
            this.initEffects();
            this.initAnims();
            if(this.state === states.sequence)
                this.initSequence();
            else
                this.initActionAnim();
        } catch (e) {
            if(global.sendException) mp.serverLog(`Scene.ctor: ${e.name}\n${e.message}\n${e.stack}`);
        }
    } 
    
    checkEffects(time){
        const effects = this.state === states.enter ? this.enterEffects : this.actionEffects;
        if(effects !== null){
            effects.forEach(effect => {
                if(!effect.used && effect.startAt < time){
                    this.callEffect(effect);
                }
            });
        }
    }

    callEffect(effect){
        effect.used = true;
        const boneIndex = mp.players.local.getBoneIndex(effect.boneId);
        mp.game.graphics.setPtfxAssetNextCall(effect.asset);   
        const fxHandle = mp.game.graphics.startParticleFxLoopedOnEntityBone(
            effect.name, this.player.handle, 
            effect.offset.x, effect.offset.y,  effect.offset.z, 
            effect.rotate.x, effect.rotate.y,  effect.rotate.z,
            boneIndex, effect.scale,
            false, false,false
        )
        setTimeout(()=>{
            mp.game.graphics.removeParticleFx(fxHandle, false);
        }, effect.duration)
    }

    resetEffects(){
        const effects = this.state === states.enter ? this.enterEffects : this.actionEffects;
        if(effects !== null){
            effects.forEach(effect => {
                effect.used = false;
            });
        }        
    }
    initAnims(){
        if(this.sequence !== null){
            this.sequence.forEach(anim => {
                this.loadAnimDict(anim.dictionary);
            });
        }

        if(this.enter !== null)
            this.loadAnimDict(this.enter.dictionary);

        if(this.base !== null)
            this.loadAnimDict(this.base.dictionary);

        if(this.action !== null)
            this.loadAnimDict(this.action.dictionary);
    
        if(this.exit !== null)
            this.loadAnimDict(this.exit.dictionary);    
    }
    
    initSequence(){       
        const anim = this.currentSequenceAnim();
        this.playAnim(anim);
    }

    initActionAnim(){
       
        if(this.enter === null) 
            this.state = states.base;

        const anim = this.state === states.base ? this.base : this.enter;
        this.playAnim(anim);       
    }

    initEffects(){
        try {
            if(this.actionEffects !== null){
                this.actionEffects.forEach(effect => {
                    if(!mp.game.streaming.hasNamedPtfxAssetLoaded(effect.asset))
                        mp.game.streaming.requestNamedPtfxAsset(effect.asset);         
                });
            }
            if(this.enterEffects !== null){
                this.enterEffects.forEach(effect => {
                    if(!mp.game.streaming.hasNamedPtfxAssetLoaded(effect.asset))
                        mp.game.streaming.requestNamedPtfxAsset(effect.asset);         
                });
            }            
        } catch (e) {
            if(global.sendException) mp.serverLog(`sceneUpdate: ${e.name}\n${e.message}\n${e.stack}`);
        }
    }

    initAttachs(){
        if(this.attachs !== null){
            this.attachs.forEach(prop => {
                this.doAttach(prop)
            });
        }
    }   

    async doAttach(prop){
        const hash = mp.game.joaat(prop.model);
        this.loadProp(hash);
        const obj = mp.objects.new(hash, this.pos, {dimension: this.player.dimension});
        //obj.isAttached()
        //let index = 0        
        //console.logInfo(`add scene ${obj.doesExist()}`);
        while (!obj.doesExist()) {
            //global.debugText = `check: ${index++}`;
            await mp.game.waitAsync(0);
        }
        obj.setCollision(false, false);
        obj.setCanBeDamaged(false);
        obj.attachTo(this.player.handle,
            this.player.getBoneIndex(prop.boneId),
            prop.offset.x, prop.offset.y, prop.offset.z, 
            prop.rotate.x, prop.rotate.y, prop.rotate.z, 
            false, false, false, false, 2, true);
        // obj.setCollision(false, false);
        this.props.push({obj, deleteBefore: prop.deleteBefore})
    }

    isCompleeted(){
        let time, anim;
        switch (this.state) {
            case states.loop:
                anim = this.currentSequenceAnim();
                if(!this.player.isPlayingAnim(anim.dictionary, anim.name, 3) || mp.players.local.vehicle)
                    if(this.player.remoteId === mp.players.local.remoteId) 
					{
						global.sceneStarted = false;
                        mp.events.callRemote("scene:action:cancel");       
					}						
                return false;
            case states.sequence:               
                anim = this.currentSequenceAnim();
                time = this.player.getAnimCurrentTime(anim.dictionary, anim.name);
                if(!this.player.isPlayingAnim(anim.dictionary, anim.name, 3) || mp.players.local.vehicle){
                    if(this.player.remoteId === mp.players.local.remoteId)
					{
						global.sceneStarted = false;
                        mp.events.callRemote("scene:action:cancel");
					}
                    return false;
                }
                    
                if(time === 0 || time >= anim.stop){
                    if(!this.nextAimInSequence()){
                        if(this.isLooped){
                            this.sequenceStage = this.sequence.length - 1;
                            this.state = states.loop;
                        }else{
                            this.resetEffects();
                            if(mp.players.local.remoteId === this.player.remoteId)
                                mp.events.callRemote("scene:seqence:callback");
                            this.cancelHandle();
                        }
                    }
                    else 
                    {
                        const anim = this.currentSequenceAnim();                        
                        this.playAnim(anim);
                    }
                }
                else
                    this.checkEffects(time);
                return false;
            case states.enter:
                if(this.enter !== null){
                    time = this.player.getAnimCurrentTime(this.enter.dictionary, this.enter.name);
                    //global.debugText = `enter: ${time.toFixed(3)}`;
                    if(time === 0 || time >= this.enter.stop){
                        this.resetEffects();
                        this.state = states.base;
                        this.playAnim(this.base);
                    }else 
                        this.checkEffects(time);
                }else {
                    this.state = states.base; 
                    this.playAnim(this.base);
                }               
                return false;
            case states.base:
                if(!this.player.isPlayingAnim(this.base.dictionary, this.base.name, 3) || mp.players.local.vehicle){                    
                    if(this.player.remoteId === mp.players.local.remoteId)
					{
						global.sceneStarted = false;
                        mp.events.callRemote("scene:action:cancel");       
					}						      
                }
                //lobal.debugText = `base: ${time.toFixed(3)}`;
                if(this.id === 13 && mp.players.local.remoteId === this.player.remoteId && !global.binoculars)
                    global.binoculars = true;

                return false;
            case states.action:
                time = this.player.getAnimCurrentTime(this.action.dictionary, this.action.name);
                //global.debugText = `action: ${time.toFixed(3)}`;
                if(time === 0 || time >= this.action.stop){
                    this.resetEffects();
                    this.state = states.base;
                    this.playAnim(this.base);
                }else
                    this.checkEffects(time);
                return false;
            case states.exit:
                time = this.player.getAnimCurrentTime(this.exit.dictionary, this.exit.name);
                //global.debugText = `exit: ${time.toFixed(3)}`;
                if(time === 0 || time >= this.exit.stop)
                {
                    this.state = states.completed;
                }
                return false;
        
            default:
                return true;
        }
    }

    playAnim(anim){
        //this.player.clearTasksImmediately();
		if(this.player.remoteId === mp.players.local.remoteId) global.sceneStarted = true;
        this.player.taskPlayAnim(anim.dictionary, anim.name, 8.0, 8.0, -1, anim.flag, anim.start, false, false, false);
    }

    currentSequenceAnim(){
        return this.sequence[this.sequenceStage]
    }

    nextAimInSequence(){
        this.sequenceStage += 1;
        return this.currentSequenceAnim() !== undefined;
    }

    rightClick(){
        if(this.isLooped || (!this.canCancel && this.state !== states.base)) return;
		global.sceneStarted = false;
		mp.events.callRemote("scene:action:cancel");   					
    }

    cancelHandle(){
        this.props.forEach(prop=>{
            if(prop.deleteBefore)
			{
				if (prop.obj != null) prop.obj.destroy();
				prop.obj = null;
            }                    
        });
        if(this.exit !== null && this.player.handle !== 0){      
            this.state = states.exit;
            this.playAnim(this.exit);
        }            
        else 
            this.state = states.completed;
    }

    
    leftClick(){        
        if(this.action === null || this.state !== states.base) return;
        mp.events.callRemote("scene:action:request");
    }
    
    actionHandle(){
        this.state = states.action;
        this.playAnim(this.action);
    }

    loadProp(hash){
        if(!mp.game.streaming.isModelValid(hash)){
            mp.serverLog(`bad model ${hash}`);
            return;
        }
        if(!mp.game.streaming.hasModelLoaded(hash)){
            mp.game.streaming.requestModel(hash);
            for (let index = 0; index < 150 && !mp.game.streaming.hasModelLoaded(hash); index++) {
                mp.game.wait(0);
            }
        }
    }

    loadAnimDict(dict){
        if(!mp.game.streaming.doesAnimDictExist(dict)){
            mp.serverLog(`bad danim dictionary ${dict}`);
            return;
        }
        if(!mp.game.streaming.hasAnimDictLoaded(dict)){
            mp.game.streaming.requestAnimDict(dict)
            for (let index = 0; index < 150 && !mp.game.streaming.hasAnimDictLoaded(dict); index++) {
                mp.game.wait(0);
            }
        }
    }

    destroy(){
        if(this.player.remoteId === mp.players.local.remoteId){
            global.binoculars = false;
            global.inAction = false;
			global.sceneStarted = false;
        }
        this.props.forEach(prop=>{
            if(prop.obj /*&& prop.obj.doesExist()*/)
                prop.obj.destroy();
        })
        this.props = [];
        if(this.player.handle !== 0)
            this.player.clearTasksImmediately();
    }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 240 */
/***/ (function(module, exports) {

module.exports = {
  "1": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_ecola_can",
        "boneId": 28422,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": true
      }
    ],
    "enter": {
      "dictionary": "mini@sprunk",
      "name": "plyr_buy_drink_pt1",
      "flag": 48,
      "start": 0.5,
      "stop": 1.0
    },
    "enterEffects": null,
    "action": {
      "dictionary": "mini@sprunk",
      "name": "plyr_buy_drink_pt2",
      "flag": 48,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "mini@sprunk",
      "name": "plyr_buy_drink_pt1",
      "flag": 50,
      "start": 0.9,
      "stop": 1.0
    },
    "exit": {
      "dictionary": "mini@sprunk",
      "name": "plyr_buy_drink_pt3",
      "flag": 48,
      "start": 0.3,
      "stop": 1.0
    },
    "isLooped": false,
    "canCancel": false
  },
  "2": {
    "sequence": [
      {
        "dictionary": "anim@safehouse@bong",
        "name": "bong_stage1",
        "flag": 34,
        "start": 0.15,
        "stop": 0.7
      }
    ],
    "attachs": [
      {
        "model": "p_cs_lighter_01",
        "boneId": 28422,
        "offset": {
          "x": 0.0025,
          "y": 0.005,
          "z": -0.0575
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      },
      {
        "model": "prop_bong_01",
        "boneId": 60309,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": null,
    "actionEffects": [
      {
        "asset": "scr_safehouse",
        "name": "scr_sh_bong_smoke",
        "startAt": 0.5,
        "duration": 3000,
        "scale": 2.0,
        "boneId": 12844,
        "offset": {
          "x": 0.0,
          "y": 0.1515,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        }
      },
      {
        "asset": "scr_safehouse",
        "name": "scr_sh_bong_smoke",
        "startAt": 0.6,
        "duration": 3000,
        "scale": 2.0,
        "boneId": 12844,
        "offset": {
          "x": 0.0,
          "y": 0.1515,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        }
      },
      {
        "asset": "scr_safehouse",
        "name": "scr_sh_lighter_flame",
        "startAt": 0.3,
        "duration": 2300,
        "scale": 1.0,
        "boneId": 6286,
        "offset": {
          "x": 0.07,
          "y": 0.0025,
          "z": 0.095
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        }
      }
    ],
    "base": null,
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "3": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_cs_ciggy_01",
        "boneId": 28422,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": {
      "dictionary": "AMB@WORLD_HUMAN_SMOKING@MALE@MALE_A@ENTER",
      "name": "ENTER",
      "flag": 48,
      "start": 0.0,
      "stop": 1.0
    },
    "enterEffects": [
      {
        "asset": "scr_safehouse",
        "name": "scr_sh_bong_smoke",
        "startAt": 0.5,
        "duration": 3000,
        "scale": 2.0,
        "boneId": 12844,
        "offset": {
          "x": 0.0,
          "y": 0.1515,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        }
      },
      {
        "asset": "scr_safehouse",
        "name": "scr_sh_bong_smoke",
        "startAt": 0.85,
        "duration": 3000,
        "scale": 2.0,
        "boneId": 12844,
        "offset": {
          "x": 0.0,
          "y": 0.1515,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        }
      }
    ],
    "action": {
      "dictionary": "AMB@WORLD_HUMAN_SMOKING@MALE@MALE_A@IDLE_A",
      "name": "IDLE_B",
      "flag": 48,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": [
      {
        "asset": "scr_safehouse",
        "name": "scr_sh_bong_smoke",
        "startAt": 0.47,
        "duration": 3000,
        "scale": 2.0,
        "boneId": 12844,
        "offset": {
          "x": 0.0,
          "y": 0.1515,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        }
      },
      {
        "asset": "scr_safehouse",
        "name": "scr_sh_bong_smoke",
        "startAt": 0.65,
        "duration": 5000,
        "scale": 2.5,
        "boneId": 12844,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        }
      }
    ],
    "base": {
      "dictionary": "AMB@WORLD_HUMAN_SMOKING@MALE@MALE_A@IDLE_A",
      "name": "IDLE_A",
      "flag": 50,
      "start": 0.89,
      "stop": 1.0
    },
    "exit": {
      "dictionary": "AMB@WORLD_HUMAN_SMOKING@MALE@MALE_A@EXIT",
      "name": "EXIT",
      "flag": 48,
      "start": 0.35,
      "stop": 1.0
    },
    "isLooped": false,
    "canCancel": false
  },
  "4": {
    "sequence": null,
    "attachs": [
      {
        "model": "p_cs_joint_01",
        "boneId": 6286,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "safe@franklin@ig_13",
      "name": "blunt_idle_a",
      "flag": 48,
      "start": 0.0,
      "stop": 0.55
    },
    "actionEffects": null,
    "base": {
      "dictionary": "safe@franklin@ig_13",
      "name": "blunt_idle_a",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "8": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_acc_guitar_01",
        "boneId": 60309,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "amb@world_human_musician@guitar@male@idle_a",
      "name": "idle_c",
      "flag": 48,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "amb@world_human_musician@guitar@male@base",
      "name": "base",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": true
  },
  "9": {
    "sequence": null,
    "attachs": [
      {
        "model": "p_ing_microphonel_01",
        "boneId": 6286,
        "offset": {
          "x": 0.05,
          "y": 0.06,
          "z": 0.0
        },
        "rotate": {
          "x": -72.0,
          "y": 14.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": null,
    "actionEffects": null,
    "base": {
      "dictionary": "missmic4premiere",
      "name": "interview_short_lazlow",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": true
  },
  "10": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_v_cam_01",
        "boneId": 28422,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": null,
    "actionEffects": null,
    "base": {
      "dictionary": "missmic4premiere",
      "name": "interview_short_camman",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": true
  },
  "5": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_cs_burger_01",
        "boneId": 60309,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "mp_player_inteat@burger",
      "name": "mp_player_int_eat_burger",
      "flag": 48,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "mp_player_inteat@burger",
      "name": "mp_player_int_eat_burger_enter",
      "flag": 50,
      "start": 0.8,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "6": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_sandwich_01",
        "boneId": 28422,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "amb@world_human_seat_wall_eating@male@both_hands@idle_a",
      "name": "idle_c",
      "flag": 48,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "amb@world_human_seat_wall_eating@male@both_hands@idle_a",
      "name": "idle_a",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "7": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_cs_hotdog_01",
        "boneId": 60309,
        "offset": {
          "x": 0.05,
          "y": 0.01,
          "z": -0.01
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 75.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "mp_player_inteat@burger",
      "name": "mp_player_int_eat_burger",
      "flag": 48,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "mp_player_inteat@burger",
      "name": "mp_player_int_eat_burger_enter",
      "flag": 50,
      "start": 0.8,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "11": {
    "sequence": null,
    "attachs": [
      {
        "model": "p_amb_clipboard_01",
        "boneId": 60309,
        "offset": {
          "x": -0.005,
          "y": 0.035,
          "z": 0.0175
        },
        "rotate": {
          "x": -84.0,
          "y": 4.0,
          "z": -12.0
        },
        "deleteBefore": false
      },
      {
        "model": "prop_pencil_01",
        "boneId": 28422,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "anim@amb@board_room@supervising@",
      "name": "dissaproval_01_lo_amy_skater_01",
      "flag": 48,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "anim@amb@board_room@supervising@",
      "name": "dissaproval_01_lo_amy_skater_01",
      "flag": 50,
      "start": 0.8,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": true
  },
  "12": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_beer_logopen",
        "boneId": 28422,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": -0.15
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "amb@code_human_wander_drinking@beer@male@idle_a",
      "name": "idle_c",
      "flag": 48,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "amb@code_human_wander_drinking@beer@male@base",
      "name": "static",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "13": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_binoc_01",
        "boneId": 28422,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": null,
    "actionEffects": null,
    "base": {
      "dictionary": "amb@lo_res_idles@",
      "name": "world_human_binoculars_lo_res_base",
      "flag": 33,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": true
  },
  "14": {
    "sequence": [
      {
        "dictionary": "anim@arena@amb@seat_drone_tablet@male@var_a@",
        "name": "tablet_enter",
        "flag": 48,
        "start": 0.2,
        "stop": 1.0
      },
      {
        "dictionary": "anim@arena@amb@seat_drone_tablet@male@var_a@",
        "name": "tablet_idle_l",
        "flag": 49,
        "start": 0.0,
        "stop": 1.0
      }
    ],
    "attachs": [
      {
        "model": "prop_cs_tablet",
        "boneId": 28422,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": null,
    "actionEffects": null,
    "base": null,
    "exit": {
      "dictionary": "anim@arena@amb@seat_drone_tablet@male@var_a@",
      "name": "tablet_exit",
      "flag": 48,
      "start": 0.0,
      "stop": 0.6
    },
    "isLooped": true,
    "canCancel": false
  },
  "15": {
    "sequence": [
      {
        "dictionary": "anim@cellphone@in_car@ds",
        "name": "cellphone_call_listen_base",
        "flag": 48,
        "start": 0.0,
        "stop": 1.0
      }
    ],
    "attachs": [
      {
        "model": "p_amb_phone_01",
        "boneId": 28422,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": null,
    "actionEffects": null,
    "base": null,
    "exit": null,
    "isLooped": true,
    "canCancel": false
  },
  "16": {
    "sequence": [
      {
        "dictionary": "amb@code_human_wander_texting_fat@male@enter",
        "name": "enter",
        "flag": 50,
        "start": 0.3,
        "stop": 1.0
      },
      {
        "dictionary": "amb@code_human_wander_texting_fat@male@idle_a",
        "name": "idle_b",
        "flag": 50,
        "start": 0.0,
        "stop": 1.0
      },
      {
        "dictionary": "amb@code_human_wander_texting_fat@male@exit",
        "name": "exit",
        "flag": 50,
        "start": 0.0,
        "stop": 0.5
      }
    ],
    "attachs": [
      {
        "model": "prop_ld_health_pack",
        "boneId": 28422,
        "offset": {
          "x": 0.0,
          "y": 0.0925,
          "z": -0.005
        },
        "rotate": {
          "x": 180.0,
          "y": 84.0,
          "z": -82.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": null,
    "actionEffects": null,
    "base": null,
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "17": {
    "sequence": [
      {
        "dictionary": "oddjobs@bailbond_hobotwitchy",
        "name": "base",
        "flag": 50,
        "start": 0.0,
        "stop": 1.0
      },
      {
        "dictionary": "oddjobs@bailbond_hobotwitchy",
        "name": "base",
        "flag": 50,
        "start": 0.0,
        "stop": 1.0
      },
      {
        "dictionary": "oddjobs@bailbond_hobotwitchy",
        "name": "base",
        "flag": 50,
        "start": 0.0,
        "stop": 1.0
      }
    ],
    "attachs": [
      {
        "model": "prop_gaffer_arm_bind",
        "boneId": 60309,
        "offset": {
          "x": 0.09,
          "y": 0.005,
          "z": 0.0075
        },
        "rotate": {
          "x": -67.0,
          "y": -2.0,
          "z": 114.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": null,
    "actionEffects": null,
    "base": null,
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "20": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_drink_whisky",
        "boneId": 28422,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": -0.05
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "amb@world_human_drinking@coffee@male@idle_a",
      "name": "idle_b",
      "flag": 50,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "amb@world_human_drinking@coffee@male@base",
      "name": "base",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "19": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_champ_01b",
        "boneId": 28422,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": -0.175
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": {
      "dictionary": "anim@amb@nightclub@mini@drinking@champagne_drinking@base@",
      "name": "intro",
      "flag": 50,
      "start": 0.7,
      "stop": 1.0
    },
    "enterEffects": null,
    "action": {
      "dictionary": "anim@amb@nightclub@mini@drinking@champagne_drinking@base@",
      "name": "outro",
      "flag": 50,
      "start": 0.0,
      "stop": 0.5
    },
    "actionEffects": null,
    "base": {
      "dictionary": "anim@amb@nightclub@mini@drinking@champagne_drinking@base@",
      "name": "bottle_hold_idle",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "18": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_drink_redwine",
        "boneId": 28422,
        "offset": {
          "x": 0.035,
          "y": 0.0325,
          "z": 0.0
        },
        "rotate": {
          "x": -5.0,
          "y": 1.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "anim@heists@heist_safehouse_intro@wine@window",
      "name": "wine_window_part_one",
      "flag": 50,
      "start": 0.0,
      "stop": 0.9
    },
    "actionEffects": null,
    "base": {
      "dictionary": "anim@heists@heist_safehouse_intro@wine@window",
      "name": "wine_window_idle",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "21": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_tequsunrise",
        "boneId": 28422,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": -0.1275
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "amb@world_human_drinking@coffee@male@idle_a",
      "name": "idle_b",
      "flag": 50,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "amb@world_human_drinking@coffee@male@base",
      "name": "base",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "22": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_tequila",
        "boneId": 28422,
        "offset": {
          "x": 0.005,
          "y": 0.01,
          "z": -0.0225
        },
        "rotate": {
          "x": -14.0,
          "y": -7.0,
          "z": -88.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "anim@heists@heist_safehouse_intro@wine@window",
      "name": "wine_window_part_one",
      "flag": 50,
      "start": 0.0,
      "stop": 0.9
    },
    "actionEffects": null,
    "base": {
      "dictionary": "anim@heists@heist_safehouse_intro@wine@window",
      "name": "wine_window_idle",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "23": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_drink_whtwine",
        "boneId": 28422,
        "offset": {
          "x": 0.025,
          "y": 0.015,
          "z": 0.0
        },
        "rotate": {
          "x": -9.0,
          "y": 6.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "anim@heists@heist_safehouse_intro@wine@window",
      "name": "wine_window_part_one",
      "flag": 50,
      "start": 0.0,
      "stop": 0.9
    },
    "actionEffects": null,
    "base": {
      "dictionary": "anim@heists@heist_safehouse_intro@wine@window",
      "name": "wine_window_idle",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "24": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_daiquiri",
        "boneId": 28422,
        "offset": {
          "x": 0.005,
          "y": 0.01,
          "z": -0.0225
        },
        "rotate": {
          "x": -14.0,
          "y": -7.0,
          "z": -88.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "anim@heists@heist_safehouse_intro@wine@window",
      "name": "wine_window_part_one",
      "flag": 50,
      "start": 0.0,
      "stop": 0.9
    },
    "actionEffects": null,
    "base": {
      "dictionary": "anim@heists@heist_safehouse_intro@wine@window",
      "name": "wine_window_idle",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "25": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_mojito",
        "boneId": 28422,
        "offset": {
          "x": 0.0,
          "y": 0.0,
          "z": -0.14
        },
        "rotate": {
          "x": 0.0,
          "y": 0.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "amb@world_human_drinking@coffee@male@idle_a",
      "name": "idle_b",
      "flag": 50,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "amb@world_human_drinking@coffee@male@base",
      "name": "base",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "26": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_shot_glass",
        "boneId": 6286,
        "offset": {
          "x": 0.0675,
          "y": -0.0025,
          "z": -0.0525
        },
        "rotate": {
          "x": -67.0,
          "y": 1.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "anim@amb@nightclub@mini@drinking@drinking_shots@ped_c@normal",
      "name": "drink",
      "flag": 50,
      "start": 0.0,
      "stop": 0.4
    },
    "actionEffects": null,
    "base": {
      "dictionary": "anim@amb@nightclub@mini@drinking@drinking_shots@ped_c@normal",
      "name": "glass_hold",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "27": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_rum_bottle",
        "boneId": 60309,
        "offset": {
          "x": -0.03,
          "y": -0.03,
          "z": -0.1875
        },
        "rotate": {
          "x": -5.0,
          "y": 16.0,
          "z": -1.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "anim@amb@casino@hangout@ped_female@stand_withdrink@01a@idles",
      "name": "idle_a",
      "flag": 50,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "anim@amb@casino@hangout@ped_female@stand_withdrink@01a@base",
      "name": "base",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "28": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_rum_bottle",
        "boneId": 60309,
        "offset": {
          "x": 0.0025,
          "y": -0.005,
          "z": -0.225
        },
        "rotate": {
          "x": 2.0,
          "y": 7.0,
          "z": 1.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "anim@amb@casino@hangout@ped_female@stand_withdrink@01a@idles",
      "name": "idle_a",
      "flag": 50,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "anim@amb@casino@hangout@ped_female@stand_withdrink@01a@base",
      "name": "base",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "29": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_tequila_bottle",
        "boneId": 60309,
        "offset": {
          "x": -0.0275,
          "y": -0.0075,
          "z": -0.28
        },
        "rotate": {
          "x": -1.0,
          "y": 10.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "anim@amb@casino@hangout@ped_female@stand_withdrink@01a@idles",
      "name": "idle_a",
      "flag": 50,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "anim@amb@casino@hangout@ped_female@stand_withdrink@01a@base",
      "name": "base",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "30": {
    "sequence": null,
    "attachs": [
      {
        "model": "p_cs_papers_01",
        "boneId": 6286,
        "offset": {
          "x": 0.0375,
          "y": 0.005,
          "z": -0.06
        },
        "rotate": {
          "x": -150.0,
          "y": -20.0,
          "z": 0.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "amb@world_human_gardener_plant@female@idle_a",
      "name": "idle_a_female",
      "flag": 34,
      "start": 0.0,
      "stop": 0.5
    },
    "actionEffects": null,
    "base": {
      "dictionary": "special_ped@griff@trevor_1@trevor_1a",
      "name": "convo_trevor_whatareyoudoing_0",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "31": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_wateringcan",
        "boneId": 6286,
        "offset": {
          "x": 0.2225,
          "y": -0.19,
          "z": -0.145
        },
        "rotate": {
          "x": -178.0,
          "y": -60.0,
          "z": -66.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "weapon@w_sp_jerrycan",
      "name": "fire",
      "flag": 50,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "switch@trevor@digging",
      "name": "001433_01_trvs_26_digging_idle",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "32": {
    "sequence": null,
    "attachs": [
      {
        "model": "prop_cs_sack_01",
        "boneId": 6286,
        "offset": {
          "x": 0.02,
          "y": -0.065,
          "z": -0.1225
        },
        "rotate": {
          "x": 166.0,
          "y": -276.0,
          "z": 41.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "amb@world_human_gardener_plant@female@idle_a",
      "name": "idle_a_female",
      "flag": 50,
      "start": 0.0,
      "stop": 0.1
    },
    "actionEffects": null,
    "base": {
      "dictionary": "special_ped@griff@trevor_1@trevor_1a",
      "name": "convo_trevor_whatareyoudoing_0",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "33": {
    "sequence": null,
    "attachs": [
      {
        "model": "ng_proc_crate_03a",
        "boneId": 6286,
        "offset": {
          "x": 0.1125,
          "y": -0.365,
          "z": -0.215
        },
        "rotate": {
          "x": -65.0,
          "y": -28.0,
          "z": -31.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "anim@heists@money_grab@briefcase",
      "name": "put_down_case",
      "flag": 50,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "gestures@m@car@truck@casual@ds",
      "name": "gesture_shrug_soft",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "34": {
    "sequence": [
      {
        "dictionary": "amb@world_human_gardener_plant@female@idle_a",
        "name": "idle_a_female",
        "flag": 34,
        "start": 0.0,
        "stop": 0.6
      }
    ],
    "attachs": null,
    "enter": null,
    "enterEffects": null,
    "action": null,
    "actionEffects": null,
    "base": null,
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "35": {
    "sequence": [
      {
        "dictionary": "anim@amb@business@weed@weed_inspecting_lo_med_hi@",
        "name": "weed_crouch_checkingleaves_idle_01_inspector",
        "flag": 34,
        "start": 0.0,
        "stop": 1.0
      }
    ],
    "attachs": null,
    "enter": null,
    "enterEffects": null,
    "action": null,
    "actionEffects": null,
    "base": null,
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "36": {
    "sequence": [
      {
        "dictionary": "anim@narcotics@trash",
        "name": "drop_front",
        "flag": 34,
        "start": 0.0,
        "stop": 1.0
      }
    ],
    "attachs": null,
    "enter": null,
    "enterEffects": null,
    "action": null,
    "actionEffects": null,
    "base": null,
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "37": {
    "sequence": null,
    "attachs": [
      {
        "model": "stt_prop_c4_stack",
        "boneId": 64097,
        "offset": {
          "x": 0.1375,
          "y": -0.075,
          "z": -0.035
        },
        "rotate": {
          "x": -27.02,
          "y": -8.02,
          "z": -56.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": {
      "dictionary": "weapons@first_person@aim_rng@generic@projectile@thermal_charge@",
      "name": "plant_floor",
      "flag": 34,
      "start": 0.0,
      "stop": 1.0
    },
    "actionEffects": null,
    "base": {
      "dictionary": "gestures@m@car@truck@casual@ds",
      "name": "gesture_shrug_soft",
      "flag": 49,
      "start": 0.0,
      "stop": 1.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  },
  "38": {
    "sequence": null,
    "attachs": [
      {
        "model": "w_am_digiscanner",
        "boneId": 6286,
        "offset": {
          "x": 0.115,
          "y": 0.0625,
          "z": -0.0075
        },
        "rotate": {
          "x": -74.02,
          "y": -54.02,
          "z": -120.0
        },
        "deleteBefore": false
      }
    ],
    "enter": null,
    "enterEffects": null,
    "action": null,
    "actionEffects": null,
    "base": {
      "dictionary": "move_characters@sandy@texting",
      "name": "sandy_text_loop_base",
      "flag": 49,
      "start": 0.0,
      "stop": 0.0
    },
    "exit": null,
    "isLooped": false,
    "canCancel": false
  }
}

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/*
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <contact@adastragaming.fr> wrote this file. As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return AdAstra Gaming
 * ----------------------------------------------------------------------------
 */

// Original script from https://forum.fivem.net/t/release-binoculars/84325

let fov_max = 70.0;
let fov_min = 5.0; // max zoom level (smaller fov is more zoom)
let zoomspeed = 10.0; // camera zoom speed
let speed_lr = 8.0; // speed by which the camera pans left-right
let speed_ud = 8.0; // speed by which the camera pans up-down

global.binoculars = false
let fov = (fov_max+fov_min)*0.5

let cam = null;

//const ScaleForm = require('../scaleform.js');
//const myScaleForm = new ScaleForm('BINOCULARS');
//myScaleForm.callFunction("SET_CAM_LOGO", 0);

mp.events.add('render', () => {
	runBinocular();
});

async function runBinocular() {
	let lPed = mp.players.local;

	if (global.binoculars) {
		if (!lPed.isSittingInAnyVehicle(false)) {
			if (!cam) {
				cam = mp.cameras.new("DEFAULT_SCRIPTED_FLY_CAMERA", lPed.position, new mp.Vector3(0, 0, 0), fov);
				while (!cam.doesExist()) {
					await mp.game.waitAsync(0);
				}
				cam.attachTo(lPed.handle, 0.0, 0.0, 1.0, true)
				//cam.setRot(fov);
				mp.game.cam.renderScriptCams(true, false, 0, true, false);
			}
			let zoomvalue = (1.0/(fov_max-fov_min))*(fov-fov_min);
			checkInputRotation(cam, zoomvalue);
			handleZoom(cam);
			hideHUDThisFrame();
			showBinoculars(true);
		}else showBinoculars(false);

	} else {
		if (cam) {
			mp.game.cam.renderScriptCams(false, false, 0, true, false);
			cam.destroy();
			cam = null;
			if (lPed.isActiveInScenario()) {
				lPed.clearTasks();
			}
			showBinoculars(false);
		}
	}
}

let active = false;

const showBinoculars = function (toggle) {
	if(active === toggle) return;
	active = toggle;
	global.gui.setData("showBinoculars", active);
}


const hideHUDThisFrame = function () {
	for (let i = 1; i <= 22; i++) {
		mp.game.ui.hideHudComponentThisFrame(i);
	}
}

const checkInputRotation = function(cam, zoomvalue) {
	let rightAxisX = mp.game.controls.getDisabledControlNormal(0, 220)
	let rightAxisY = mp.game.controls.getDisabledControlNormal(0, 221)
	let rotation = cam.getRot(2);
	if (rightAxisX != 0.0 || rightAxisY != 0.0) {
		new_z = rotation.z + rightAxisX*-1.0*(speed_ud)*(zoomvalue+0.1)
		new_x = Math.max(Math.min(20.0, rotation.x + rightAxisY*-1.0*(speed_lr)*(zoomvalue+0.1)), -15);
		cam.setRot(new_x, 0.0, new_z, 2);
		//mp.players.local.setRotation(0, 0, new_z, 2, false);
	}
}

const handleZoom = function(cam) {
	const controls = mp.game.controls;
	let lPed = mp.players.local;
	if (!lPed.isSittingInAnyVehicle()) {

		if (controls.isControlJustPressed(0, 241)) {
			fov = Math.max(fov - zoomspeed, fov_min)
		}

		if (controls.isControlJustPressed(0, 242)) {
			fov = Math.min(fov + zoomspeed, fov_max)
		}

		let current_fov = cam.getFov();
		if (Math.abs(fov-current_fov) < 0.1) {
			fov = current_fov
		}
		cam.setFov(current_fov + (fov - current_fov)*0.05);
	} else {
		if (controls.isControlJustPressed(0, 17)) {
			fov = Math.max(fov - zoomspeed, fov_min)
		}

		if (controls.isControlJustPressed(0, 16)) {
			fov = Math.min(fov + zoomspeed, fov_max)
		}

		let current_fov = cam.getFov(cam);
		if (Math.abs(fov-current_fov) < 0.1) {
			fov = current_fov
		}
		cam.setFov(urrent_fov + (fov - current_fov)*0.05);
	}
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {global.interiorId = 0;

setInterval(
    ()=>{
        const pos = mp.players.local.position;
        const interior = mp.game.interior.getInteriorAtCoords(pos.x, pos.y, pos.z);
        if(interior !== global.interiorId){
            mp.events.call("onChangeInteriors", interior, global.interiorId);
            global.interiorId = interior;
        }
    }
,  500);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const props = [
    'weed_standard_equip',
    'weed_upgrade_equip',
    'weed_low_security',
    'weed_security_upgrade',
    'weed_set_up',
    'weed_chairs',
    'weed_production',
    'weed_drying',
    'weed_hosea',
    'weed_hoseb',
    'weed_hosec',
    'weed_hosed',
    'weed_hosee',
    'weed_hosef',
    'weed_hoseg',
    'weed_hoseh',
    'weed_hosei',
    'weed_growtha_stage1',
    'weed_growtha_stage2',
    'weed_growtha_stage3',
    'weed_growthb_stage1',
    'weed_growthb_stage2',
    'weed_growthb_stage3',
    'weed_growthc_stage1',
    'weed_growthc_stage2',
    'weed_growthc_stage3',
    'weed_growthd_stage1',
    'weed_growthd_stage2',
    'weed_growthd_stage3',
    'weed_growthe_stage1',
    'weed_growthe_stage2',
    'weed_growthe_stage3',
    'weed_growthf_stage1',
    'weed_growthf_stage2',
    'weed_growthf_stage3',
    'weed_growthg_stage1',
    'weed_growthg_stage2',
    'weed_growthg_stage3',
    'weed_growthh_stage1',
    'weed_growthh_stage2',
    'weed_growthh_stage3',
    'weed_growthi_stage1',
    'weed_growthi_stage2',
    'weed_growthi_stage3',
    'light_growtha_stage23_standard',
    'light_growthb_stage23_standard',
    'light_growthc_stage23_standard',
    'light_growthd_stage23_standard',
    'light_growthe_stage23_standard',
    'light_growthf_stage23_standard',
    'light_growthg_stage23_standard',
    'light_growthh_stage23_standard',
    'light_growthi_stage23_standard',
    'light_growtha_stage23_upgrade',
    'light_growthb_stage23_upgrade',
    'light_growthc_stage23_upgrade',
    'light_growthd_stage23_upgrade',
    'light_growthe_stage23_upgrade',
    'light_growthf_stage23_upgrade',
    'light_growthg_stage23_upgrade',
    'light_growthh_stage23_upgrade',
    'light_growthi_stage23_upgrade'
];

const interiorID = mp.game.interior.getInteriorAtCoords(1051.491, -3196.536, -39.14842);

global.checkFarm = () => {
    if(mp.game.interior.getInteriorAtCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z) === interiorID)
        mp.events.callRemote("weedfarm:instance:check");
}

const weedPalet = mp.game.joaat("prop_weed_pallet");
let palet = null;

props.forEach(prop => {
    mp.game.interior.disableInteriorProp(interiorID, prop);
});

mp.game.interior.refreshInterior(interiorID);
props.length = 0;
const letters = {
    "0": "a",
    "1": "b",
    "2": "c",
    "3": "d",
    "4": "e",
    "5": "f",
    "6": "g",
    "7": "h",
    "8": "i",
}
const componentList = { 
    "0": "weed_set_up",
    "1": "weed_security_upgrade",
    "2": "weed_upgrade_equip",
    "3": "weed_chairs"
}
function loadComponentsToVehicle(time) {    
    mp.players.local.freezePosition(true);
    global.controlsManager.disableAll();
    mp.events.call('notify', 3, 9, `weedfarm:veh:load@${time}`, 3000);
    setTimeout(()=>{
        mp.players.local.freezePosition(false);
        global.controlsManager.enableAll();
        mp.events.call('notify', 3, 9, `weedfarm:veh:load:ok`, 3000);
    },  time * 1000);
}
let places = [];

function updateFarmInstance(pl, components, onDrying, onPacking, onDelivery, irrigation, light, drying, ventilation) {
    try {
        mp.game.cam.doScreenFadeOut(0);
        places = pl;
        // global.gui.setData("setLoadScreen", true);
        // if(!mp.game.streaming.isIplActive("bkr_biker_interior_placement_interior_3_biker_dlc_int_ware02_milo")){
        //     mp.game.streaming.requestIpl("bkr_biker_interior_placement_interior_3_biker_dlc_int_ware02_milo");
        //     while (!mp.game.streaming.isIplActive("bkr_biker_interior_placement_interior_3_biker_dlc_int_ware02_milo")) {
        //         mp.game.wait(0);
        //     }
        // }
        props.forEach(prop=>
            mp.game.interior.disableInteriorProp(interiorID, prop)
        )
        props.length = 0;
        places.forEach((place, index) => {
            if(place > 0){
                props.push(`weed_growth${letters[index]}_stage${place}`);
                props.push(`weed_hose${letters[index]}`);
            }            
        });
        components.forEach(comp => {
            if(componentList[comp])
                props.push(componentList[comp]);
        });

        if(onDrying > 0){
            props.push("weed_drying");
        }

        if(onPacking > 0){
            props.push("weed_production");
        }
        props.forEach(prop => {
            mp.game.interior.enableInteriorProp(interiorID, prop);
        });
        mp.game.interior.refreshInterior(interiorID);
        const onGrowing = places.filter(p=>p > 0).length;
        global.gui.setData("weedFarm/updateFarmData", JSON.stringify({components, onGrowing, onDrying, onPacking, onDelivery, irrigation, light, drying, ventilation}));
        setTimeout(()=>{
            mp.game.cam.doScreenFadeIn(350);
            // global.gui.setData("setLoadScreen", false);
            if(palet === null){
                if(!mp.game.streaming.hasModelLoaded(weedPalet)){
                    mp.game.streaming.requestModel2(weedPalet);
                    while (!mp.game.streaming.hasModelLoaded(weedPalet)) {
                        mp.game.wait(0);
                    }
                }
                palet = mp.objects.new(weedPalet, new mp.Vector3(1041.32, -3192.605, -39), {dimension: mp.players.local.dimension});
            }
        }, 1500);
    } catch (error) {
        mp.serverLog(error.message)
    }
}

function updateFarmInstanceComponents(component) {
    if(componentList[component]){
        props.push(componentList[component]);
        mp.game.interior.enableInteriorProp(interiorID, componentList[component]);
        mp.game.interior.refreshInterior(interiorID);
        global.gui.setData("weedFarm/updateComponents", component)
    }
}

let opened = false;

function openFarmMenu(OnDelivery) {
    updateFarmInstanceOnDelivery(OnDelivery);
    global.gui.openPage("WeedFarm");
    opened = true;
}

function close(){
    if(opened)
    {
        global.gui.close();
        opened = false;
    }
}

function updateFarmInstancePlace(index, stady) {
    const old = props.findIndex(p=>p.indexOf(`weed_growth${letters[index]}_stage`) !== -1);
    const hose = `weed_hose${letters[index]}`;
    if(stady === 0){
        if(old !== -1){
            mp.game.interior.disableInteriorProp(interiorID, props[old]);
            props.splice(old, 1);
            const oldHose = props.findIndex(p=>p === hose);
            if(oldHose !== -1){
                mp.game.interior.disableInteriorProp(interiorID, props[oldHose]);
                props.splice(oldHose, 1);
            }
        }
    }else{
        const newProp = `weed_growth${letters[index]}_stage${stady}`;
        if(old === -1)
            props.push(newProp);
        else{
            mp.game.interior.disableInteriorProp(interiorID, props[old])
            props.splice(old, 1, newProp);
        }
        mp.game.interior.enableInteriorProp(interiorID, newProp);
        if(props.findIndex(p=>p === hose) === -1){
            props.push(hose)
            mp.game.interior.enableInteriorProp(interiorID, hose);
        }
            
    }
    mp.game.interior.refreshInterior(interiorID);
    places[index] = stady;
    const onGrowing = places.filter(p=>p > 0).length;
    global.gui.setData("weedFarm/updateStady", JSON.stringify({key: "onGrowing", value: onGrowing}));
}

function setGpsPath(x, y){
    //mp.serverLog(`x: ${x} y: ${y}`);
    mp.game.ui.setNewWaypoint(1065.894, -3183.636);
    mp.events.call('notify', 2, 9, "weedfarm:comp:gps:ok", 3000);
    mp.events.callRemote("weedfarm:comp:path:set", x, y);
}

function updateFarmInstanceStadyState(prop, isDelete) {
    const exists = props.findIndex(p=>p === prop);
    if(isDelete){
        if(exists !== -1){
            mp.game.interior.disableInteriorProp(interiorID, prop);
            props.splice(exists, 1);
            mp.game.interior.refreshInterior(interiorID);
        };       
    }else{
        if(exists === -1){
            mp.game.interior.enableInteriorProp(interiorID, prop);
            props.push(prop);
            mp.game.interior.refreshInterior(interiorID);
        }
    }
}

function updateFarmInstanceOnDrying(count) {
    updateFarmInstanceStadyState('weed_drying', count < 1);    
    global.gui.setData("weedFarm/updateStady", JSON.stringify({key: "onDrying", value: count}));
}

function updateFarmInstanceOnPacking(count) {
    updateFarmInstanceStadyState('weed_production', count < 1);    
    global.gui.setData("weedFarm/updateStady", JSON.stringify({key: "onPacking", value: count}));
}

function updateFarmInstanceOnDelivery(count) {    
    global.gui.setData("weedFarm/updateStady", JSON.stringify({key: "onDelivery", value: count}));
}

function resetInstance() {
    props.forEach(prop => {
        mp.game.interior.disableInteriorProp(interiorID, prop);
    });
    mp.game.interior.refreshInterior(interiorID);    
    props.length = 0;
    places.length = 0;
    if(palet !== null){
        palet.destroy();
        palet = null;
    }
}

const seatPositions = {
    "0": {"pos":{"x":1039.20642,"y":-3205.952,"z":-39.14023}, "rot":{"x":0.0,"y":0.0,"z":92.0}},
    "1": {"pos":{"x":1037.34717,"y":-3205.80322,"z":-39.1210938}, "rot":{"x":0.0,"y":0.0,"z":-72.0}}
}

const animDict = "anim@amb@business@weed@weed_sorting_seated@";
const baseName = "base_sorter_left_sorter01";
const actionName = "sorter_left_sort_v1_sorter01";

let begineAction = false;
let playerOnPlace = false;
let spamProtection = 0;

function actionHandler() {
    if(begineAction){
        if(mp.players.local.isPlayingAnim(animDict, actionName, 3)){
            //global.debugText = `${mp.players.local.getAnimCurrentTime(animDict, actionName)}`;
            if(mp.players.local.getAnimCurrentTime(animDict, actionName) > .9){      
                //mp.players.local.clearTasks();      
                mp.players.local.taskPlayAnim(animDict, baseName, 8.0, 8.0, -1, 2, 0, false, false, false);
                begineAction = false;
            }  
        }        
    }
}

function onClick(x, y, upOrDown, leftOrRight) {
    if(!playerOnPlace || begineAction || spamProtection > Date.now() || upOrDown === "up" || leftOrRight === "right") return;
    spamProtection = Date.now() + 500;
    mp.events.callRemote("weedfarm:sort:action:request");
}

function startSortJob(){
    global.inAction = true;
    playerOnPlace = true;
    begineAction = false;
    mp.events.add("render", actionHandler);
    mp.events.add('click', onClick);
    controlsManager.disableAll(1,2);
}

function stopSortJob(){    
    global.inAction = false;
    playerOnPlace = false;
    begineAction = false;
    mp.events.remove("render", actionHandler);
    mp.events.remove("click", onClick);
    controlsManager.enableAll();
}

function seatToSortPlace(player, place){
    player.freezePosition(true);
    player.setCollision(false,true);
    player.setRotation(place.rot.x, place.rot.y, place.rot.z, 2, true);
    player.setCoords(place.pos.x, place.pos.y, place.pos.z, true, true, true, true);
    const animName = player === mp.players.local ? baseName :  actionName;
    const flag = player === mp.players.local ? 2 : 1;
    checkAnimDict();
    player.taskPlayAnim(animDict, animName, 8.0, 8.0, -1, flag, 0, false, false, false);
}

function releaseSortPlace(player){
    player.setCollision(true, true);
    player.freezePosition(false);
    player.clearTasksImmediately();
}

function seatPlaceHandler(player, key){
    if(player.type !== 'player' || !player.handle) return;
    if(seatPositions[key] === undefined){
        releaseSortPlace(player);
        if(mp.players.local === player)
            stopSortJob();
    }  
    else{
        seatToSortPlace(player, seatPositions[key]);
        if(mp.players.local === player)
            startSortJob();
    }        
}

function sortActionResponce(){
    checkAnimDict();
    //mp.players.local.clearTasks();
    mp.players.local.taskPlayAnim(animDict, actionName, 8.0, 8.0, -1, 2, 0, false, false, false);
    begineAction = true;
}

function checkAnimDict() {
    if(mp.game.streaming.hasAnimDictLoaded(animDict)) return;
    mp.game.streaming.requestAnimDict(animDict);
    while (!mp.game.streaming.hasAnimDictLoaded(animDict))
        mp.game.wait(0);
}

mp.events.add("entityStreamIn", (player)=>{
    try {        
        if (!player || player.type !== 'player') return;
        var key = global.getVariable(player,"weedfarm:seat", -1);
        if(seatPositions[key] !== undefined)
            seatToSortPlace(player, seatPositions[key]);
    } catch (e) {
        if(global.sendException) mp.serverLog(`weapon.entityStreamIn: ${e.name}\n${e.message}\n${e.stack}`);        
    }
})

let csh = null;
let mrkr = null;
let workBlip = null;
let cshPos = new mp.Vector3();
let playerInPosition = false;
let playerOnDeliveryJob = false;

function getNextDeliveryPoint(x, y, z) {
    cshPos = new mp.Vector3(x,y,z);
    cancelDeliveryPoint();
    csh = mp.colshapes.newCircle(x, y, 1.5);
    mrkr = mp.markers.new(0, cshPos, 1);
    createWorkBlip(cshPos);
    playerOnDeliveryJob = true;
    global.gui.setData("weedFarm/updateOnDeliveryJob", playerOnDeliveryJob);
    //mp.events.call("phone::gps::setWaypoint", x, y);
}

function createWorkBlip(position){
    destroyWorkBlip();
    workBlip = mp.blips.new(496, position,
        {
            name: "Доставка сорняков",
            scale: 1.0,
            color: 52,
            alpha: 255,
            drawDistance: 100,
            shortRange: false,
            rotation: 0,
            dimension: 0
        });
    mp.game.invoke("0x4F7D8A9BFB0B43E9", workBlip.handle, true);    
    mp.events.call("notify", 3, 9, "weedfarm:delivery:next", 3000);
}

function destroyWorkBlip(){
    if (workBlip !== null){
        workBlip.destroy();
        workBlip = null;
    }
}

function cancelDeliveryPoint() {
    if(csh !== null) {
        csh.destroy();
        csh = null;
    }
    if(mrkr !== null) {
        mrkr.destroy();
        mrkr = null;
    }
    destroyWorkBlip();
    playerInPosition = false;
    const dto = { show: false, items: [] };
    global.gui.setData('hud/setPromptData', JSON.stringify(dto));
    playerOnDeliveryJob = false;
    global.gui.setData("weedFarm/updateOnDeliveryJob", playerOnDeliveryJob);
}

function playerEnterColshapeHandler(player, shape) {
    if(csh !== null && mp.game.system.vdist(cshPos.x, cshPos.y, cshPos.z, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z) < 3){
        playerInPosition = true;
        const dto = { show: true, items: [{"key": "E", "text": "Сделать закладку"}] };        
        global.gui.setData('hud/setPromptData', JSON.stringify(dto));
    }
}

function playerExitColshapeHandler(player, shape) {
    if(playerInPosition){
        playerInPosition = false;
        const dto = { show: false, items: [] };
        global.gui.setData('hud/setPromptData', JSON.stringify(dto));
    }
}

mp.events.add("weedfarm:veh:load", loadComponentsToVehicle);
mp.events.add("weedfarm:menu:open", openFarmMenu);
mp.events.add("weedfarm:instance:update", updateFarmInstance);
mp.events.add("weedfarm:instance:comp:update", updateFarmInstanceComponents);
mp.events.add("weedfarm:instance:place:update", updateFarmInstancePlace);
mp.events.add("weedfarm:instance:drying:update", updateFarmInstanceOnDrying);
mp.events.add("weedfarm:instance:packing:update", updateFarmInstanceOnPacking);
mp.events.add("weedfarm:instance:delivery:update", updateFarmInstanceOnDelivery);
mp.events.add("weedfarm:delivery:next", getNextDeliveryPoint);
mp.events.add("weedfarm:delivery:cancel", cancelDeliveryPoint);
mp.events.add("weed:path:set", setGpsPath);
mp.events.add("weedfarm:instance:reset", resetInstance);
mp.events.add("weedfarm:sort:action:responce", sortActionResponce);
mp.events.add("playerEnterColshape", playerEnterColshapeHandler);
mp.events.add("playerExitColshape", playerExitColshapeHandler);
mp.events.addDataHandler("weedfarm:seat", seatPlaceHandler)

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        close();
    if(playerOnPlace && !begineAction)
        mp.events.callRemote("weedfarm:sort:cancel")
});
mp.keys.bind(global.Keys.Key_E, false, function () {
    if (!playerInPosition || global.inAction) return;
    mp.events.callRemote("weedfarm:delivery:action")
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function showMessage(title, subtitle) {
    global.gui.setData("hudQuestMessage/setMessageData", JSON.stringify({title, subtitle}));
    global.gui.setData("hudQuestMessage/setMesageVisible", true);
}

function hideMessage() {
    global.gui.setData("hudQuestMessage/setMesageVisible", false)
}

mp.events.add("questmsg:show", showMessage);
mp.events.add("questmsg:hide", hideMessage);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function showBigInfo(text) {
    global.gui.setData("hud/showBigInfo", `'${text}'`);
    if(global.gui.curPage == "" && !mp.gui.cursor.visible)
        global.showCursor(true);
}

function hideBigInfo() {
    global.gui.setData("hud/hideBigInfo");
    if(global.gui.curPage == "")
        global.showCursor(false);
}

mp.events.add("biginfo:show", showBigInfo)
mp.events.add("biginfo:hide", hideBigInfo)
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {let opened = false;

mp.keys.bind(global.Keys.Key_ESCAPE, false, function () {
    if (opened)
        closeMenu()
});

function closeMenu() {
    global.gui.close();
    opened = false;
    global.showCursor(false)
    global.updateClientClothes(mp.players.local);
}

mp.events.add('costumeMenu:close', () => {
    if (opened)
        closeMenu()
});

mp.events.add('costumeMenu:open', () => {
    opened = global.gui.openPage('CostumeMenu');
    let gender = mp.players.local.getVariable("GENDER") ? true : false;
    global.gui.setData('costumeMenu/setData', JSON.stringify(global.defaultCLothes[gender]));
    for (let i = 3; i <= 11; i++) {
        global.setClothing(mp.players.local, i, global.defaultCLothes[gender][i], 0, 0);
    }
});

mp.events.add('costumeMenu:setClothes', (type, key, drawable, texture) => {
    drawable = parseInt(drawable ? drawable : 0);
    texture = parseInt(texture ? texture : 0);
    if (type == 'clothes')
        global.setClothing(mp.players.local, key, drawable, texture, texture);
    else
        global.setProp(mp.players.local, key, drawable, texture)
});

mp.events.add('costumeMenu:setArmor', (drawable, texture, viewArmor) => {
    drawable = parseInt(drawable ? drawable : 0);
    texture = parseInt(texture ? texture : 0);
    if (viewArmor)
        global.setClothing(mp.players.local, 9, drawable, texture, texture);
    else
        global.setClothing(mp.players.local, 9, 0, 0, 0);
});

mp.events.add('costumeMenu:save', (costumeName, clothesListJson, armorItemJson) => {
    let gender = mp.players.local.getVariable("GENDER") ? true : false;
    let clothesList = JSON.parse(clothesListJson);
    let armorItem = JSON.parse(armorItemJson);
    let clothes = ``;
    let props = ``;
    for (let i = 0; i < clothesList.length; i++) {
        const clothItem = clothesList[i];
        clothItem.drawable = parseInt(clothItem.drawable ? clothItem.drawable : 0);
        clothItem.texture = parseInt(clothItem.texture ? clothItem.texture : 0);
        if (clothItem.type == 'clothes') {
            if (clothItem.drawable != global.defaultCLothes[gender][clothItem.key] && (clothItem.texture >= 0 && clothItem.texture <= 25))
            clothes = clothes + `
                    { CostumeClothesSlots.${clothItem.name}, new CostumeElement(${clothItem.drawable}, ${clothItem.texture}) },`;
        }
        else {
            if (clothItem.drawable != -1 && (clothItem.texture >= 0 && clothItem.texture <= 25))
                props = props + `
                    { CostumePropsSlots.${clothItem.name}, new CostumeElement(${clothItem.drawable}, ${clothItem.texture}) },`;
        }

    }
    if (armorItem.type == 1) {
        armorItem.drawable = parseInt(armorItem.drawable ? armorItem.drawable : 0);
        armorItem.texture = parseInt(armorItem.texture ? armorItem.texture : 0);
        clothes = clothes + `
                    { CostumeClothesSlots.BodyArmor, new CostumeElement(${armorItem.drawable}, ${armorItem.texture}) },`;
    } else {
        armorItem.armType = parseInt(armorItem.armType ? armorItem.armType : 0);
    }
    result = `
            SkinList.Add(CostumeNames.${gender ? 'M' : 'F'}${costumeName}, new CostumeModel(${gender}, 
                new Dictionary<CostumeClothesSlots, CostumeElement>
                {${clothes}
                }, new Dictionary<CostumePropsSlots, CostumeElement>
                {${props}
                }${armorItem.type == 0 ? (',' + armorItem.armType) : ''}));`;
    mp.events.callRemote('costumeMenu:saveServer', result)
    mp.events.call('notify', 2, 9, "costumeMenu:save", 3000);
});


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
class EffectManager{
    constructor() {
        this.screenEffefcts = [];
        this.shotEffect = null;
        this.cameraShake = 0;
        this.nextShakeUpdate = Date.now();
        this.config = __webpack_require__(248);
        mp.events.add("effect:add", this.addEffect.bind(this));
        mp.events.add("effect:remove", this.removeEffect.bind(this));
        mp.events.add('playerWeaponShot', this.onShot.bind(this));
        setInterval(this.check.bind(this), 1000);
    }

    check(){
        this.checkScreenEffect();
        //reportMenu:hotkeysthis.checkShotEffect();
        this.checkCameraEffect();
    }

    checkScreenEffect(){
        const forDelete = [];
        this.screenEffefcts.forEach(e=>{
            e.time--;
            if(e.time < 1)
                forDelete.push(e.name)
        })
        forDelete.forEach(name=>{                
            mp.game.graphics.stopScreenEffect(name);
            const index = this.screenEffefcts.findIndex(e=>e.name === name);
            if(index !== -1)
                this.screenEffefcts.splice(index, 1);
        })
    }
    checkShotEffect(){
        if(this.shotEffect === null || this.shotEffect.time < 0) return;
        this.shotEffect.time--;
        if(this.shotEffect.time < 1) 
            this.shotEffect = null;
    }
    checkCameraEffect(){
        if(this.cameraShake < 0) return;
        if(this.cameraShake > 0){
            const time = Math.max(.25, Math.min(5.0, this.cameraShake * .01));
            mp.game.cam.setGameplayCamShakeAmplitude(time)
            this.cameraShake--;       
        }else{
            mp.game.cam.stopGameplayCamShaking(true);
            this.cameraShake = -1;
        }            
    }
    addCameraEffect(time){
        this.cameraShake = time;
        mp.game.cam.shakeGameplayCam("DRUNK_SHAKE", this.cameraShake * .01);      
    }
    addShotEffect(effect, time){
        this.shotEffect = {name:effect.name, asset: effect.asset, scale: effect.scale, time};
    }
    addScreenEffect(effect, time){
        const exists = this.screenEffefcts.find(e=>e.name === effect.name);
        if(time < 0) time = 60*60*24;
        if(exists)
            exists.time = time;
        else{
            this.screenEffefcts.push({name:effect.name, time});
            mp.game.graphics.startScreenEffect(effect.name, 1500, true);
        }
            
    }
    addEffect(id, time){
        const effect = this.config[id];
        if(!effect) return;

        switch (effect.type) {
            case 0:
                this.addCameraEffect(time)
                break;
            case 1:
                this.addScreenEffect(effect, time)
                break;            
            case 2:
                this.addShotEffect(effect, time)            
                break;        
            default:
                break;
        }
    }
    removeEffect(id){
        const effect = this.config[id];
        if(!effect) return;
        switch (effect.type) {
            case 0:
                this.cameraShake = 0;
                break;
            case 1:          
            case 2:
                const exists = this.screenEffefcts.find(e=>e.name === effect.name);
                if(exists)
                    exists.time = 0        
                break;        
            default:
                break;
        }
    }

    onShot(pos, entity){
        if(!entity) return;
        if(global.IsPlayingDM){
            mp.events.call('particles:playAtPosition', pos, "core", "ent_sht_telegraph_pole", 0.6, 1000);
        }else{
            if (this.shotEffect === null) return;            
            mp.events.call('particles:playAtPosition', pos, this.shotEffect.asset, this.shotEffect.name, this.shotEffect.scale, 1000);
        }
    }
}

module.exports = new EffectManager();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 248 */
/***/ (function(module, exports) {

module.exports = {
  "0": {
    "type": 0
  },
  "1": {
    "asset": "core",
    "scale": 0.8,
    "name": "ent_sht_telegraph_pole",
    "type": 2
  },
  "2": {
    "asset": "core",
    "scale": 1.5,
    "name": "ent_dst_gen_gobstop",
    "type": 2
  },
  "3": {
    "asset": "core",
    "scale": 2.0,
    "name": "ent_dst_elec_fire",
    "type": 2
  },
  "4": {
    "asset": "core",
    "scale": 2.5,
    "name": "blood_stab",
    "type": 2
  },
  "5": {
    "asset": "core",
    "scale": 2.5,
    "name": "ent_brk_metal_frag",
    "type": 2
  },
  "6": {
    "asset": "core",
    "scale": 3.0,
    "name": "ent_anim_paparazzi_flash",
    "type": 2
  },
  "7": {
    "asset": "core",
    "scale": 2.5,
    "name": "mel_carmetal",
    "type": 2
  },
  "8": {
    "name": "DrugsMichaelAliensFightIn",
    "type": 1
  },
  "9": {
    "name": "BikerFilter",
    "type": 1
  },
  "11": {
    "name": "BeastLaunch",
    "type": 1
  },
  "10": {
    "name": "CrossLine",
    "type": 1
  },
  "12": {
    "amount": 1,
    "type": 3
  },
  "13": {
    "amount": 2,
    "type": 3
  },
  "14": {
    "amount": 3,
    "type": 3
  }
}

/***/ }),
/* 249 */
/***/ (function(module, exports) {

class ControlsManager{
    constructor() {
        this.blockSprint = false;
        this.blockJump = false;
        this.blockAll = false;
        this.butEnabled = [];
        mp.events.add("render", this.onEachFrame.bind(this));
    }
    canSprintJump(sprint = false, jump = false){
        this.blockSprint = sprint
        this.blockJump = jump;
    } 
    disableAll(...excludes){
        this.butEnabled = excludes || [];
        this.blockAll = true;
    } 
    enableAll(){
        this.blockAll = false;
        this.butEnabled = [];
    }
    onEachFrame(){
        if(this.blockAll){
            mp.game.controls.disableAllControlActions(0);
            this.butEnabled.forEach(control => {
                mp.game.controls.enableControlAction(0, control, true);                
            });
            return;
        }
        if(this.blockSprint) 
            mp.game.controls.disableControlAction(0, 21, true);

        if(this.blockJump) 
            mp.game.controls.disableControlAction(0, 22, true);
    }
}

module.exports = new ControlsManager();

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const { object } = __webpack_require__(251);
let sendingExcept = false;
class EnviromentActions{
    constructor() {
        this.config = __webpack_require__(252);
        this.models = [];
        for (const key in this.config) {
            this.models.push(parseInt(key));
        }
        this.model = 0;
        this.handle = 0;
        this.spamProtection = 0;
        this.distance = 1.5;
        this.isSit = false;
        this.actionVisible = false;
        this.animations = {
            "0":["switch@michael@sitting", "idle", 1],
            "1":["amb@prop_human_seat_sunlounger@male@base","base",1],
            "2":["amb@lo_res_idles@","lying_face_up_lo_res_base",1],
            "3":["amb@prop_human_seat_bar@male@elbows_on_bar@base","base", 1],
            "4":["anim@amb@casino@peds@","amb_prop_human_seat_bar_male_elbows_on_bar_idle_c", 1]
        }
        this.init();
    }
    animationDict(index){
		if(index === undefined || this.animations[index] === undefined)
			return this.animations[0][0];
		return this.animations[index][0]
	}
	animationName(index){
		if(index === undefined || this.animations[index] === undefined)
			return this.animations[0][1];
		return this.animations[index][1];
	}
	animationFlag(index){
		if(index === undefined || this.animations[index] === undefined)
			return this.animations[0][2];
		return this.animations[index][2];
	}
    init(){
        mp.keys.bind(Keys.Key_C, false, this.keyC.bind(this));
        mp.keys.bind(Keys.Key_BACK, false, this.keyBack.bind(this));
        setInterval(this.onEachTick.bind(this), 1000)
    }
    async loadAnimDict(dict){
        if(!mp.game.streaming.doesAnimDictExist(dict)){
            mp.serverLog(`bad danim dictionary ${dict}`);
            return;
        }
        if(!mp.game.streaming.hasAnimDictLoaded(dict)){
            mp.game.streaming.requestAnimDict(dict);
            while (!mp.game.streaming.hasAnimDictLoaded(dict)) {
                await mp.game.waitAsync(0)
            }
        }
    }  
    async sit(){
        if(global.inAction) return;
        const config = this.config[this.model];
        const position = mp.game.invokeVector3(global.NATIVES.GET_ENTITY_COORDS, this.handle, true);
        const rotation = mp.game.invokeVector3(global.NATIVES.GET_ENTITY_ROTATION, this.handle, 2);
        const freePlaces = [];
        config.places.forEach(p => {  
            const offs = global.GetOffsetPosition(new mp.Vector3(), rotation.z, p.pos); 
            const sitPos = new mp.Vector3(position.x + offs.x, position.y + offs.y, position.z + offs.z);    
            const sitZ = rotation.z + p.rot.z;
            let isFree = true;
            mp.players.streamed.every(pl=>{
                if(pl.remoteId !== mp.players.local.remoteId){
                    const dist = mp.game.system.vdist(pl.position.x, pl.position.y, pl.position.z, sitPos.x, sitPos.y, sitPos.z);
                    if(dist < .4){
                        isFree = false;
                        return false;
                    }
                } 
                return true; 
            })
            const dist = mp.game.system.vdist(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, sitPos.x, sitPos.y, sitPos.z);
            if(isFree)
                freePlaces.push({sitPos, sitZ, dist});
        });
        if(freePlaces.length === 0){
            mp.events.call('notify', 1, 9, "env:sit:occupied", 3000);
            return;
        }
        await this.loadAnimDict(this.animationDict(config.anim));
        //mp.players.local.freezePosition(true);
        //mp.players.local.setCollision(false,true);
        const place = this.getClosestPlace(freePlaces);
        this.hideAction();
        this.isSit = true;
        global.inAction = true;
        global.controlsManager.disableAll(1,2);
        mp.players.local.taskPlayAnimAdvanced(
            this.animationDict(config.anim), 
            this.animationName(config.anim), 
            place.sitPos.x, place.sitPos.y, place.sitPos.z, 0, 0, place.sitZ, 8.0, 0, -1, this.animationFlag(config.anim), 0, 2, 1)
        this.showBackAction();
    }

    getClosestPlace(places){
        if(places.length === 1) return places[0];
        let closest = places[0];
        for (let index = 1; index < places.length; index++) {
            const place = places[index];
            if(place.dist < closest.dist)
                closest = place;
        }
        return closest;        
    }

    hideAction(){
        if(!this.actionVisible) return;
        this.actionVisible = false;
        global.gui.setData('hud/setPromptData', JSON.stringify({ show: false, items: [] }));
    }
    showSitAction(){
        if(!this.isSit && !this.actionVisible){
            this.actionVisible = true;
            global.gui.setData('hud/setPromptData', JSON.stringify({ show: true, items: [{ key: 'C', text: "env:action:sit"}] }));
        }
    }    
    showBackAction(){
        if(this.isSit){
            this.actionVisible = true;
            global.gui.setData('hud/setPromptData', JSON.stringify({ show: true, items: [{ key: '🠐', text: "env:action:sit:free"}] }));  
        }
    }
    keyC(){
        if(mp.players.local.vehicle) return;
        if(!this.isSit && this.model !== 0){
            if(this.spamProtection > Date.now()) return;
            this.spamProtection = Date.now() + 500;
            if(this.config[this.model] !== undefined && this.config[this.model].type === "sit")
                this.sit();
        }
    }
    keyBack(){
        if(this.isSit){
            if(this.spamProtection > Date.now()) return;   
            mp.players.local.freezePosition(false);
            this.spamProtection = Date.now() + 500;
            this.isSit = false;
            global.controlsManager.enableAll();
            global.inAction = false;
            mp.players.local.clearTasksImmediately();
            this.hideAction();
        }
    }
    onEachTick(){
        try {
            if(mp.players.local.vehicle){
                if(this.actionVisible === true)
                    this.hideAction();
                if(this.model !== 0)
                    this.model = 0;
                return;
            }
            this.handle = 0;           
            const pos = mp.players.local.position;
            for (let index = 0; (this.handle === 0 && index < this.models.length); index++) {
                this.model = this.models[index];
                this.handle = mp.game.object.getClosestObjectOfType(pos.x, pos.y, pos.z, this.distance, this.model, false, true, true);
            }
            if(this.handle === 0){
                this.hideAction();
                this.model = 0;
            }
            else
                this.showSitAction();
        } catch (e) {
            if(global.sendException && !sendingExcept) {
                sendingExcept = true;
                mp.serverLog(`onEachTick ${e.name}\n${e.message}\n${e.stack}`);
            }
        }
    }
}

module.exports = new EnviromentActions();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
const mouseSates = {
	"release": 0,
	"left": 1,
	"right": 2
}

module.exports = {
    object: null,
    modelName: "",
    speed: .1,
    position: null,
    rotation: null,
    //vw_prop_casino_roulette_01
    createObject(model){
        if(this.object !== null) this.deleteObject();
        const hash = mp.game.joaat(model);
        if(!mp.game.streaming.isModelValid(hash)) return;
        this.modelName = model;
        if(!mp.game.streaming.hasModelLoaded(hash)){
            mp.game.streaming.requestModel2(hash);
            while (!mp.game.streaming.hasModelLoaded(hash)) {
                mp.game.wait(0)
            }
        }
        this.position = mp.players.local.getOffsetFromInWorldCoords(0, 1, 0);
        this.rotation = new mp.Vector3();
        this.object = mp.objects.new(hash, mp.players.local.getOffsetFromInWorldCoords(0, 1, 0), {dimension: mp.players.local.dimension, alpha: 200, rotation:  this.rotation} );
        this.object.setCollision(false, false);
        global.showCursor(true);
    },
    deleteObject(){
        if(this.object === null) return;
        mp.events.callRemote("dev:obj:save", 
        `${this.modelName}, new Vector3(${this.position.x.toFixed(4)},${this.position.y.toFixed(4)},${this.position.z.toFixed(4)}), new Vector3(${this.rotation.x},${this.rotation.y},${Math.floor(this.rotation.z)})`);
        //this.object.destroy();
        this.object = null;
        this.modelName = "";
    },
    update(){
        this.object.setCoordsNoOffset(this.position.x,this.position.y, this.position.z,true, true, true);
        this.object.setRotation(this.rotation.x, this.rotation.y, this.rotation.z, 2, true);
    },
    onMouseMove(mouse){
        if(this.object === null) return;
        if(mouse.state === mouseSates.right){
            this.rotate(mouse);
        }else if(mouse.state === mouseSates.left){
            if(mp.keys.isDown(global.Keys.Key_ALT)){
                this.speed = .1;
            } else {
                this.speed = .025;
            }
            if(mp.keys.isDown(global.Keys.Key_CONTROL))
                this.moveZ(mouse);			
            else 
                this.moveXY(mouse);
        }
    },
    moveXY(mouse){
        const camDir = global.gameplayCam.getDirection();
        const right = global.GetOffsetPosition(new mp.Vector3(), 90, camDir);
        const dirX = mouse.dirrectX;
        const dirY = mouse.dirrectY;
        this.position.x += right.x * dirX * this.speed;
		this.position.y += right.y * dirX * this.speed;
		this.position.x += camDir.x * dirY * this.speed;
		this.position.y += camDir.y * dirY * this.speed;
        this.update();
    },
    moveZ(mouse){
        this.position.z += mouse.dirrectY * this.speed;
        this.update();
    },
    rotate(mouse){
        this.rotation.z +=  mouse.dirrectX * this.speed * 50
        this.update();
    }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))

/***/ }),
/* 252 */
/***/ (function(module, exports) {

module.exports = {
  "-403891623": {
    "model": -403891623,
    "places": [
      {
        "pos": {
          "x": -0.8006842,
          "y": -0.44526953,
          "z": 1.0
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": 182.0
        }
      },
      {
        "pos": {
          "x": 0.7540216,
          "y": -0.50352144,
          "z": 1.0
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": -176.0
        }
      }
    ],
    "anim": 0,
    "type": "sit"
  },
  "797649894": {
    "model": 797649894,
    "places": [
      {
        "pos": {
          "x": -0.05772725,
          "y": -0.6244208,
          "z": 1.025
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": -172.0
        }
      }
    ],
    "anim": 0,
    "type": "sit"
  },
  "2142033519": {
    "model": 2142033519,
    "places": [
      {
        "pos": {
          "x": -0.011004272,
          "y": -0.15773049,
          "z": 1.0
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": 186.0
        }
      },
      {
        "pos": {
          "x": 0.6987829,
          "y": -0.2072497,
          "z": 1.0
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": -176.0
        }
      },
      {
        "pos": {
          "x": 1.4221423,
          "y": -0.28941545,
          "z": 1.0
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": -176.0
        }
      }
    ],
    "anim": 0,
    "type": "sit"
  },
  "-99500382": {
    "model": -99500382,
    "places": [
      {
        "pos": {
          "x": -0.8582928,
          "y": -0.58807606,
          "z": 0.8
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": -174.0
        }
      },
      {
        "pos": {
          "x": -0.018634785,
          "y": -0.55308473,
          "z": 0.8
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": -172.0
        }
      },
      {
        "pos": {
          "x": 0.8171484,
          "y": -0.5987642,
          "z": 0.775
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": 184.0
        }
      }
    ],
    "anim": 0,
    "type": "sit"
  },
  "1805980844": {
    "model": 1805980844,
    "places": [
      {
        "pos": {
          "x": -0.47406656,
          "y": -0.62119716,
          "z": 1.0
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": -172.0
        }
      },
      {
        "pos": {
          "x": 0.47790447,
          "y": -0.62227994,
          "z": 0.975
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": -176.0
        }
      }
    ],
    "anim": 0,
    "type": "sit"
  },
  "900821510": {
    "model": 900821510,
    "places": [
      {
        "pos": {
          "x": -0.033255376,
          "y": -0.4764652,
          "z": 0.7
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": 186.0
        }
      }
    ],
    "anim": 0,
    "type": "sit"
  },
  "-1969563019": {
    "model": -1969563019,
    "places": [
      {
        "pos": {
          "x": -0.5991026,
          "y": -0.837676,
          "z": 1.0
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": 188.0
        }
      },
      {
        "pos": {
          "x": 0.5635734,
          "y": -0.87386215,
          "z": 1.0
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": -174.0
        }
      }
    ],
    "anim": 0,
    "type": "sit"
  },
  "1630899471": {
    "model": 1630899471,
    "places": [
      {
        "pos": {
          "x": -0.015192546,
          "y": -0.626314,
          "z": 1.0
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": 186.0
        }
      }
    ],
    "anim": 0,
    "type": "sit"
  },
  "954232759": {
    "model": 954232759,
    "places": [
      {
        "pos": {
          "x": -0.024342896,
          "y": -0.5921633,
          "z": 1.0
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": -172.0
        }
      }
    ],
    "anim": 0,
    "type": "sit"
  },
  "-1251662965": {
    "model": -1251662965,
    "places": [
      {
        "pos": {
          "x": -0.00024027373,
          "y": -0.7504165,
          "z": 1.025
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": -176.0
        }
      }
    ],
    "anim": 0,
    "type": "sit"
  },
  "267626795": {
    "model": 267626795,
    "places": [
      {
        "pos": {
          "x": -0.9464103,
          "y": -0.8392303,
          "z": 1.025
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": -170.0
        }
      },
      {
        "pos": {
          "x": -0.010288721,
          "y": -0.91782033,
          "z": 1.025
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": -174.0
        }
      },
      {
        "pos": {
          "x": 0.9450316,
          "y": -0.86315715,
          "z": 1.025
        },
        "rot": {
          "x": 0.0,
          "y": 0.0,
          "z": -172.0
        }
      }
    ],
    "anim": 0,
    "type": "sit"
  }
}

/***/ }),
/* 253 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./src/client/casino/luckywheel/events.js
var events = __webpack_require__(59);

// EXTERNAL MODULE: ./src/client/casino/luckywheel/module.js
var luckywheel_module = __webpack_require__(1);

// CONCATENATED MODULE: ./src/client/casino/luckywheel/index.js




// Init wheel object
luckywheel_module["a" /* luckywheel */].init();

// IPL for casino
const ipl_list = 
[
    'vw_casino_main',
    'hei_dlc_windows_casino',
    'hei_dlc_casino_door',
    'hei_dlc_casino_aircon'
];

for (let i = 0; i < ipl_list.length; i++)
{
    mp.game.streaming.requestIpl(ipl_list[i]);
}

// CONCATENATED MODULE: ./src/client/casino/index.js
__webpack_require__(55);
__webpack_require__(56);
__webpack_require__(57);
__webpack_require__(58);



/***/ })
/******/ ]);